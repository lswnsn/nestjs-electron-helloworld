{"version":3,"sources":["./apps/webem/$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./libs/keyboard-shortcuts/src/lib/core/services/keyboard-shortcuts-config.ts","./libs/keyboard-shortcuts/src/lib/keyboard-shortcuts.module.ts","./libs/keyboard-shortcuts/src/lib/core/services/keyboard-shortcuts.service.ts","./libs/core/src/lib/utils/console-logger-monitor.ts","./apps/webem/src/app/app.component.html","./apps/webem/src/app/app.component.ts","./apps/webem/src/app/core/reducers/webem-reducer.ts","./apps/webem/src/app/core/reducers/local-storage-sync.reducer.ts","./apps/webem/src/environments/environment.prod.ts","./libs/core/src/lib/effects/router.effects.ts","./libs/core/src/lib/functions/get-outlets-from-router-link.ts","./libs/core/src/lib/effects/toast-message.effects.ts","./libs/core/src/lib/services/help.service.ts","./libs/core/src/lib/effects/help.effects.ts","./libs/core/src/lib/effects/log-for-actions.effects.ts","./apps/webem/src/app/core/store/store-runtime-checks-configuration.ts","./libs/core/src/lib/services/auth-guard-service.service.ts","./libs/layouts/src/lib/components/single-column-layout/single-column-layout.component.ts","./libs/layouts/src/lib/components/single-column-layout/single-column-layout.component.html","./libs/layouts/src/lib/components/single-column-layout-with-actions-bar/single-column-layout-with-actions-bar.component.ts","./libs/layouts/src/lib/components/single-column-layout-with-actions-bar/single-column-layout-with-actions-bar.component.html","./apps/webem/src/app/core/models/quick-menu-items.model.ts","./apps/webem/src/app/core/models/status-bar-info.model.ts","./apps/webem/src/app/core/models/quick-menu-alarms.model.ts","./apps/webem/src/app/core/models/navigations.model.ts","./libs/split-view/src/lib/core/functions/split-view-functions.ts","./libs/split-view/src/lib/components/split-view-layout/split-view-layout.component.html","./libs/split-view/src/lib/components/split-view-layout/split-view-layout.component.ts","./apps/webem/src/app/core/constants/cu-target-components.ts","./libs/auth/src/lib/auth/components/login/directives/auto-focus.directive.ts","./libs/auth/src/lib/auth/components/login/login-page.component.html","./libs/auth/src/lib/auth/components/login/login-page.component.ts","./libs/auth/src/lib/auth/components/sso-login/sso-login-page.component.html","./libs/auth/src/lib/auth/components/sso-login/sso-login-page.component.ts","./libs/auth/src/lib/auth/core/reducers/logout.reducer.ts","./libs/api/cu-api-gw-api/src/services/authentication.service.ts","./libs/core/src/lib/functions/validate-and-clean-layout-settings.ts","./libs/vdu-dashboard/src/lib/core/models/ui-settings.ts","./libs/auth/src/lib/auth/core/effects/login.effects.ts","./libs/auth/src/lib/auth/core/effects/logout.effects.ts","./libs/auth/src/lib/auth/core/effects/token-info.effects.ts","./libs/auth/src/lib/auth/auth.module.ts","./libs/account-shared/src/lib/accounts-management/modules/account-config.module.ts","./apps/webem/src/app/core/config/pm-modal/cells-info-endpoint.ts","./libs/diagnostic/diagnostic-shared/src/lib/components/diagnostic-content-menu/diagnostic-content-menu-config.module.ts","./libs/configuration/errors/src/lib/core/services/errors-tab-config.module.ts","./apps/webem/src/app/core/constants/cu-errors-tabs-routs.constants.ts","./libs/ng-feature-flag/src/lib/guards/feature-flag.guard.ts","./libs/core/src/lib/services/custom-preloading-strategy.service.ts","./apps/webem/src/app/core/router/webem-router.module.ts","./libs/api/cu-trs-api/src/cu-trs-api.module.ts","./libs/api/cu-api-gw-api/src/services/upstream-api-mgmt.service.ts","./libs/api/cu-api-gw-api/src/services/statistics.service.ts","./libs/api/cu-api-gw-api/src/services/configuration.service.ts","./libs/api/cu-api-gw-api/src/cu-api-gw-client.module.ts","./libs/api/cu-cm-api/src/cu-cm-client.module.ts","./libs/api/cu-pmv2-api/src/cu-pmv-2-client.module.ts","./libs/api/cu-asm-api/src/cu-asm-client.module.ts","./libs/api/cu-fm-api/src/cu-fm-client.module.ts","./libs/api/cu-cp-config-api/src/cu-cp-config-client.module.ts","./libs/cu-shared/src/lib/core/effects/cu.effects.ts","./libs/core/src/lib/effects/app-settings.effects.ts","./apps/webem/src/app/error-handler.service.ts","./libs/cells-status/src/lib/core/effects/cells-status-set-filter.effects.ts","./libs/split-view/src/lib/core/services/split-view-config-token.ts","./libs/split-view/src/lib/split-view-restrictions.module.ts","./apps/webem/src/app/core/config/split-view/restricted-selection-group.ts","./apps/webem/src/app/core/config/split-view/available-list-of-views.ts","./libs/details-panel/src/lib/core/services/details-panel-config-token.ts","./libs/details-panel/src/lib/details-panel-config.module.ts","./apps/webem/src/app/core/config/details-panel/details-panel-config.ts","./apps/webem/src/app/core/config/split-view/refreshing-views.ts","./apps/webem/src/app/core/config/keyboard-shortcuts/keyboard-shortcuts-config.ts","./libs/core/src/lib/environment-variables/environment-variables.module.ts","./libs/core/src/lib/interceptors/jwt.interceptor.ts","./libs/core/src/lib/user/core/effects/user.effects.ts","./libs/core/src/lib/user/user.module.ts","./libs/core/src/lib/services/custom-serializer.service.ts","./apps/webem/src/app/core/config/snapshot-name-parameters/snapshot-name-parameters-config.ts","./apps/webem/src/environments/feature-flag-conf.prod.ts","./libs/core/src/lib/models/role-access/local-user-profiles.ts","./apps/webem/src/app/core/models/vcu-local-user-profiles.ts","./libs/role-access-ng/src/lib/guards/role-access.util.ts","./apps/webem/src/app/app.module.ts","./libs/core/src/lib/functions/feature-flag-util.ts","./apps/webem/src/main.ts","./libs/account-shared/src/lib/accounts-management/services/account-config.service.ts","./libs/api/cu-api-gw-api/src/api-configuration.ts","./libs/api/cu-api-gw-api/src/base-service.ts","./libs/api/cu-api-gw-api/src/request-builder.ts","./libs/api/cu-api-gw-api/src/services/session-mgmt.service.ts","./libs/api/cu-asm-api/src/api-configuration.ts","./libs/api/cu-asm-api/src/base-service.ts","./libs/api/cu-asm-api/src/models/administrative-state.ts","./libs/api/cu-asm-api/src/models/cell-administrative-state.ts","./libs/api/cu-asm-api/src/models/cell-technology-type.ts","./libs/api/cu-asm-api/src/models/f-1-link-status.ts","./libs/api/cu-asm-api/src/models/ng-link-status.ts","./libs/api/cu-asm-api/src/models/nullable-availability-status.ts","./libs/api/cu-asm-api/src/models/nullable-operational-state.ts","./libs/api/cu-asm-api/src/models/userrole.ts","./libs/api/cu-asm-api/src/request-builder.ts","./libs/api/cu-asm-api/src/services/pe.service.ts","./libs/api/cu-asm-api/src/services/sec.service.ts","./libs/api/cu-asm-api/src/services/snapshot.service.ts","./libs/api/cu-asm-api/src/services/status.service.ts","./libs/api/cu-cm-api/src/api-configuration.ts","./libs/api/cu-cm-api/src/models/client-type.ts","./libs/api/cu-cm-api/src/request-builder.ts","./libs/api/cu-cm-api/src/services/cm.service.ts","./libs/api/cu-cm-api/src/base-service.ts","./libs/api/cu-cp-config-api/src/api-configuration.ts","./libs/api/cu-cp-config-api/src/base-service.ts","./libs/api/cu-cp-config-api/src/models/target-component.ts","./libs/api/cu-cp-config-api/src/request-builder.ts","./libs/api/cu-cp-config-api/src/services/fh-config.service.ts","./libs/api/cu-cp-config-api/src/services/notifications.service.ts","./libs/api/cu-cp-config-api/src/services/status.service.ts","./libs/api/cu-cp-config-api/src/services/test-models.service.ts","./libs/api/cu-cp-config-api/src/services/tracing.service.ts","./libs/api/cu-cp-config-api/src/services/transport.service.ts","./libs/api/cu-fm-api/src/api-configuration.ts","./libs/api/cu-fm-api/src/base-service.ts","./libs/api/cu-fm-api/src/request-builder.ts","./libs/api/cu-fm-api/src/services/cu-fm-client.service.ts","./libs/api/cu-fm-api/src/services/fm.service.ts","./libs/api/cu-fm-api/src/services/status.service.ts","./libs/api/cu-oam-agent-api/src/api-configuration.ts","./libs/api/cu-oam-agent-api/src/base-service.ts","./libs/api/cu-oam-agent-api/src/cu-oam-agent-client.module.ts","./libs/api/cu-oam-agent-api/src/models/activity-mode.ts","./libs/api/cu-oam-agent-api/src/request-builder.ts","./libs/api/cu-oam-agent-api/src/services/cu-internal.service.ts","./libs/api/cu-oam-agent-api/src/services/cu-oam-agent-client.service.ts","./libs/api/cu-oam-agent-api/src/services/status.service.ts","./libs/api/cu-oam-agent-api/src/services/vdu-internal.service.ts","./libs/api/cu-pmv2-api/src/api-configuration.ts","./libs/api/cu-pmv2-api/src/base-service.ts","./libs/api/cu-pmv2-api/src/request-builder.ts","./libs/api/cu-pmv2-api/src/services/cu-pmv-2-client.service.ts","./libs/api/cu-trs-api/src/api-configuration.ts","./libs/api/cu-trs-api/src/base-service.ts","./libs/api/cu-trs-api/src/request-builder.ts","./libs/api/cu-trs-api/src/services/async-operations.service.ts","./libs/api/cu-trs-api/src/services/cert-mgt.service.ts","./libs/api/cu-trs-api/src/services/diagnostic.service.ts","./libs/api/cu-trs-api/src/services/notifications.service.ts","./libs/api/cu-trs-api/src/services/security.service.ts","./libs/api/cu-trs-api/src/services/status.service.ts","./libs/api/cu-trs-api/src/services/trace-configuration.service.ts","./libs/api/cu-trs-api/src/services/vdu-interfaces.service.ts","./libs/auth/src/lib/auth/components/login/login-messages.ts","./libs/auth/src/lib/auth/core/actions/login.actions.ts","./libs/auth/src/lib/auth/core/actions/logout.actions.ts","./libs/auth/src/lib/auth/core/actions/token-info.actions.ts","./libs/auth/src/lib/auth/core/reducers/login.reducer.ts","./libs/auth/src/lib/auth/core/reducers/token-info.reducer.ts","./libs/cells-status/src/lib/core/actions/cells-status.actions.ts","./libs/cells-status/src/lib/core/reducers/cells-status.reducer.ts","./libs/commissioning-flag-store/src/lib/core/actions/commissioning-flag.actions.ts","./libs/commissioning-flag-store/src/lib/core/reducers/commissioning-flag.reducer.ts","./libs/commissioning-flag-store/src/lib/core/selectors/select-commissioning-status.ts","./libs/configuration/errors/src/lib/core/services/errors-tab-config.service.ts","./libs/configuration/shared/src/lib/configuration-shared-services.module.ts","./libs/configuration/shared/src/lib/core/actions/plans-info.actions.ts","./libs/configuration/shared/src/lib/core/constants/configuration-shared.constants.ts","./libs/configuration/shared/src/lib/core/model/definition-error-enum.ts","./libs/configuration/shared/src/lib/core/model/definition-validation-messages.enum.ts","./libs/configuration/shared/src/lib/core/model/definitions-error.ts","./libs/configuration/shared/src/lib/core/model/delta-plan-conflict-state.ts","./libs/configuration/shared/src/lib/core/model/not-supported-plan-creation-option.ts","./libs/configuration/shared/src/lib/core/model/not-supported-plan-origin-error.ts","./libs/configuration/shared/src/lib/core/model/configuration.constants.ts","./libs/configuration/shared/src/lib/core/model/row-types.ts","./libs/configuration/shared/src/lib/core/model/plan-activation-status-enum.ts","./libs/configuration/shared/src/lib/core/model/plan-activation-stages.ts","./libs/configuration/shared/src/lib/core/model/pe-buttons.ts","./libs/configuration/shared/src/lib/core/model/row-state.ts","./libs/configuration/shared/src/lib/core/model/instance-id-validation-messages.ts","./libs/configuration/shared/src/lib/core/model/plan-creation-option.ts","./libs/configuration/shared/src/lib/core/model/plan-origin.ts","./libs/configuration/shared/src/lib/core/model/plans-info.ts","./libs/configuration/shared/src/lib/core/model/sort-order.enum.ts","./libs/configuration/shared/src/lib/core/model/validate-plan-sortBy.ts","./libs/configuration/shared/src/lib/core/reducers/plans-info.reducer.ts","./libs/configuration/shared/src/lib/core/selectors/plans-info-selector.ts","./libs/configuration/shared/src/lib/core/selectors/selected-plan.selectors.ts","./libs/configuration/shared/src/lib/core/functions/receive-plan.ts","./libs/configuration/shared/src/lib/core/services/plan-api-endpoints.service.ts","./libs/configuration/shared/src/lib/core/services/plan-api-update-parameters-endpoints.service.ts","./libs/configuration/shared/src/lib/core/services/get-relation-error.service.ts","./libs/configuration/shared/src/lib/core/services/role-access-pe.service.ts","./libs/configuration/shared/src/lib/core/services/adjust-ui-dropdown.service.ts","./libs/core/src/lib/actions/app-settings.actions.ts","./libs/core/src/lib/actions/help.actions.ts","./libs/core/src/lib/actions/router.actions.ts","./libs/core/src/lib/actions/status.actions.ts","./libs/core/src/lib/actions/toast-message.actions.ts","./libs/core/src/lib/actions/user.actions.ts","./libs/core/src/lib/classes/date-time.ts","./libs/core/src/lib/environment-variables/core/models/app-types.enum.ts","./libs/core/src/lib/environment-variables/core/models/available-feature-flags.enum.ts","./libs/core/src/lib/environment-variables/core/models/environment.model.ts","./libs/core/src/lib/functions/api-mappings.ts","./libs/core/src/lib/functions/enter-zone-scheduler.ts","./libs/core/src/lib/functions/generate-plan-file-name.ts","./libs/core/src/lib/functions/to-raised-alarm.ts","./libs/ui-webem/src/lib/alarm-severity-icon/model/alarm-severities.definition.ts","./libs/core/src/lib/functions/find-highest-severity.ts","./libs/core/src/lib/functions/export-to-csv.ts","./libs/core/src/lib/functions/get-filename-suffix.ts","./libs/core/src/lib/functions/map-alarms.ts","./libs/core/src/lib/functions/get-vdu-filename-suffix.ts","./libs/core/src/lib/functions/map-rmods-ids.ts","./libs/core/src/lib/functions/layout-base.ts","./libs/core/src/lib/functions/leave-zone-scheduler.ts","./libs/core/src/lib/interceptors/error.interceptor.ts","./libs/core/src/lib/models/app-settings.model.ts","./libs/core/src/lib/models/configuration-save-variant.enum.ts","./libs/core/src/lib/models/date-time-formats.enum.ts","./libs/core/src/lib/models/role-access/role-access-forbidden-flag.enmu.ts","./libs/core/src/lib/reducers/app-settings.reducer.ts","./libs/core/src/lib/reducers/cloud.reducer.ts","./libs/core/src/lib/reducers/toast-message.reducer.ts","./libs/core/src/lib/reducers/user.reducer.ts","./libs/core/src/lib/selectors/router.selectors.ts","./libs/core/src/lib/selectors/toast-message.selectors.ts","./libs/core/src/lib/services/model/base-ui-settings.ts","./libs/core/src/lib/services/model/appSettingsSchema.ts","./libs/core/src/lib/services/app-settings.service.ts","./libs/core/src/lib/selectors/cloud.selectors.ts","./libs/core/src/lib/services/cloud-info.service.ts","./libs/core/src/lib/config.ts","./libs/core/src/lib/services/console-logs-database.service.ts","./libs/core/src/lib/services/datetime.service.ts","./libs/core/src/lib/services/dropped-item.service.ts","./libs/core/src/lib/services/AlarmType.ts","./libs/core/src/lib/services/export.service.ts","./libs/core/src/lib/services/model/response-status.ts","./libs/core/src/lib/services/outlet-url-path.service.ts","./libs/core/src/lib/services/polling.service.ts","./libs/core/src/lib/services/token-expiration-time.service.ts","./libs/core/src/lib/services/ui-alarm-parameters-mapper.service.ts","./libs/core/src/lib/services/ui-fault-parameters-mapper.service.ts","./libs/core/src/lib/services/user-information.service.ts","./libs/core/src/lib/services/user-operation.service.ts","./libs/core/src/lib/services/webem.state.service.ts","./libs/core/src/lib/store/user-state.ts","./libs/core/src/lib/user/core/reducers/user-reducer.ts","./libs/core/src/lib/utils/shared-utils.ts","./libs/cu-dashboard/src/lib/core/models/ui-settings.ts","./libs/cu-shared/src/lib/core/actions/cu.actions.ts","./libs/cu-shared/src/lib/core/reducers/cu.reducer.ts","./libs/cu-shared/src/lib/modules/routes-paths.ts","./libs/details-panel/src/lib/components/details-panel-toggle-button/details-panel-toggle-button.component.html","./libs/details-panel/src/lib/components/details-panel-toggle-button/details-panel-toggle-button.component.ts","./libs/details-panel/src/lib/core/actions/detail-panel.actions.ts","./libs/details-panel/src/lib/core/model/split-view-location.type.ts","./libs/details-panel/src/lib/core/reducers/detail-panel.reducer.ts","./libs/core/src/lib/selectors/routing.selectors.ts","./libs/details-panel/src/lib/core/selectors/detail-panel.selectors.ts","./libs/details-panel/src/lib/core/services/details-panel-config.service.ts","./libs/details-panel/src/lib/core/utils/detail-panel.utils.ts","./libs/ui-webem/src/lib/choose-object-menu/choose-object-menu.module.ts","./libs/details-panel/src/lib/details-panel.module.ts","./libs/diagnostic/diagnostic-shared/src/lib/components/diagnostic-content-menu/diagnostic-content-menu-config.service.ts","./libs/diagnostic/diagnostic-shared/src/lib/components/diagnostic-content-menu/diagnostic-content-menu.component.ts","./libs/diagnostic/diagnostic-shared/src/lib/components/diagnostic-content-menu/diagnostic-content-menu.component.html","./libs/diagnostic/diagnostic-shared/src/lib/core/actions/running-test-models.actions.ts","./libs/api/cu-asm-api/src/models/v-du-operational-state.ts","./libs/diagnostic/diagnostic-shared/src/lib/services/diagnostic-testmodel.service.ts","./libs/shared/src/lib/constants/common-charactors.ts","./libs/diagnostic/diagnostic-shared/src/lib/core/effects/running-test-models.effects.ts","./libs/diagnostic/diagnostic-shared/src/lib/core/reducers/running-test-models.reducer.ts","./libs/diagnostic/diagnostic-shared/src/lib/diagnostic-shared.module.ts","./libs/diagnostic/diagnostic-snapshot/src/core/services/snapshot-fetch-files-config.ts","./libs/diagnostic/diagnostic-snapshot/src/core/actions/snapshot.action.ts","./libs/diagnostic/diagnostic-snapshot/src/core/reducers/collecting-snapshot-server-status.reducer.ts","./libs/diagnostic/diagnostic-snapshot/src/core/models/snapshot-location-type.ts","./libs/diagnostic/diagnostic-snapshot/src/core/models/snapshot-progress-status.ts","./libs/diagnostic/diagnostic-snapshot/src/core/models/snapshot-operation-btn-title.constants.ts","./libs/diagnostic/diagnostic-snapshot/src/core/models/snapshot-coverage-type.ts","./libs/diagnostic/diagnostic-snapshot/src/core/reducers/collecting-snapshot.reducer.ts","./libs/diagnostic/diagnostic-snapshot/src/core/reducers/transfer-snapshot-to-nms.reducer.ts","./libs/diagnostic/diagnostic-snapshot/src/core/models/snapshot-server-status.ts","./libs/diagnostic/diagnostic-snapshot/src/core/selectors/collecting-snapshot-server-status.selector.ts","./libs/diagnostic/diagnostic-snapshot/src/core/selectors/transfer-snapshot-to-nms.selector.ts","./libs/diagnostic/diagnostic-snapshot/src/core/selectors/collecting-snapshot.selector.ts","./libs/diagnostic/diagnostic-snapshot/src/core/services/snapshot-fetch-files.service.ts","./libs/diagnostic/diagnostic-snapshot/src/core/effects/collecting-snapshot-server-status.effects.ts","./libs/api/cu-asm-api/src/models/snapshot-status.ts","./libs/diagnostic/diagnostic-snapshot/src/core/effects/collecting-snapshot.effects.ts","./libs/diagnostic/diagnostic-snapshot/src/core/config.ts","./libs/ui-webem/src/lib/session-token-renewal/core/functions/one-of-controls-mandatory.ts","./libs/ui-webem/src/lib/session-token-renewal/components/session-token-renewal-dialog/session-token-renewal-dialog.component.html","./libs/ui-webem/src/lib/session-token-renewal/components/session-token-renewal-dialog/session-token-renewal-dialog.component.ts","./libs/diagnostic/diagnostic-snapshot/src/core/services/timer-service.service.ts","./libs/ui-webem/src/lib/webem-overlay/components/confirm-dialog/confirm-dialog.component.ts","./libs/ui-webem/src/lib/webem-overlay/components/confirm-dialog/confirm-dialog.component.html","./libs/diagnostic/diagnostic-snapshot/src/core/pipe/translate-operation-status.pipe.ts","./libs/diagnostic/diagnostic-snapshot/src/core/pipe/format-time.pipe.ts","./libs/diagnostic/diagnostic-snapshot/src/components/diagnostic-snapshot-collection/diagnostic-snapshot-collection.component.html","./libs/diagnostic/diagnostic-snapshot/src/components/diagnostic-snapshot-collection/diagnostic-snapshot-collection.component.ts","./libs/diagnostic/diagnostic-snapshot/src/components/diagnostic-snapsthot-details/diagnostic-snapsthot-details.component.html","./libs/diagnostic/diagnostic-snapshot/src/components/diagnostic-snapsthot-details/diagnostic-snapsthot-details.component.ts","./libs/diagnostic/diagnostic-snapshot/src/components/diagnostic-snapshot-transfer/diagnostic-snapshot-transfer.component.html","./libs/diagnostic/diagnostic-snapshot/src/components/diagnostic-snapshot-transfer/diagnostic-snapshot-transfer.component.ts","./libs/diagnostic/diagnostic-snapshot/src/pages/diagnostic-snapshot-home/diagnostic-snapshot-home.component.html","./libs/diagnostic/diagnostic-snapshot/src/diagnostic-snapshot-routing.module.ts","./libs/diagnostic/diagnostic-snapshot/src/pages/diagnostic-snapshot-home/diagnostic-snapshot-home.component.ts","./libs/ui-webem/src/lib/session-token-renewal/session-token-renewal.module.ts","./libs/diagnostic/diagnostic-snapshot/src/core/effects/transfer-snapshot-to-nms.effects.ts","./libs/diagnostic/diagnostic-snapshot/src/diagnostic-snapshot.module.ts","./libs/diagnostic/tracing/src/lib/tracing-config.module.ts","./libs/diagnostic/tracing/src/lib/tracing-config.service.ts","./libs/feature-flag/src/lib/feature-flag.ts","./libs/keyboard-shortcuts/src/lib/core/actions/keyboard-shortcuts.actions.ts","./libs/keyboard-shortcuts/src/lib/core/reducers/keyboard-shortcuts.reducer.ts","./libs/keyboard-shortcuts/src/lib/core/selectors/keyboard-shortcuts.selectors.ts","./libs/layouts/src/lib/components/page-layout/page-layout.component.html","./libs/layouts/src/lib/components/page-layout/page-layout.component.ts","./libs/layouts/src/lib/layouts-config.module.ts","./libs/layouts/src/lib/layouts-config.service.ts","./libs/layouts/src/lib/layouts.module.ts","./libs/layouts/src/lib/modules/navigation-search/core/actions/navigation-search.actions.ts","./libs/layouts/src/lib/modules/navigation-search/core/reducers/navigation-search.reducer.ts","./libs/ui-webem/src/lib/user-menu/components/session-time/core/effects/session-token-time.effects.ts","./libs/ui-webem/src/lib/user-menu/user-menu.module.ts","./libs/layouts/src/lib/modules/navigation-search/navigation-search.module.ts","./libs/layouts/src/lib/modules/page-header/page-header.module.ts","./libs/auth/src/lib/auth/components/token-info/token-info-dialog.component.ts","./libs/auth/src/lib/auth/components/token-info/token-info-dialog.component.html","./libs/auth/src/lib/auth/core/selectors/token-info.selectors.ts","./libs/layouts/src/lib/modules/page-header/pipes/format-mrbts-id.pipe.ts","./libs/ui-webem/src/lib/on-air-status-panel/components/on-air-svg-definition/on-air-svg-definition.component.ts","./libs/ui-webem/src/lib/on-air-status-panel/components/on-air-svg-definition/on-air-svg-definition.component.html","./libs/ui-webem/src/lib/on-air-status-panel/components/on-air-status-icon/on-air-status-icon.component.ts","./libs/ui-webem/src/lib/on-air-status-panel/components/on-air-status-icon/on-air-status-icon.component.html","./libs/layouts/src/lib/modules/page-header/pipes/upper-first.pipe.ts","./libs/layouts/src/lib/modules/page-header/pipes/format-general-status-time-zone.pipe.ts","./libs/layouts/src/lib/modules/page-header/general-status-info/general-status-info.component.html","./libs/layouts/src/lib/modules/page-header/general-status-info/general-status-info.component.ts","./libs/ui-webem/src/lib/user-menu/components/downgraded-privileges-dialog/downgraded-privileges-dialog.component.ts","./libs/ui-webem/src/lib/user-menu/components/downgraded-privileges-dialog/downgraded-privileges-dialog.component.html","./libs/layouts/src/lib/modules/page-header/user-menu/user-menu.component.html","./libs/layouts/src/lib/modules/page-header/user-menu/user-menu.component.ts","./libs/layouts/src/lib/modules/navigation-search/constants/keyboard-keys.constants.ts","./libs/layouts/src/lib/modules/navigation-search/core/selectors/navigation-search.selectors.ts","./libs/layouts/src/lib/modules/navigation-search/shared/navigation-search-keyboard/navigation-search-keyboard.service.ts","./libs/layouts/src/lib/modules/navigation-search/components/navigation-search-input/navigation-search-input.component.ts","./libs/layouts/src/lib/modules/navigation-search/components/navigation-search-input/navigation-search-input.component.html","./libs/layouts/src/lib/modules/navigation-search/components/navigation-search-routes-list-item/navigation-search-routes-list-item.component.ts","./libs/layouts/src/lib/modules/navigation-search/components/navigation-search-routes-list-item/navigation-search-routes-list-item.component.html","./libs/layouts/src/lib/modules/navigation-search/components/navigation-search-routes-list/navigation-search-routes-list.component.html","./libs/layouts/src/lib/modules/navigation-search/components/navigation-search-routes-list/navigation-search-routes-list.component.ts","./libs/layouts/src/lib/modules/navigation-search/components/navigation-search/navigation-search.component.ts","./libs/layouts/src/lib/modules/navigation-search/components/navigation-search/navigation-search.component.html","./libs/layouts/src/lib/models/browsers-names.ts","./libs/layouts/src/lib/modules/page-header/full-screen.service.ts","./libs/layouts/src/lib/modules/page-header/full-screen/full-screen.component.ts","./libs/layouts/src/lib/modules/page-header/full-screen/full-screen.component.html","./libs/layouts/src/lib/modules/page-header/page-header/page-header.component.ts","./libs/layouts/src/lib/modules/page-header/page-header/page-header.component.html","./libs/layouts/src/lib/modules/page-header/password-expiration-warning/password-expiration-warning.html","./libs/layouts/src/lib/modules/page-header/password-expiration-warning/password-expiration-warning.ts","./libs/layouts/src/lib/modules/page-header/quick-menu/quick-menu.component.html","./libs/layouts/src/lib/modules/page-header/quick-menu/quick-menu.component.ts","./libs/navigation/src/lib/navigation/core/pipes/side-bar-menu-groups.pipe.ts","./libs/navigation/src/lib/navigation/components/page-navigation-menu/page-navigation-menu.component.html","./libs/navigation/src/lib/navigation/components/page-navigation-menu/page-navigation-menu.component.ts","./libs/navigation/src/lib/navigation/core/actions/main-menu.actions.ts","./libs/navigation/src/lib/navigation/core/models/navigation-group.model.ts","./libs/navigation/src/lib/navigation/core/models/page-name.ts","./libs/navigation/src/lib/navigation/core/models/router-link.ts","./libs/navigation/src/lib/navigation/core/reducers/main-menu.reducer.ts","./libs/navigation/src/lib/navigation/core/utility/navigation-transformer.ts","./libs/navigation/src/lib/navigation/navigation.module.ts","./libs/navigation/src/lib/navigation/service/navigation.service.ts","./libs/ng-feature-flag/src/lib/directives/feature-flag.directive.ts","./libs/ng-feature-flag/src/lib/ng-feature-flag.module.ts","./libs/pm-counters-modal/src/lib/cells-info-config.module.ts","./libs/pm-counters-modal/src/lib/core/models/cells-info-config.ts","./libs/pm-v2/src/lib/core/actions/counters-info.actions.ts","./libs/pm-v2/src/lib/core/actions/counters-pm-service.actions.ts","./libs/pm-v2/src/lib/core/actions/counters-selection.actions.ts","./libs/pm-v2/src/lib/core/actions/counters-values.actions.ts","./libs/pm-v2/src/lib/core/functions/counter-id-utils.ts","./libs/pm-v2/src/lib/core/models/counters-values.interface.ts","./libs/pm-v2/src/lib/core/reducers/counters-details-panel.reducer.ts","./libs/pm-v2/src/lib/core/reducers/counters-info.reducer.ts","./libs/pm-v2/src/lib/core/reducers/counters-selection.reducer.ts","./libs/pm-v2/src/lib/core/reducers/counters-values.reducer.ts","./libs/pm-v2/src/lib/core/selectors/counters.selectors.ts","./libs/role-access-core/src/lib/model/role.enmu.ts","./libs/role-access-core/src/lib/services/role-access.service.ts","./libs/role-access-ng/src/lib/constants/role_access.constants.ts","./libs/role-access-ng/src/lib/directives/role-access-control.directive.ts","./libs/role-access-ng/src/lib/guards/role-access.guard.ts","./libs/role-access-ng/src/lib/role-access.config.ts","./libs/role-access-ng/src/lib/role-access.module.ts","./libs/server-connection-checker/src/lib/server-connection-checker.module.ts","./libs/server-connection-checker/src/lib/components/server-connection-notification/server-connection-notification.component.html","./libs/server-connection-checker/src/lib/components/server-connection-notification/server-connection-notification.component.ts","./libs/server-connection-checker/src/lib/core/actions/server-connection.actions.ts","./libs/server-connection-checker/src/lib/core/reducers/server-connection.reducer.ts","./libs/server-connection-checker/src/lib/core/selectors/server-connection.selectors.ts","./libs/shared/src/lib/modules/to-ip-interfaces-details-properties/to-ip-interfaces-details-properties.module.ts","./libs/shared/src/lib/components/base-dialog/base-dialog-component.ts","./libs/shared/src/lib/constants/confirm-dialog-constants.ts","./libs/shared/src/lib/constants/role-access-constants.ts","./libs/shared/src/lib/core/actions/cloud.actions.ts","./libs/shared/src/lib/core/models/availability-status-labels.ts","./libs/shared/src/lib/core/models/math-constants.ts","./libs/shared/src/lib/core/models/status-icon-color.definition.ts","./libs/shared/src/lib/core/pipes/get-class-extension/pipes/get-class-extension.pipe.ts","./libs/shared/src/lib/core/pipes/has-alarms/has-alarms.module.ts","./libs/shared/src/lib/core/pipes/has-alarms/pipes/has-alarms.pipe.ts","./libs/api/cu-asm-api/src/models/availability-status.ts","./libs/shared/src/lib/core/models/availability-status-classes.ts","./libs/shared/src/lib/core/pipes/map-availability-status/pipes/map-availability-status.pipe.ts","./libs/shared/src/lib/core/pipes/to-active-alarms/pipes/to-active-alarms.pipe.ts","./libs/shared/src/lib/core/pipes/to-active-alarms/to-active-alarms.module.ts","./libs/shared/src/lib/decorators/match.decorator.ts","./libs/shared/src/lib/functions/nullable-value-format.ts","./libs/shared/src/lib/modules/custom-injector/custom-injector.module.ts","./libs/shared/src/lib/modules/fix-table-columns-resize/fix-table-columns-resize.directive.ts","./libs/shared/src/lib/modules/fix-table-columns-resize/fix-table-columns-resize.module.ts","./libs/shared/src/lib/modules/to-ip-interfaces-details-properties/core/pipes/to-ip-interfaces-details-properties.pipe.ts","./libs/shared/src/lib/modules/webem-common/core/pipes/format-form-iso2gmt-time.pipe.ts","./libs/shared/src/lib/modules/webem-common/core/pipes/nullable-value.pipe.ts","./libs/shared/src/lib/modules/webem-common/webem-common.module.ts","./libs/split-view/src/lib/core/effects/split-view.effects.ts","./libs/split-view/src/lib/pipes/disabled-group-header-if-restricted.pipe.ts","./libs/split-view/src/lib/components/split-view-single-column-page-layout/split-view-single-column-page-layout.component.html","./libs/split-view/src/lib/components/split-view-single-column-page-layout/split-view-single-column-page-layout.component.ts","./libs/split-view/src/lib/split-view.module.ts","./libs/split-view/src/lib/components/split-view-empty-view/split-view-empty-view.component.ts","./libs/split-view/src/lib/components/split-view-empty-view/split-view-empty-view.component.html","./libs/split-view/src/lib/core/services/split-view-guard.service.ts","./libs/split-view/src/lib/components/page-layout/split-view-page-layout.component.ts","./libs/split-view/src/lib/components/page-layout/split-view-page-layout.component.html","./libs/split-view/src/lib/components/split-view-dropdowns/split-view-dropdowns.component.html","./libs/split-view/src/lib/components/split-view-dropdowns/split-view-dropdowns.component.ts","./libs/split-view/src/lib/core/actions/split-view.actions.ts","./libs/split-view/src/lib/core/models/split-view-location-type.ts","./libs/split-view/src/lib/core/reducers/split-view.reducer.ts","./libs/split-view/src/lib/core/selectors/split-view.selectors.ts","./libs/split-view/src/lib/core/services/split-view-restrictions.service.ts","./libs/status-shared/src/lib/cells/core/models/cells-filter-type.ts","./libs/status-shared/src/lib/cells/core/models/cells-sort-type.ts","./libs/status-shared/src/lib/generic-view/core/model/view-toggle-input.interface.ts","./libs/ui-webem/src/lib/alarm-message/alarm-message.module.ts","./libs/ui-webem/src/lib/alarm-severity-icon/alarm-severity-icon.module.ts","./libs/ui-webem/src/lib/alarms-dashboard-panel/alarms-dashboard-panel.module.ts","./libs/ui-webem/src/lib/alarms-table/alarms-table.module.ts","./libs/ui-webem/src/lib/raised-alarms/raised-alarms.module.ts","./libs/ui-webem/src/lib/cell-status-components/cell-status-components.module.ts","./libs/ui-webem/src/lib/chart-bar-status-panel/chart-bar-status-panel.module.ts","./libs/ui-webem/src/lib/details-section/details-section.module.ts","./libs/ui-webem/src/lib/crl-information-table/crl-information-table.module.ts","./libs/ui-webem/src/lib/drag-drop-upload/drag-drop-upload.module.ts","./libs/ui-webem/src/lib/vertical-html-line/vertical-html-line.module.ts","./libs/ui-webem/src/lib/du/du.module.ts","./libs/ui-webem/src/lib/global-search-input/global-search-input.module.ts","./libs/ui-webem/src/lib/on-air-status-panel/on-air-status-panel.module.ts","./libs/ui-webem/src/lib/panel/panel.module.ts","./libs/ui-webem/src/lib/panel-split-area/panel-split-area.module.ts","./libs/ui-webem/src/lib/panel-split/panel-split.module.ts","./libs/ui-webem/src/lib/radio-button-group/radio-button-group.module.ts","./libs/ui-webem/src/lib/radio-button-with-label/radio-button-with-label.module.ts","./libs/ui-webem/src/lib/rmod/rmod.module.ts","./libs/ui-webem/src/lib/alarm-counter/alarm-counter.module.ts","./libs/ui-webem/src/lib/routed-menu/routed-menu.module.ts","./libs/ui-webem/src/lib/sessions-table/sessions-table.module.ts","./libs/ui-webem/src/lib/side-bar-menu/side-bar-menu.module.ts","./libs/ui-webem/src/lib/split-panel-toggle-button/split-panel-toggle-button.module.ts","./libs/ui-webem/src/lib/status-icon/status-icon.module.ts","./libs/ui-webem/src/lib/stepper/stepper.module.ts","./libs/ui-webem/src/lib/submenu/submenu.module.ts","./libs/ui-webem/src/lib/no-selected-message/no-selected-message.module.ts","./libs/ui-webem/src/lib/table-view/table-view.module.ts","./libs/ui-webem/src/lib/titled-counter/titled-counter.module.ts","./libs/ui-webem/src/lib/toggle-icon-button/toggle-icon-button.module.ts","./libs/ui-webem/src/lib/user-information-change/user-information-change.module.ts","./libs/ui-webem/src/lib/validation-rules-details/validation-rules-details.module.ts","./libs/ui-webem/src/lib/validation-rules-details-local/validation-rules-details-local.module.ts","./libs/ui-webem/src/lib/vertical-form/vertical-forms.module.ts","./libs/ui-webem/src/lib/alarm-severity-icon/model/alarm-severities-for-filtering.ts","./libs/ui-webem/src/lib/details-section/model/validation-data.ts","./libs/ui-webem/src/lib/page-not-found/page-not-found.module.ts","./libs/ui-webem/src/lib/page-not-found/core/models/page-not-found-redirect-paths.enum.ts","./libs/ui-webem/src/lib/page-not-found/components/page-not-found/page-not-found.component.html","./libs/ui-webem/src/lib/page-not-found/components/page-not-found/page-not-found.component.ts","./libs/ui-webem/src/lib/webem-overlay/core/selectors/overlay.selector.ts","./libs/ui-webem/src/lib/user-information-change/utils/messages.utils.ts","./libs/ui-webem/src/lib/ui-clickable/ui-clickable.module.ts","./libs/ui-webem/src/lib/browser-compatibility/reducers/compatibility-browser.reducer.ts","./libs/ui-webem/src/lib/browser-compatibility/browser-compatibility.module.ts","./libs/ui-webem/src/lib/webem-overlay/core/reducers/overlay.reducer.ts","./libs/ui-webem/src/lib/module-info-bar/module-info-bar.module.ts","./libs/ui-webem/src/lib/legal-notice-modal/core/legal-notice.constants.ts","./libs/ui-webem/src/lib/legal-notice-modal/core/reducers/legal-notice-modal.reducer.ts","./libs/ui-webem/src/lib/legal-notice-modal/core/selectors/legal-notice-modal.selectors.ts","./libs/ui-webem/src/lib/legal-notice-modal/components/legal-notice-modal/legal-notice-modal.component.html","./libs/ui-webem/src/lib/legal-notice-modal/components/legal-notice-modal/legal-notice-modal.component.ts","./libs/ui-webem/src/lib/legal-notice-modal/core/effects/legal-notice-modal.effects.ts","./libs/ui-webem/src/lib/legal-notice-modal/legal-notice-modal.module.ts","./libs/ui-webem/src/lib/action-progress/core/actions/action-progress.actions.ts","./libs/ui-webem/src/lib/alarm-message/alarm-message.component.html","./libs/ui-webem/src/lib/alarm-message/alarm-message.component.ts","./libs/ui-webem/src/lib/alarm-severity-icon/components/alarm-severity-icon/alarm-severity-icon.component.ts","./libs/ui-webem/src/lib/alarm-severity-icon/components/alarm-severity-icon/alarm-severity-icon.component.html","./libs/ui-webem/src/lib/alarm-severity-icon/model/alarm-severity-type-color.definition.ts","./libs/ui-webem/src/lib/alarm-severity-icon/model/alarm-severity-type-label.definition.ts","./libs/ui-webem/src/lib/alarm-severity-icon/model/alarm-severity.definitions.ts","./libs/ui-webem/src/lib/alarm-severity-icon/pipes/get-highest-alarm-severity.pipe.ts","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/alarm-severity-dashboard-panel/alarm-severity-dashboard-panel.component.html","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/alarm-severity-dashboard-panel/alarm-severity-dashboard-panel.component.ts","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/critical-alarms-counter-block/critical-alarms-counter-block.component.ts","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/critical-alarms-counter-block/critical-alarms-counter-block.component.html","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/major-alarms-counter-block/major-alarms-counter-block.component.ts","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/major-alarms-counter-block/major-alarms-counter-block.component.html","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/minor-alarms-counter-block/minor-alarms-counter-block.component.ts","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/minor-alarms-counter-block/minor-alarms-counter-block.component.html","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/warning-alarms-counter-block/warning-alarms-counter-block.component.ts","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/warning-alarms-counter-block/warning-alarms-counter-block.component.html","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/alarms-counter-panel/alarms-counter-panel.component.ts","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/alarms-counter-panel/alarms-counter-panel.component.html","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/alarms-dashboard-panel/alarms-dashboard-panel.component.ts","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/alarms-dashboard-panel/alarms-dashboard-panel.component.html","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/dashboard-alarms-table/dashboard-alarms-table.component.html","./libs/ui-webem/src/lib/alarms-dashboard-panel/components/dashboard-alarms-table/dashboard-alarms-table.component.ts","./libs/ui-webem/src/lib/alarms-table/components/alarms-table/alarms-table.component.html","./libs/ui-webem/src/lib/alarms-table/components/alarms-table/alarms-table.component.ts","./libs/ui-webem/src/lib/browser-compatibility/actions/compatibility-browser.actions.ts","./libs/ui-webem/src/lib/browser-compatibility/components/browser-incompatibility-bar/config.ts","./libs/ui-webem/src/lib/browser-compatibility/selectors/browser-compatibility.selectors.ts","./libs/ui-webem/src/lib/browser-compatibility/components/browser-incompatibility-bar/browser-incompatibility-bar.component.html","./libs/ui-webem/src/lib/browser-compatibility/components/browser-incompatibility-bar/browser-incompatibility-bar.component.ts","./libs/ui-webem/src/lib/button-with-menu/button-with-menu.module.ts","./libs/ui-webem/src/lib/button-with-menu/components/button-with-menu/button-with-menu.component.ts","./libs/ui-webem/src/lib/button-with-menu/components/button-with-menu/button-with-menu.component.html","./libs/ui-webem/src/lib/button/button.module.ts","./libs/ui-webem/src/lib/button/components/button/button.component.html","./libs/ui-webem/src/lib/button/components/button/button.component.ts","./libs/ui-webem/src/lib/button/model/button-length.enum.ts","./libs/ui-webem/src/lib/button/model/button-theme.enum.ts","./libs/ui-webem/src/lib/button/model/button-thickness.enum.ts","./libs/ui-webem/src/lib/cell-status-components/components/cell-tile/cell-tile.component.html","./libs/ui-webem/src/lib/cell-status-components/components/cell-tile/cell-tile.component.ts","./libs/ui-webem/src/lib/cell-status-components/components/group-tile/group-tile.component.ts","./libs/ui-webem/src/lib/cell-status-components/components/group-tile/group-tile.component.html","./libs/ui-webem/src/lib/chart-bar-status-panel/components/chart-bar-status-panel/chart-bar-options.ts","./libs/ui-webem/src/lib/chart-bar-status-panel/components/chart-bar-status-panel/chart-bar-status-panel.component.ts","./libs/ui-webem/src/lib/chart-bar-status-panel/components/chart-bar-status-panel/chart-bar-status-panel.component.html","./libs/ui-webem/src/lib/chart/chart.module.ts","./libs/ui-webem/src/lib/chart/components/chart/chart.component.ts","./libs/ui-webem/src/lib/chart/components/chart/chart.component.html","./libs/ui-webem/src/lib/check-box-table-filter/check-box-table-filter.module.ts","./libs/ui-webem/src/lib/check-box-table-filter/components/check-box-table-row-filter/check-box-table-row-filter.component.ts","./libs/ui-webem/src/lib/check-box-table-filter/components/check-box-table-row-filter/check-box-table-row-filter.component.html","./libs/ui-webem/src/lib/checkbox-vertical-list/checkbox-vertical-list.module.ts","./libs/ui-webem/src/lib/crl-information-table/components/crl-information-table/crl-information-table.component.html","./libs/ui-webem/src/lib/crl-information-table/components/crl-information-table/crl-information-table.component.ts","./libs/ui-webem/src/lib/details-section/components/detail-data-row-with-actions-menu/detail-data-row-with-actions-menu.component.html","./libs/ui-webem/src/lib/details-section/components/detail-data-row-with-actions-menu/detail-data-row-with-actions-menu.component.ts","./libs/ui-webem/src/lib/details-section/components/detail-data-row/detail-data-row.component.ts","./libs/ui-webem/src/lib/details-section/components/detail-data-row/detail-data-row.component.html","./libs/ui-webem/src/lib/details-section/components/details-section-list/details-section-list.component.html","./libs/ui-webem/src/lib/details-section/components/details-section-list/details-section-list.component.ts","./libs/ui-webem/src/lib/details-section/components/details-section-text/details-section-text.component.html","./libs/ui-webem/src/lib/details-section/components/details-section-text/details-section-text.component.ts","./libs/ui-webem/src/lib/details-section/components/details-section/details-section.component.html","./libs/ui-webem/src/lib/details-section/components/details-section/details-section.component.ts","./libs/ui-webem/src/lib/details-section/pipe/format-title.pipe.ts","./libs/ui-webem/src/lib/drag-drop-upload/model/files-supported-by-drop.ts","./libs/ui-webem/src/lib/drag-drop-upload/directives/drag-drop-upload.directive.ts","./libs/ui-webem/src/lib/drag-drop-upload/model/drop-errors-messages.ts","./libs/ui-webem/src/lib/du/pipes/get-du-class.pipe.ts","./libs/ui-webem/src/lib/du/components/du/du.component.html","./libs/ui-webem/src/lib/du/components/du/du.component.ts","./libs/ui-webem/src/lib/filter-input/components/filter-input/filter-input.component.html","./libs/ui-webem/src/lib/filter-input/components/filter-input/filter-input.component.ts","./libs/ui-webem/src/lib/filter-input/filter-input.module.ts","./libs/ui-webem/src/lib/go-to-pe-table-button/go-to-pe-table-button.module.ts","./libs/ui-webem/src/lib/input-clear/components/input-clear.module.ts","./libs/ui-webem/src/lib/input-clear/components/input-clear/input-clear.component.ts","./libs/ui-webem/src/lib/input-clear/components/input-clear/input-clear.component.html","./libs/ui-webem/src/lib/legal-notice-modal/core/actions/legal-notice-modal.actions.ts","./libs/ui-webem/src/lib/line-chart/components/line-chart/line-chart.component.html","./libs/ui-webem/src/lib/line-chart/components/line-chart/line-chart.component.ts","./libs/ui-webem/src/lib/line-chart/line-chart.module.ts","./libs/ui-webem/src/lib/module-info-bar/components/module-info-bar/module-info-bar.component.html","./libs/ui-webem/src/lib/module-info-bar/components/module-info-bar/module-info-bar.component.ts","./libs/ui-webem/src/lib/module-info-bar/directives/info-bar.directive.ts","./libs/ui-webem/src/lib/no-selected-message/components/no-selected-details/no-selected-message.component.ts","./libs/ui-webem/src/lib/no-selected-message/components/no-selected-details/no-selected-message.component.html","./libs/ui-webem/src/lib/operations-control-panel/components/reset-button/reset-button.component.html","./libs/ui-webem/src/lib/operations-control-panel/components/reset-button/reset-button.component.ts","./libs/ui-webem/src/lib/operations-control-panel/components/save-button/save-button.component.html","./libs/ui-webem/src/lib/operations-control-panel/components/save-button/save-button.component.ts","./libs/ui-webem/src/lib/operations-control-panel/components/lock-button/lock-button.component.ts","./libs/ui-webem/src/lib/operations-control-panel/components/lock-button/lock-button.component.html","./libs/ui-webem/src/lib/operations-control-panel/components/lock-open-button/lock-open-button.component.ts","./libs/ui-webem/src/lib/operations-control-panel/components/lock-open-button/lock-open-button.component.html","./libs/ui-webem/src/lib/operations-control-panel/components/operations-control-panel/operations-control-panel.component.html","./libs/ui-webem/src/lib/operations-control-panel/components/operations-control-panel/operations-control-panel.component.ts","./libs/ui-webem/src/lib/operations-control-panel/model/cu-reset-button-state.ts","./libs/ui-webem/src/lib/operations-control-panel/model/save-button-state.ts","./libs/ui-webem/src/lib/overlay-menu-bar/components/overlay-menu-bar/overlay-menu-bar.component.ts","./libs/ui-webem/src/lib/overlay-menu-bar/components/overlay-menu-bar/overlay-menu-bar.component.html","./libs/ui-webem/src/lib/overlay-menu-bar/overlay-menu-bar.module.ts","./libs/ui-webem/src/lib/overlay-panel-menu-bar/components/overlay-panel-menu-bar/overlay-panel-menu-bar.component.html","./libs/ui-webem/src/lib/overlay-panel-menu-bar/components/overlay-panel-menu-bar/overlay-panel-menu-bar.component.ts","./libs/ui-webem/src/lib/page-not-found/core/functions/page-not-found.utils.ts","./libs/ui-webem/src/lib/panel-split-area/pipes/size-bigger-than-min-size.pipe.ts","./libs/ui-webem/src/lib/panel-split-area/pipes/is-curled-up-area.pipe.ts","./libs/ui-webem/src/lib/panel-split-area/components/panel-split-area/panel-split-area.component.html","./libs/ui-webem/src/lib/panel-split-area/components/panel-split-area/panel-split-area.component.ts","./libs/ui-webem/src/lib/panel-split-area/directives/curled-up-area/curled-up-area.directive.ts","./libs/ui-webem/src/lib/panel-split-area/directives/split-area/split-area.directive.ts","./libs/ui-webem/src/lib/panel-split/components/panel-split/panel-split.component.html","./libs/ui-webem/src/lib/panel-split/components/panel-split/panel-split.component.ts","./libs/ui-webem/src/lib/panel-split/directives/panel-toggle/panel-toggle.directive.ts","./libs/ui-webem/src/lib/panel-split/directives/split-panel/split-panel.directive.ts","./libs/ui-webem/src/lib/panel/components/panel/panel.component.html","./libs/ui-webem/src/lib/panel/components/panel/panel.component.ts","./libs/ui-webem/src/lib/panel/components/rich-panel/rich-panel.component.html","./libs/ui-webem/src/lib/panel/components/rich-panel/rich-panel.component.ts","./libs/ui-webem/src/lib/panel/directives/stop-propagation.directive.ts","./libs/ui-webem/src/lib/parameters-tree/parameters-tree.module.ts","./libs/ui-webem/src/lib/performance-management/pm-chart/pm-chart-constants.ts","./libs/ui-webem/src/lib/performance-management/pm-chart/pm-chart.component.ts","./libs/ui-webem/src/lib/performance-management/pm-chart/pm-chart.component.html","./libs/ui-webem/src/lib/performance-management/pm-table/utils/pm-table.utils.ts","./libs/ui-webem/src/lib/performance-management/pm-table/pm-table.component.html","./libs/ui-webem/src/lib/performance-management/pm-table/pm-table.component.ts","./libs/ui-webem/src/lib/performance-management/pm-tree/utils/dynamic-flat-node.ts","./libs/ui-webem/src/lib/performance-management/pm-tree/utils/dynamic-database.ts","./libs/ui-webem/src/lib/performance-management/pm-tree/utils/dynamic-data-source.ts","./libs/ui-webem/src/lib/performance-management/pm-tree/mat-tree/dynamic-tree.component.html","./libs/ui-webem/src/lib/performance-management/pm-tree/mat-tree/dynamic-tree.component.ts","./libs/ui-webem/src/lib/performance-management/pm-tree/pipes/pm-tree.pipe.ts","./libs/ui-webem/src/lib/performance-management/pm-tree/pm-tree.component.html","./libs/ui-webem/src/lib/performance-management/pm-tree/pm-tree.component.ts","./libs/ui-webem/src/lib/performance-management/pm-tree/utils/pm-tree-nodes.utils.ts","./libs/ui-webem/src/lib/performance-management/pm-tree/utils/pm-tree-toast-messages.ts","./libs/ui-webem/src/lib/performance-management/utils/pm-data.utils.ts","./libs/ui-webem/src/lib/performance-management/utils/timestamp.utils.ts","./libs/ui-webem/src/lib/prime-table-workaround/prime-table-workaround.ts","./libs/ui-webem/src/lib/raised-alarms/components/raised-alarms/raised-alarms.component.html","./libs/ui-webem/src/lib/raised-alarms/components/raised-alarms/raised-alarms.component.ts","./libs/ui-webem/src/lib/alarm-counter/components/alarm-counter/alarm-counter.component.html","./libs/ui-webem/src/lib/alarm-counter/components/alarm-counter/alarm-counter.component.ts","./libs/ui-webem/src/lib/routed-menu/components/routed-menu/routed-menu.component.html","./libs/ui-webem/src/lib/routed-menu/components/routed-menu/routed-menu.component.ts","./libs/ui-webem/src/lib/sessions-table/components/sessions-table/sessions-table.component.html","./libs/ui-webem/src/lib/sessions-table/components/sessions-table/sessions-table.component.ts","./libs/ui-webem/src/lib/show-password-button/components/show-password-button/show-password-button.component.ts","./libs/ui-webem/src/lib/show-password-button/components/show-password-button/show-password-button.component.html","./libs/ui-webem/src/lib/show-password-button/show-password-button.module.ts","./libs/ui-webem/src/lib/side-bar-menu/components/side-bar-menu/side-bar-menu.component.html","./libs/ui-webem/src/lib/side-bar-menu/components/side-bar-menu/side-bar-menu.component.ts","./libs/ui-webem/src/lib/side-bar-menu/model/side-bar-menu-model.ts","./libs/ui-webem/src/lib/spinner/components/spinner/spinner.component.ts","./libs/ui-webem/src/lib/spinner/components/spinner/spinner.component.html","./libs/ui-webem/src/lib/spinner/models/spinner-class-constants.ts","./libs/ui-webem/src/lib/spinner/spinner.module.ts","./libs/ui-webem/src/lib/status-bar/components/status-bar/status-bar.component.ts","./libs/ui-webem/src/lib/status-bar/components/status-bar/status-bar.component.html","./libs/ui-webem/src/lib/status-bar/status-bar.module.ts","./libs/ui-webem/src/lib/status-icon/core/pipes/get-circle-type.pipe.ts","./libs/ui-webem/src/lib/status-icon/components/status-icon/status-icon.component.html","./libs/ui-webem/src/lib/status-icon/components/status-icon/status-icon.component.ts","./libs/ui-webem/src/lib/stepper/components/stepper.component.ts","./libs/ui-webem/src/lib/stepper/components/stepper.component.html","./libs/ui-webem/src/lib/submenu/components/submenu/navigation-submenu.directive.ts","./libs/ui-webem/src/lib/submenu/components/submenu/submenu.component.ts","./libs/ui-webem/src/lib/submenu/components/submenu/submenu.component.html","./libs/ui-webem/src/lib/table-pagination/components/table-pagination/table-pagination.component.html","./libs/ui-webem/src/lib/table-pagination/components/table-pagination/table-pagination.component.ts","./libs/ui-webem/src/lib/table-pagination/table-pagination.module.ts","./libs/ui-webem/src/lib/table-view/core/pipes/filter-invisible-columns.pipe.ts","./libs/ui-webem/src/lib/table-view/components/table-view/table-view.component.html","./libs/ui-webem/src/lib/table-view/components/table-view/table-view.component.ts","./libs/ui-webem/src/lib/tile-tooltip/directives/toggle-tooltip/toggle-tooltip-by-child-tooltip.directive.ts","./libs/ui-webem/src/lib/tile-tooltip/components/tile-tooltip/tile-tooltip.component.ts","./libs/ui-webem/src/lib/tile-tooltip/components/tile-tooltip/tile-tooltip.component.html","./libs/ui-webem/src/lib/tile-tooltip/directives/toggle-parent-tooltip/toggle-parent-tooltip.directive.ts","./libs/ui-webem/src/lib/tile-tooltip/tile-tooltip.module.ts","./libs/ui-webem/src/lib/track-caps-lock/directives/track-caps-lock.directive.ts","./libs/ui-webem/src/lib/track-caps-lock/track-caps-lock.module.ts","./libs/ui-webem/src/lib/user-information-change/interface/user-information-change.interface.ts","./libs/ui-webem/src/lib/user-information-change/constants/user-information-change.constants.ts","./libs/ui-webem/src/lib/user-information-change/user-information-change.component.html","./libs/ui-webem/src/lib/user-information-change/user-information-change.component.ts","./libs/ui-webem/src/lib/user-information-change/utils/validation.utils.ts","./libs/ui-webem/src/lib/user-information-change/validators/user-information.validator.ts","./libs/ui-webem/src/lib/user-menu/components/session-time/core/actions/session-token-time.actions.ts","./libs/ui-webem/src/lib/user-menu/components/session-time/core/reducers/session-token-time.reducer.ts","./libs/ui-webem/src/lib/user-menu/components/renew-session-dialog/renew-session-dialog.component.html","./libs/ui-webem/src/lib/user-menu/components/renew-session-dialog/renew-session-dialog.component.ts","./libs/ui-webem/src/lib/user-menu/components/notification/notification-const.ts","./libs/ui-webem/src/lib/user-menu/components/notification/notification.component.html","./libs/ui-webem/src/lib/user-menu/components/notification/notification.component.ts","./libs/ui-webem/src/lib/user-menu/components/notification-panel/notification-panel.component.html","./libs/ui-webem/src/lib/user-menu/components/notification-panel/notification-panel.component.ts","./libs/ui-webem/src/lib/user-menu/components/user-menu-overlay/user-menu-overlay.component.html","./libs/ui-webem/src/lib/user-menu/components/user-menu-overlay/user-menu-overlay.component.ts","./libs/ui-webem/src/lib/user-menu/components/session-time/session-time.component.html","./libs/ui-webem/src/lib/user-menu/components/session-time/session-time.component.ts","./libs/ui-webem/src/lib/user-menu/components/user-menu/user-menu.component.html","./libs/ui-webem/src/lib/user-menu/components/user-menu/user-menu.component.ts","./libs/ui-webem/src/lib/vertical-form/form-components/model/input-value-type.model.ts","./libs/ui-webem/src/lib/vertical-form/form-message/form-validation-message.component.html","./libs/ui-webem/src/lib/vertical-form/form-message/form-validation-message.component.ts","./libs/ui-webem/src/lib/vertical-html-line/components/vertical-html-line/vertical-html-line.component.ts","./libs/ui-webem/src/lib/vertical-html-line/components/vertical-html-line/vertical-html-line.component.html","./libs/ui-webem/src/lib/vertical-labeled-input/vertical-labeled-input.module.ts","./libs/ui-webem/src/lib/webem-overlay/components/overlay-panel/overlay-panel.component.html","./libs/ui-webem/src/lib/webem-overlay/components/overlay-panel/overlay-panel.component.ts","./libs/ui-webem/src/lib/webem-overlay/core/actions/overlay.actions.ts","./libs/ui-webem/src/lib/webem-overlay/core/models/webem-message-dialog-severity.ts","./libs/ui-webem/src/lib/webem-overlay/components/dynamic-message-dialog/dynamic-message-dialog.component.ts","./libs/ui-webem/src/lib/webem-overlay/components/dynamic-message-dialog/dynamic-message-dialog.component.html","./libs/ui-webem/src/lib/webem-overlay/core/services/webem-overlay.service.ts","./libs/ui-webem/src/lib/webem-overlay/core/effects/overlay.effects.ts","./libs/ui-webem/src/lib/webem-overlay/webem-overlay.module.ts","./libs/vnfc-shared/src/lib/vnfc-store/functions/get-vnfc-header.ts","./libs/vnfc-shared/src/lib/vnfc-store/services/vnfc-shared.service.ts","./node_modules/moment/locale|sync|/^/.*$"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","KeyboardShortcutsConfig","KeyboardShortcutsModule","config","ngModule","providers","provide","useValue","KeyboardShortcutsService","document","router","store","activatedRoute","this","fullPathsList","SHORTCUTS_PATHS","buffer","lastKeyPressTime","getTime","body","addEventListener","onKeyUp","bind","keyboardShortcutsState$","pipe","keyboardShortcutsSubscription","subscribe","keyboardShortcutsState","shortcutsEnabled","unsubscribe","removeEventListener","event","isFocusedInTextField","isModalOverlayPanelOrDropdownOpen","isOnLoginPage","currentTime","timeStamp","DELAY","key","toLocaleUpperCase","length","substring","path","changePath","dispatch","routerLink","isTextInput","target","nodeName","isContentEditable","getAttribute","size","querySelectorAll","url","ConsoleLoggerMonitor","logsDatabase","log","addLog","AppComponent","logger","vnfcSharedService","featureFlag","roleAccessService","keyboardShortcuts","loadingRouteConfig","registerMonitor","preventDefault","window","returnValue","turnOff","info","turnOn","trace","userInfoFomSession","sessionStorage","getItem","userInfo","JSON","parse","payload","vnfcType","setVnfcType","events","get","role","readOnlyMode","setRoleAndReadOnlyMode","currentRole","reducers","metaReducers","reducer","features","stateKey","storage","localStorage","environment","production","enablePayloadInLogs","version","instrumentation","appMetadata","type","RouterEffects","actions$","splitViewRestrictionsService","redirect$","map","action","navigationExtras","data","redirectUrl","splitViewActiveRoute","pathFromRoot","find","route","outlet","isSplitViewEnabled","curUrlTree","parseUrl","topViewUrl","root","children","primary","segments","join","bottomViewUrl","split","filter","isRedirectToSplitView","notInSplitViews","navigate","isSplitBottomView","routeToken","Math","random","outlets","routerOutlets","slice","forEach","partOfRouter","includes","getSplitViewOutlets","forceRedirect$","queryParams","ToastMessageEffects","toastr","addNotification$","severity","detail","summary","addNotificationToStore$","notification","date","addSimpleNotification$","tap","enableHtml","removeNotification$","withLatestFrom","select","toastIds","clear","removeAllNotifications$","mergeMap","toastIdsFromStore","toasts","toastInstance","toastId","toastIdsKeysFromStore","Object","isEmpty","toBeDispatched","toastKey","push","E","httpOptionsPDF","headers","responseType","HelpService","http","fileURL","httpOptions","HelpEffects","helpService","fileSaver","getHelp$","filePath","fileName","downloadHelp$","downloadHelp","blob","catchError","error","of","downloadHelpSuccess$","defer","saveFile$","saveHelpErrors$","message","downloadHelpErrors$","save","Observable","subscriber","next","LogForActionsEffects","logForActions$","indexOf","stringify","err","runtimeCheckConfiguration","runtimeChecks","strictStateImmutability","strictActionImmutability","strictStateSerializability","strictActionSerializability","getRuntimeChecksConfiguration","AuthGuardService","authenticated","isAuthenticated","location","pathname","handlePageLoad","SingleColumnLayoutComponent","SingleColumnLayoutWithActionsBarComponent","quickMenuItems","icon","title","theme","statusBarModel","name","gNBname","operationatStateView","selectModelState","initialState","operationalState","subscribeModelWatch","unsubscribeModelWatch","subscribeTokenInfoWatch","unsubscribeTokenInfoWatch","subscribeUserOperationWatch","unsubscribeUserOperationWatch","statusPropertiesLink","productName","helpFileName","helpFilePath","quickMenuAlarmsModel","activeAlarmsLink","navigations","label","navigationGroup","keyboardShortcut","parentKey","roleAccessFlag","calculateMiddleOfView","max","documentElement","clientHeight","innerHeight","SplitViewLayoutComponent","changeDetectorRef","layoutsConfigService","ngUnsubscribe$","Subject","gutterLocation","navigationMenu","getNavigations","getQuickMenuItems","getStatusBarModel","getQuickMenuAlarmsModel","availableViews","getAvailableViews","combineLatest","counter","takeUntil","topView","bottomView","refreshMetadata","getViewRefreshMetadata","refreshLocation","getViewRefreshLocation","refreshView","detectChanges","complete","container","topViewContainerRef","template","topViewPanelTemplateRef","bottomViewContainerRef","bottomViewPanelTemplateRef","undefined","refreshMetadataItem","createEmbeddedView","CU_TARGET_COMPONENTS","value","AutoFocusDirective","el","setTimeout","nativeElement","focus","LoginPageComponent","formBuilder","chromeVersionText","copyrightText","ngUnsubscribe","submitButton","thickness","buttonOptions","forceWidth","cancelButton","isLoggedIn","bearerToken","applicationType","snapshot","loginStatus$","form","group","username","password","readOnlyChecked","showPassword","status","successful","reset","isVisible","capsLockOn","getModifierState","SsoLoginPageComponent","token","featureKey","logoutReducer","inProgress","failed","failedReason","on","state","AuthenticationService","super","params","rb","rootUrl","LoginPostPath","header","Authorization","request","build","accept","r","loginPost$Response","SsologinPostPath","ssologinPost$Response","LogoutPostPath","clone","logoutPost$Response","WNLS_DASHBOARD","VduTypeEnum","vduDashboardUiSettingsDefault","layoutConfig","w","h","y","x","wXl","hXl","yXl","xXl","RmodsStatus","VduCellsStatus","NetworkSlicing","Operations","Alarms","VnfcStatus","Counters1","Counters2","Counters3","Counters4","VduLayout","layout","IsEnum","IsDefined","LoginEffects","secService","sessionMgmtService","statusService","authorizationType","BASIC","BEARER","LOGIN_RETRY_BUFFER","cancelLogin$","login$","loginInProgress$","loginStarted$","encodedAuthorizationString","btoa","authorization","loginPost","ReadOnlyMode","response","setItem","Token","switchMap","loginResponse","getVnfcs$Response","vnfcsResponse","console","isVmcu","loginResponseMap","Role","ssoLoginStarted$","getTokenInfo","User","handleSsoNormalError","handleLoginRelatedError$","additionalStatus","errorResponse","EnforceLogoutDelay","enforcedLogoutDelay","loginLater$","loginLaterAction","delayWhen","timer","renewSessionToken$","shouldStartOperation","userInformation","authToken","information","renewTokenResponseMap","refreshTokenPatch","Type","onRefreshTokenSucceeded","removeLastSession$","logoutPost","openLegalNoticeModal$","submitLegalNoticeModal$","user","expires","Expires","failedLoginAttempts","FailedLoginAttempts","lastFailedLogin","LastFailedLogin","lastLogin","LastLogin","passwordAboutToExpireMessage","AdditionalText","getVnfcType","LayoutClass","item","layoutItem","layoutInst","whitelist","forbidNonWhitelisted","removeItem","validateAndClearLayout","LogoutEffects","logout$","logoutInProgress$","mapTo","TokenInfoEffects","pollingService","userOperationService","subscribeTokenInfoWatch$","scheduler","getTimer","unsubscribeTokenInfoWatch$","tokenInfoRequest$","tokenInfo","postTokenInfo$","tokenInfoPost","OperationTimestamp","getFlag","timeout","REQUEST_TIMEOUT_MS","setFlag","subscribeUserOperationWatch$","unsubscribeUserOperationWatch$","AuthModule","AccountConfigModule","additionalData","cuCellsInfoConfig","getCellsDiff","getCuCellsDiff","DiagnosticContentMenuConfigModule","ErrorsTabConfigModule","CU_ERRORS_TAB_MENU_ITEMS","missingMandatoryObjects","index","parameterErrors","objectsQuantityErrors","globalRelationErrors","parameterRelationErrors","FeatureFlagGuard","ngFeatureFlagModuleConfig","mapping","featureFlagGuardRules","reduce","sum","rule","set","Map","isPathEnabled","isFeatureEnabled","routeConfig","CustomPreloadingStrategyService","fn","preload","mainPage","CAN_ACTIVATE_GUARD","canActivate","COMMON_GUARD_SERVICE","canLoad","routes","component","loadChildren","m","CuDashboardModule","CuStatusModule","DusStatusModule","VmStatusModule","X2StatusModule","XnLinksStatusModule","NetworkSlicingModule","NgLinkModule","CellsStatusModule","CellsMappingModule","ParameterEditorModule","IpsecPskConfigurationModule","ConfigurationParameterSearchModule","ConfigurationErrorsModule","LazySplitViewLibModule","ConfigurationCompareObjectsModule","AlarmActiveModule","AlarmHistoryModule","FaultTogglingModule","PmV2Module","CertificateOperatorModule","CertificateAutomaticModule","CertificateCrlModule","OperatorAccountManagementModule","ServiceAccountModule","SessionsModule","DiagnosticSnapshotModule","TracingModule","DiagnosticCplaneModule","DiagnosticIpConnectivityModule","DiagnosticPmtuDiscoveryModule","DiagnosticIpSecurityAssociationModule","UiSettingsModule","PasswordExpiredModule","redirectTo","pathMatch","WebemRouterModule","initialNavigation","relativeLinkResolution","preloadingStrategy","forRoot","splitTracingTabs","isConfigCu","isConfigVdu","targetComponents","withBitmaskFilters","CuTrsApiModule","parentModule","UpstreamApiMgmtService","PublishPutPath","Name","publishPut$Response","PublishPostPath","publishPost$Response","PublishDeletePath","publishDelete$Response","PublishPatchPath","publishPatch$Response","StatisticsService","AdminstatsGetPath","adminstatsGet$Response","StatsGetPath","statsGet$Response","ConfigurationService","ConfigGetPath","configGet$Response","ConfigPutPath","configPut$Response","CuApiGwClientModule","CuCmClientModule","CuPmv2ClientModule","CuAsmClientModule","CuFmClientModule","CuCpConfigClientModule","CuEffects","webemStateService","unsubscribeCuWatch$","cuRequest$","exhaustMap","getCu","cu","setWebemState","cloudName","cloudId","subscribeCuWatch$","AppSettingsEffects","appSettingsService","importUiSettings$","notify$","file","importUiSettingsFile$","readAndValidate","errorMessageDetails","isValid","content","importUiSettings","importUiSettingsFileSuccess$","importUiSettingsFileError$","exportUiSettings$","exportUiSettingsFile$","downloadUiSettingsFile","exportUiSettingsFileSuccess$","exportUiSettingsFileError$","restoreDefaultUiSettings$","restoreDefaultUiSettingsValues$","restoreDefaultUiSettings","restoreDefaultUiSettingsSuccess$","restoreDefaultUiSettingsError$","ErrorHandlerService","rejection","reload","CellsStatusSetFilterEffects","setVisibleDuByIdAction$","servingDuId","SPLIT_VIEW_CONFIG","provideSplitViewConfigService","splitViewConfig","navigationService","SplitViewRestrictionsModule","useFactory","deps","RESTRICTED_PATTERNS","views","splitViews","splitBottomViews","CU_AVAILABLE_VIEWS","items","disabled","disabledBy","param","DETAILS_PANEL_CONFIG","provideDetailsPanelConfigService","detailsPanelConfig","detailsPanelConfigService","DetailsPanelConfigModule","CU_DETAILS_PANEL_CONFIG","urlsWithDetailPanel","CU_REFRESHING_VIEWS","SHORTCUT_PATHS_CU","DB","AA","PF","PE","ER","PS","SN","SW","CP","DS","CM","VS","XS","XN","CS","NS","NG","EnvironmentVariablesModule","JwtInterceptor","cloned","handle","UserEffects","updateUser$","encodedUsername","accountUsersSystemGet","Username","accountInfo","passwordExpirationDate","httpResponse","checkIfPasswordExpired$","removeUser$","setToken$","clearToken$","removeToken$","updateUserInformation$","existingUserInfo","updatedUserInfo","RemoveFromUserInformation$","UserModule","CustomSerializer","routerState","firstChild","SNAPSHOT_NAME_PARAMETERS_CU","featureFlagConf","LOCAL_USER_PROFILES","forbidden","VCU_LOCAL_USER_PROFILES","roleId","systemUserAccessMode","secUserAccessMode","appUserAccessMode","readOnlyUserAccessMode","mapToRoleAccessGuardRules","navs","replace","AppModule","useClass","multi","userProfiles","roleAccessGuardRules","ignoreWhen","level","positionClass","serializer","AVAILABLE_VIEWS","REFRESHING_VIEWS","DEFAULT_REDIRECTION_AFTER_FAILED_RESTRICTION_CHECKED","SNAPSHOT_NAME_PARAMETERS","bootstrapModule","catch","AccountConfig","NetElementType","AccountConfigService","isCu","netElementType","CU","VDU","ApiConfiguration","BaseService","_rootUrl","ParameterCodecInstance","encodeURIComponent","decodeURIComponent","Parameter","options","defaultStyle","defaultExplode","style","explode","separator","Array","v","serializeValue","array","propVal","String","PathParameter","prefix","QueryParameter","append","HeaderParameter","RequestBuilder","operationPath","method","_path","_query","_header","contentType","_bodyContentType","Blob","pairs","val","formValue","formDataValue","_bodyContent","p","formData","FormData","toAppend","pathParam","values","httpParams","encoder","queryParam","httpHeaders","headerParam","toUpperCase","reportProgress","SessionMgmtService","RevokeSessionsPostPath","revokeSessionsPost$Response","SessionsGetPath","sessionsGet$Response","GetTokenInfoPath","getTokenInfo$Response","TokenInfoPostPath","tokenInfoPost$Response","RefreshTokenPatchPath","refreshTokenPatch$Response","AllowedFunctionalitiesGetPath","allowedFunctionalitiesGet$Response","AdministrativeState","CellAdministrativeState","CellTechnologyType","F1LinkStatus","NgLinkStatus","NullableAvailabilityStatus","NullableOperationalState","Userrole","PeService","GetDeltaPlanListPath","getDeltaPlanList$Response","GetDeltaPlanInfoPath","planId","getDeltaPlanInfo$Response","DeleteDeltaPlanPath","deleteDeltaPlan$Response","UpdateDeltaPlanInfoPath","updateDeltaPlanInfo$Response","GetPlanListPath","getPlanList$Response","GetPlanInfoPath","getPlanInfo$Response","DeleteStagedPlanPath","deleteStagedPlan$Response","UpdatePlanInfoPath","updatePlanInfo$Response","GeneratePlanByDownloadScfFilePath","generatePlanByDownloadScfFile$Response","GetActionStateOfGeneratingPlanByScfPath","actionId","getActionStateOfGeneratingPlanByScf$Response","DeleteActionStateOfGeneratingPlanByScfPath","deleteActionStateOfGeneratingPlanByScf$Response","GeneratePlanByCopyCurrentPlanPath","generatePlanByCopyCurrentPlan$Response","GetActionStateOfCopyingCurrentPlanPath","getActionStateOfCopyingCurrentPlan$Response","DeleteActionStateOfCopyingCurrentPlanPath","deleteActionStateOfCopyingCurrentPlan$Response","GeneratePlanByCopyDeltaPlanPath","generatePlanByCopyDeltaPlan$Response","GetActionStateOfCopyingDeltaPlanPath","getActionStateOfCopyingDeltaPlan$Response","DeleteActionStateOfCopyingDeltaPlanPath","deleteActionStateOfCopyingDeltaPlan$Response","GeneratePlanByCopyStagedPlanPath","generatePlanByCopyStagedPlan$Response","GetActionStateOfCopyingStagedPlanPath","getActionStateOfCopyingStagedPlan$Response","DeleteActionStateOfCopyingStagedPlanPath","deleteActionStateOfCopyingStagedPlan$Response","GenerateNewPlanPath","generateNewPlan$Response","GetActionStateOfGeneratingNewPlanPath","getActionStateOfGeneratingNewPlan$Response","DeleteActionStateOfGeneratingNewPlanPath","deleteActionStateOfGeneratingNewPlan$Response","GenerateDeltaPlanPath","generateDeltaPlan$Response","GetActionStateOfGeneratingDeltaPlanPath","getActionStateOfGeneratingDeltaPlan$Response","DeleteActionStateOfGeneratingDeltaPlanPath","deleteActionStateOfGeneratingDeltaPlan$Response","GeneratePlanFileForUploadingPath","generatePlanFileForUploading$Response","GetActionStateOfUploadingPlanFilePath","getActionStateOfUploadingPlanFile$Response","DeleteActionStateOfUploadingPlanFilePath","deleteActionStateOfUploadingPlanFile$Response","GenerateDeltaPlanFileForUploadingPath","generateDeltaPlanFileForUploading$Response","GetActionStateOfUploadingDeltaPlanFilePath","getActionStateOfUploadingDeltaPlanFile$Response","DeleteActionStateOfUploadingDeltaPlanFilePath","deleteActionStateOfUploadingDeltaPlanFile$Response","UploadFilePath","uploadFile$Response","ActivateStagedPlanPath","activateStagedPlan$Response","GetOperationStateOfActivatingStagedPlanPath","operationId","getOperationStateOfActivatingStagedPlan$Response","DeleteOperationStateOfActivatingStagedPlanPath","deleteOperationStateOfActivatingStagedPlan$Response","ActivateDeltaPlanPath","activateDeltaPlan$Response","GetOperationStateOfActivatingDeltaPlanPath","getOperationStateOfActivatingDeltaPlan$Response","DeleteOperationStateOfActivatingDeltaPlanPath","deleteOperationStateOfActivatingDeltaPlan$Response","GetManagedObjectOfStagedPlanPath","moUuid","getManagedObjectOfStagedPlan$Response","GetManagedObjectOfDeltaPlanPath","getManagedObjectOfDeltaPlan$Response","CreateManagedObjectPath","createManagedObject$Response","GetCreateManagedObjectActionPath","getCreateManagedObjectAction$Response","DeleteCreateManagedObjectActionPath","deleteCreateManagedObjectAction$Response","CreateManagedObjectOfDeltaPlanPath","createManagedObjectOfDeltaPlan$Response","GetCreateManagedObjectOfDeltaPlanActionPath","getCreateManagedObjectOfDeltaPlanAction$Response","DeleteCreateManagedObjectInDeltaPlanActionPath","deleteCreateManagedObjectInDeltaPlanAction$Response","UpdateParametersPath","updateParameters$Response","GetUpdateParametersActionPath","getUpdateParametersAction$Response","DeleteUpdateParametersActionPath","deleteUpdateParametersAction$Response","CheckCurrentPlanPath","checkCurrentPlan$Response","GetManagedObjectOfCurrentPlanPath","getManagedObjectOfCurrentPlan$Response","GetManagedObjectParametersOfCurrentPlanPath","query","distName","getManagedObjectParametersOfCurrentPlan$Response","NotifyCurrentPlanChangedPath","notifyCurrentPlanChanged$Response","UpdateParametersOfDeltaPlanPath","updateParametersOfDeltaPlan$Response","GetUpdateParametersOfDeltaPlanActionPath","getUpdateParametersOfDeltaPlanAction$Response","DeleteUpdateParametersOfDeltaPlanActionPath","deleteUpdateParametersOfDeltaPlanAction$Response","DeleteManagedObjectPath","deleteManagedObject$Response","GetDeleteManagedObjectActionPath","getDeleteManagedObjectAction$Response","DeleteActionOfDeleteManagedObjectPath","deleteActionOfDeleteManagedObject$Response","DeleteManagedObjectOfDeltaPlanPath","deleteManagedObjectOfDeltaPlan$Response","GetDeleteManagedObjectOfDeltaPlanActionPath","getDeleteManagedObjectOfDeltaPlanAction$Response","DeleteActionOfDeleteManagedObjectOfDeltaPlanPath","deleteActionOfDeleteManagedObjectOfDeltaPlan$Response","RevertManagedObjectPath","revertManagedObject$Response","GetRevertManagedObjectActionPath","getRevertManagedObjectAction$Response","DeleteActionOfRevertManagedObjectPath","deleteActionOfRevertManagedObject$Response","FixStagedPlanPath","fixStagedPlan$Response","GetFixStagedPlanActionPath","getFixStagedPlanAction$Response","DeleteActionOfFixStagedPlanPath","deleteActionOfFixStagedPlan$Response","FixDeltaPlanPath","fixDeltaPlan$Response","GetFixDeltaPlanActionPath","getFixDeltaPlanAction$Response","DeleteActionOfFixDeltaPlanPath","deleteActionOfFixDeltaPlan$Response","GetPossibleManagedObjectsToCopyForStagedPlanPath","targetPlanId","sourcePlanId","childNiddId","getPossibleManagedObjectsToCopyForStagedPlan$Response","GetPossibleManagedObjectsToCopyForDeltaPlansPath","getPossibleManagedObjectsToCopyForDeltaPlans$Response","CopyManagedObjectsIntoStagedPlanPath","copyManagedObjectsIntoStagedPlan$Response","GetCopyManagedObjectsIntoStagedPlanActionPath","getCopyManagedObjectsIntoStagedPlanAction$Response","DeleteActionOfCopyManagedObjectsIntoStagedPlanPath","deleteActionOfCopyManagedObjectsIntoStagedPlan$Response","CopyManagedObjectsIntoDeltaPlanPath","copyManagedObjectsIntoDeltaPlan$Response","GetCopyManagedObjectsIntoDeltaPlanActionPath","getCopyManagedObjectsIntoDeltaPlanAction$Response","DeleteActionOfCopyManagedObjectsIntoDeltaPlanPath","deleteActionOfCopyManagedObjectsIntoDeltaPlan$Response","GetTreeOfCurrentPlanPath","filterByName","oldRevision","parentUuid","getTreeOfCurrentPlan$Response","SearchParametersOfCurrentPlanPath","pageNumber","itemsPerPage","sortOrder","sortedBy","searchParametersOfCurrentPlan$Response","SearchParametersOfStagedPlanPath","searchParametersOfStagedPlan$Response","SearchParametersOfDeltaPlanPath","searchParametersOfDeltaPlan$Response","ValidateStagedPlanPath","validateStagedPlan$Response","GetValidateStagedPlanActionPath","getValidateStagedPlanAction$Response","DeleteValidateStagedPlanActionPath","deleteValidateStagedPlanAction$Response","GetValidationResultOfStagedPlanPath","validationId","filterByErrorType","getValidationResultOfStagedPlan$Response","DeleteValidationResultOfStagedPlanPath","deleteValidationResultOfStagedPlan$Response","GetLatestValidationResultOfStagedPlanPath","getLatestValidationResultOfStagedPlan$Response","DeleteLatestValidationResultOfStagedPlanPath","deleteLatestValidationResultOfStagedPlan$Response","GetRelationErrorRelevantObjectListOfStagedPlanPath","errorIndex","getRelationErrorRelevantObjectListOfStagedPlan$Response","ValidateDeltaPlanPath","validateDeltaPlan$Response","GetValidateDeltaPlanActionPath","getValidateDeltaPlanAction$Response","DeleteValidateDeltaPlanActionPath","deleteValidateDeltaPlanAction$Response","GetValidationResultOfDeltaPlanPath","getValidationResultOfDeltaPlan$Response","DeleteValidationResultOfDeltaPlanPath","deleteValidationResultOfDeltaPlan$Response","GetLatestValidationResultOfDeltaPlanPath","getLatestValidationResultOfDeltaPlan$Response","DeleteLatestValidationResultOfDeltaPlanPath","deleteLatestValidationResultOfDeltaPlan$Response","GetRelationErrorRelevantObjectListOfDeltaPlanPath","getRelationErrorRelevantObjectListOfDeltaPlan$Response","PreActivateOperationForStagedPlanPath","preActivateOperationForStagedPlan$Response","GetPreActivateOperationForStagedPlanPath","getPreActivateOperationForStagedPlan$Response","DeletePreActivateOperationForStagedPlanPath","deletePreActivateOperationForStagedPlan$Response","PreActivateOperationForDeltaPlanPath","preActivateOperationForDeltaPlan$Response","GetPreActivateOperationForDeltaPlanPath","getPreActivateOperationForDeltaPlan$Response","DeletePreActivateOperationForDeltaPlanPath","deletePreActivateOperationForDeltaPlan$Response","GetTreeOfStagedPlanPath","getTreeOfStagedPlan$Response","GetTreeOfDeltaPlanPath","getTreeOfDeltaPlan$Response","GetAllNiddDefinitionsPath","getAllNiddDefinitions$Response","SecService","GetSystemInfoPath","getSystemInfo$Response","NotifyPlanActivationPath","notifyPlanActivation$Response","AccountSettingsGetPath","accountSettingsGet$Response","AccountServiceUserPropertiesGetPath","accountServiceUserPropertiesGet$Response","AccountLocalUserPropertiesGetPath","accountLocalUserPropertiesGet$Response","NotifyUmEventPath","notifyUmEvent$Response","AccountUsersSystemGetPath","accountUsersSystemGet$Response","AccountUsersSystemPatchPath","accountUsersSystemPatch$Response","AccountServicePatchPath","accountServicePatch$Response","AccountExpiredPasswordPatchPath","accountExpiredPasswordPatch$Response","SnapshotService","CheckSnapshotStatusPath","checkSnapshotStatus$Response","NotifySnapshotConfigPlanActivationPath","notifySnapshotConfigPlanActivation$Response","GetLocalSnapshotOperationsPath","getLocalSnapshotOperations$Response","TriggerLocalSnapshotPath","triggerLocalSnapshot$Response","GetRemoteSnapshotOperationsPath","getRemoteSnapshotOperations$Response","UploadExistRemoteSnapshotPath","uploadExistRemoteSnapshot$Response","TriggerRemoteSnapshotPath","triggerRemoteSnapshot$Response","GetLocalSnapshotOperationPath","getLocalSnapshotOperation$Response","DeleteLocalSnapshotOperationPath","deleteLocalSnapshotOperation$Response","GetRemoteSnapshotOperationPath","getRemoteSnapshotOperation$Response","UploadRemoteSnapshotPath","uploadRemoteSnapshot$Response","DeleteRemoteSnapshotOperationPath","deleteRemoteSnapshotOperation$Response","GetLocalSnapshotFilePath","fileId","getLocalSnapshotFile$Response","NotifyRuLogResultPath","notifyRuLogResult$Response","KeepSnapshotAlivePath","keepSnapshotAlive$Response","SnapshotNmsUploadPath","snapshotNmsUpload$Response","SnapshotNmsFilesReportPath","snapshotNmsFilesReport$Response","SnapshotNmsUploadResultPath","snapshotNmsUploadResult$Response","StatusService","GetCuPath","getCu$Response","GetVDuPath","getVDu$Response","GetExtSystemModulesPath","getExtSystemModules$Response","GetExtSystemModuleByIdPath","smodExtRId","getExtSystemModuleById$Response","GetRetsDiffPath","getRetsDiff$Response","GetRmodsDiffPath","getRmodsDiff$Response","GetMhasDiffPath","getMhasDiff$Response","GetRaesDiffPath","getRaesDiff$Response","GetRmodsSummaryPath","getRmodsSummary$Response","LockRmodsPath","lockRmods$Response","UnlockRmodsPath","unlockRmods$Response","GetRmodsLockPath","getRmodsLock$Response","DeleteRmodsLockPath","deleteRmodsLock$Response","GetRmodsUnlockPath","getRmodsUnlock$Response","DeleteRmodsUnlockPath","deleteRmodsUnlock$Response","GetDusDiffPath","getDusDiff$Response","GetDuPath","duId","getDu$Response","GetDusSummaryPath","getDusSummary$Response","LockDusPath","lockDus$Response","UnlockDusPath","unlockDus$Response","GetDusLockPath","getDusLock$Response","DeleteDusLockPath","deleteDusLock$Response","GetDusUnlockPath","getDusUnlock$Response","DeleteDusUnlockPath","deleteDusUnlock$Response","GetCuCellsDiffPath","getCuCellsDiff$Response","GetCuCellPath","cellId","getCuCell$Response","GetCuCellsSummaryPath","getCuCellsSummary$Response","GetVduCellsDiffPath","getVduCellsDiff$Response","GetVduCellPath","getVduCell$Response","GetVduCellsSummaryPath","getVduCellsSummary$Response","LockCellsPath","lockCells$Response","UnlockCellsPath","unlockCells$Response","GetCellsLockPath","getCellsLock$Response","DeleteCellsLockPath","deleteCellsLock$Response","GetCellsUnlockPath","getCellsUnlock$Response","DeleteCellsUnlockPath","deleteCellsUnlock$Response","LockCellGroupsPath","lockCellGroups$Response","UnlockCellGroupsPath","unlockCellGroups$Response","GetCellGroupsLockPath","getCellGroupsLock$Response","DeleteCellGroupsLockPath","deleteCellGroupsLock$Response","GetCellGroupsUnlockPath","getCellGroupsUnlock$Response","DeleteCellGroupsUnlockPath","deleteCellGroupsUnlock$Response","NotifyObjectsChangedPath","notifyObjectsChanged$Response","GetVmsPath","getVms$Response","GetVmPath","vmId","getVm$Response","GetVnfcsPath","GetPodsPath","getPods$Response","GetPodPath","podId","getPod$Response","GetX2LinksDiffPath","getX2LinksDiff$Response","GetX2LinksSummaryPath","getX2LinksSummary$Response","LockX2LinkPath","x2LinkId","lockX2Link$Response","UnlockX2LinkPath","unlockX2Link$Response","GetX2LinkLockPath","getX2LinkLock$Response","DeleteX2LinkLockPath","deleteX2LinkLock$Response","GetX2LinkUnlockPath","getX2LinkUnlock$Response","DeleteX2LinkUnlockPath","deleteX2LinkUnlock$Response","LockX2LinksPath","lockX2Links$Response","UnlockX2LinksPath","unlockX2Links$Response","GetX2LinksLockPath","getX2LinksLock$Response","DeleteX2LinksLockPath","deleteX2LinksLock$Response","GetX2LinksUnlockPath","getX2LinksUnlock$Response","DeleteX2LinksUnlockPath","deleteX2LinksUnlock$Response","LockXnLinksPath","lockXnLinks$Response","UnlockXnLinksPath","unlockXnLinks$Response","GetOperationStatePath","getOperationState$Response","DeleteOperationStatePath","deleteOperationState$Response","LockNgLinksPath","lockNgLinks$Response","UnlockNgLinksPath","unlockNgLinks$Response","LockNetworkSlicingPath","lockNetworkSlicing$Response","UnlockNetworkSlicingPath","unlockNetworkSlicing$Response","GetXnLinksDiffPath","getXnLinksDiff$Response","GetXnLinksSummaryPath","getXnLinksSummary$Response","GetNgLinksDiffPath","getNgLinksDiff$Response","GetNgLinksSummaryPath","getNgLinksSummary$Response","GetNetworkSlicingDiffPath","getNetworkSlicingDiff$Response","GetNetworkSlicingSummaryPath","getNetworkSlicingSummary$Response","GetSfPsDiffPath","getSfPsDiff$Response","GetVnfPath","getVnf$Response","ClientType","startsWith","from","toString","CmService","GetPlanIdsPath","getPlanIds$Response","DownloadPlanFilePath","xOamClientType","downloadPlanFile$Response","FetchPlanPath","className","ancestorDistName","step","fetchPlan$Response","DeletePlanPath","deletePlan$Response","GetCurrentPlanObjectsPath","xOamOperationTimeout","xOamChannelIDs","getCurrentPlanObjects$Response","UpdateCurrentPlanObjectsPath","xOamActivatorRole","updateCurrentPlanObjects$Response","StartUploadPath","startUpload$Response","GetUploadPath","getUpload$Response","DeleteUploadPath","deleteUpload$Response","GetUploadFilePath","getUploadFile$Response","StartValidationPath","toolValidation","startValidation$Response","GetValidationPath","getValidation$Response","DeleteValidationPath","deleteValidation$Response","GetValidationResultPath","getValidationResult$Response","GetGroupedValidationResultPath","getGroupedValidationResult$Response","StartImpactDeductionPath","startImpactDeduction$Response","GetImpactDeductionPath","getImpactDeduction$Response","DeleteImpactDeductionPath","deleteImpactDeduction$Response","GetImpactDeductionResultPath","getImpactDeductionResult$Response","InformImpactDeductionResultPath","informImpactDeductionResult$Response","GetRoleImpactDeductionResultPath","resultId","getRoleImpactDeductionResult$Response","StartActivationPath","startActivation$Response","GetActivationPath","getActivation$Response","DeleteActivationPath","deleteActivation$Response","GetActivationResultPath","getActivationResult$Response","InformActivationResultPath","informActivationResult$Response","GetRoleActivationResultPath","getRoleActivationResult$Response","UpdateRoleActivationResultPath","updateRoleActivationResult$Response","GetActivationResultCollectionPath","getActivationResultCollection$Response","CreateChannelPath","createChannel$Response","GetChannelPath","channelId","getChannel$Response","RemoveChannelPath","removeChannel$Response","HeadChannelPath","headChannel$Response","SyncChannelPath","syncChannel$Response","V2OperationsRestartAboutToHappenPostPath","v2OperationsRestartAboutToHappenPost$Response","V1VnfVnfIdVmCuGetPath","vnfId","v1VnfVnfIdVmCuGet$Response","V1VnfVnfIdVmCuPostPath","v1VnfVnfIdVmCuPost$Response","V1VnfVnfIdVmCuVmIdHeartbeatCuPostPath","v1VnfVnfIdVmCuVmIdHeartbeatCuPost$Response","V1VnfVnfIdVmCuVmIdGetPath","v1VnfVnfIdVmCuVmIdGet$Response","V1VnfVnfIdVmCuVmIdPutPath","v1VnfVnfIdVmCuVmIdPut$Response","V1VnfVnfIdVmCuVmIdInterfaceCuGetPath","v1VnfVnfIdVmCuVmIdInterfaceCuGet$Response","V1VnfVnfIdVmCuVmIdInterfaceCuPostPath","v1VnfVnfIdVmCuVmIdInterfaceCuPost$Response","V1VnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGetPath","interfaceId","v1VnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet$Response","V1VnfVnfIdVmCuVmIdConfigFilesCuGetPath","v1VnfVnfIdVmCuVmIdConfigFilesCuGet$Response","V1VnfVnfIdVmCuVmIdConfigFilesCuPostPath","v1VnfVnfIdVmCuVmIdConfigFilesCuPost$Response","V1VnfVnfIdVmCuVmIdConfigFilesCuConfigIdGetPath","configId","v1VnfVnfIdVmCuVmIdConfigFilesCuConfigIdGet$Response","V1BtsGetPath","v1BtsGet$Response","V1PlanInfosGetPath","v1PlanInfosGet$Response","V1PlansPlanIdsGetPath","planStatus","v1PlansPlanIdsGet$Response","UpdatePlanPath","updatePlan$Response","GetPlanFilePath","getPlanFile$Response","DownloadFullPlanFilePath","downloadFullPlanFile$Response","GetOperationPath","getOperation$Response","DeleteOperationPath","deleteOperation$Response","GetCurrentPlanPath","getCurrentPlan$Response","UpdateCurrentPlanPath","updateCurrentPlan$Response","WatchCurrentPlanPath","watchCurrentPlan$Response","GetCurrentPlanFilePath","getCurrentPlanFile$Response","V1CellsGetPath","v1CellsGet$Any$Response","v1CellsGet$Json$Response","V1VmsGetPath","v1VmsGet$Response","TargetComponent","FhConfigService","CellsPatchPath","cellsPatch$Response","NotificationsService","NotifyActivationPath","notifyActivation$Response","NotifyImpactDeductionPath","notifyImpactDeduction$Response","NotifyCurrentPlanChangePath","notifyCurrentPlanChange$Response","NotifyActivationResponceCollectionPath","notifyActivationResponceCollection$Response","ResetCuPath","resetCu$Response","ResetVDuPath","resetVDu$Response","GetCuResetPath","getCuReset$Response","DeleteCuResetPath","deleteCuReset$Response","GetVDuResetPath","getVDuReset$Response","DusDelayPostPath","dusDelayPost$Response","BlockCellPath","blockCell$Response","GetBlockPath","getBlock$Response","DeleteBlockPath","deleteBlock$Response","UnblockCellPath","unblockCell$Response","GetUnblockPath","getUnblock$Response","DeleteUnblockPath","deleteUnblock$Response","GetCellLockParmPath","ids","getCellLockParm$Response","GetCellUnLockParmPath","getCellUnLockParm$Response","GetCellGroupsLockParmPath","getCellGroupsLockParm$Response","GetCellGroupsUnLockParmPath","getCellGroupsUnLockParm$Response","GetDuLockParmPath","getDuLockParm$Response","GetDuUnLockParmPath","getDuUnLockParm$Response","Getx2LinkLockParmPath","getx2LinkLockParm$Response","Getx2LinkUnLockParmPath","getx2LinkUnLockParm$Response","OperationsRestartAboutToHappenPostPath","operationsRestartAboutToHappenPost$Response","TriggerCuLinksLockByTypePath","linkType","triggerCuLinksLockByType$Response","GetCuLinksLockPath","getCuLinksLock$Response","DeleteCuLinksLockPath","deleteCuLinksLock$Response","TestModelsService","TestModelsOperationsDownlinkStartPostPath","testModelsOperationsDownlinkStartPost$Response","TestModelsOperationsDownlinkStartOperationIdGetPath","testModelsOperationsDownlinkStartOperationIdGet$Response","TestModelsOperationsDownlinkStartOperationIdDeletePath","testModelsOperationsDownlinkStartOperationIdDelete$Response","TestModelsOperationsDownlinkStopPostPath","testModelsOperationsDownlinkStopPost$Response","TestModelsOperationsDownlinkStopOperationIdGetPath","testModelsOperationsDownlinkStopOperationIdGet$Response","TestModelsOperationsDownlinkStopOperationIdDeletePath","testModelsOperationsDownlinkStopOperationIdDelete$Response","TestModelsOperationsUplinkStartPostPath","testModelsOperationsUplinkStartPost$Response","TestModelsOperationsUplinkStartOperationIdGetPath","testModelsOperationsUplinkStartOperationIdGet$Response","TestModelsOperationsUplinkStartOperationIdDeletePath","testModelsOperationsUplinkStartOperationIdDelete$Response","TestModelsOperationsUplinkStopPostPath","testModelsOperationsUplinkStopPost$Response","TestModelsOperationsUplinkStopOperationIdGetPath","testModelsOperationsUplinkStopOperationIdGet$Response","TestModelsOperationsUplinkStopOperationIdDeletePath","testModelsOperationsUplinkStopOperationIdDelete$Response","TestModelsRunningTestModelsGetPath","testModelsRunningTestModelsGet$Response","TestModelsDownlinkTestPresetConfigsGetPath","testModelsDownlinkTestPresetConfigsGet$Response","TestModelsOperationsDownlinkChangeBeamPostPath","testModelsOperationsDownlinkChangeBeamPost$Response","TestModelsOperationsDownlinkChangeBeamOperationIdGetPath","testModelsOperationsDownlinkChangeBeamOperationIdGet$Response","TestModelsOperationsDownlinkChangeBeamOperationIdDeletePath","testModelsOperationsDownlinkChangeBeamOperationIdDelete$Response","TestModelsUplinkTestPresetConfigsGetPath","testModelsUplinkTestPresetConfigsGet$Response","TestModelsOperationsUplinkChangeBeamPostPath","testModelsOperationsUplinkChangeBeamPost$Response","TestModelsOperationsUplinkChangeBeamOperationIdGetPath","testModelsOperationsUplinkChangeBeamOperationIdGet$Response","TestModelsOperationsUplinkChangeBeamOperationIdDeletePath","testModelsOperationsUplinkChangeBeamOperationIdDelete$Response","TestModelsUplinkTestResultGetPath","testResult","testModelsUplinkTestResultGet$Response","TestModelsOperationsPerformancePuschStartPostPath","testModelsOperationsPerformancePuschStartPost$Response","TestModelsOperationsPerformancePuschStartOperationIdGetPath","testModelsOperationsPerformancePuschStartOperationIdGet$Response","TestModelsOperationsPerformancePuschStartOperationIdDeletePath","testModelsOperationsPerformancePuschStartOperationIdDelete$Response","TestModelsOperationsPerformancePucchStartPostPath","testModelsOperationsPerformancePucchStartPost$Response","TestModelsOperationsPerformancePucchStartOperationIdGetPath","testModelsOperationsPerformancePucchStartOperationIdGet$Response","TestModelsOperationsPerformancePucchStartOperationIdDeletePath","testModelsOperationsPerformancePucchStartOperationIdDelete$Response","TestModelsOperationsPerformancePrachStartPostPath","testModelsOperationsPerformancePrachStartPost$Response","TestModelsOperationsPerformancePrachStartOperationIdGetPath","testModelsOperationsPerformancePrachStartOperationIdGet$Response","TestModelsOperationsPerformancePrachStartOperationIdDeletePath","testModelsOperationsPerformancePrachStartOperationIdDelete$Response","TestModelsOperationsPerformanceStopPostPath","testModelsOperationsPerformanceStopPost$Response","TestModelsOperationsPerformanceStopOperationIdGetPath","testModelsOperationsPerformanceStopOperationIdGet$Response","TestModelsOperationsPerformanceStopOperationIdDeletePath","testModelsOperationsPerformanceStopOperationIdDelete$Response","TestModelsPerformanceTestPresetConfigsGetPath","testModelsPerformanceTestPresetConfigsGet$Response","TestModelsOperationsPerformanceChangeBeamPostPath","testModelsOperationsPerformanceChangeBeamPost$Response","TestModelsOperationsPerformanceChangeBeamOperationIdGetPath","testModelsOperationsPerformanceChangeBeamOperationIdGet$Response","TestModelsOperationsPerformanceChangeBeamOperationIdDeletePath","testModelsOperationsPerformanceChangeBeamOperationIdDelete$Response","TestModelsPerformancePuschTestResultGetPath","testModelsPerformancePuschTestResultGet$Response","TestModelsPerformancePucchTestResultGetPath","testModelsPerformancePucchTestResultGet$Response","TestModelsPerformancePrachTestResultGetPath","testModelsPerformancePrachTestResultGet$Response","TracingService","GetTracesActivationStatusPath","getTracesActivationStatus$Response","GetAllUPlaneTracesPath","getAllUPlaneTraces$Response","StartUPlaneTracePath","startUPlaneTrace$Response","GetUPlaneTraceByIdPath","traceId","getUPlaneTraceById$Response","StopUPlaneTraceByIdPath","stopUPlaneTraceById$Response","TransportService","TransportUpdatePatchPath","transportUpdatePatch$Response","CuFmClientService","GetFaultTogglingHistoryPath","getFaultTogglingHistory$Response","FaultsPostPath","faultsPost$Response","FaultsSnapshotTriggersPostPath","faultsSnapshotTriggersPost$Response","FmService","GetActiveAlarmsPath","filterBySeverity","filterByAlarmingObject","filterByText","filterByImpactedCells","getActiveAlarms$Response","GetActiveCategoryAlarmsPath","filterByCategory","getActiveCategoryAlarms$Response","GetActiveAlarmsSummaryPath","getActiveAlarmsSummary$Response","GetHistoricalAlarmsPath","getHistoricalAlarms$Response","GetHistoricalAlarmsSummaryPath","getHistoricalAlarmsSummary$Response","GetFaultPath","faultId","getFault$Response","GetActiveFaultPath","filterBySource","getActiveFault$Response","CuOamAgentClientModule","ActivityMode","CuInternalService","VnfVnfIdVmCuGetPath","vnfVnfIdVmCuGet$Response","VnfVnfIdVmCuPostPath","vnfVnfIdVmCuPost$Response","VnfVnfIdVmCuVmIdGetPath","vnfVnfIdVmCuVmIdGet$Response","VnfVnfIdVmCuVmIdHeartbeatCuPostPath","vnfVnfIdVmCuVmIdHeartbeatCuPost$Response","VnfVnfIdVmCuVmIdInterfaceCuGetPath","vnfVnfIdVmCuVmIdInterfaceCuGet$Response","VnfVnfIdVmCuVmIdInterfaceCuPostPath","vnfVnfIdVmCuVmIdInterfaceCuPost$Response","VnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGetPath","vnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet$Response","CuVmsGetPath","cuVmsGet$Response","GetExtendedVmPath","getExtendedVm$Response","SyncStatusGetPath","syncStatusGet$Response","GetGeoRedundancyVnfStatePath","getGeoRedundancyVnfState$Response","CuOamAgentClientService","GetAutonomousRebootAllowedPath","getAutonomousRebootAllowed$Response","RebootPostPath","rebootPost$Response","OperationsActivationPostPath","operationsActivationPost$Response","OperationsRestartPostPath","operationsRestartPost$Response","OperationsCurrentPlanChangesPostPath","operationsCurrentPlanChangesPost$Response","GetCuVnfPath","getCuVnf$Response","ActivateCuVnfPath","activateCuVnf$Response","ForcefullyActivateCuVnfPath","forcefullyActivateCuVnf$Response","DeactivateCuVnfPath","deactivateCuVnf$Response","GetCuVnfActivationPath","getCuVnfActivation$Response","DeleteCuVnfActivationPath","deleteCuVnfActivation$Response","GetCuVnfForcedActivationPath","getCuVnfForcedActivation$Response","DeleteCuVnfForcedActivationPath","deleteCuVnfForcedActivation$Response","GetCuVnfDeactivationPath","getCuVnfDeactivation$Response","DeleteCuVnfDeactivationPath","deleteCuVnfDeactivation$Response","VduInternalService","ContainerGetPath","containerGet$Response","ContainerPostPath","containerPost$Response","ContainerContainerIdGetPath","containerId","containerContainerIdGet$Response","ContainerContainerIdHeartbeatPostPath","containerContainerIdHeartbeatPost$Response","ContainerContainerIdInterfaceGetPath","containerContainerIdInterfaceGet$Response","ContainerContainerIdInterfacePostPath","containerContainerIdInterfacePost$Response","ContainerContainerIdInterfaceInterfaceIdGetPath","containerContainerIdInterfaceInterfaceIdGet$Response","VduContainersGetPath","vduContainersGet$Response","GetExtendedContainerPath","getExtendedContainer$Response","VduPodsGetPath","vduPodsGet$Response","GetExtendedPodPath","getExtendedPod$Response","CuPmv2ClientService","GetMeasurementsPath","getMeasurements$Response","GetCounterInfoPath","counterId","getCounterInfo$Response","GetCounterObjectsPath","getCounterObjects$Response","GetCounterMultipleValuesPath","startTimeLowerLimit","startTimeUpperLimit","getCounterMultipleValues$Response","GetValidCountersPath","getValidCounters$Response","AsyncOperationsService","OperationsIdGetPath","operationsIdGet$Response","CertMgtService","OperatorCertificatesIdGetPath","operatorCertificatesIdGet$Response","OperatorCertificatesIdDeletePath","operatorCertificatesIdDelete$Response","OperatorCertificatesGetPath","operatorCertificatesGet$Response","OperatorCertificatesPostPath","operatorCertificatesPost$Response","OperatorCertificatesDeletePath","operatorCertificatesDelete$Response","OperatorCsrGetPath","operatorCsrGet$Response","OperatorCsrPostPath","operatorCsrPost$Response","CmpServerGetPath","cmpServerGet$Response","CmpServerStatusGetPath","cmpServerStatusGet$Response","CmpServerSettingsPutPath","cmpServerSettingsPut$Response","CmpServerKeyPostPath","cmpServerKeyPost$Response","CmpCertificateInitializationPostPath","cmpCertificateInitializationPost$Response","CrlGetPath","crlGet$Response","CrlPostPath","crlPost$Response","DiagnosticService","InterfacesExternalGetPath","interfacesExternalGet$Response","GetListOfExternalEntitiesPath","getListOfExternalEntities$Response","GetIpConnectivityTestStatusPath","getIpConnectivityTestStatus$Response","StartIpConnectivityTestPath","startIpConnectivityTest$Response","GetPmtuDiscoveryStatusPath","getPmtuDiscoveryStatus$Response","StartPmtuDiscoveryPath","startPmtuDiscovery$Response","SecurityService","SecurityPresharedkeyPostPath","securityPresharedkeyPost$Response","SecurityEntityPoliciesGetPath","securityEntityPoliciesGet$Response","SecurityIkePoliciesGetPath","policyId","tnlHostName","securityIkePoliciesGet$Response","TraceConfigurationService","GetTraceCommonConfigurationPath","getTraceCommonConfiguration$Response","UpdateTraceCommonConfigurationPath","updateTraceCommonConfiguration$Response","GetCPlaneTracingStaticRoutePath","getCPlaneTracingStaticRoute$Response","UpdateCPlaneTracingStaticRoutePath","updateCPlaneTracingStaticRoute$Response","VduInterfacesService","InterfaceGetPath","interfaceGet$Response","LoginMessages","LoginActionsTypes","login","LOGIN","loginSuccessful","LOGIN_SUCCESSFUL","tokenRenewalSuccessful","TOKEN_SUCCESSFUL","removeLastSession","REMOVE_LAST_SESSION","removeLastSessionSuccessfull","REMOVE_LAST_SESSION_SUCCESFULL","resetOperationStatus","RESET_OPERATION_STATUS","loginFailed","LOGIN_FAILED","loginInProgress","LOGIN_IN_PROGRESS","setLoginInitialValues","LOGIN_INITIAL_VALUES","loginStarted","LOGIN_STARTED","ssoLoginStarted","START_SSO_LOGIN","loginLater","LOGIN_LATER","sessionUnintentionallyTerminated","SESSION_UNINTENTIONALLY_TERMINATED","LogoutActionsTypes","logout","LOGOUT","logoutSuccessful","LOGOUT_SUCCESSFUL","logoutInProgress","LOGOUT_IN_PROGRESS","logoutFailed","LOGOUT_FAILED","TokenInfoActionsTypes","SubscribeTokenInfoWatch","UnsubscribeTokenInfoWatch","subscribeTokenInfoWatchError","SubscribeTokenInfoWatchError","tokenInfoRequest","TokenInfoRequest","setTokenInfo","SetTokenInfo","setTokenInfoInitialValues","SetTokenInfoInitialValues","PostTokenInfo","POST_TOKEN_INFO","UnsubscribeUserOperationWatch","ExpiredPollingErrorAction","RenewOperationedAction","RenewOperationalAction","SubscribeUserOperationWatch","loginReducer","tryLater","shouldStartOperationAfterTokenRenewal","getLoginStatus","selectLoginInProgress","selectTokenRenewalSuccessful","tokenInfoFeatureKey","EnforceLogout","PasswordExpirationDate","tokenInfoReducer","ActionTypes","setView","SetView","selectCell","SelectCell","setDisplayConfiguration","changeSortType","ChangeSortType","changeFilter","ChangeFilter","restoreView","RestoreView","exportToCsv","ExportToCsv","setFreeSearchText","SetFreeSearchText","viewType","freeSearchText","selectedId","sortType","filterState","displayConfiguration","nrCellIdentity","physicalLayerCellID","cellName","nrarfcn","cellGroupId","duName","actions","technology","cellsStatusReducer","isNil","CommissioningActionTypes","startCommissioning","stopCommissioning","commissioningFlagFeatureKey","onStartCommissioning","isCommissioningInProgress","onStopCommissioning","commissioningFlagReducer","selectCommissioningFlagStatusState","selectCommissioningFlagStatus","ErrorsTabConfig","ErrorsTabConfigService","ConfigurationSharedServicesModule","PlansInfoActionTypes","stagedPlansFetchError","StagedPlansFetchError","deltaPlansFetchError","DeltaPlansFetchError","inactivePlansFetchError","InactivePlansFetchError","activePlansFetchError","ActivePlansFetchError","stagedPlansFetchSuccess","StagedPlansFetchSuccess","deltaPlansFetchSuccess","DeltaPlansFetchSuccess","inactivePlansFetchSuccess","InactivePlansFetchSuccess","activePlansFetchSuccess","ActivePlansFetchSuccess","updateStagedPlans","UpdateStagedPlans","updateDeltaPlans","UpdateDeltaPlans","updateInactivePlans","UpdateInactivePlans","updateActivePlans","UpdateActivePlans","loadAllPlansInfoFromServer","AllPlansInfoRequested","subscribeOnPlansInfoChanges","SubscribePlansInfoChange","unsubscribeFromPlansInfoChanges","UnsubscribePlansInfoChange","SubscribePlansInfoError","EMPTY_SIMPLE_LIST_ELEMENT_VALUE","NO_CHILD_DEFINED","DEFAULT_CHANGE_TO_PLAN_CONFIGURATION_MESSAGE","FORBIDDEN_CHANGE_TO_PLAN_CONFIGURATION_MESSAGE","MAXIMUM_NUMBER_OF_PLANS_ALREADY_CREATED","NIDD_DEFINITION","ValidationMessages","DefinitionsError","errorType","additionalValue","DeltaPlanConflictState","NotSupportedPlanCreationOption","setPrototypeOf","prototype","NotSupportedPlanOriginError","planOrigin","LOADED_PLANS_LIMITS","STAGED","DELTA","RowTypes","PlanActivationStatus","PlanActivationStages","planDownload","planValidate","planActivate","LoadingButton","SetDefaultButton","SetDefaultLoadingButton","SetDefaultForParameterWithoutDefaultValueButton","SetDefaultAlreadyAppliedButton","RevertButton","RevertLoadingButton","RevertNewButton","RevertUnchangedButton","DeleteButton","DeleteLoadingButton","DeleteMandatoryParameterButton","AddButton","AddStructureElementButton","AddEmptyStructureLimitButton","AddSimpleListElementButton","AddMaxElementsInStructureButton","AddEmptyElementsInListButton","AddMaxElementsInListButton","NotAllowedAddStructureButton","NotAllowedAddListElementsButton","AddElementLoadingButton","AddObjectButton","AddObjectLoadingButton","RemoveElementButton","RemoveElementLoadingButton","NotAllowedRemoveStructureButton","NotAllowedRemoveListItemButton","GoToButton","ChangeToPlannedConfigurationButton","ChangeToPlannedConfigurationLoadingButton","CopyAllValidParametersLoadingButton","OkButton","CancelButton","RowState","InstanceIdValidationMessages","required","min","pattern","excludedWords","PlanCreationOption","PlanOrigin","isDeltaPlan","plan","SortOrder","ValidatePlanSortBy","plansInfoReducer","stagedPlans","deltaPlans","inactivePlans","activePlans","plans","planBasicInfoFeatureKey","selectPlansInfoState","selectAllPlansInfo","selectPlansInfoByOrigin","originList","selectStagedPlans","selectStagedPlansLimitExceeded","selectDeltaPlans","selectCurrentPlan","selectedOutdatedDeltaPlans","deltaState","selectDeltaPlansLimitExceeded","selectSelectedPlanState","selectSelectedPlanId","selectSelectedPlanOrigin","selectSelectedPlanRequestInfo","selectSelectedPlan","selectSelectedDeltaPlanIsOutdated","selectedPlan","selectIsSelectedPlanActive","selectIsSelectedPlanStaged","getAsmUploadRequestBody","saveVariant","deltaChangeOnly","getCmUploadRequestBody","includeRuntimeData","INVALID_PLAN_ORIGIN","PlanApiEndpointsService","peService","cmService","deleteManagedObject","deleteManagedObjectOfDeltaPlan","throwError","getDeleteManagedObjectAction","getDeleteManagedObjectOfDeltaPlanAction","deleteActionOfDeleteManagedObject","deleteActionOfDeleteManagedObjectOfDeltaPlan","deleteStagedPlan","deleteDeltaPlan","generatePlanFileForUploading","generateDeltaPlanFileForUploading","startUpload","getActionStateOfUploadingPlanFile","getActionStateOfUploadingDeltaPlanFile","getUpload","deleteActionStateOfUploadingPlanFile","deleteActionStateOfUploadingDeltaPlanFile","deleteUpload","uploadFile","getUploadFile","revision","getTreeOfStagedPlan","getTreeOfDeltaPlan","getTreeOfCurrentPlan","fromOrigin","getManagedObjectOfStagedPlan","getManagedObjectOfDeltaPlan","getManagedObjectOfCurrentPlan","option","generatePlanByDownloadScfFile","getActionStateOfGeneratingPlanByScf","deleteActionStateOfGeneratingPlanByScf","searchParametersProps","searchParametersOfStagedPlan","searchParametersOfDeltaPlan","searchParametersOfCurrentPlan","generateNewPlan","generatePlanByCopyCurrentPlan","generatePlanByCopyStagedPlan","generatePlanByCopyDeltaPlan","generateDeltaPlan","getActionStateOfGeneratingNewPlan","getActionStateOfCopyingCurrentPlan","getActionStateOfCopyingStagedPlan","getActionStateOfCopyingDeltaPlan","getActionStateOfGeneratingDeltaPlan","deleteActionStateOfGeneratingNewPlan","deleteActionStateOfCopyingCurrentPlan","deleteActionStateOfCopyingStagedPlan","deleteActionStateOfCopyingDeltaPlan","deleteActionStateOfGeneratingDeltaPlan","autoLockCells","forceReset","activateStagedPlan","startActivation","activateDeltaPlan","preActivateOperationForStagedPlan","preActivateOperationForDeltaPlan","getPreActivateOperationForStagedPlan","getPreActivateOperationForDeltaPlan","getOperationStateOfActivatingStagedPlan","getActivation","result","getOperationStateOfActivatingDeltaPlan","deletePreActivateOperationForStagedPlan","deletePreActivateOperationForDeltaPlan","deleteOperationStateOfActivatingStagedPlan","deleteActivation","deleteOperationStateOfActivatingDeltaPlan","targetPlan","sourcePlan","getPossibleManagedObjectsToCopyForStagedPlan","getPossibleManagedObjectsToCopyForDeltaPlans","copyManagedObjectsIntoStagedPlan","copyManagedObjectsIntoDeltaPlan","getCopyManagedObjectsIntoStagedPlanAction","getCopyManagedObjectsIntoDeltaPlanAction","deleteActionOfCopyManagedObjectsIntoStagedPlan","deleteActionOfCopyManagedObjectsIntoDeltaPlan","createManagedObject","createManagedObjectOfDeltaPlan","getCreateManagedObjectAction","getCreateManagedObjectOfDeltaPlanAction","deleteCreateManagedObjectAction","deleteCreateManagedObjectInDeltaPlanAction","planBase","validateStagedPlan","validateDeltaPlan","getValidateStagedPlanAction","getValidateDeltaPlanAction","plansInfo","getValidationResultOfStagedPlan","validationErrorType","pagination","sort","sortBy","getValidationResultOfDeltaPlan","getLatestValidationResultOfStagedPlan","getLatestValidationResultOfDeltaPlan","getRelationErrorRelevantObjectListOfStagedPlan","getRelationErrorRelevantObjectListOfDeltaPlan","fixStagedPlan","addMissingObjects","fixMandatoryParameters","fixDeltaPlan","getFixStagedPlanAction","getFixDeltaPlanAction","deleteActionOfFixStagedPlan","deleteActionOfFixDeltaPlan","PlanApiUpdateParametersEndpointsService","getDefaultUpdateParametersRequestEndpoint","getDefaultUpdateParametersActionRequestEndpoint","getDefaultDeleteUpdateParameterAction","updateParameters","updateParametersOfDeltaPlan","getUpdateParametersAction","getUpdateParametersOfDeltaPlanAction","deleteUpdateParametersAction","deleteUpdateParametersOfDeltaPlanAction","GetRelationErrorService","planApiEndpointsService","managedObjectSelector","destroy","selectedMo","distinctUntilChanged","previous","current","previousMo","previousPlan","currentMo","currentPlan","planInfo","forkJoin","relationErrors","getRelationErrorsDetailsObject","relationErrorsList","flattenDeep","relationErrorDetails","parentMoUuid","shareReplay","RoleAccessPeService","secAdmOnly","operationRoles","childMoOperationRoles","isNoChildDefined","some","mo","moName","isForbiddenForCurrentRole","isChangeToPlanedConfigurationAllowedForCurrentRole","AdjustUiDropdownService","ngZone","documentElem","scrollHeight","overflow","runOutsideAngular","AppSettingsActionTypes","ImportUiSettings","exportUiSettings","ExportUiSettings","RestoreDefaultUiSettings","restoreDefaultUiSettingsSuccess","RestoreDefaultUiSettingsSuccess","restoreDefaultUiSettingsError","RestoreDefaultUiSettingsError","restoreDefaultUiSettingsValues","RestoreDefaultUiSettingsValues","importUiSettingsFile","ImportUiSettingsFile","importUiSettingsFileSuccess","ImportUiSettingsFileSuccess","importUiSettingsFileError","ImportUiSettingsFileError","exportUiSettingsFile","ExportUiSettingsFile","exportUiSettingsFileSuccess","ExportUiSettingsFileSuccess","exportUiSettingsFileError","ExportUiSettingsFileError","uiRefresh","UiRefresh","cleanUiSettingsCache","CleanUiSettingsCache","HelpActionTypes","GetHelp","DownloadHelp","DownloadHelpError","DownloadHelpSuccess","HelpSaveError","RouterActionTypes","forceRedirect","FORCE_REDIRECT","redirect","REDIRECT","StatusFilterActionTypes","setVisibleDuByIdAction","setVisibleDuById","resetCellsViewFiltersAction","resetFilters","ToastMessageActionTypes","addNotification","addNotificationId","addSimpleNotification","removeNotification","RemoveNotification","removeAllNotifications","RemoveAllNotifications","removeNotificationFromStore","RemoveNotificationFromStore","addNotificationToHistory","UserActionTypes","updateUser","UPDATE_USER","setToken","SET_TOKEN","setLastSessionToken","SET_LAST_SESSION_TOKEN","updateDowngradedPrivilegesDialogPopupFlag","UPDATE_DOWNGRADED_PRIVILEGES_DIALOG_POPUP_FLAG","updateUserInformation","UPDATE_USER_INFORMATION","updateLoginResponse","UPDATE_LOGIN_RESPONSE","removeFromUserInformation","REMOVE_FROM_USER_INFORMATION","removeUser","REMOVE_USER","clearTokens","CLEAR_TOKENS","removeToken","REMOVE_TOKEN","renewSessionToken","RENEW_TOKEN","displayPasswordExpirationWarning","DISPLAY_PASSWORD_EXPIRATION_WARNING","clearPasswordExpirationWarning","CLEAR_PASSWORD_EXPIRATION_WARNING","handleLoginRelatedError","LOGIN_RELATED_ERROR","setUsernameForPasswordExpired","SET_USERNAME_FOR_PASSWORD_EXPIRED","setCurrentAccountActivatedStatus","SET_CURRENT_ACCOUNT_ACTIVATE_STATUS","DateTime","Date","dateTime","format","year","month","hours","minutes","seconds","ms","dateTimeFormat","floor","s","trim","toFormat","timezone","AppTypes","AvailableFeatureFlagsEnum","Environment","mapActivationResponse","errorMessage","mapStartActivationCmResponseToAsm","isCompleted","links","mapActivationResultsCmResponseToAsm","getActivationResult","activationResult","statusText","mapCmResponseToAsmUploadActionResponse","EnterZoneScheduler","zone","args","work","delay","run","schedule","now","enterZone","exp","RegExp","generatePlanFileName","planName","modelState","outputFileName","mrbtsId","sanitizeBtsName","btsName","toFormattedFileDateTime","toRaisedAlarm","alarmId","alarmName","faultName","AlarmSeverities","findHighestSeverity","alarms","severities","aggregatedSeverities","alarm","critical","major","minor","warning","filename","getFilenameSuffix","statusInfo","mapAlarms","acc","cur","row","getVduFilenameSuffix","vdu","mapRmodsIds","channels","rmodsIds","channel","rmodRId","uniqueRmods","Set","LayoutBase","getOwnPropertyNames","LeaveZoneScheduler","leaveZone","ErrorInterceptor","isConnectionStable","CONNECTION_ERR_CODES","PM_SERVICE_DOWN_ERR_CODES","isConnected","isConnectionError","isPmServiceDownError","isVcu","isPmServerDown","ErrorMessageDetails","AppSettingsLabels","APP_SETTINGS_FILE_EXTENSION","MAX_FILE_SIZE_FOR_SETTINGS_IN_KB","MAX_FILE_SIZE_FOR_SETTINGS","ConfigurationSaveVariant","DateTimeFormats","RoleAccessForbiddenFlagEnum","appSettingsFeatureKey","onRefreshUi","refreshCount","onCleanUiSettingsCache","shouldNotifyUISettingGotRestored","appSettingsReducer","selectAppSettingsState","selectAppSettingsRefresh","selectHasCleanUiSettingsState","cloudReducer","cloud","selectCloudState","onRemoveNotificationFromStore","newToastIds","omit","onAddNotificationId","toastType","onAddNotificationToHistory","notifications","toastMessageReducer","passwordExpirationReducer","isPasswordAgingPresent","getPasswordAgingState","getIsPasswordAgingPresent","ROUTER_STATE","selectRouterState","selectUrl","selectUrlWithoutParams","selectToastMessageState","selectToastIds","selectNotifications","schema","$schema","maxItems","properties","REGISTRY_KEY","AppSettingsService","keyName","entries","loadRegistry","elem","generateUiSettingsFile","saveRegistry","saveUiSettings","ajv","validation","addSchema","validate","errorsText","obs","isExtensionValid","endsWith","File","reader","FileReader","readAsText","onerror","onabort","onload","parsedContent","atob","onloadend","fileContent","validateJsonSchema","readFile","registry","registryEntry","isArray","currentRegistry","add","delete","uiSettings","addPrefix","addKeyToRegistry","storageKeyName","removeKeyFromRegistry","defaultUi","selectCloud","CloudInfoService","take","INDEXED_DB_ENV","ConsoleLogsDatabaseService","dbSchema","session","createStore","openDbConnection","table","newLog","isStoreLimitExceeded","deleteOldLogs","allLogs","getAllLogs","logs","toArray","latestLogId","getLatestLog","element","where","belowOrEqual","orderBy","last","count","totalLogsNumber","getCount","num","isNumber","isOpen","open","stack","stores","DatetimeService","isoTime","formatFromISO2GMTTime","NaN","Timestamp","test","parseInt","toFormattedDateTime","timestamp","shouldRemoveTimezone","utcOffset","DroppedItemService","constructor","notifyError","errorSummary","errorDetails","AlarmType","ExportService","datetimeService","cloudInfoService","isHistoricalAlarms","getExportFilenameForAlarms","HISTORICAL_ALARMS","CURRENT_ALARMS","formatFromISO8601","appearTime","clearedTime","alarmingObject","FAULT_TOGGLING_HISTORY","fault","togglingAlarmRaiseTime","faultSource","nodeId","togglingAlarmsLast10seconds","togglingAlarmsLastMinute","togglingAlarmsLastHour","togglingAlarmsLastDay","togglingAlarmsSinceStartup","fileFormat","getExportFilename","getCloudName","getCloudId","ResponseStatus","OutletUrlPathService","viewLocation","getSegmentsOutletPath","view","defaultIsActionDistinctPredicate","defaultActionResponseSerializer","PollingService","POLLING_PERIOD_MS","dueTime","pollingPeriod","pollingConfig","endpointResponseSerializer","spinAfterSuccess","clearActionProgressArray","getActionArray","actionProgress","response$","requestEndpoint","requestParams","serializedResponse","pollForActionSuccess","successActionObservable","onActionSuccess","failureActionObservable","onActionFailure","errorActionObservable","onActionError","stopPolling$","actionDistinctPredicate","isActionDistinctPredicate","pollingEndpoint","shouldExitPolling","isStopped","onGoingAction","onActionOngoing","successOrFailureAction","pollUnlessHttpErrorCode","TokenExpirationTimeService","calculateRemainingTokenExpirationTime","expirationTime","_expirationTime","calculateRemainingTime","tokenExpirationTime","formatLoginInfoDate","round","differenceInSeconds","getFormattedDateTime","parameterNames","eventTypeName","probableCauseName","lastUpdatedTime","faultyCells","degradedCells","affectedCells","additionalInfo","UiAlarmParametersMapperService","abbreviationName","meaning","instruction","UiFaultParametersMapperService","UserInformationService","UserOperationService","userOperation","operation","eventType","WebemStateService","_webemState","TokenType","tokenAdapter","selectId","initialPlansState","getInitialState","userReducer","shouldDowngradedPrivilegesDialogPopup","tokens","accountActiveStatus","addOne","lastSessionToken","removeAll","removeOne","getUser","selectAll","getSelectors","selectTokens","selectDowngradedPrivilegesDialogPopupFlag","selectInformation","selectUsername","selectUserTokenExpirationTime","selectLastSessionToken","selectRoleAndReadOnlyMode","selectCurrentAccountActivatedStatus","selectUserRole","selectLonginResponse","getValueIfAvailable","sanitizeWithUnderScore","input","replacement","derToPemConverter","arrayBuffer","PEM_VALID","BEGIN","END","pemBuffer","byteLength","arrBuffer","outputBuffer","base64Buffer","fromCharCode","Uint8Array","substr","getBase64Buffer","CuTypeEnum","dashboardUiSettingsDefault","DusStatusSummary","CellsStatusSummary","X2StatusSummary","Statistics","XnStatusSummary","NgStatusSummary","dashboardUiSettingsVmCU","CuLayout","VmCuLayout","CuActionTypes","subscribeCuWatch","SubscribeCuWatch","unsubscribeCuWatch","UnsubscribeCuWatch","subscribeCuError","SubscribeCuError","cuRequest","CuRequest","setCu","SetCu","amfs","ipAddress","ngLinkStatus","ipAddresses","vnfIpAddress","mPlaneIpAddress","f1Interface","cPlaneIpAddress","uPlaneIpAddress","ngInterface","x2Interface","xnInterface","mcc","mnc","mncLength","numberOfAlarms","serverIpAddressPrimary","serverIpAddressSecondary","softwareVersion","timeZone","readyForCommissioning","cuReducer","selectCuState","selectCu","selectRecentCu","selectCuStatusInfo","selectReadyForCommission","selectCuAlarmsNumber","WebemRoutesPaths","DetailsPanelToggleButtonComponent","actRoute","cd","outletService","panelAnimationDelay","isOnSplitView","buttonClicked","getButtonModel","visible","detailsPanelVisible","subscribeToSplitViewDetailsPanelVisibilityChanges","subscribeToNavigationEndRouterEvent","subscribeToDetailsPanelVisibilityChanges","buttonModelSub","routerEventsSub","detach","emit","splitViewRouterOutlet","currentRoute","getOutletWebemRoutePath","buttonModel","detailPanelButton","toggleDetailsPanelVisibility","ToggleDetailsPanelVisibility","setDetailsPanelResizingFlag","Resizing","SPLIT_VIEW_LOCATION","DETAILS_PANEL","detailPanelReducer","isBeingResized","getRouterReducerState","getMergedRoute","routerReducerState","detailPanelState","splitViewOutlets","isDetailPanelVisible","mergeRoute","props","isDetailsPanelBeingResized","detailsPanelFinishedResizing","scan","wasResizing","isResizing","DetailsPanelConfigService","convertUrlIntoKey","camelCase","filterTreeObject","filterPhrase","fullName","filterString","treeObject","toLowerCase","treeObjectLng","filterPhraseLng","ChooseObjectMenuModule","DetailsPanelModule","F","DiagnosticContentMenuConfig","DiagnosticContentMenuConfigService","DiagnosticContentMenuComponent","diagnosticContentMenuConfigService","setMenuItemsMap","getShouldShowEntries","getMenuConfig","RunningTestModelsActionTypes","startRunningTestModelsPolling","StartRunningTestModelsPolling","runningTestModelsRequest","RunningTestModelsRequest","stopRunningTestModelsPolling","StopRunningTestModelsPolling","updateRunningTestModels","UpdateRunningTestModels","runningTestModelsRequestError","RunningTestModelsRequestError","clearTestModels","ClearTestModels","VDuOperationalState","DiagnosticTestmodelService","testModelOperations","dlOperationID","dlTestModelOperationResultMsgs","isEqual","isTDSState","Test","testType","operationID","ulTestModelResult","cumulativeResult","currentValue","receivedBits","unreceivedBits","receivedBlocks","unreceivedBlocks","defectiveBits","defectiveBlocks","RunningTestModelsEffects","testModelsService","diagnosticTestmodelService","startRunningTestModelsPolling$","stopRunningTestModelsPolling$","runningTestModelsRequest$","testModelsRunningTestModelsGet","runningTestModels","testModels","updateTestModels","testModel","isEqualTestModel","unionWith","isRunningEqualTestModel","newTestModel","nrCellId","runningTestModelsReducer","diagnosticTestModelsStore","DiagnosticSharedModule","SnapshotFetchFilesConfig","startCheckingSnapshotServerStatus","stopCheckingSnapshotServerStatus","startCollectingLocalSnapshot","startCollectingRemoteSnapshot","setSnapshotServerStatus","startCancellingCollectionLocalSnapshot","startCancellingCollectionRemoteSnapshot","collectingLocalSnapshotIsSucceeded","collectingRemoteSnapshotIsSucceeded","cleanSnapshotStateIfCollectingIsNotOngoing","setSnapshotStatusToCanceled","saveFilesLocal","startDownloadingFiles","updateDownloadFileStatus","startSavingFiles","downloadingFilesCompleted","cleanSnapshotState","cleanCollectSnapshotResultState","collectingLocalSnapshotIsFailed","collectingRemoteSnapshotIsFailed","addCollectedFilesToStore","collectingLocalSnapshotOngoing","startCollectingLocalSnapshotHearbeat","collectingRemoteSnapshotOngoing","setSnapshotFormValues","cleanUpSnapshotOnServerFinished","checkSnapshotServerStatusError","cancellingCollectionIsOngoing","cancellingSnapshotIsFailed","cleanSnapshotServerStatus","updateSnapshotCancelState","deleteLocalSnapshotAfterSuccess","stopGettingRemoteSnapshotNeedToBeTransferred","startGettingRemoteSnapshotNeedToBeTransferred","setRemoteSnapshotFileNameAndOperationId","startGettingRemoteSnapshotError","startTransferSnapshotToNMS","transferSnapshotFailed","transferSnapshotToNMSIsFinished","cleanTransferSnapshotState","cleanTransferSnapshotResultState","cleanTransferStateIfTransferIsNotOngoing","cleanServerStatusIfOperationIsNotOngoing","collectingSnapshotServerStatusFeatureKey","snapshotServerStatus","collectingSnapshotServerStatusReducer","SNAPSHOT_LOCATION","SNAPSHOT_COLLECTING_STATUS","START_CANCELING_STATUS","TRANSFER_SNAPSHOT_STATUS","COLLECTING_SNAPSHOT_IS_ONGOING","COLLECTING_FILES_ONGOING","COLLECTING_FILES_SUCCEEDED","DOWNLOADING_FILES_ONGOING","PREPARING_FILES_ONGOING","CANCEL_IS_ONGOING","CANCELLING","START_CANCELING","MAP_TO_UI_COLLECTING_STATUS_DISPLAY","COLLECTING_SNAPSHOT_COMPLETE","MAP_TO_UI_TRANSFER_STATUS_DISPLAY","TRANSFER_SNAPSHOT_ONGOING","TRANSFER_SNAPSHOT_FAILED","TRANSFER_SNAPSHOT_SUCCEEDED","SNAPSHOT_OPERATION_IS_NOT_AVAILABILITY","SERVER_CONNECTION_FAILURE","SNAPSHOT_COVERAGE","collectingSnapshotFeatureKey","LOCAL","filterRegx","reason","coverage","FULL","files","collectStatus","startCancelingStatus","startHeartBeatStatus","collectingSnapshotReducer","CANCELING_SUCCEEDED","CANCELING_FAILED","startedAt","COLLECTING_FILES_START","finishedAt","COLLECTING_SNAPSHOT_FAILED","fileNameInt","updateFiles","fileStates","sizeInByte","transferSnapshotFeatureKey","remoteSnapshotFileName","transferStatus","transferSnapshotToNMSReducer","SnapshotServerStatus","selectCollectingSnapshotServerStatusFeature","selectCollectingSnapshotAvailability","collectingSnapshotServerStatus","Cancelling","Local_Ongoing","Remote_Ongoing","Idle","selectSnapshotServerConnectionFailure","selectTransferSnapshotToNmsState","selectRemoteSnapshotFileName","selectOperationIdForRemoteSnapshot","selectSnapshotTransferStatus","selectTransferSnapshotIsOngoing","selectTransferSnapshotDuration","selectTransferSnapshotStartedAt","selectTransferSnapshotFinished","selectTransferSnapshotFailed","selectTransferSnapshotErrorMessage","selectTransferSnapshotBtnTitle","isTransferSnapshotOngoing","isServerConnectionFailure","isSnapshotOperationAvailability","selectTransferOperationStatus","isTransferSnapshotFinished","isTransferSnapshotFailed","selectCollectingSnapshotState","selectCollectingSnapshotOperationId","collectingSnapshotState","selectCollectingSnapshotStartedAt","selectCollectingSnapshotDuration","selectstartHeartBeatStatus","selectCollectingSnapshotSavingIsOngoing","selectCollectingSnapshotIsCanceled","selectCollectingSnapshotErrorMessage","selectCollectingSnapshotIsFinished","selectCollectingSnapshotFiles","selectCollectingSnapshotFilesChanged","collectingSnapshotFiles","fileSize","selectCollectingSnapshotFileStates","downloadFilesCollectingSuccessSelector","every","selectCollectingSnapshotIsCancelling","selectCollectingSnapshotIsOngoing","selectCollectingSnapshotIsStarting","selectCollectingSnapshotIsOngoingOrCancelling","collectingSnapshotIsOngoing","cancelCollectSnapshotIsOngoing","selectCollectingStatus","selectCollectingSnapshotIsFailed","selectCollectSnapshotBtnTitle","collectingSnapshotIsCancelling","selectSnapshotOperationIsOngoing","isCollectingSnapshotStarting","isCollectingSnapshotIsOngoingOrCancelling","selectSnapshotOperationStatus","isCollectingSnapshotSavingOngoing","isCollectingSnapshotOngoing","isCollectingSnapshotFinished","isCollectingSnapshotFailed","isCancellingCollection","isCollectionCancelled","isSnapshotOperationOngoing","SnapshotFetchFilesService","httpClient","snapshotService","consoleLogsDatabaseService","webemState","mainZip","filesListTXT","filesList","listOfFiles","canceled","snapshotFile","getLocalSnapshotFile","toPromise","zippedFiles","loadAsync","getNamesOfZippedFiles","getBlobLogs","browserLogs","cancelled","generateAsync","saveAs","createSnapshotName","webemStateText","getWebemState","property","stateText","listOfZippedFiles","CollectingSnapshotServerStatusEffects","snapshotFetchFilesService","stopCheckingSnapshotServerStatus$","startCheckingSnapshotServerStatus$","checkSnapshotStatus","cancelCollectingFiles","cleanServerStatusIfOperationIsNotOngoing$","SnapshotStatus","CollectingSnapshotEffects","cancelSnapshotIsFailed$","addCancelNotification$","startCancellingCollectionLocalSnapshot$","throttleTime","deleteLocalSnapshotOperation","startCancellingCollectionRemoteSnapshot$","deleteRemoteSnapshotOperation","startCollectingLocalSnapshot$","triggerLocalSnapshot","heartbeat","originator","startCollectingRemoteSnapshot$","triggerRemoteSnapshot","collectingLocalSnapshotIsSucceeded$","first","sendNotificationCollectingRemoteSnapshotIsSucceeded$","downloadingFilesCompleted$","deleteLocalSnapshotAfterSuccess$","deleteRemoteSnapshotAfterSuccess$","downloadingFiles$","startDownloadingFiles$","collectingSnapshotIsFailed$","collectingLocalSnapshotOngoing$","concatMap","getLocalSnapshotOperation","Succeeded","Failed","failureInfo","httpError","startCollectingLocalSnapshotHearbeat$","keepSnapshotAlive","collectingRemoteSnapshotOngoing$","getRemoteSnapshotOperation","snapshotCollectingIsOngoing$","isOngoing","RANGE_VALUES","DEFAULT_RANGE","LOCATION_VALUES","DEFAULT_LOCATION","MISSING_MANDATORY_FIELD","missingMandatoryField","oneOfControlsMandatoryValidator","SessionTokenRenewalDialogComponent","ref","okButtonModel","cancelButtonModel","ngOnInit","skipRenewal","validator","disable","enable","closeDialog","startSnapshot","isRenewalSuccessful","checked","TimerServiceService","observeOn","selector","duration","durationMs","ConfirmDialogComponent","acceptLabel","acceptIcon","acceptVisible","rejectLabel","rejectIcon","rejectVisible","closeOnEscape","rtl","closable","baseZIndex","autoZIndex","transitionOptions","MAP_TO_UI_MSG","TranslateOperationStatusPipe","FormatTimePipe","time","asMilliseconds","DiagnosticSnapshotCollectionComponent","timerService","tokenExpirationService","startCollectingSnapshotButtonModel","stopCollectingSnapshotButtonModel","onYesButtonClick","snapshotLocationIsLocal","collectSnapshotForm","coverageValues","locationValues","collectingSnapshotDurationTimer$","setSnapshotDurationTimer","collectingSnapshotDuration$","setSnapshotDuration","snapshotServerConnectionFailure$","patchValue","selectSnapshotOperationStatus$","emitEvent","valueChanges","selectCollectingStatus$","collectSnapshotBtnTitle$","selectCollectingSnapshotErrorMessage$","startCollectingSnapshot","isTransferSnapshotOngoing$","isRemainingTimeLessThan40Minutes","openRenewTokenDialog","componentType","DiagnosticSnapsthotDetailsComponent","detailFiles","toolbarHeight","changes","scroll","containerViewChild","getElementsByClassName","scrollTop","DiagnosticSnapshotTransferComponent","transferSnapshotToNMSButtonModel","transferSnapshotDurationTimer$","transferSnapshotDuration$","selectTransferOperationStatus$","selectTransferSnapshotErrorMessage$","selectSnapshotTransferStatus$","transferSnapshotBtnTitle$","selectSnapshotOperationIsOngoing$","DiagnosticSnapshotHomeComponent","isSnapshotIdle$","collectingSnapshotFiles$","remoteSnapshotFileName$","DiagnosticSnapshotRoutingModule","SessionTokenRenewalModule","TransferSnapshotToNmsEffects","transferSnapshotFailed$","stopGettingRemoteSnapshotNeedToBeTransferred$","startGettingRemoteSnapshotNeedToBeTransferred$","getRemoteSnapshotOperations","remoteName","addNotificationForTransferSnapshot$","startTransferSnapshotToNMS$","uploadRemoteSnapshot","cleanTransferStateIfTransferIsNotOngoing$","S","TracingConfigModule","TracingConfig","TracingConfigService","isVdu","areBitmapsVisible","FeatureFlag","flags","flag","toggleKeyboardShortcutsAvailability","ToggleKeyboardShortcutsAvailability","KEYBOARD_SHORTCUTS","keyboardShortcutsReducer","enabled","keyboardShortcutsAvailabilityState","areKeyboardShortcutsEnabled","PageLayoutComponent","droppedItemService","detailPanelAnimationOngoing","contentPanelConfiguration","detailsPanelConfiguration","minSize","maxSize","currentRoute$","isDetailsPanelExpanded$","watchCurrentRoute","currentRouteWithoutSlash","getUrlsWithDetailsPanel","handleItem","handleDroppedItem","LayoutsConfigModule","layoutsConfig","LayoutsConfig","LayoutsConfigService","LayoutsModule","NavigationSearchActions","setNavigationSearchOverlayOpened","OpenOverlay","setNavigationSearchOverlayClosed","CloseOverlay","navigationSearchStateFeatureKey","setNavigationSearchReducer","isNavigationSearchOverlayOpened","SessionTokenTimeEffects","remainingSeconds","stopCountingSeconds$","setRemainingTime$","remainingTime","getTokenExpirationTime","startCountingSeconds$","UserMenuModule","NavigationSearchModule","PageHeaderModule","TokenInfoDialogComponent","ngOnDestroy","tokenInfoState","FormatMrbtsIdPipe","OnAirSvgDefinitionComponent","OnAirStatusIconComponent","href","UpperFirstPipe","upperFirst","FormatGeneralStatusTimeZonePipe","timeZoneRegex","sign","diff","assign","match","formatMrbtsId","GeneralStatusInfoComponent","modelState$","model","getStatusTitleWithOperationalState","operationalStatePart","transform","Enabled","OnAir","DowngradedPrivilegesDialogComponent","INVALID","UserMenuSmartComponent","userInformationService","downgradedPrivilegesDialogPopupFlagSubscription","getRole","downgradedPrivilegesDialogPopupFlag$","userInformation$","pluck","getPasswordExpirationFromApiDirectly","rawDateOrMessage","formattedDate","ENTER","ARROW_UP","ARROW_DOWN","selectNavigationSearch","selectIsNavigationSearchOverlayOpened","NavigationSearchKeyboardService","handleKeyboardEvent","NavigationSearchInputComponent","navSearchKeyboardService","valueChange","changeValueSubject","debounceTime","searchInputField","handleKeyUp","onValueChange","resetValue","NavigationSearchRoutesListItemComponent","isActive","routeItem","isDisabled","redirectToSelectedRoute","NavigationSearchRoutesListComponent","routesListChanged","NOT_FOUND","keyboardEventSubscription","keyboardEventsManager","listItems","withWrap","skipPredicate","initKeyManagerHandlers","updateStylesInRoutesList","routesList","firstChange","isOverlayClosed","setActiveItem","change","activeIndex","setActive","scrollToRouteIndex","stopImmediatePropagation","onKeydown","activeItem","listref","routeElements","childElement","firstRouteElement","isElementCompletelyVisible","offsetTop","containerTop","elementTop","styledLabel","filteredRoutes","searchText","elementId","getElementById","innerHTML","NavigationSearchComponent","navigationSearchButtonModel","ctrlKey","shiftKey","isOverlayOpened","openOverlay","hideOverlayIfOpened","allRoutes","getAllRoutesSorted","setAllRoutesAsFilteredRoutes","isOpened","overlayPanel","hide","show","overlayTarget","transFormToRouteSelectItems","getAvailableNavigations","sortRoutes","a","b","firstLabel","secondLabel","isGroup","nav","searchItemGroup","searchItem","getLabel","child","flat","filterChanged","toggle","firefox","chrome","FullScreenService","requestFullscreen","fullscreenElement","isFirefoxInFullScreen","isInFullScreenModeByAPI","exitFullscreen","exitFullScreen","requestFullScreen","browser","checkUserAgent","navigator","userAgent","FullScreenComponent","fullScreenService","disableFullScreenButton","f11Warning","fullScreenEnterButtonModel","fullScreenExitButtonModel","firefoxF11ButtonModel","checkBrowser","checkFullScreenByAPI","updateFullScreenButton","toggleFullScreen","isInFullScreenByAPI","updateFullScreenButtonByAPI","checkFirefoxFullScreenByOS","updateFirefoxFullScreenButton","isFirefoxInFullScreenByOS","fullScreenButtonModel","isFirefoxInFullScreenModeByOS","getBrowser","PageHeaderComponent","pairwise","pre","showTokenInfoDialog","dialogMsg","preEnforceLogout","nowEnforceLogout","formatLogoutReason","EnforceLogoutReason","closedComponent","alertMessage","logoutReason","navigateToHomePage","PasswordExpirationWarningComponent","isPasswordAboutToExpire$","closeInformation","QuickMenuComponent","SideBarMenuGroupsPipe","groups","isItem","isRootNavigation","obj","iconType","navigation","routerLinkConst","activeChildIndex","findIndex","toMenuGroupList","PageNavigationMenuComponent","menuAction","isExpanded","PageNavigationActionTypes","changeMainMenuExpandState","NAVIGATION_ROOT","navigationRoot","alarmGroup","settingsGroup","splitViewGroup","statusGroup","configurationGroup","certificationManagementGroup","localUserManagementGroup","diagnosticsGroup","PageName","RouterLink","MAIN_MENU_KEY","onChangeMainMenuExpandState","mainMenuReducer","selectMainMenuState","selectIsExpandedMainMenu","groupNavigations","entryModels","derivedProperties","shouldExclude","navigationGroupMap","entryModelGroup","entryModelItem","groupKey","entryModel","navGroup","navItemsGroup","itemGroup","NavigationModule","NavigationService","filterMenuForVcuVmcu","FeatureFlagDirective","viewContainer","templateRef","NgFeatureFlagModuleConfig","NgFeatureFlagModule","moduleConfig","featureFlagInst","CellsInfoConfigModule","CellsInfoConfig","CountersInfoActionTypes","setCountersInfo","SetCountersInfo","clearCountersInfo","ClearCountersInfo","setCountersInfoPanelState","SetCountersInfoPanelState","unsetCountersInfoPanelState","UnsetCountersInfoPanelState","countersInfoFetchingError","CountersInfoFetchingError","retrievingCounterInfoFailed","RetrievingCounterInfoFailed","retrievingCounterInfoSucceed","RetrievingCounterInfoSucceed","CountersPmServiceActionTypes","pmServerDown","PmServerDown","pmServerAvailable","PmServerAvailable","subscribeToPmServiceState","SubscribeToPmServiceState","requestPmServiceAction","RequestPmServiceAction","CountersSelectionActionTypes","subscribeToCountersChanges","SubscribeToCounterChanges","unsubscribeFromCountersChanges","UnsubscribeFromCounterChanges","selectCounters","SelectCounters","clearCountersSelection","ClearCountersSelection","CountersValuesActionTypes","setCountersValues","SetCountersValues","appendCountersValues","AppendCountersValues","clearCountersValues","ClearCountersValues","setCountersFilter","SetCountersFilter","setStartTime","SetStartTime","clearStartTime","ClearStartTime","setEndTime","SetEndTime","setLatestEtag","SetLatestEtag","clearEndTime","ClearEndTime","changeCountersView","ChangeCountersView","exportCountersTable","ExportCountersTable","exportCountersChart","ExportCountersChart","fetchCountersValues","FetchCounters","countersValuesNotModified","CounterValuesNotModified","countersFetchingError","CounterValuesHttpError","countersValuesFetchingSuccess","CountersValuesFetchingSuccess","retrievingCounterValuesFailed","RetrievingCounterValuesFailed","retrievingCounterValuesSucceed","RetrievingCounterValuesSucceed","getCounterDistNameFromUniqueId","uniqueCounterId","dimensionDistName","getCounterIdFromUniqueId","removeCounterKeyPrefix","mapKeys","filterCounterKey","previousValues","newValues","startTime","rest","CountersViews","countersDetailsPanelAdapter","countersDetailsPanelInitialState","countersDetailsPanelReducer","countersInfoAdapter","countersInfoInitialState","failedToRetrieveCountersInfo","setAll","countersInfoReducer","checkedNodesAdapter","countersSelectionInitialState","checkedNodes","counterStartTime","timeFrame","nodes","countersSelectionReducer","countersValuesAdapter","counterValues","uniqueId","countersValuesInitialState","endTime","latestEtag","failedToRetrieveCountersValues","isOldRequest","entities","appendCounters","etag","countersValuesReducer","countersValueSelectors","checkedNodesSelectors","countersInfoSelectors","countersDetailsSelectors","selectPmV2State","selectCountersInfoState","countersInfo","selectCountersValuesState","countersValues","selectCountersSelectionState","countersSelection","selectCountersToggleTreePanelState","countersToggleTree","selectCountersDetailsState","countersDetails","selectCountersExpansionState","countersExpansion","selectCountersFilterState","countersFilter","selectCountersPmServiceState","countersPmService","selectValues","selectCheckedNodes","selectInfo","selectCountersInfoEntries","selectEntities","selectCountersView","selectAllCheckedCountersValues","selectStartTime","selectEndTime","selectAllCheckedCounters","selectTimeFrame","selectCounterStartTime","selectAllCheckedCountersInfo","selectLatestEtag","additionalInfos","selectCheckedCountersValuesFilter","selectAllDetailsCounters","hideTogglePanelTree","selectCounterInfoRetrieveFailed","expandedNodes","selectCountersValuesRetrieveFailed","selectPmServerDown","RoleAccessService","skipPredictor","getProfileByName","profileKey","NOT_ACCESSIBLE_FOR_CURRENT_ROLE_TITLE","TITLE_DEFAULT_PATH","DISABLED_DEFAULT_PATH","PARAM_EDIT_FIELD_DISABLE_PATH","RoleAccessControlDirective","roleAccessConfig","inputModel","disabledPath","titlePath","titleOnHost","hostInstance","isToUpdateValuesDifferentWithCurrent","RoleAccessGuard","redirectToDefault","RoleAccessConfig","RoleAccessModule","injector","dep","ServerConnectionCheckerModule","ServerConnectionNotificationComponent","isDisconnected","getTimestamp","appName","setConnectionStatus","serverConnectionFeatureKey","serverConnectionReducer","selectServerConnectionState","selectIsConnected","selectIsDisconnected","ToIpInterfacesDetailsPropertiesModule","BaseDialogComponent","shouldCloseWhenRouteChanged","close","initCloseOnRouteChangeSubscription","Boolean","confirmDialogExclamationIcon","alertDialogInformationIcon","BTS_SYSTEM_ADMINISTRATOR","BTS_SECURITY_ADMINISTRATOR","BTS_APPLICATION_ADMINISTRATOR","BTS_READONLY_USER","ACTIVE","DEACTIVE","ROLE_NAME_MAPPING","SYSTEM_AVAILABLE_ROLES","SECURITY_AVAILABLE_ROLES","NAME_ROLE_MAPPING","ROLE_USERNAME_MAPPING","ACTIVE_DEACTIVE","DEACTIVE_ACTIVE","CloudTypes","setCloudAction","setCloud","availabilityStatusLabels","KILOBYTE_DECIMAL","KILOBYTE_BINARY","MAX_COUNTERS_FILE_SIZE","StatusIconType","GetClassExtensionPipe","isSelected","selectedVduCell","selectedSmod","rmodSmodExtRId","selectedRetu","selectedRetAld","selectedRaeu","selectedRaeAld","selectedLna","selectedMhaAld","extentionClass","cellCondition","channelsMapping","smodCondition","retuCondition","retu","antennaList","connector","raeuCondition","raeu","retAldCondition","isAldPortsIncludesRmodId","raeAldCondition","lnaCondition","lna","amplifiedAntennaLine","mhaAldCondition","controlPorts","ald","HasAlarmsModule","HasAlarmsPipe","AvailabilityStatus","AvailabilityStatusClasses","availabilityStatusMap","OnLine","NotInstalled","OffLine","PowerOff","Degraded","Dependency","OffDuty","InTest","LogFull","MapAvailabilityStatusPipe","availabilityStatus","class","statusIconData","ToActiveAlarmsPipe","ToActiveAlarmsModule","Match","comparisonArr","validationOptions","object","propertyName","constraints","MatchConstraint","relatedPropertyName","findRelateItem","o","nullableValueFormat","CustomInjectorModule","FixTableColumnsResizeDirective","host","treeTableBody","querySelector","dataTableBody","classList","FixTableColumnsResizeModule","ToIpInterfacesDetailsPropertiesPipe","cloudElement","uniqBy","ipInterfaces","ipInterface","interfaceName","FormatFromISO2GMTTime","formatedDate","EMPTY_PLACEHOLDER","NullableValuePipe","WebemCommonModule","SplitViewEffects","outletUrlService","changeSplitViews$","getUpdatedAvailableViews","navigateToChangedView$","selectedView","hasOwnProperty","navigateToLastSelectedViews$","changeSelectionRestriction$","getAvailableViewsWithRestriction","updateViewsByUrlOutlet$","topOutlet","bottomOutlet","updateViewsWithoutRedirect$","navigateToViewsSelectedByUrlOutlets$","setViewsAccordingToUrlOutlet$","topChanged","bottomChanged","switchedViews","updateItems","newState","restrictionsForGroupViews","isUrlInRestrictionGroup","selectionRestriction","DisabledGroupHeaderIfRestrictedPipe","restrictions","SplitViewSingleColumnPageLayoutComponent","defaultDetailPanelSize","hideGutter","hiddenDetailPanelSize","contentDefaultSize","detailPanelVisibilityUnsubscribe","showDetailToggleButton","showDetailPanelButton","subscribeForDetailPanelVisibility","splitRouterOutlet","isDetailPanelExpanded$","toggleDetailPanel","detailsPanelSize","contentSize","handleAnimationEnd","SplitViewModule","SplitViewEmptyViewComponent","SplitViewGuardService","outletUrlPathService","urlTopView","urlBottomView","isUrlTopViewInRestrictedGroup","isUrlBottomViewInRestrictedGroup","SplitViewPageLayoutComponent","SplitViewDropdownsComponent","splitViewPath","topViewPlaceholder","bottomViewPlaceholder","navEnd","urlAfterRedirects","urls","isNavigateToSplitViewAgain","changeSelectionRestrictionInDropdownList","flatteningValueInAvailableViews","topViews","bottomViews","selectedBottomView","selectValidView","selectedTopView","itemView","availableView","actualUrl","onTopViewChange","onBottomViewChange","SplitViewActionTypes","changeSelectionInTopView","ChangeSelectionInTopView","setAvailableSplitViewOptions","SetAvailableSplitViewOptions","changeSelectionInBottomView","ChangeSelectionInBottomView","changeSelectionRestriction","ChangeSelectionRestriction","updateSelectedViews","UpdateSelectedViews","updateWholeState","UpdateWholeState","setViewsFromUrlPath","SetViewsFromUrlPath","updateViewsWithoutRedirect","UpdateViewsWithoutRedirect","updateViewsAccordingToUrlPath","UpdateViewsAccordingToUrlPath","updateStoreWithoutRedirect","UpdateStoreWithoutRedirect","setLastSelectedViews","SetLastSelectedViews","removeSelectedViews","RemoveSelectedViews","splitViewsStateFeatureKey","splitViewReducer","selectSplitViewState","selectAvailableViews","selectSplitViewsDetails","SplitViewRestrictionsService","isNavigationRoot","getGroupProperties","childProperties","getItemProperties","availableItems","flattenItems","viewToRefresh","refreshingView","destination","CellsFilterType","CellsSortType","ViewType","AlarmMessageModule","AlarmSeverityIconModule","AlarmsDashboardPanelModule","AlarmsTableModule","RaisedAlarmsModule","CellStatusComponentsModule","ChartBarStatusPanelModule","DetailsSectionModule","CrlInformationTableModule","DragDropUploadModule","VerticalHtmlLineModule","DuModule","GlobalSearchInputModule","OnAirStatusPanelModule","PanelModule","PanelSplitAreaModule","PanelSplitModule","RadioButtonGroupModule","RadioButtonWithLabelModule","AlarmCounterModule","RoutedMenuModule","SessionsTableModule","SideBarMenuModule","SplitPanelToggleButtonModule","StatusIconModule","StepperModule","SubmenuModule","NoSelectedMessageModule","TableViewModule","TitledCounterModule","ToggleIconButtonModule","UserInformationChangeModule","ValidationRulesDetailsModule","ValidationRulesDetailsLocalModule","VerticalFormsModule","AlarmSeveritiesForFiltering","ValidationEntryType","PageNotFoundModule","PageNotFoundRedirectPaths","PageNotFoundComponent","isUserLogged","blocks","text","textTemplateRef","separatorTemplateRef","Dashboard","Login","buttonTemplateRef","navigateByUrl","selectOverlay","selectIsOutdatedDeltaPlanDialogOpened","isOutdatedDeltaPlanDialogOpen","getPasswordMessages","passwordErrors","isRoleOperationPage","passwordMessages","getCharacterNumberMessage","isRulePassed","minNumberOfDigits","minNonAlphaNumerical","nonAlphaNumericalCheck","addNonAlphaNumericalCheck","getUsernameMessages","usernameErrors","minLength","maxLength","UiClickableModule","browserIsSupport","browserInformationClosed","BrowserCompatibilityModule","overlayStateFeatureKey","setOverlayReducer","ModuleInfoBarModule","legalNoticeModalConfig","width","styleClass","loadingLegalNoticeModalMessage","legalNoticeModalFeatureKey","legalNoticeModalReducer","securityNotice","confirmButtonVisible","okButtonVisible","legalNoticeModalFeatureSelector","securityNoticeSelector","securityNoticeConfirmButtonVisibleSelector","securityNoticeErrorSelector","isLegalNoticeVisibleSelector","LegalNoticeModalComponent","confirmButtonModel","iconPosition","commonRejectButtonModel","securityNotice$","securityNoticeConfirmVisible$","securityNoticeButton$","errorButtonVisible","deny","LegalNoticeModalEffects","getLegalNoticeMessage$","getSystemInfo","systemInfo","denyLegalNoticeModal$","showLegalNoticeModal$","LegalNoticeModalModule","ActionProgressTypes","setActionProgress","SetActionProgress","clearActionProgress","ClearActionProgress","clearActionProgresses","ClearActionProgresses","AlarmMessageComponent","AlarmSeverityIconComponent","AlarmSeverityTypeColor","AlarmSeverityTypeLabel","alarmSeverity","color","indeterminate","mapSeverityToNumber","GetHighestAlarmSeverityPipe","highestSeverityAlarm","maxBy","nextFontSizeRange","AlarmSeverityDashboardPanelComponent","fontSize","amount","CriticalAlarmsCounterBlockComponent","panelClick","MajorAlarmsCounterBlockComponent","MinorAlarmsCounterBlockComponent","WarningAlarmsCounterBlockComponent","AlarmsCounterPanelComponent","criticalClick","majorClick","minorClick","warningClick","AlarmsDashboardPanelComponent","PageChanged","DashboardAlarmsTableComponent","SPINNER_CLASS","$event","partialEvent","onLoadNewPage","AlarmsTableComponent","AlarmSelected","clearSelection","alarmType","onAlarmSelect","onRowUnselect","onPageChange","CompatibilityBrowserActionTypes","BrowserIncompatibilityInfoClosed","BrowserInformationClosed","BrowserIsSupport","YourBrowserIsSupport","BrowserIsNotSupport","YourBrowserIsNotSupport","BrowserCompatibilityConfig","browserSupportedNames","names","selectBrowserCompatibilityState","selectBrowserCompatibility","browserCompatibility","BrowserIncompatibilityBarComponent","accountConfigService","closeButton","browserCompatibility$","checkBrowserCompatibility","getParser","createInfoMessage","browserName","getBrowserName","isSupported","toLocaleLowerCase","isBrave","brave","ButtonWithMenuModule","ButtonWithMenuComponent","ACTIONS_BUTTON_MODEL","boundScrollEventTargets","hideMenu","menu","btnConfig","buttonConfig","menuOptions","previousValue","unbindScrollListeners","scrollableContainer","bindScrollListeners","onMenuShow","onMenuHide","WebemButtonModule","ButtonComponent","showTitle","mousedown","mouseup","mouseout","styles","classes","update","setStyles","setClasses","noPaddings","forceHeight","minWidth","minHeight","condition","cl","blur","fileUpload","uploader","click","stopPropagation","currentTarget","onClick","onMouseDown","onMouseUp","onMouseOut","ButtonLength","ButtonTheme","ButtonThickness","menuToggle","CellTileComponent","nullableValuePipe","lock","unlock","goToPe","OPERATIONAL_STATE","ADMINISTRATIVE_STATE","TECHNOLOGY_TYPE","GO_TO_PARAMETER_EDITOR_ACTION","command","capitalize","isConfigVcu","recalculateTooltipContent","commissioningSubscription","setMenu","fddNrarfcn","basicCell","nrarfcnDl","nrarfcnUl","tddNrarfcn","tooltipPanelContent","tooltipPanelContentStatus","administrativeState","barringStatus","unlockedCellActions","lockedCellActions","GroupTileComponent","lockAction","unlockAction","optionModel","cells","cell","shouldButtonDisabled","FONT_COLOR","NOKIA_FONT_FAMILY","chartBarOptions","plugins","datalabels","align","anchor","offset","context","dataIndex","backgroundColors","dataset","backgroundColor","font","weight","family","padding","top","left","right","tooltips","position","display","fullWidth","fontFamily","fontColor","animation","maintainAspectRatio","responsive","legend","scales","xAxes","gridLines","tickMarkLength","ticks","beginAtZero","yAxes","ChartBarStatusPanelComponent","cloneDeep","dataSetConfigs","mappedDataSetConfigs","mapDataSetConfigs","dataSetConfig","hoverBackgroundColor","ChartModule","ChartComponent","drawGraph","emitChange","chartDataSets","createDataSets","chartData","labels","datasets","configuration","canvasElement","getContext","chart","updateData","updateLabels","updateDataSetConfig","updateOptions","lazy","source","updateDataSets","dataSet","i","globalCompositeOperation","fillStyle","fillRect","height","toBlob","restore","CheckBoxTableFilterModule","CheckBoxTableRowFilterComponent","column","onFilterChange","CheckboxVerticalListModule","LDAP_BIND_FAILED","VISIBLE_LDAP_BIND_FAILED","CrlInformationTableComponent","totalNumberOfCrlInfo","distributionPointTypeOptions","CrlCertificateSelected","ClearSelection","SetFilters","filters","filtersReceived","crlInformation","crlInfo","latestCrlInformation","filteredCrlInformation","itemsPerPage$","numberPerPage","crlinfoRId","start","currentPageCrlInformation","splice","field","filterOptions","pickBy","filterValue","certificate","distributionPointType","updateFailureReason","isUndefined","onSelectCrlCertificate","DetailDataRowWithActionsMenuComponent","emitAction","actionsMenu","initMenuActions","DetailDataRowComponent","DetailsSectionListComponent","DetailsSectionTextComponent","DetailsSectionComponent","withCssClass","emptyList","FormatTitlePipe","SUPPORTED_FILES","extension","maxSizeKB","DragDropUploadDirective","fileDroppedAction","handleFiles","emitErrorMultipleFiles","handleFile","supported","supportedFile","emitErrorToBig","emitFile","emitErrorEmptySize","emitErrorNotSupported","SIZE_LIMIT","FILE_NOT_SUPPORTED","MULTIPLE_FILES_NOT_ALLOWED","EMPTY_FILE","FILE_TOO_BIG","GetDuClassPipe","du","duClass","f1LinkStatus","DuComponent","isCellSummaryInOneRow","lockDu","unlockDu","showCells","toggleMenu","recalculateStateForDu","isLocked","lockUnlockOption","getLockUnlockOption","duMenuItems","isRedirectionToCellViewAvailable","checkAdministrativeState","getHighestAlarmSeverityPipe","totalNumberOfCellsInGivenDu","getTotalNumberOfCellsInGivenDu","cellsSummary","basicCellsSummary","locked","unlocked","gnbDuId","gnbDuName","FilterInputComponent","placeholder","filterIconModel","FilterInputModule","GoToPeTableButtonModule","InputClearModule","InputClearComponent","onClickEvent","getLegalNoticeMessage","setLegalNoticeMessage","showLegalNoticeModal","openLegalNoticeModal","submitLegalNoticeModal","denyLegalNoticeModal","LineChartComponent","expandButtonModel","collapseButtonModel","expanded","customLegendItems","filteredDataSetConfigs","filteredData","didDataSetConfigsChange","updateChartInfo","filterData","isChartEmpty","saveChartAsPicture","visibleItemsIndices","generateCustomLegendItems","dsc","borderColor","LineChartModule","ModuleInfoBarComponent","InfoBarDirective","NoSelectedMessageComponent","CLASSES","INFO","LOADING","SPIN","isLoading","iconClasses","ResetButtonComponent","resetClick","cuResetStateEnum","resetButtonEnabledModel","enabledButtonTitle","resetButtonOngoingModel","ongoingButtonTitle","SaveButtonComponent","saveClick","saveConfigurationStateEnum","saveButtonEnabledModel","saveButtonDisabledModel","disabledButtonTitle","saveButtonOngoingModel","LockButtonComponent","lockClick","buttonTitle","LockOpenButtonComponent","lockOpenClick","xnLinksLockClicked","xnLinksLockOpenClicked","ngLinksLockClicked","ngLinksLockOpenClicked","networkSlicingLockClicked","networkSlicingLockOpenClicked","OperationsControlPanelComponent","resetCuClicked","saveConfigurationClicked","duLockClicked","duLockOpenClicked","cellsLockClicked","cellsLockOpenClicked","x2LinksLockClicked","x2LinksLockOpenClicked","isXnNgNsOperationsDisplay","CuResetButtonState","SaveConfigurationState","OverlayMenuBarComponent","componentsToHideBeforeOverlayPanel","visibilityChange","isOverlayVisible","overlayVisible","onHide","OverlayMenuBarModule","OverlayPanelMenuBarComponent","isUserAuthenticated","SizeBiggerThanMinSizePipe","marker","curledUpAreaMap","IsCurledUpAreaPipe","PanelSplitAreaComponent","transitionEnd","splitDirection","markers","curledUpAraForGutter","curledUpArea","gutterNum","forId","rightMarker","defaultSize","sizes","curledUpAreaDirective","gutterClick","dragEnd","CurledUpAreaContext","CurledUpAreaDirective","SplitAreaDirectiveContext","SplitAreaDirective","PanelSplitComponent","direction","useTransition","unit","dragStart","DEFAULT_CONFIGURATION","order","PanelToggleDirective","SplitPanelDirective","PanelComponent","loading","noHeaderSplitter","RichPanelComponent","beforeRedirect","redirectButtonModel","link","StopPropagationDirective","ParametersTreeModule","TextFontColor","PM_CHART_CONSTANTS","COLORS","OPTIONS","elements","line","borderWidth","fill","point","radius","titleFontFamily","titleFontColor","titleFontSize","titleMarginBottom","bodyFontColor","bodyFontFamily","bodyFontSize","autoSkip","maxTicksLimit","PmChartComponent","_changeDetectorRef","selectCounterDialogStatus","reattach","pmCounters","sortedPmData","addDataSetConfigForCounter","measurementAbbreviation","counterAbbreviation","computeChartDataForCounter","timestamps","colorToBeUsed","counterValue","lineChart","savePmChartAsPicture","getKeyForCounters","pmCounter","getAllFullPaths","countersUniqueKeys","keyBy","mapValues","getAllUnits","counterUnit","PmTableComponent","scrollableColumns","isTableEmpty","frozenColumns","updateValues","filterCaseSensitive","filterKey","pmTable","cancelAnimationFrame","requestAnimationFrame","modifyTableHeight","tableHeader","concat","tableData","frozenRows","scrollableRows","getScrollableColumns","timestampsSorter","countersTableModels","timestampsObject","getAllCountersValueAtTimestamp","getScrollableRows","pmTableNativeElem","elementToBeModified","elementToBeModifiedHeight","scrollableBody","scrollWidth","offsetWidth","clientWidth","offsetHeight","classHeight","scrollWidthClass","scrollHeightClass","remove","DynamicFlatNode","expandable","isChecked","isIndeterminate","DynamicDatabase","DISTNAME_SEPARATOR","DELIMITER","database","dataMap","rootLevelNodes","getChildren","nodesList","addNode","shortName","getNodeShortName","nodeShortNameType","getNodeShortNameType","isMatchingFilter","isRawNodeMatchingFilter","node","partTypes","getLastTypeWithValueFromFilter","lastValue","parts","lastIndexOf","distnameSeparatorIndex","has","DynamicDataSource","_database","dataChange","BehaviorSubject","collectionViewer","merge","viewChange","nodesAdded","isExpandable","DynamicTreeComponent","selectedCounters","selectionChange","expansionChange","treeLoading$","rawExpandedNodes","checkListSelection","ABBREV_DELIMITER","MAXIMUM_SELECTED_NODES","disabledMessage","getLevel","counterLoadingSubscription","markForCheck","executeWithLoading","setup","dataSource","initializeTree","filterNodes","nodesToSelect","selectNode","applySelection","makeNodesVisibile","collapseAll","expandOrCollapseNode","toggleNodeAndSetState","checkIsSelected","deselectNode","applySelectionToParents","directDescendants","getRawDirectChildren","descendantsPartiallySelected","descendantsAllSelected","deselectParentNodeAndDirectDescendants","changeSelection","numberOfLeafsSelected","selectLeafTypeDescendants","toggleParentTypeDescendants","setStateForNode","isMaxLimitReached","parentsList","parentId","getParentId","uniq","initializeExpandedNodes","notify","n","checkIsExpanded","collapseNode","expandNode","longAction","firstLoading","treeControl","nodeToExpand","nodesToEmit","mapNodeRawToNodeData","nodeParts","measurementParts","counterParts","measurementId","selectedRawCounters","setDatabase","initialData","descendants","filterMap","initialDataExtendedByFilter","filteredMap","includeParents","nodeSiblings","parent","getParentNode","getNodeById","toggleNode","nodeObject","descendents","numberToSelect","leafDescendants","leaf","directDescendentsLeafs","descendant","parentItemSelectionToggle","results","isChildOfNode","FormatNodeNamePipe","isCounter","splitedValues","abbreviationNameValues","lastIndexOfName","UiWebemPmTreeComponent","exportService","pmMeasurements","filterChange","importSelectionToaster","shouldDisableButtons","filterButton","clearAllButton","createButton","filterContent","isFilterEmpty","isSavedFilterActive","isClearAllAction","pmTreeMenuItems","areCountersSelected","onExportCountersSelection","importSelectionInput","updateNodes","setPmTreeMenuItems","setFilterState","treeComponent","counters","getExportFilenameWithExtension","fireToastMessage","importedFile","readFileContent","setCountersSelection","newMeasurements","newNodesMap","rectifySelection","rectifyExpandedState","existingSelectedCounters","filterExistingCounters","existingExpandedNodes","processingFunction","abort","setCountersOnTree","getSelectionLimit","countersFromImportedFile","counterParentId","counterToBeChecked","counterName","DISTNAME_DELIMITER","getNodesData","nodesMap","measurement","parentObjectDN","getIdFromNodesData","abbreviation","parentDistname","newCurrent","currentNodeChildren","currentNodes","addDistnameNodes","counterNodeId","measurementIds","hasSelectChild","selectedCounter","getCounterUniqueId","nodeData","getParentIdFromNodesData","EXPORT_SUCCESS_MESSAGE","EXPORT_FAILURE_MESSAGE","IMPORT_SUCCESS_MESSAGE","IMPORT_WARNING_PARTIALLY_MESSAGE","IMPORT_ERROR_READING_FILE_MESSAGE","IMPORT_ERROR_NO_COMPATIBLE_COUNTERS_MESSAGE","IMPORT_ERROR_NO_COUNTERS_MESSAGE","IMPORT_SUCCESSFUL_MESSAGE","IMPORT_ERROR_WRONG_FILE_TYP_MESSAGE","IMPORT_ERROR_FILE_SYNTAX_CONTENT","IMPORT_ERROR_MULTIPLE_FILES_MESSAGE","IMPORT_ERROR_EMPTY_FILE_MESSAGE","IMPORT_ERROR_FILE_TOO_BIG_MESSAGE","IMPORT_ERROR_FILE_CORRUPTED_MESSAGE","IMPORT_ERROR_ALL_COUNTERS_UNAVAILABLE","IMPORT_ERROR_SOME_COUNTERS_UNAVAILABLE","IMPORT_ERROR_TOO_MANY_COUNTERS","getFilteredPmData","filterValueCaseSensitive","modelValueForKey","checkFilterForFullPath","pmCounterValue","valueToSearch","timestampsToSearch","computeModelValueForKey","checkFilterValue","sortPmCounterValuesByStartTime","counter1","counter2","startTime1","reverse","startTime2","compareStartTimesDescendant","compareStartTimesAscendant","getSortedValuesByTimestamp","getAllTimestamps","countersModel","union","counterModel","applyPrimeTablePatch","containerPadding","onColumnResizeBegin","lastResizerHelperX","pageX","scrollLeft","onColumnResize","resizeHelperViewChild","RaisedAlarmsComponent","alarmSeverityMap","AlarmCounterComponent","navigateToAlarms","NO_ALARMS_PLACEHOLDER","RoutedMenuComponent","clickAction","clickActionSubscription","SessionsTableComponent","SessionSelected","sessions","formatDate","CreationTime","mode","isBoolean","onSessionSelect","ShowPasswordButtonComponent","isPasswordVisible","eyeButton","crossedEyeButton","hidePassword","ShowPasswordButtonModule","SideBarMenuComponent","expandAction","menuSelectionModel","selectedGroupId","selectedItemId","selectedChildId","floatMenuState","groupId","isFloatMenuVisible","thirdfloatMenuState","expandMenuButtonModel","collapseMenuButtonModel","keyboardShortcutsEnabled$","selectionModel","groupItem","itemId","selectedChildrenGroup","expandCollapseMenuButton","childId","hideFloatMenu","thirdItemId","selectMenuItem","expandMenuStateAction","IconTypes","SpinnerComponent","SpinnerModule","StatusBarComponent","StatusBarModule","GetCircleTypePipe","statusIcon","StatusIconComponent","STATUS_ICON_TYPE","NO_DATA_TEXT","P_STEPS_ITEM","UI_STATE_COMPLETE","StepperComponent","resetCompletedSteps","addClassesToCompletedSteps","steps","completedSteps","contains","NavigationSubmenuDirective","tabRouterLinks","menuItemsMap","chain","SubmenuComponent","menuItems","selectCurrentItem","clearPreviousSelected","currentItem","TablePaginationComponent","firstPageNumber","PageChange","currentPage","totalNumberOfPages","totalNumberOfItems","ceil","controls","goToFirstPage","setValue","goToLastPage","setCurrentPage","changedPage","TablePaginationModule","FilterInvisibleColumnsPipe","columns","visibleParameters","parameterGroup","TableViewComponent","cdr","elementRef","minBuffer","pSelectableRowDisabled","virtual","supportNoDataShow","scrollable","virtualScroll","noDataMessage","selectedChange","itemsSlice","rowTrackBy","dataKey","_selectedItem","observer","tableScrollHeight","newHeight","calculateScrollHeight","observe","unobserve","pTableBodyHeight","rowsHeight","rowsHeightWithScrollbar","virtualScrollElement","getElementsByTagName","selected","ToggleTooltipByChildTooltipDirective","hideTooltip","showTooltip","TileTooltipComponent","generateTooltip","tooltipRef","active","toggleParentTooltipDirectives","toggleTooltipByChildTooltipDirectives","tooltipContent","tooltipTileState","tooltipText","getTooltipRowHtml","tooltipTitleHeader","tooltipTitleValue","mapContentArrayToString","contentArray","formatTooltipRowData","str","onEnterGenerateTooltip","onLeaveHideTooltip","ToggleParentTooltipDirective","TileTooltipModule","TrackCapsLockDirective","capsLock","capsLockKeyCode","TrackCapsLockModule","InformationChangeStatusTypes","ValidationRules","FormParameters","UserInformationChangeOptions","FIELDS_DESCRIPTION","UserInformationChangeComponent","isRoleDropdownShow","isActivationStatusShow","isUserNameShow","isCurrentPasswordShow","validationChange","informationChange","clearInformationResponse","changeOptionSelectionChange","roleNameChange","activationStatusChange","isOptionSelected","submitButtonLabel","SUBMIT","isGeoresiliencyUser","buttonModelInProgress","isConfigVmCu","selectToChangeOptions","changeOptions","updateAccountForm","isServiceAccountOption","usernameValidationOptions","control","passwordValidationOptionsSubscription","passwordValidationOptions$","passwordValidationOptions","setValidatorsForPassword","valueChange$","emitValidationStatus","formInputs","setGeoresiliencyUser","newPassword","confirmPassword","share","isPasswordMatchError$","doesPasswordMatch","canChangeInformation$","isFormValid","initFormFields","changeStatus","updateDisabledFields","roleName","selectRoleName","isOperationInProgress","currentRoleActivationStatus","isActivationStatusChange","activationStatus","selectActivationStatus","newUsername","capsLockState","currentPasswordCapsLockOn","newPasswordCapsLockOn","confirmPasswordCapsLockOn","newRoles","availableRoles","itemRoleName","activeStatus","availableActivationStatus","selectedOption","disabledFields","DISABLED","setValidators","updateValueAndValidity","formErrors","errors","validationStatus","usernameOptions","passwordOptions","currentPassword","isUsernameValid","isPasswordValid","newPasswordErrors","isNull","judgeStatusForSave","isPasswordAndUserNameFormValid","isPasswordOnlyFormValid","isUserNameOnlyFormValid","isPasswordServiceFormValid","isPasswordExpirationFormValid","valid","isCurrentPasswordValid","showCurrentPassword","showNewPassword","showConfirmPassword","usersList","UserType","onSubmit","setAllCapsLockStates","setNewPasswordCapsLockState","setNewPasswordVisible","setConfirmPasswordCapsLockState","setConfirmPasswordVisible","SPECIAL_USERNAME_ALLOWCHARACTERS","SPECIAL_PASSWORD_ALLOWCHARACTERS","hasSmallerLengthThanMax","hasBiggerLengthThanMin","hasTwoSameConsecutiveChar","hasMinimumDigitNumbers","digitNumberExpression","hasUpperAndLowerCase","hasUpperCase","hasLowerCase","isInWhiteList","specialAllowCharacters","char","charCodeAt","isFromAtoZ","isFromatoz","isFrom0to9","isSpecialAllowCharacters","hasDisallowedSpecialAsciiChar","hasDisallowedUserNameAsciiChar","hasDisallowedPasswordAsciiChar","hasMinNonAlphanumericChar","minNonAlphaNumericChar","isPasswordNotSameAsUserName","reversedUsername","isUserNameNotIncludedInPassword","judgeForActionStatusChangeOrNot","judgeForCurrentPassword","isSecurityAccount","judgeForUsernameAndCurrentPassword","UserInformationValidator","currentUsername","usernameToCheck","minNumberOfDigit","startCountingSessionTime","startCountingSeconds","sessionTokenExpired","stopCountingSeconds","setRemainingTime","setRemainingSeconds","sessionTokenTimeFeatureKey","selectSessionTime","selectRemainingTime","selectRemainingSeconds","RenewSessionDialogComponent","MILI_SECONDS_IN_HOUR","NotificationComponent","sinceOccurred","openDate","difference","NotificationPanelComponent","UserMenuOverlayComponent","buttonClasses","SessionTimeComponent","countMinutes","remainingMinutes","badgeStyle","countSeconds","UserMenuComponent","userAccountManagementClick","settingsClick","helpClick","logOutClick","createButtonModel","userName","refreshButtonModel","getRoleAndReadOnlyMode","openRenewPasswordDialog","onHelpClick","onLogOutClick","InputValueType","MessageDisplay","FormValidationMessageComponent","displayOption","SHOW_MESSAGE","HIDE_MESSAGE_SHOW_PADDING","HIDE_MESSAGE_AND_GROUP","HIDE_MESSAGE_AND_PADDING","VerticalHtmlLineComponent","VerticalLabeledInputModule","OverlayPanelComponent","dismissable","showCloseIcon","appendTo","showTransitionOptions","hideTransitionOptions","hideEvent","OverlayActionTypes","openDialog","OpenDialog","closeOutdatedDeltaPlanDialog","CloseDialog","closeDialogsByName","CloseDialogsByName","closeAllDialogs","showMessage","ShowMessage","confirmDialog","ConfirmDialog","WebemMessageDialogSeverity","DynamicMessageDialogComponent","WebemOverlayService","dialogService","confirmationService","DIALOG_DEFAULTS","contentStyle","margin","newConfig","MESSAGE_DIALOG_DEFAULTS","dismissableMask","confirmation","confirmationModel","confirm","dialogComponentRefMap","componentRef","dynamicDialogRef","instance","childComponentType","OverlayEffects","overlayService","openDialog$","closeDialogsByName$","closeAllDialogs$","showMessage$","confirmDialog$","WebemOverlayModule","getVnfcHeader","res","vnfcTypeSessionKey","VnfcType","filterMenuForVmcu","VnfcSharedService","vnfcTypeValue","vCu","vDu","vmCu","removeFromVcuArray","removeFromVmcuArray","webpackContext","webpackContextResolve","__webpack_require__"],"mappings":"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","file":"main.27970fb918efb5a76620.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 72633;\nmodule.exports = webpackEmptyAsyncContext;","import { ShortcutPath } from '../models/shortcut-path';\r\n\r\nexport class KeyboardShortcutsConfig {\r\n    SHORTCUTS_PATHS: ShortcutPath;\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { KEYBOARD_SHORTCUTS, reducer } from './core/reducers/keyboard-shortcuts.reducer';\r\nimport { KeyboardShortcutsConfig } from './core/services/keyboard-shortcuts-config';\r\n\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    imports: [\r\n        StoreModule.forFeature(KEYBOARD_SHORTCUTS, reducer)\r\n    ],\r\n    exports: []\r\n})\r\nexport class KeyboardShortcutsModule {\r\n    static forRoot(config: KeyboardShortcutsConfig): ModuleWithProviders<KeyboardShortcutsModule> {\r\n        return {\r\n            ngModule: KeyboardShortcutsModule,\r\n            providers: [\r\n                {\r\n                    provide: KeyboardShortcutsConfig,\r\n                    useValue: config,\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { WebemRoutesPaths } from '@oam/cu-shared';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { areKeyboardShortcutsEnabled } from '../selectors/keyboard-shortcuts.selectors';\r\nimport { DateTime } from '@oam/core';\r\nimport { redirect } from '@oam/core/lib/actions/router.actions';\r\nimport { size } from 'lodash';\r\nimport { KeyboardShortcutsConfig } from '../services/keyboard-shortcuts-config';\r\nimport { KeyboardShortcutsModule } from '../../keyboard-shortcuts.module';\r\nimport { ShortcutPath } from '../models/shortcut-path';\r\n\r\n\r\n@Injectable({\r\n    providedIn: KeyboardShortcutsModule,\r\n})\r\nexport class KeyboardShortcutsService {\r\n    private static readonly DELAY: number = 1000;\r\n    private buffer: string;\r\n    private lastKeyPressTime: number;\r\n    keyboardShortcutsState$: Observable<any>;\r\n    keyboardShortcutsSubscription: Subscription;\r\n    shortcutsEnabled: boolean;\r\n    fullPathsList: ShortcutPath;\r\n\r\n    constructor(@Inject(DOCUMENT) private readonly document: Document,\r\n                private readonly router: Router,\r\n                private readonly store: Store,\r\n                private readonly activatedRoute: ActivatedRoute,\r\n                private readonly config: KeyboardShortcutsConfig) {\r\n        this.fullPathsList = this.config.SHORTCUTS_PATHS;\r\n        this.buffer = '';\r\n        this.lastKeyPressTime = new DateTime().getTime();\r\n    }\r\n\r\n    turnOn(): void {\r\n        this.document.body.addEventListener('keyup', this.onKeyUp.bind(this));\r\n\r\n        this.keyboardShortcutsState$ = this.store.pipe(\r\n            select(areKeyboardShortcutsEnabled)\r\n        );\r\n\r\n        this.keyboardShortcutsSubscription = this.keyboardShortcutsState$\r\n            .subscribe((keyboardShortcutsState) => {\r\n                this.shortcutsEnabled = keyboardShortcutsState;\r\n            });\r\n    }\r\n\r\n    turnOff(): void {\r\n        this.keyboardShortcutsSubscription.unsubscribe();\r\n        this.document.body.removeEventListener('keyup', this.onKeyUp.bind(this), true);\r\n    }\r\n\r\n    onKeyUp(event: KeyboardEvent): void {\r\n        if (!this.shortcutsEnabled\r\n            || this.isFocusedInTextField(event)\r\n            || this.isModalOverlayPanelOrDropdownOpen(this.document)\r\n            || this.isOnLoginPage()) return;\r\n\r\n        const currentTime: number = event.timeStamp;\r\n        if (currentTime - this.lastKeyPressTime > KeyboardShortcutsService.DELAY) this.buffer = '';\r\n        this.buffer += event.key.toLocaleUpperCase();\r\n        this.lastKeyPressTime = currentTime;\r\n        if (this.buffer.length > 2) this.buffer = this.buffer.substring(1);\r\n\r\n        const path: string = this.fullPathsList[this.buffer];\r\n\r\n        if (path) {\r\n            this.buffer = '';\r\n            this.changePath(path);\r\n        }\r\n    }\r\n\r\n    private changePath(path: string): void {\r\n        this.store.dispatch(redirect({ routerLink: path, activatedRoute: this.activatedRoute}));\r\n    }\r\n\r\n    private isFocusedInTextField(event: any): boolean | undefined {\r\n        if (!event) return;\r\n\r\n        return this.isTextInput(event) ||\r\n            event.target.nodeName === 'TEXTAREA' ||\r\n            event.target.isContentEditable;\r\n    }\r\n\r\n    private isTextInput(event: any): boolean {\r\n        return event.target.nodeName === 'INPUT' &&\r\n            event.target.getAttribute('type') !== 'button' &&\r\n            event.target.getAttribute('type') !== 'radio' &&\r\n            event.target.getAttribute('type') !== 'checkbox';\r\n    }\r\n\r\n    private isModalOverlayPanelOrDropdownOpen(document: Document): boolean {\r\n        return size(document.querySelectorAll('.p-dialog, .p-overlaypanel, .p-dropdown-panel')) > 0;\r\n    }\r\n\r\n    private isOnLoginPage(): boolean {\r\n       return this.router.url === '/' + WebemRoutesPaths.login;\r\n    }\r\n}\r\n","import { NGXLoggerMonitor, NGXLogInterface } from 'ngx-logger';\r\nimport { ConsoleLogsDatabaseService } from '@oam/core';\r\n\r\nexport class ConsoleLoggerMonitor implements NGXLoggerMonitor {\r\n    constructor(private readonly logsDatabase: ConsoleLogsDatabaseService) {\r\n\r\n    }\r\n\r\n    async onLog(log: NGXLogInterface) {\r\n        await this.logsDatabase.addLog(log);\r\n    }\r\n}\r\n","<div class=\"app\">\r\n    <div class=\"layout-container\">\r\n        <router-outlet></router-outlet>\r\n    </div>\r\n</div>\r\n<ng-container *ngIf=\"loadingRouteConfig\">\r\n    <p-blockUI [blocked]=\"true\" [autoZIndex]=\"true\">\r\n        <ui-webem-spinner class=\"lazy-loading-spinner\"></ui-webem-spinner>\r\n    </p-blockUI>\r\n</ng-container>\r\n","import { Component, HostListener, OnDestroy, OnInit } from '@angular/core';\r\nimport { NGXLogger } from 'ngx-logger';\r\nimport { updateUserInformation } from '@oam/core/lib/actions/user.actions';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { ConsoleLogsDatabaseService } from '@oam/core/lib/services/console-logs-database.service';\r\nimport { UserInformation } from '@oam/core/lib/store/user-state';\r\nimport { RouteConfigLoadEnd, RouteConfigLoadStart, Router } from '@angular/router';\r\nimport { get } from 'lodash';\r\nimport { WebemRoutesPaths } from '@oam/cu-shared';\r\nimport { KeyboardShortcutsService } from '@oam/keyboard-shortcuts/lib/core/services/keyboard-shortcuts.service';\r\nimport { gitVersion } from '../environments/git-version';\r\nimport { ConsoleLoggerMonitor } from '@oam/core/lib/utils/console-logger-monitor';\r\nimport { logout } from '@oam/auth/lib/auth/core/actions/logout.actions';\r\nimport { VnfcSharedService, vnfcTypeSessionKey } from '@oam/vnfc-shared/lib/vnfc-store/services/vnfc-shared.service';\r\nimport { FeatureFlag } from '@oam/feature-flag';\r\nimport { selectRoleAndReadOnlyMode } from '@oam/core/lib/user/core/reducers/user-reducer';\r\nimport { RoleAccessService } from '@oam/role-access-core';\r\n\r\n@Component({\r\n    selector: 'webem-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnDestroy, OnInit {\r\n    loadingRouteConfig = false;\r\n\r\n    constructor(private readonly logger: NGXLogger,\r\n                private readonly store: Store,\r\n                private readonly logsDatabase: ConsoleLogsDatabaseService,\r\n                private readonly router: Router,\r\n                private readonly vnfcSharedService: VnfcSharedService,\r\n                private featureFlag: FeatureFlag,\r\n                private readonly roleAccessService: RoleAccessService,\r\n                private readonly keyboardShortcuts: KeyboardShortcutsService) {\r\n        this.logger.registerMonitor(new ConsoleLoggerMonitor(logsDatabase));\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    async onBeforeUnloadHandler(event: BeforeUnloadEvent) {\r\n        event.preventDefault();\r\n\r\n        await this.store.dispatch(logout());\r\n        (event || window.event).returnValue = '';\r\n\r\n        return '';\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.keyboardShortcuts.turnOff();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.logger.info('feature flags', this.featureFlag['flags']);\r\n        this.keyboardShortcuts.turnOn();\r\n        this.logger.trace('Application start');\r\n        this.logger.trace(`Application info: CU version: ${gitVersion.branch}@${gitVersion.commitLong}`);\r\n        const userInfoFomSession = sessionStorage.getItem('userInfo');\r\n        if (userInfoFomSession) {\r\n            const userInfo: UserInformation = JSON.parse(userInfoFomSession);\r\n            this.store.dispatch(updateUserInformation({ payload: userInfo }));\r\n        }\r\n        const vnfcType = sessionStorage.getItem(vnfcTypeSessionKey);\r\n        if (vnfcType) this.vnfcSharedService.setVnfcType(vnfcType);\r\n\r\n        this.router.events.subscribe(event => {\r\n            const path = get(event, 'route.path');\r\n            if (!path || path === WebemRoutesPaths.dashboard) return;\r\n            if (event instanceof RouteConfigLoadStart) {\r\n                this.loadingRouteConfig = true;\r\n            } else if (event instanceof RouteConfigLoadEnd) {\r\n                this.loadingRouteConfig = false;\r\n            }\r\n        });\r\n\r\n        this.store.pipe(select(selectRoleAndReadOnlyMode))\r\n            .subscribe(({role, readOnlyMode}) => {\r\n                this.roleAccessService.setRoleAndReadOnlyMode({\r\n                    currentRole: role,\r\n                    readOnlyMode: readOnlyMode\r\n                });\r\n            });\r\n    }\r\n}\r\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\r\nimport { WebemStore } from '@oam/webem/app/core/store/webem-store';\r\nimport { localStorageSyncReducer } from '@oam/webem/app/core/reducers/local-storage-sync.reducer';\r\n\r\nexport const reducers: ActionReducerMap<WebemStore> = {};\r\n\r\nexport const metaReducers: MetaReducer<WebemStore>[] = [localStorageSyncReducer];\r\n","import { ActionReducer } from '@ngrx/store';\r\nimport { MAIN_MENU_KEY } from '@oam/navigation/lib/navigation/core/reducers/main-menu.reducer';\r\nimport { storageSync } from '@larscom/ngrx-store-storagesync';\r\nimport { KEYBOARD_SHORTCUTS } from '@oam/keyboard-shortcuts/lib/core/reducers/keyboard-shortcuts.reducer';\r\nimport { DETAILS_PANEL } from '@oam/details-panel/lib/core/reducers/detail-panel.reducer';\r\n\r\n\r\nexport function localStorageSyncReducer(reducer: ActionReducer<any>): ActionReducer<any> {\r\n    return storageSync<any>({\r\n        features: [\r\n            { stateKey: MAIN_MENU_KEY },\r\n            { stateKey: DETAILS_PANEL },\r\n            { stateKey: KEYBOARD_SHORTCUTS }\r\n        ],\r\n        storage: window.localStorage\r\n    })(reducer);\r\n}\r\n","import { AppTypes, Environment } from '@oam/core/lib/environment-variables/core/models';\r\n\r\nexport const environment: Environment = {\r\n    production: true,\r\n    enablePayloadInLogs: false,\r\n    version: 'dev',\r\n    instrumentation: [],\r\n    appMetadata: {\r\n        type: AppTypes.CU\r\n    }\r\n};\r\n","import { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Injectable } from '@angular/core';\r\nimport { NavigationExtras, Router } from '@angular/router';\r\nimport { map } from 'rxjs/operators';\r\nimport { forceRedirect, redirect } from '@oam/core/lib/actions/router.actions';\r\nimport { SplitViewRestrictionsService } from '@oam/split-view/lib/core/services/split-view-restrictions.service';\r\nimport { getSplitViewOutlets } from '../functions/get-outlets-from-router-link';\r\n\r\n\r\n@Injectable()\r\nexport class RouterEffects {\r\n\r\n    redirect$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(redirect),\r\n            map((action) => {\r\n                const navigationExtras: NavigationExtras = {};\r\n                if (action.data) {\r\n                    navigationExtras['state'] = {\r\n                        data: action.data\r\n                    };\r\n                }\r\n\r\n                const rootPath = '/';\r\n                navigationExtras['queryParams'] = action.redirectUrl && action.redirectUrl !== rootPath ?\r\n                    { redirectUrl: action.redirectUrl } : null;\r\n                const splitViewActiveRoute = action.activatedRoute.pathFromRoot.find(route => route.outlet === 'topView' || route.outlet === 'bottomView');\r\n                const isSplitViewEnabled = !!splitViewActiveRoute;\r\n                const curUrlTree = this.router.parseUrl(this.router.url);\r\n                const topViewUrl = curUrlTree?.root?.children?.primary?.children['topView']?.segments\r\n                    .map((outlet) => outlet.path).join('/');\r\n                const bottomViewUrl = curUrlTree?.root?.children?.primary?.children['bottomView']?.segments\r\n                    .map((outlet) => outlet.path).join('/');\r\n                const redirectUrl = action.routerLink.split('/').filter(url => !!url);\r\n                const isRedirectToSplitView = redirectUrl[0] === 'split-view' && redirectUrl.length > 1;\r\n                if (isSplitViewEnabled && this.splitViewRestrictionsService.notInSplitViews(redirectUrl)){\r\n                    return this.router.navigate([action.routerLink], navigationExtras);\r\n                }\r\n                if (isSplitViewEnabled && splitViewActiveRoute?.outlet === 'topView') {\r\n                    if (this.splitViewRestrictionsService.isSplitBottomView(redirectUrl.join('/'))) {\r\n                        return this.router.navigate(\r\n                            ['split-view', getRouteToken(),{\r\n                                outlets: {\r\n                                    ['bottomView']: redirectUrl,\r\n                                    ['topView']: topViewUrl\r\n                                }\r\n                            }],\r\n                            navigationExtras\r\n                        );\r\n                    } else if (bottomViewUrl) {\r\n                        return this.router.navigate(\r\n                            ['split-view', {\r\n                                outlets: {\r\n                                    ['bottomView']: bottomViewUrl,\r\n                                    ['topView']: redirectUrl\r\n                                }\r\n                            }],\r\n                            navigationExtras\r\n                        );\r\n                    } else {\r\n                        return this.router.navigate(\r\n                            ['split-view', {\r\n                                outlets: {\r\n                                    [splitViewActiveRoute.outlet]: redirectUrl\r\n                                }\r\n                            }],\r\n                            navigationExtras\r\n                        );\r\n                    }\r\n                } else if (!isSplitViewEnabled && isRedirectToSplitView) {\r\n                    const outlets = getSplitViewOutlets(action.routerLink);\r\n\r\n                    return this.router.navigate(\r\n                        ['split-view', outlets]\r\n                    );\r\n                } else if (!isSplitViewEnabled) {\r\n                    return this.router.navigate([action.routerLink], navigationExtras);\r\n                }\r\n            })\r\n        ), { dispatch: false }\r\n    );\r\n\r\n    forceRedirect$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(forceRedirect),\r\n            map((action) => {\r\n                const rootPath = '/';\r\n\r\n                return this.router.navigate([action.routerLink], {\r\n                    queryParams: action.redirectUrl && action.redirectUrl !== rootPath ? { redirectUrl: action.redirectUrl } : null\r\n                });\r\n            })\r\n        ), { dispatch: false }\r\n    );\r\n\r\n    constructor(private readonly actions$: Actions, private readonly router: Router,\r\n                private readonly splitViewRestrictionsService: SplitViewRestrictionsService) {\r\n    }\r\n}\r\n\r\nfunction getRouteToken() {\r\n  return { routeToken: Math.random() };\r\n}\r\n","import { SPLIT_VIEW_LOCATION } from '@oam/split-view';\r\n\r\nexport function getSplitViewOutlets(routerLink: string): SplitViewLocationOutlets {\r\n    const routerOutlets: SplitViewLocationOutlets = {\r\n        outlets : {}\r\n    };\r\n    routerLink\r\n        .slice(0, -1)\r\n        .split('//')\r\n        .forEach(partOfRouter => {\r\n        const outlet = partOfRouter.split(':')[1];\r\n        const outletLocation = partOfRouter.includes(SPLIT_VIEW_LOCATION.TOP);\r\n\r\n        if (outletLocation) {\r\n            routerOutlets.outlets[SPLIT_VIEW_LOCATION.TOP] = outlet;\r\n        } else {\r\n            routerOutlets.outlets[SPLIT_VIEW_LOCATION.BOTTOM] = outlet;\r\n        }\r\n    });\r\n\r\n    return routerOutlets;\r\n}\r\n\r\ninterface SplitViewLocationOutlets {\r\n    outlets: {\r\n        topView?: string,\r\n        bottomView?: string\r\n    }\r\n}\r\n","import { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Injectable } from '@angular/core';\r\nimport { take, map, mergeMap, mapTo, withLatestFrom, tap, filter } from 'rxjs/operators';\r\nimport { EMPTY } from 'rxjs';\r\nimport { isEmpty } from 'lodash';\r\n\r\nimport {\r\n    addNotification,\r\n    removeNotification,\r\n    removeNotificationFromStore,\r\n    addSimpleNotification,\r\n    removeAllNotifications,\r\n    addNotificationToHistory\r\n} from '../actions/toast-message.actions';\r\n\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { selectToastIds } from '../selectors/toast-message.selectors';\r\nimport { ToastIdTypes } from '@oam/core/lib/models/toast';\r\nimport { DateTime } from '../classes/date-time';\r\nimport { isUserAuthenticated } from '@oam/cu-ui/lib/page-not-found/core/functions/page-not-found.utils';\r\n\r\n@Injectable()\r\nexport class ToastMessageEffects {\r\n    constructor(private readonly actions$: Actions, private readonly toastr: ToastrService, private readonly store: Store) {\r\n    }\r\n\r\n    addNotification$ = createEffect(() => this.actions$.pipe(\r\n        ofType(addNotification),\r\n        filter(() => isUserAuthenticated()),\r\n        map(({ payload: { severity, detail, summary } }) => {\r\n            return addSimpleNotification({ payload: { severity, detail, summary } });\r\n        })\r\n    ));\r\n\r\n    addNotificationToStore$ = createEffect(() => this.actions$.pipe(\r\n        ofType(addNotification),\r\n        map(({ payload: { severity, detail, summary } }) => {\r\n            return addNotificationToHistory({ notification: {severity, detail, summary, date: new DateTime()} });\r\n        })\r\n    ));\r\n\r\n    addSimpleNotification$ = createEffect(() => this.actions$.pipe(\r\n        ofType(addSimpleNotification),\r\n        tap(({ payload: { severity, detail, summary } }) => {\r\n            this.toastr[severity](detail, summary, {enableHtml: true});\r\n        })\r\n    ), { dispatch: false });\r\n\r\n    removeNotification$ = createEffect(() => this.actions$.pipe(\r\n        ofType(removeNotification),\r\n        withLatestFrom(\r\n            this.store.select(selectToastIds)\r\n        ),\r\n        map(([{ payload }, toastIds]) => {\r\n            this.toastr.clear(toastIds[payload]);\r\n\r\n            return removeNotificationFromStore({ payload });\r\n        })\r\n    ));\r\n\r\n    removeAllNotifications$ = createEffect(() => this.actions$.pipe(\r\n        ofType(removeAllNotifications),\r\n        withLatestFrom(\r\n            this.store.select(selectToastIds)\r\n        ),\r\n        mergeMap(([, toastIdsFromStore]) => {\r\n            const toastIds: number[] = this.toastr.toasts.map((toastInstance) => toastInstance.toastId);\r\n            toastIds.forEach(toastId => {\r\n                this.toastr.clear(toastId);\r\n            });\r\n\r\n            const toastIdsKeysFromStore = Object.keys(toastIdsFromStore) as [ToastIdTypes];\r\n\r\n            if (!isEmpty(toastIdsKeysFromStore)) {\r\n                const toBeDispatched: ReturnType<typeof removeNotificationFromStore>[] = [];\r\n\r\n                toastIdsKeysFromStore.forEach((toastKey) => {\r\n\r\n                    toBeDispatched.push(removeNotificationFromStore({\r\n                        payload: toastKey\r\n                    }));\r\n                });\r\n\r\n                return toBeDispatched;\r\n            }\r\n\r\n            return EMPTY;\r\n        })\r\n    ));\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { NGXLogger } from 'ngx-logger';\r\n\r\nconst httpOptionsPDF = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/pdf'}),\r\n    responseType: 'blob' as 'json'\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HelpService {\r\n\r\n    constructor(\r\n        private readonly http: HttpClient,\r\n        private readonly logger: NGXLogger\r\n    ) { }\r\n\r\n    downloadHelp(fileURL: string, httpOptions = httpOptionsPDF): Observable<Blob> {\r\n        this.logger.trace('[HelpService] downloadHelp() started');\r\n\r\n        return this.http.get<Blob>(fileURL, httpOptions);\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { HelpService } from '@oam/core/lib/services/help.service';\r\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\r\nimport { NGXLogger } from 'ngx-logger';\r\nimport { DownloadHelp, DownloadHelpError, DownloadHelpSuccess, HelpSaveError, HelpActionTypes } from '@oam/core/lib/actions/help.actions';\r\nimport { defer, Observable, of } from 'rxjs';\r\nimport { FileSaverService } from 'ngx-filesaver';\r\nimport { addNotification } from '@oam/core/lib/actions/toast-message.actions';\r\n\r\n@Injectable()\r\nexport class HelpEffects {\r\n\r\n    constructor(\r\n        private readonly actions$: Actions,\r\n        private readonly helpService: HelpService,\r\n        private readonly logger: NGXLogger,\r\n        private readonly fileSaver: FileSaverService\r\n    ) {}\r\n\r\n    getHelp$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(HelpActionTypes.GetHelp),\r\n            tap(() => this.logger.trace('[HelpEffect] Action getHelp recognized')),\r\n            map(({ payload: { filePath, fileName } }) => new DownloadHelp({ filePath, fileName })),\r\n        ),\r\n    );\r\n\r\n    downloadHelp$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(HelpActionTypes.DownloadHelp),\r\n            mergeMap(({ payload: { filePath, fileName }}) => this.helpService.downloadHelp(filePath).pipe(\r\n                map((blob: Blob) => new DownloadHelpSuccess({ blob, fileName })),\r\n                catchError((error: any) => of(new DownloadHelpError({ error })))\r\n            ))\r\n        )\r\n    );\r\n\r\n    downloadHelpSuccess$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(HelpActionTypes.DownloadHelpSuccess),\r\n            tap(() => this.logger.trace('[HelpEffect] Download help successful. Saving file...')),\r\n            mergeMap(({ payload: { blob, fileName }}: DownloadHelpSuccess) =>\r\n                defer<void>(() => this.saveFile$(blob, fileName)).pipe(\r\n                    tap(() => this.logger.trace('[HelpEffect] Save help successful')),\r\n                    catchError((error: Error) => of(new HelpSaveError({ error })))\r\n                )\r\n            )\r\n        ),\r\n    { dispatch: false }\r\n    );\r\n\r\n    saveHelpErrors$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(HelpActionTypes.HelpSaveError),\r\n            tap(({ payload }: HelpSaveError) =>\r\n                this.logger.trace(`[HelpEffect] Help saving error: ${payload.error.message}`)),\r\n            map(({ payload }: HelpSaveError) =>\r\n                addNotification({payload: {\r\n                    detail: `Error in saving help file: ${payload.error.message}`,\r\n                    severity: 'error',\r\n                    summary: 'Help file save error'\r\n                }})\r\n            )\r\n        )\r\n    );\r\n\r\n    downloadHelpErrors$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(HelpActionTypes.DownloadHelpError),\r\n            tap(({ payload }: DownloadHelpError) =>\r\n                this.logger.trace(`[HelpEffect] Help downloading error: ${payload.error.message}`)),\r\n            map(({ payload }: DownloadHelpError) =>\r\n                addNotification({payload: {\r\n                    detail: `Error in downloading help file: ${payload.error.message}`,\r\n                    severity: 'error',\r\n                    summary: 'Help file download error'\r\n                }})\r\n            )\r\n        )\r\n    );\r\n\r\n    saveFile$(blob: Blob, fileName: string): Observable<void> {\r\n        this.fileSaver.save(blob, fileName);\r\n\r\n        return new Observable<void>(\r\n            subscriber => subscriber.next()\r\n        );\r\n    }\r\n}\r\n","import { Actions, createEffect } from '@ngrx/effects';\r\nimport { NGXLogger } from 'ngx-logger';\r\nimport { filter, tap } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Environment } from '@oam/core/lib/environment-variables/core/models';\r\n\r\n@Injectable()\r\nexport class LogForActionsEffects {\r\n    constructor(\r\n        private readonly actions$: Actions,\r\n        private readonly logger: NGXLogger,\r\n        private readonly environment: Environment\r\n    ) { }\r\n\r\n    logForActions$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            filter((action) => {\r\n                return action.type.indexOf('[User]') !== -1;\r\n            }),\r\n            tap((action) => {\r\n                try {\r\n                    this.logger.log(`[ActionLogger] ${JSON.stringify(this.environment.enablePayloadInLogs ?\r\n                        action : { type: action.type })}`);\r\n                } catch (err) {\r\n                    this.logger.log(`[ActionLogger] ${JSON.stringify({ type: action.type })}`);\r\n                }\r\n            })\r\n        ), { dispatch: false }\r\n    );\r\n}\r\n","import { RootStoreConfig } from '@ngrx/store/src/store_module';\r\nimport { WebemStore } from '@oam/webem/app/core/store/webem-store';\r\nimport { Environment } from '@oam/core/lib/environment-variables/core/models';\r\n\r\nconst runtimeCheckConfiguration: RootStoreConfig<WebemStore> = {\r\n    runtimeChecks: {\r\n        strictStateImmutability: true,\r\n        // must be changed temporary to false due to issues:\r\n        // - https://github.com/ngrx/platform/issues/2109\r\n        // - https://github.com/ngrx/platform/issues/2404\r\n        strictActionImmutability: false,\r\n        strictStateSerializability: true,\r\n        strictActionSerializability: false\r\n    }\r\n};\r\n\r\nexport const getRuntimeChecksConfiguration =\r\n    (environment: Environment): RootStoreConfig<WebemStore> => (!environment.production ? runtimeCheckConfiguration : {});\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, CanLoad } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { forceRedirect } from '@oam/core/lib/actions/router.actions';\r\nimport { clearTokens, removeUser } from '@oam/core/lib/actions/user.actions';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { setLoginInitialValues } from '@oam/auth/lib/auth/core/actions/login.actions';\r\nimport { TokenType } from '@oam/core/lib/store/user-state';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthGuardService implements CanActivate, CanLoad {\r\n    constructor(private readonly store: Store) {}\r\n\r\n    private isAuthenticated(): boolean {\r\n        const bearerToken = sessionStorage.getItem(`${TokenType.BEARER}`);\r\n\r\n        return !!bearerToken;\r\n    }\r\n\r\n    private handlePageLoad(): boolean {\r\n        const authenticated = this.isAuthenticated();\r\n\r\n        if (!authenticated) {\r\n            this.store.dispatch(clearTokens());\r\n            this.store.dispatch(removeUser());\r\n            this.store.dispatch(setLoginInitialValues());\r\n            this.store.dispatch(forceRedirect({routerLink: RouterLink.login, redirectUrl: location.pathname}));\r\n        }\r\n\r\n        return authenticated;\r\n    }\r\n\r\n    canActivate(): boolean {\r\n        return this.handlePageLoad();\r\n    }\r\n\r\n    canLoad(): boolean {\r\n        return this.handlePageLoad();\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'webem-single-column-layout',\r\n    templateUrl: './single-column-layout.component.html',\r\n    styleUrls: ['./single-column-layout.component.scss']\r\n})\r\nexport class SingleColumnLayoutComponent implements OnInit {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n","<webem-page-layout class=\"content\">\r\n    <router-outlet name=\"content_center\"></router-outlet>\r\n</webem-page-layout>\r\n\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'webem-single-column-layout-with-actions-bar',\r\n    templateUrl: './single-column-layout-with-actions-bar.component.html',\r\n    styleUrls: ['./single-column-layout-with-actions-bar.component.scss']\r\n})\r\nexport class SingleColumnLayoutWithActionsBarComponent { }\r\n","<webem-page-layout class=\"content\">\r\n    <router-outlet #contentActionBarOutlet name=\"content_actions_bar\"></router-outlet>\r\n    <router-outlet #contentCenterOutlet name=\"content_center\"></router-outlet>\r\n</webem-page-layout>\r\n\r\n","import {\r\n    RoutedMenuItem,\r\n    ButtonTheme,\r\n    ButtonLength\r\n} from '@oam/cu-ui';\r\nimport { PageName } from '@oam/navigation/lib/navigation/core/models/page-name';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\n\r\nexport const quickMenuItems: RoutedMenuItem[] = [\r\n    {\r\n        icon: 'mdi mdi-view-quilt',\r\n        title: PageName.dashboard,\r\n        routerLink: RouterLink.dashboard,\r\n        theme: ButtonTheme.Secondary,\r\n        length: ButtonLength.Long\r\n    },\r\n    {\r\n        icon: 'mdi mdi-hexagon-multiple-outline',\r\n        title: PageName.cellsStatus,\r\n        routerLink: RouterLink.cellsStatus,\r\n        theme: ButtonTheme.Secondary,\r\n        length: ButtonLength.Long\r\n    },\r\n    {\r\n        icon: 'mdi mdi-pencil',\r\n        title: PageName.parameterEditor,\r\n        routerLink: RouterLink.parameterEditor,\r\n        theme: ButtonTheme.Secondary,\r\n        length: ButtonLength.Long\r\n    },\r\n    {\r\n        icon: 'mdi mdi-chart-bar',\r\n        title: PageName.performance,\r\n        routerLink: RouterLink.performance,\r\n        theme: ButtonTheme.Secondary,\r\n        length: ButtonLength.Long\r\n    },\r\n    {\r\n        icon: 'mdi mdi-inbox-arrow-down',\r\n        title: PageName.snapshot,\r\n        routerLink: RouterLink.snapshot,\r\n        theme: ButtonTheme.Secondary,\r\n        length: ButtonLength.Long\r\n    }\r\n];\r\n","import { selectCuStatusInfo, initialState } from '@oam/cu-shared/lib/core/reducers/cu.reducer';\r\nimport { NullableOperationalState } from '@oam/cu-asm-api/models';\r\nimport { subscribeCuWatch, unsubscribeCuWatch } from '@oam/cu-shared/lib/core/actions/cu.actions';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { StatusModelBar } from '@oam/navigation/lib/navigation/core/models/status-bar-info.interface';\r\nimport {\r\n    subscribeTokenInfoWatch,\r\n    unsubscribeTokenInfoWatch,\r\n    SubscribeUserOperationWatch,\r\n    UnsubscribeUserOperationWatch\r\n} from '@oam/auth/lib/auth/core/actions/token-info.actions';\r\n\r\nexport const statusBarModel: StatusModelBar = {\r\n    name: 'CU',\r\n    gNBname: 'CU',\r\n    operationatStateView: false,\r\n    selectModelState: selectCuStatusInfo,\r\n    initialState: initialState.cu,\r\n    operationalState: NullableOperationalState,\r\n    subscribeModelWatch: subscribeCuWatch,\r\n    unsubscribeModelWatch: unsubscribeCuWatch,\r\n    subscribeTokenInfoWatch: subscribeTokenInfoWatch,\r\n    unsubscribeTokenInfoWatch: unsubscribeTokenInfoWatch,\r\n    subscribeUserOperationWatch: SubscribeUserOperationWatch,\r\n    unsubscribeUserOperationWatch: UnsubscribeUserOperationWatch,\r\n    statusPropertiesLink: RouterLink.cuProperties,\r\n    productName: 'CU WebEM',\r\n    helpFileName: 'CU WebEM User Guide.pdf',\r\n    helpFilePath: 'assets/help/CU_WebEM_User_Guide.pdf'\r\n};\r\n\r\n","import { selectCuAlarmsNumber, initialState } from '@oam/cu-shared/lib/core/reducers/cu.reducer';\r\nimport { subscribeCuWatch, unsubscribeCuWatch } from '@oam/cu-shared/lib/core/actions/cu.actions';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { QuickMenuAlarms } from '@oam/navigation/lib/navigation/core/models/quick-menu-alarms.interface';\r\n\r\nexport const quickMenuAlarmsModel: QuickMenuAlarms  = {\r\n    selectModelState: selectCuAlarmsNumber,\r\n    initialState: initialState.cu,\r\n    subscribeModelWatch: subscribeCuWatch,\r\n    unsubscribeModelWatch: unsubscribeCuWatch,\r\n    activeAlarmsLink: RouterLink.activeAlarms,\r\n};\r\n","import { Navigation } from '@oam/navigation/lib/navigation/core/models/navigation.interface';\r\nimport {\r\n    alarmGroup,\r\n    certificationManagementGroup,\r\n    configurationGroup,\r\n    diagnosticsGroup,\r\n    localUserManagementGroup,\r\n    navigationRoot,\r\n    settingsGroup,\r\n    splitViewGroup,\r\n    statusGroup\r\n} from '@oam/navigation/lib/navigation/core/models/navigation-group.model';\r\nimport { PageName } from '@oam/navigation/lib/navigation/core/models/page-name';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { RoleAccessForbiddenFlagEnum } from '@oam/core/lib/models/role-access/role-access-forbidden-flag.enmu';\r\nimport { AvailableFeatureFlagsEnum } from '@oam/core/lib/environment-variables/core/models';\r\n\r\nexport const navigations: Navigation[] = [\r\n    {\r\n        label: PageName.dashboard,\r\n        routerLink: RouterLink.dashboard,\r\n        icon: 'mdi mdi-view-quilt',\r\n        navigationGroup: navigationRoot,\r\n        keyboardShortcut: 'db'\r\n    },\r\n    {\r\n        label: PageName.cuProperties,\r\n        routerLink: RouterLink.cuProperties,\r\n        navigationGroup: statusGroup,\r\n        keyboardShortcut: 'cp'\r\n    },\r\n    {\r\n        label: PageName.dusStatus,\r\n        routerLink: RouterLink.dusStatus,\r\n        navigationGroup: statusGroup,\r\n        keyboardShortcut: 'ds'\r\n    },\r\n    {\r\n        label: PageName.cellsStatus,\r\n        routerLink: RouterLink.cellsStatus,\r\n        navigationGroup: statusGroup,\r\n        keyboardShortcut: 'cs'\r\n    },\r\n    {\r\n        label: PageName.cellsMapping,\r\n        routerLink: RouterLink.cellsMapping,\r\n        navigationGroup: statusGroup,\r\n        keyboardShortcut: 'cm'\r\n    },\r\n    {\r\n        label: PageName.vnfcStatus,\r\n        routerLink: RouterLink.vnfcStatus,\r\n        navigationGroup: statusGroup,\r\n        keyboardShortcut: 'vs'\r\n    },\r\n    {\r\n        label: PageName.x2LinksStatus,\r\n        routerLink: RouterLink.x2LinksStatus,\r\n        navigationGroup: statusGroup,\r\n        keyboardShortcut: 'xs'\r\n    },\r\n    {\r\n        label: PageName.xnLinksStatus,\r\n        routerLink: RouterLink.xnLinksStatus,\r\n        navigationGroup: statusGroup,\r\n        keyboardShortcut: 'xn'\r\n    },\r\n    {\r\n        label: PageName.ngLinksStatus,\r\n        routerLink: RouterLink.ngLinksStatus,\r\n        navigationGroup: statusGroup,\r\n        keyboardShortcut: 'ng'\r\n    },\r\n    {\r\n        label: PageName.networkSlicingStatus,\r\n        routerLink: RouterLink.networkSlicingStatus,\r\n        navigationGroup: statusGroup,\r\n        keyboardShortcut: 'ns'\r\n    },\r\n    {\r\n        label: PageName.activeAlarms,\r\n        routerLink: RouterLink.activeAlarms,\r\n        navigationGroup: alarmGroup,\r\n        keyboardShortcut: 'aa'\r\n    },\r\n    {\r\n        label: PageName.historicalAlarms,\r\n        routerLink: RouterLink.historicalAlarms,\r\n        navigationGroup: alarmGroup\r\n    },\r\n    {\r\n        label: PageName.faultToggling,\r\n        routerLink: RouterLink.faultToggling,\r\n        navigationGroup: alarmGroup\r\n    },\r\n    {\r\n        label: PageName.performance,\r\n        routerLink: RouterLink.performance,\r\n        icon: 'mdi mdi-chart-bar',\r\n        navigationGroup: navigationRoot,\r\n        keyboardShortcut: 'pf'\r\n    },\r\n    {\r\n        label: PageName.parameterEditor,\r\n        routerLink: RouterLink.parameterEditor,\r\n        navigationGroup: configurationGroup,\r\n        parentKey: PageName.configurationManagement,\r\n        keyboardShortcut: 'pe'\r\n    },\r\n    {\r\n        label: PageName.ipsecPskConfiguration,\r\n        routerLink: RouterLink.ipsecPskConfiguration,\r\n        navigationGroup: configurationGroup,\r\n        roleAccessFlag: RoleAccessForbiddenFlagEnum.IPSEC_PSK_CONFIGURATION\r\n    },\r\n    {\r\n        label: PageName.errors,\r\n        routerLink: RouterLink.errors,\r\n        navigationGroup: configurationGroup,\r\n        parentKey: PageName.configurationManagement,\r\n        keyboardShortcut: 'er'\r\n    },\r\n    {\r\n        label: PageName.errorsMissingMandatoryObjects,\r\n        routerLink: RouterLink.errorsMissingMandatoryObjects,\r\n        navigationGroup: configurationGroup\r\n    },\r\n    {\r\n        label: PageName.errorsObjectsQuantityErrors,\r\n        routerLink: RouterLink.errorsObjectsQuantityErrors,\r\n        navigationGroup: configurationGroup\r\n    },\r\n    {\r\n        label: PageName.errorsGlobalRelationErrors,\r\n        routerLink: RouterLink.errorsGlobalRelationErrors,\r\n        navigationGroup: configurationGroup\r\n    },\r\n    {\r\n        label: PageName.errorsParameterRelationErrors,\r\n        routerLink: RouterLink.errorsParameterRelationErrors,\r\n        navigationGroup: configurationGroup\r\n    },\r\n    {\r\n        label: PageName.parameterSearch,\r\n        routerLink: RouterLink.parameterSearch,\r\n        navigationGroup: configurationGroup,\r\n        parentKey: PageName.configurationManagement,\r\n        keyboardShortcut: 'ps'\r\n    },\r\n    {\r\n        label: PageName.errorsParameterErrors,\r\n        navigationGroup: configurationGroup,\r\n        routerLink: RouterLink.errorsParameterErrors\r\n    },\r\n    {\r\n        label: PageName.compareObjects,\r\n        routerLink: RouterLink.compareObjects,\r\n        parentKey: PageName.configurationManagement,\r\n        navigationGroup: configurationGroup\r\n    },\r\n    {\r\n        label: PageName.operatorCertificates,\r\n        routerLink: RouterLink.operatorCertificates,\r\n        navigationGroup: certificationManagementGroup,\r\n        roleAccessFlag: RoleAccessForbiddenFlagEnum.CERTIFICATE_OPERATOR\r\n    },\r\n    {\r\n        label: PageName.automaticManagement,\r\n        routerLink: RouterLink.certificateAutomatic,\r\n        navigationGroup: certificationManagementGroup,\r\n        roleAccessFlag: RoleAccessForbiddenFlagEnum.CERTIFICATE_AUTOMATIC\r\n    },\r\n    {\r\n        label: PageName.certificateRevocationList,\r\n        routerLink: RouterLink.certificateRevocationList,\r\n        navigationGroup: certificationManagementGroup,\r\n        roleAccessFlag: RoleAccessForbiddenFlagEnum.CERTIFICATE_REVOCATION\r\n    },\r\n    {\r\n        label: PageName.localUsersAccount,\r\n        routerLink: RouterLink.localUsersAccount,\r\n        navigationGroup: localUserManagementGroup\r\n    },\r\n    {\r\n        label: PageName.serviceUsers,\r\n        routerLink: RouterLink.serviceAccountManagement,\r\n        navigationGroup: localUserManagementGroup,\r\n        roleAccessFlag: RoleAccessForbiddenFlagEnum.SERVICE_USERS\r\n    },\r\n    {\r\n        label: PageName.sessionList,\r\n        routerLink: RouterLink.sessionList,\r\n        navigationGroup: localUserManagementGroup\r\n    },\r\n    {\r\n        label: PageName.snapshot,\r\n        routerLink: RouterLink.snapshot,\r\n        navigationGroup: diagnosticsGroup,\r\n        keyboardShortcut: 'sn',\r\n        roleAccessFlag: RoleAccessForbiddenFlagEnum.DIAGNOSTIC_SNAPSHOT\r\n    },\r\n    {\r\n        label: PageName.uplane,\r\n        routerLink: RouterLink.uplane,\r\n        navigationGroup: diagnosticsGroup,\r\n        roleAccessFlag: RoleAccessForbiddenFlagEnum.DIAGNOSTIC_USER_PLANE_TRACES\r\n    },\r\n    {\r\n        label: PageName.cplane,\r\n        routerLink: RouterLink.cplane,\r\n        navigationGroup: diagnosticsGroup,\r\n        roleAccessFlag: RoleAccessForbiddenFlagEnum.DIAGNOSTIC_CONTROL_PLANE_TRACES\r\n    },\r\n    {\r\n        label: PageName.ipConnectivity,\r\n        routerLink: RouterLink.ipConnectivity,\r\n        navigationGroup: diagnosticsGroup,\r\n        roleAccessFlag: RoleAccessForbiddenFlagEnum.DIAGNOSTIC_IP_CONNECTIVITY\r\n    },\r\n    {\r\n        label: PageName.ipsecAssociations,\r\n        routerLink: RouterLink.ipsecAssociations,\r\n        navigationGroup: diagnosticsGroup,\r\n        roleAccessFlag: RoleAccessForbiddenFlagEnum.DIAGNOSTIC_IP_SECURITY_ASSOCIATIONS\r\n    },\r\n    {\r\n        label: PageName.pmtuDiscovery,\r\n        routerLink: RouterLink.pmtuDiscovery,\r\n        navigationGroup: diagnosticsGroup,\r\n        roleAccessFlag: RoleAccessForbiddenFlagEnum.DIAGNOSTIC_PMTU_DISCOVERY\r\n    },\r\n    {\r\n        label: PageName.uiSettings,\r\n        routerLink: RouterLink.uiSettings,\r\n        navigationGroup: settingsGroup\r\n    },\r\n    {\r\n        label: PageName.splitView,\r\n        routerLink: RouterLink.splitView,\r\n        navigationGroup: splitViewGroup,\r\n        keyboardShortcut: 'sw'\r\n    }\r\n];\r\n","export function calculateMiddleOfView() {\r\n    const  h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\r\n\r\n    return (h / 2) - 49;\r\n}\r\n","<div class=\"split-view-layout\" uiWebemDragDropFile >\r\n    <webem-server-connection-notification></webem-server-connection-notification>\r\n    <ui-webem-browser-incompatibility-bar></ui-webem-browser-incompatibility-bar>\r\n    <webem-page-header [statusBarModel]=\"statusBarModel\" [productName]=\"statusBarModel.productName\"\r\n                       [helpFilePath]=\"statusBarModel.helpFilePath\" [helpFileName]=\"statusBarModel.helpFileName\">\r\n        <webem-quick-menu [items]=\"quickMenuItems\" [model]=\"quickMenuAlarmsModel\"></webem-quick-menu>\r\n    </webem-page-header>\r\n    <webem-page-navigation-menu [navigationMenuModel]=\"navigationMenu\"></webem-page-navigation-menu>\r\n    <div class=\"view-selectors-bar\">\r\n        <webem-password-expiration-warning></webem-password-expiration-warning>\r\n        <router-outlet name=\"viewDropdown\"></router-outlet>\r\n    </div>\r\n    <ui-webem-panel-split-area splitDirection=\"vertical\" class=\"split-view-panel-split-area\">\r\n        <div *uiWebemSplitArea=\"contentSize\" class=\"split-view-panel-split-area-main-content\">\r\n            <div class=\"split-view-panel-split-area-content\">\r\n                <div class=\"split-view-top-panel\">\r\n                    <ng-container #topViewContainer [ngTemplateOutlet]=\"topViewPanel\"></ng-container>\r\n                </div>\r\n                <div *uiWebemSplitArea=\"{ minSize: 50, size: gutterLocation, maxSize: 650, id: 2, hideGutter: false };\" class=\"split-view-bottom-panel\">\r\n                    <ng-container #bottomViewContainer [ngTemplateOutlet]=\"bottomViewPanel\"></ng-container>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ui-webem-panel-split-area>\r\n</div>\r\n\r\n<ng-template #topViewPanel>\r\n    <router-outlet name=\"topView\"></router-outlet>\r\n</ng-template>\r\n\r\n<ng-template #bottomViewPanel>\r\n    <router-outlet name=\"bottomView\"></router-outlet>\r\n</ng-template>\r\n","import {\r\n    Component,\r\n   HostListener, OnInit,\r\n    ChangeDetectorRef,\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n    ViewChild,\r\n    OnDestroy,\r\n    AfterViewInit\r\n} from '@angular/core';\r\nimport { Navigation } from '@oam/navigation/lib/navigation/core/models/navigation.interface';\r\nimport { RoutedMenuItem, SplitAreaDirectiveContext } from '@oam/cu-ui';\r\nimport { StatusModelBar } from '@oam/navigation/lib/navigation/core/models/status-bar-info.interface';\r\nimport { Store } from '@ngrx/store';\r\nimport { QuickMenuAlarms } from '@oam/navigation/lib/navigation/core/models/quick-menu-alarms.interface';\r\nimport { SplitViewRestrictionsService } from '@oam/split-view/lib/core/services/split-view-restrictions.service';\r\nimport { setAvailableSplitViewOptions } from '@oam/split-view/lib/core/actions/split-view.actions';\r\nimport { calculateMiddleOfView } from '@oam/split-view/lib/core/functions/split-view-functions';\r\n\r\nimport { combineLatest, Subject } from 'rxjs';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { selectAppSettingsRefresh } from '@oam/core/lib/reducers/app-settings.reducer';\r\n\r\nimport { selectSplitViewsDetails } from '@oam/split-view/lib/core/selectors/split-view.selectors';\r\nimport { SPLIT_VIEW_LOCATION } from '@oam/details-panel/lib/core/model/split-view-location.type';\r\nimport { LayoutsConfigService } from '@oam/layouts/lib/layouts-config.service';\r\nimport { VnfcSharedService } from '@oam/vnfc-shared/lib/vnfc-store/services/vnfc-shared.service';\r\n\r\ntype RefreshMetadataItem = {\r\n    container: ViewContainerRef,\r\n    template: TemplateRef<any>\r\n};\r\n\r\ntype RefreshMetadata = {\r\n    [TKey in SPLIT_VIEW_LOCATION]: RefreshMetadataItem | undefined\r\n};\r\n\r\n@Component({\r\n    selector: 'webem-split-view-layout',\r\n    templateUrl: './split-view-layout.component.html',\r\n    styleUrls: ['./split-view-layout.component.scss']\r\n})\r\nexport class SplitViewLayoutComponent implements OnInit, OnDestroy, AfterViewInit {\r\n    navigationMenu: Navigation[];\r\n    quickMenuItems: RoutedMenuItem[];\r\n    contentSize: SplitAreaDirectiveContext | null;\r\n    statusBarModel: StatusModelBar;\r\n    quickMenuAlarmsModel: QuickMenuAlarms;\r\n    gutterLocation: number;\r\n\r\n    ngUnsubscribe$: Subject<void> = new Subject<void>();\r\n\r\n    @ViewChild('topViewPanel', { static: true }) topViewPanelTemplateRef: TemplateRef<any>;\r\n    @ViewChild('bottomViewPanel', { static: true }) bottomViewPanelTemplateRef: TemplateRef<any>;\r\n\r\n    @ViewChild('topViewContainer', { read: ViewContainerRef }) topViewContainerRef: ViewContainerRef;\r\n    @ViewChild('bottomViewContainer', { read: ViewContainerRef }) bottomViewContainerRef: ViewContainerRef;\r\n\r\n    @HostListener('window:resize')\r\n    onResize() {\r\n        this.gutterLocation = calculateMiddleOfView();\r\n    }\r\n\r\n    constructor(\r\n        public changeDetectorRef: ChangeDetectorRef,\r\n        private readonly store: Store,\r\n        private readonly splitViewRestrictionsService: SplitViewRestrictionsService,\r\n        private readonly vnfcSharedService: VnfcSharedService,\r\n        private readonly layoutsConfigService: LayoutsConfigService) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.navigationMenu = this.layoutsConfigService.getNavigations;\r\n        this.quickMenuItems = this.layoutsConfigService.getQuickMenuItems;\r\n        this.statusBarModel = this.layoutsConfigService.getStatusBarModel;\r\n        this.quickMenuAlarmsModel = this.layoutsConfigService.getQuickMenuAlarmsModel;\r\n        this.gutterLocation = calculateMiddleOfView();\r\n        this.store.dispatch(setAvailableSplitViewOptions({\r\n            availableViews: this.splitViewRestrictionsService.getAvailableViews()\r\n        }));\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        combineLatest([\r\n            this.store.select(selectAppSettingsRefresh),\r\n            this.store.select(selectSplitViewsDetails)\r\n        ]).pipe(\r\n            filter(([counter]) => counter > 0),\r\n            takeUntil(this.ngUnsubscribe$)\r\n        ).subscribe(([, { topView, bottomView }]) => {\r\n            const refreshMetadata: RefreshMetadata = this.getViewRefreshMetadata();\r\n            const refreshLocation = this.splitViewRestrictionsService.getViewRefreshLocation(topView, bottomView);\r\n            this.refreshView(refreshMetadata[refreshLocation]);\r\n        });\r\n\r\n        this.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe$.next();\r\n        this.ngUnsubscribe$.complete();\r\n    }\r\n\r\n    getViewRefreshMetadata(): RefreshMetadata {\r\n        return {\r\n            [SPLIT_VIEW_LOCATION.TOP]: {\r\n                container: this.topViewContainerRef,\r\n                template: this.topViewPanelTemplateRef\r\n            },\r\n            [SPLIT_VIEW_LOCATION.BOTTOM]: {\r\n                container: this.bottomViewContainerRef,\r\n                template: this.bottomViewPanelTemplateRef\r\n            },\r\n            [SPLIT_VIEW_LOCATION.NONE]: undefined\r\n        };\r\n    }\r\n\r\n    refreshView(refreshMetadataItem: RefreshMetadataItem | undefined): void {\r\n        if (refreshMetadataItem) {\r\n            refreshMetadataItem.container.clear();\r\n            refreshMetadataItem.container.createEmbeddedView(refreshMetadataItem.template);\r\n        }\r\n    }\r\n}\r\n","import { TargetComponent } from '@oam/cu-cp-config-api/models';\r\nimport { TargetComponentOptions } from '@oam/tracing/lib/core/models';\r\n\r\n\r\nexport const CU_TARGET_COMPONENTS: TargetComponentOptions[] = [\r\n    { value: TargetComponent.L2HiPdcp, label: '5G-L2-HI' }\r\n];\r\n","import { Directive, AfterContentInit, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[webemAutoFocus]'\r\n})\r\nexport class AutoFocusDirective implements AfterContentInit {\r\n\r\n    constructor(public readonly el: ElementRef) {}\r\n\r\n    ngAfterContentInit(): void {\r\n        setTimeout(() => {\r\n            this.el.nativeElement.focus();\r\n        });\r\n    }\r\n}\r\n","<div class=\"login-page\" *ngIf=\"!bearerToken\">\r\n    <div class=\"container\" *ngIf=\"loginStatus$ | async as loginStatus\">\r\n        <p-card class=\"login-card\" styleClass=\"ui-card-shadow\">\r\n            <p-header class=\"header-login\">\r\n                <div class=\"product-logo\">\r\n                    {{applicationType}}\r\n                </div>\r\n                <img class=\"nokia-logo-img\" src=\"assets/nokia/images/logo.svg\" alt=\"Nokia logo\"/>\r\n            </p-header>\r\n            <form [formGroup]=\"form\" (ngSubmit)=\"onClickLogin()\" class=\"form-login\">\r\n                <div class=\"input-container ui-float-label\"\r\n                     [ngClass]=\"{ 'disabled' : isLoggedIn }\">\r\n                    <i class=\"mdi mdi-account icon-class\" aria-hidden=\"true\"></i>\r\n                    <input webemAutoFocus class=\"login-input\" type=\"text\" formControlName=\"username\"\r\n                           autocomplete=\"off\"\r\n                           id=\"login-username\"\r\n                           placeholder=\"Username\"\r\n                           [attr.disabled]=\"isLoggedIn ? '' : null\">\r\n                </div>\r\n                <div class=\"input-container\">\r\n                    <div class=\"password\"\r\n                         [ngClass]=\"{ 'disabled' : isLoggedIn }\">\r\n                        <i class=\"mdi mdi-lock icon-class\" aria-hidden=\"true\"></i>\r\n                        <input class=\"login-input\"\r\n                               [type]=\"showPassword ? 'text' : 'password'\"\r\n                               autocomplete=\"new-password\"\r\n                               formControlName=\"password\"\r\n                               placeholder=\"Password\"\r\n                               id=\"login-password\"\r\n                               (click)=\"getCapsLockState($event)\"\r\n                               (uiWebemCapsLock)=\"capsLockOn=$event\"\r\n                               [attr.disabled]=\"isLoggedIn ? '' : null\">\r\n\r\n                        <ui-webem-show-password-button\r\n                            class=\"eye-class\"\r\n                            [disabled]=\"!form.get('password')?.value\"\r\n                            (isPasswordVisible)=\"setPasswordVisible($event)\">\r\n                        </ui-webem-show-password-button>\r\n                    </div>\r\n                </div>\r\n                <div class=\"capslock-indicator\">\r\n                    <ng-container *ngIf=\"capsLockOn\">\r\n                        <span>Caps Lock on</span>\r\n                    </ng-container>\r\n                </div>\r\n                <div>\r\n                    <p-checkbox\r\n                        label=\"Read Only\"\r\n                        [binary]=\"true\"\r\n                        formControlName=\"readOnlyChecked\"\r\n                    >\r\n                    </p-checkbox>\r\n                </div>\r\n                <div class=\"login-status\">\r\n                    <p-progressBar *ngIf=\"loginStatus.inProgress\" mode=\"indeterminate\"\r\n                                   class=\"progressbar-login\">\r\n                    </p-progressBar>\r\n                    <div class=\"login-info\" *ngIf=\"loginStatus.tryLater\">\r\n                        <i class=\"info-icon mdi mdi-information\"></i>\r\n                        {{loginStatus.failedReason}}\r\n                    </div>\r\n                    <div class=\"login-alert\" *ngIf=\"loginStatus.failed && !loginStatus.inProgress && loginStatus.failedReason\">\r\n                        <i class=\"alert-icon mdi mdi-alert\"></i>\r\n                        {{loginStatus.failedReason}}\r\n                    </div>\r\n                </div>\r\n                <div class=\"buttons-login\">\r\n                    <ui-webem-button\r\n                        [type]=\"'submit'\"\r\n                        [model]=\"submitButton\"\r\n                        [options]=\"buttonOptions\"\r\n                        [disabled]=\"!form.valid || isLoggedIn\"\r\n                        (action)=\"onClickLogin()\"\r\n                        label=\"Login\"\r\n                        id=\"login-button\"\r\n                        *ngIf=\"!loginStatus.inProgress\">\r\n                    </ui-webem-button>\r\n                    <ui-webem-button\r\n                        [type]=\"'reset'\"\r\n                        [model]=\"cancelButton\"\r\n                        [options]=\"buttonOptions\"\r\n                        [disabled]=\"!form.valid\"\r\n                        (action)=\"resetLoginStoreValues()\"\r\n                        *ngIf=\"loginStatus.inProgress\">\r\n                    </ui-webem-button>\r\n                </div>\r\n            </form>\r\n        </p-card>\r\n    </div>\r\n    <div class=\"copyright\">\r\n        <p> &copy; {{copyrightText}} </p>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { login, setLoginInitialValues } from '../../core/actions/login.actions';\r\nimport { OperationStatus } from '@oam/core/lib/models/operation.interface';\r\nimport { LoginMessages } from './login-messages';\r\nimport { getLoginStatus } from '../../core/reducers/login.reducer';\r\nimport { redirect } from '@oam/core/lib/actions/router.actions';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ButtonModel, ButtonThickness, ButtonTheme, ButtonEvent, ButtonOptions } from '@oam/cu-ui';\r\nimport { TokenType } from '@oam/core/lib/store/user-state';\r\n\r\n@Component({\r\n    selector: 'webem-login-page',\r\n    templateUrl: './login-page.component.html',\r\n    styleUrls: ['./login-page.component.scss']\r\n})\r\nexport class LoginPageComponent implements OnInit {\r\n    isLoggedIn: boolean;\r\n    applicationType: string;\r\n    form: FormGroup;\r\n    loginStatus$: Observable<OperationStatus>;\r\n    chromeVersionText = LoginMessages.chromeVersionText;\r\n    copyrightText = LoginMessages.copyrightText;\r\n    showPassword: boolean;\r\n    bearerToken: string | null;\r\n    capsLockOn: boolean;\r\n    ngUnsubscribe = new Subject();\r\n\r\n    submitButton = {\r\n        thickness: ButtonThickness.Default,\r\n        theme: ButtonTheme.Accent,\r\n        label: 'Login',\r\n    } as ButtonModel;\r\n\r\n    buttonOptions = {\r\n        forceWidth: '100%'\r\n    } as ButtonOptions;\r\n\r\n    cancelButton = {\r\n        thickness: ButtonThickness.Default,\r\n        theme: ButtonTheme.Accent,\r\n        label: 'Cancel',\r\n    } as ButtonModel;\r\n\r\n    constructor(private readonly store: Store,\r\n                private readonly formBuilder: FormBuilder,\r\n                private readonly route: ActivatedRoute) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.isLoggedIn = false;\r\n        this.bearerToken = sessionStorage.getItem(`${TokenType.BEARER}`);\r\n        if (this.bearerToken) {\r\n            this.store.dispatch(redirect({routerLink: RouterLink.dashboard, activatedRoute: this.route}));\r\n        }\r\n        this.applicationType = this.route.snapshot.data.title;\r\n        this.loginStatus$ = this.store.pipe(select(getLoginStatus));\r\n        this.form = this.formBuilder.group({\r\n            username: ['', Validators.required],\r\n            password: ['', Validators.required],\r\n            readOnlyChecked: [false]\r\n        });\r\n        this.showPassword = false;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    onClickLogin() {\r\n        this.store.dispatch(login({\r\n            payload: {\r\n                username: this.form.value.username, password: this.form.value.password,\r\n                readOnlyChecked: this.form.value.readOnlyChecked\r\n            }\r\n        }));\r\n\r\n        this.loginStatus$.subscribe((status) => {\r\n            this.isLoggedIn = status.successful;\r\n            if (status.successful) {\r\n                this.form.reset({\r\n                    password: ''\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    resetLoginStoreValues() {\r\n        this.store.dispatch(setLoginInitialValues());\r\n    }\r\n\r\n    setPasswordVisible(isVisible: boolean) {\r\n        this.showPassword = isVisible;\r\n    }\r\n\r\n    getCapsLockState(event: MouseEvent): void {\r\n        this.capsLockOn = event.getModifierState('CapsLock');\r\n    }\r\n}\r\n","<div class=\"container\" *ngIf=\"loginStatus$ | async as loginStatus\">\r\n    <p-progressBar *ngIf=\"loginStatus.inProgress\" mode=\"indeterminate\"\r\n                   class=\"progressbar-login\">\r\n    </p-progressBar>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { OperationStatus } from '@oam/core/lib/models/operation.interface';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { loginInProgress, ssoLoginStarted } from '../../core/actions/login.actions';\r\nimport { redirect } from '@oam/core/lib/actions/router.actions';\r\nimport { getLoginStatus } from '../../core/reducers/login.reducer';\r\nimport { isEmpty } from 'lodash';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { setToken } from '@oam/core/lib/actions/user.actions';\r\nimport { TokenType } from '@oam/core/lib/store/user-state';\r\n\r\n@Component({\r\n    selector: 'webem-sso-login-page',\r\n    templateUrl: './sso-login-page.component.html',\r\n    styleUrls: ['./sso-login-page.component.scss']\r\n})\r\n\r\nexport class SsoLoginPageComponent implements OnInit {\r\n    loginStatus$: Observable<OperationStatus>;\r\n\r\n    constructor(\r\n        private readonly store: Store,\r\n        private readonly activatedRoute: ActivatedRoute) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.loginStatus$ = this.store.pipe(select(getLoginStatus));\r\n        const token = this.activatedRoute.snapshot.queryParams && this.activatedRoute.snapshot.queryParams.token;\r\n        if (!isEmpty(token)) {\r\n            this.store.dispatch(loginInProgress());\r\n            this.store.dispatch(setToken({ payload: { type: TokenType.BEARER, value: token } }));\r\n            this.store.dispatch(ssoLoginStarted({ payload: token }));\r\n        } else {\r\n            this.store.dispatch(redirect({ routerLink: RouterLink.login, activatedRoute: this.activatedRoute }));\r\n        }\r\n    }\r\n}\r\n","import { Action, createFeatureSelector, createReducer, on } from '@ngrx/store';\r\nimport {\r\n    logoutFailed,\r\n    logoutInProgress,\r\n    logoutSuccessful\r\n} from '../actions/logout.actions';\r\nimport { OperationStatus } from '@oam/core/lib/models/operation.interface';\r\n\r\nexport const featureKey = 'logout';\r\n\r\nexport const initialState: OperationStatus = {\r\n    inProgress: false,\r\n    successful: false,\r\n    failed: false,\r\n    failedReason: ''\r\n};\r\n\r\nconst logoutReducer = createReducer(\r\n    initialState,\r\n    on(logoutInProgress, state => ({ ...state, inProgress: true })),\r\n    on(logoutFailed, (state, action) => ({ ...state, failed: true, inProgress: false, failedReason: action.payload })),\r\n    on(logoutSuccessful, state => ({ ...state, successful: true, inProgress: false }))\r\n);\r\n\r\nexport function reducer(state: OperationStatus, action: Action) {\r\n    return logoutReducer(state, action);\r\n}\r\n\r\nexport const getLogoutStatus = createFeatureSelector<OperationStatus>(featureKey);\r\n\r\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { LoginRequest } from '../models/login-request';\nimport { LoginResponse } from '../models/login-response';\nimport { SsoLoginResponse } from '../models/sso-login-response';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation loginPost\n   */\n  static readonly LoginPostPath = '/login';\n\n  /**\n   * Allows users to authenticate and receive an authentication token (JWT) for further API access.\n   *\n   * Authentication and token generation<br> <br> Authentication is actually performed by rcpum, for Authentication failure case, rcpum may send an additional status code in \"additionalStatus\" field of the error response structure, the original http status code from rcpum is stored in \"status\" filed of the error response structure. apigw will not change the error response structure.<br> As WebEM is not able to handle other new error case status codes than {401 403 405 460 461 462}, apigw will convert all other rcpum authentication failure status code to HTTP status code \"401\".<br> <br> The additional status codes are the following:\n   *  - 7  Authentication failed\n   *  - 13 User account is expired\n   *  - 101 Authentication failed and the account was locked because of that\n   *  - 102 Account is locked because of too many authentication failures\n   *  - 103 User account is invalid due to expired password\n   *  - 104 Too many simultaneous sessions in the system\n   *  - 105 Too many simultaneous sessions for the user\n   *  - 106 Account is locked by the administrator\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `loginPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  loginPost$Response(params: {\n\n    /**\n     * Authorization containing the word Basic followed by a space and a base64-encoded string username:password\n     */\n    Authorization: string;\n  \n    /**\n     * Indicate Optional Parameters\n     */\n    body?: LoginRequest\n  }): Observable<StrictHttpResponse<LoginResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, AuthenticationService.LoginPostPath, 'post');\n    if (params) {\n\n      rb.header('Authorization', params.Authorization, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<LoginResponse>;\n      })\n    );\n  }\n\n  /**\n   * Allows users to authenticate and receive an authentication token (JWT) for further API access.\n   *\n   * Authentication and token generation<br> <br> Authentication is actually performed by rcpum, for Authentication failure case, rcpum may send an additional status code in \"additionalStatus\" field of the error response structure, the original http status code from rcpum is stored in \"status\" filed of the error response structure. apigw will not change the error response structure.<br> As WebEM is not able to handle other new error case status codes than {401 403 405 460 461 462}, apigw will convert all other rcpum authentication failure status code to HTTP status code \"401\".<br> <br> The additional status codes are the following:\n   *  - 7  Authentication failed\n   *  - 13 User account is expired\n   *  - 101 Authentication failed and the account was locked because of that\n   *  - 102 Account is locked because of too many authentication failures\n   *  - 103 User account is invalid due to expired password\n   *  - 104 Too many simultaneous sessions in the system\n   *  - 105 Too many simultaneous sessions for the user\n   *  - 106 Account is locked by the administrator\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `loginPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  loginPost(params: {\n\n    /**\n     * Authorization containing the word Basic followed by a space and a base64-encoded string username:password\n     */\n    Authorization: string;\n  \n    /**\n     * Indicate Optional Parameters\n     */\n    body?: LoginRequest\n  }): Observable<LoginResponse> {\n\n    return this.loginPost$Response(params).pipe(\n      map((r: StrictHttpResponse<LoginResponse>) => r.body as LoginResponse)\n    );\n  }\n\n  /**\n   * Path part for operation ssologinPost\n   */\n  static readonly SsologinPostPath = '/ssologin';\n\n  /**\n   * SingleSignOn interface of APIGW to be used by northbound services for token generation.\n   *\n   * Authentication and token generation for NMS SSO with local username and password <br> Authentication is actually performed by rcpum, for Authentication failure case, rcpum may send an additional status code in \"additionalStatus\" field of the error response structure, the original http status code from rcpum is stored in \"status\" filed of the error response structure. apigw will not change the error response structure.<br> As WebEM is not able to handle other new error case status codes than {401 403 405 460 461 462}, apigw will convert all other rcpum authentication failure status code to HTTP status code \"401\".<br> <br> The additional status codes are the following:\n   *  - 7  Authentication failed\n   *  - 13 User account is expired\n   *  - 101 Authentication failed and the account was locked because of that\n   *  - 102 Account is locked because of too many authentication failures\n   *  - 103 User account is invalid due to expired password\n   *  - 104 Too many simultaneous sessions in the system\n   *  - 105 Too many simultaneous sessions for the user\n   *  - 106 Account is locked by the administrator\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `ssologinPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  ssologinPost$Response(params: {\n\n    /**\n     * Authorization containing the word Basic followed by a space and a base64-encoded string username:password\n     */\n    Authorization: string;\n  \n    /**\n     * Indicate Optional Parameters\n     */\n    body?: LoginRequest\n  }): Observable<StrictHttpResponse<SsoLoginResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, AuthenticationService.SsologinPostPath, 'post');\n    if (params) {\n\n      rb.header('Authorization', params.Authorization, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SsoLoginResponse>;\n      })\n    );\n  }\n\n  /**\n   * SingleSignOn interface of APIGW to be used by northbound services for token generation.\n   *\n   * Authentication and token generation for NMS SSO with local username and password <br> Authentication is actually performed by rcpum, for Authentication failure case, rcpum may send an additional status code in \"additionalStatus\" field of the error response structure, the original http status code from rcpum is stored in \"status\" filed of the error response structure. apigw will not change the error response structure.<br> As WebEM is not able to handle other new error case status codes than {401 403 405 460 461 462}, apigw will convert all other rcpum authentication failure status code to HTTP status code \"401\".<br> <br> The additional status codes are the following:\n   *  - 7  Authentication failed\n   *  - 13 User account is expired\n   *  - 101 Authentication failed and the account was locked because of that\n   *  - 102 Account is locked because of too many authentication failures\n   *  - 103 User account is invalid due to expired password\n   *  - 104 Too many simultaneous sessions in the system\n   *  - 105 Too many simultaneous sessions for the user\n   *  - 106 Account is locked by the administrator\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `ssologinPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  ssologinPost(params: {\n\n    /**\n     * Authorization containing the word Basic followed by a space and a base64-encoded string username:password\n     */\n    Authorization: string;\n  \n    /**\n     * Indicate Optional Parameters\n     */\n    body?: LoginRequest\n  }): Observable<SsoLoginResponse> {\n\n    return this.ssologinPost$Response(params).pipe(\n      map((r: StrictHttpResponse<SsoLoginResponse>) => r.body as SsoLoginResponse)\n    );\n  }\n\n  /**\n   * Path part for operation logoutPost\n   */\n  static readonly LogoutPostPath = '/logout';\n\n  /**\n   * Allows user to logout from a specific session.\n   *\n   * User specific session deletion : session jwt required.\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `logoutPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  logoutPost$Response(params: {\n\n    /**\n     * Authorization containing the word Bearer followed by a space and a token\n     */\n    Authorization: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, AuthenticationService.LogoutPostPath, 'post');\n    if (params) {\n\n      rb.header('Authorization', params.Authorization, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Allows user to logout from a specific session.\n   *\n   * User specific session deletion : session jwt required.\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `logoutPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  logoutPost(params: {\n\n    /**\n     * Authorization containing the word Bearer followed by a space and a token\n     */\n    Authorization: string;\n\n  }): Observable<void> {\n\n    return this.logoutPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","import { validateSync } from 'class-validator';\r\nimport { cleanUiSettingsCache } from '@oam/core/lib/actions/app-settings.actions';\r\nimport { Store } from '@ngrx/store';\r\nimport { LayoutBase } from '@oam/core/lib/functions/layout-base';\r\n\r\nconst WNLS_DASHBOARD = 'wnls_dashboard';\r\n\r\nexport async function validateAndClearLayout(store: Store, LayoutClass: new (layoutItem: any) => LayoutBase) {\r\n    const item = localStorage.getItem(WNLS_DASHBOARD);\r\n    if (!item) return;\r\n    const dashboardLayout = JSON.parse(item);\r\n\r\n    const errorItem = dashboardLayout.find((layoutItem: any) => {\r\n        const layoutInst = new LayoutClass(layoutItem);\r\n        const errors = validateSync(layoutInst, { whitelist: true, forbidNonWhitelisted: true });\r\n\r\n        return errors.length > 0;\r\n    });\r\n\r\n    if (errorItem) {\r\n        localStorage.removeItem(WNLS_DASHBOARD);\r\n        store.dispatch(cleanUiSettingsCache({ payload: true }));\r\n    }\r\n}\r\n","import { UiModelSettingsType, ModifyType } from '@oam/core/lib/services/model';\r\nimport { DashboardUiSettingsModel } from '@oam/dashboard/lib/core/models/dashboard-ui-settings-model';\r\nimport { LayoutBase } from '@oam/core/lib/functions/layout-base';\r\nimport { IsDefined, IsEnum } from 'class-validator';\r\nimport { Match } from '@oam/shared/lib/decorators/match.decorator';\r\n\r\n\r\nexport enum VduTypeEnum {\r\n    VduCellsStatus = 'vdu-cells-status',\r\n    RmodsStatus = 'rmods-status',\r\n    Alarms = 'alarms',\r\n    Operations = 'operations',\r\n    VnfcStatus = 'vnfc-status',\r\n    NetworkSlicing = 'network-slicing',\r\n    Counters1 = 'counters1',\r\n    Counters2 = 'counters2',\r\n    Counters3 = 'counters3',\r\n    Counters4 = 'counters4'\r\n}\r\n\r\nexport const vduDashboardUiSettingsDefault: ModifyType<UiModelSettingsType, { layoutConfig: DashboardUiSettingsModel[] }> = {\r\n    name: 'vdu-dashboard',\r\n    layoutConfig: [\r\n        { w: 8, h: 2, y: 0, x: 8, wXl: 8, hXl: 2, yXl: 0, xXl: 0, type: VduTypeEnum.RmodsStatus },\r\n        { w: 8, h: 2, y: 0, x: 8, wXl: 8, hXl: 2, yXl: 0, xXl: 8, type: VduTypeEnum.VduCellsStatus },\r\n\r\n        { w: 3, h: 2, y: 2, x: 0, wXl: 3, hXl: 2, yXl: 2, xXl: 0, type: VduTypeEnum.NetworkSlicing },\r\n\r\n        { w: 2, h: 3, y: 4, x: 0, wXl: 2, hXl: 3, yXl: 4, xXl: 0, type: VduTypeEnum.Operations },\r\n        { w: 8, h: 3, y: 4, x: 2, wXl: 8, hXl: 3, yXl: 4, xXl: 2, type: VduTypeEnum.Alarms },\r\n        { w: 6, h: 3, y: 4, x: 10, wXl: 6, hXl: 3, yXl: 4, xXl: 10, type: VduTypeEnum.VnfcStatus },\r\n\r\n        { w: 4, h: 3, y: 7, x: 0, wXl: 4, hXl: 5, yXl: 7, xXl: 0, type: VduTypeEnum.Counters1 },\r\n        { w: 4, h: 3, y: 7, x: 4, wXl: 4, hXl: 5, yXl: 7, xXl: 4, type: VduTypeEnum.Counters2 },\r\n        { w: 4, h: 3, y: 7, x: 8, wXl: 4, hXl: 5, yXl: 7, xXl: 8, type: VduTypeEnum.Counters3 },\r\n        { w: 4, h: 3, y: 7, x: 12, wXl: 4, hXl: 5, yXl: 7, xXl: 12, type: VduTypeEnum.Counters4 },\r\n    ]\r\n};\r\n\r\n\r\nexport class VduLayout extends LayoutBase {\r\n    @IsEnum(VduTypeEnum)\r\n    @IsDefined()\r\n    type: VduTypeEnum;\r\n\r\n    @Match('w', vduDashboardUiSettingsDefault.layoutConfig)\r\n    @IsDefined()\r\n    w: number;\r\n\r\n    @Match('h', vduDashboardUiSettingsDefault.layoutConfig)\r\n    @IsDefined()\r\n    h: number;\r\n\r\n    constructor(layout: any) {\r\n        super(layout);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport {\r\n    ssoLoginStarted,\r\n    login,\r\n    loginFailed,\r\n    loginInProgress,\r\n    loginStarted,\r\n    loginSuccessful,\r\n    removeLastSession,\r\n    removeLastSessionSuccessfull,\r\n    setLoginInitialValues,\r\n    tokenRenewalSuccessful,\r\n    loginLater\r\n} from '../actions/login.actions';\r\nimport {\r\n    catchError,\r\n    delayWhen,\r\n    filter,\r\n    map,\r\n    mergeMap,\r\n    switchMap,\r\n    takeUntil,\r\n    tap,\r\n    withLatestFrom\r\n} from 'rxjs/operators';\r\nimport { of, timer } from 'rxjs';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { redirect } from '@oam/core/lib/actions/router.actions';\r\nimport { LoginResponse, RefreshTokenResponse, TokenInfo } from '@oam/cu-api-gw-api/models';\r\nimport { TokenType, UserInformation } from '@oam/core/lib/store/user-state';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport {\r\n    handleLoginRelatedError,\r\n    removeToken,\r\n    renewSessionToken,\r\n    setLastSessionToken,\r\n    setToken,\r\n    setUsernameForPasswordExpired,\r\n    updateUser,\r\n    updateUserInformation,\r\n    updateLoginResponse,\r\n    updateDowngradedPrivilegesDialogPopupFlag\r\n} from '@oam/core/lib/actions/user.actions';\r\nimport { getUser, selectLastSessionToken, selectLonginResponse } from '@oam/core/lib/user/core/reducers/user-reducer';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { AuthenticationService } from '@oam/cu-api-gw-api/services/authentication.service';\r\nimport { SessionMgmtService } from '@oam/cu-api-gw-api/services/session-mgmt.service';\r\nimport { EnforceLogoutResponse } from '@oam/cu-api-gw-api/models/enforce-logout-response';\r\nimport { DateTime } from '@oam/core';\r\nimport { ROLE_NAME_MAPPING } from '@oam/shared/lib/constants/role-access-constants';\r\nimport { vnfcTypeSessionKey, VnfcSharedService } from '@oam/vnfc-shared/lib/vnfc-store/services/vnfc-shared.service';\r\nimport { StatusService } from '@oam/cu-asm-api/services/status.service';\r\nimport { getVnfcHeader } from '@oam/vnfc-shared/lib/vnfc-store/functions/get-vnfc-header';\r\nimport {\r\n    getLegalNoticeMessage,\r\n    openLegalNoticeModal,\r\n    showLegalNoticeModal,\r\n    submitLegalNoticeModal } from '@oam/cu-ui/lib/legal-notice-modal/core/actions/legal-notice-modal.actions';\r\nimport { CuLayout, VmCuLayout } from '../../../../../../cu-dashboard/src/lib/core/models/ui-settings';\r\nimport { validateAndClearLayout } from '@oam/core/lib/functions/validate-and-clean-layout-settings';\r\nimport { VduLayout } from '../../../../../../vdu-dashboard/src/lib/core/models/ui-settings';\r\n\r\n@Injectable()\r\nexport class LoginEffects {\r\n    private readonly authorizationType = {\r\n        BASIC: 'Basic',\r\n        BEARER: 'Bearer'\r\n    };\r\n\r\n    // As agreed with API-GW, adding extra 2s before retry login.\r\n    private LOGIN_RETRY_BUFFER = 2000;\r\n\r\n    constructor(private readonly actions$: Actions,\r\n                private readonly store: Store,\r\n                private readonly secService: AuthenticationService,\r\n                private readonly sessionMgmtService: SessionMgmtService,\r\n                private readonly statusService: StatusService,\r\n                private readonly vnfcSharedService: VnfcSharedService,\r\n                private readonly activatedRoute: ActivatedRoute) {\r\n    }\r\n\r\n    cancelLogin$ = createEffect(() =>\r\n        this.actions$\r\n            .pipe(\r\n                ofType(setLoginInitialValues)\r\n            ), { dispatch: false }\r\n    );\r\n\r\n    login$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(login),\r\n            mergeMap(({ payload: { username, password, readOnlyChecked } }) => {\r\n                return [\r\n                    loginStarted({ payload: { username, password, readOnlyChecked } })\r\n                ];\r\n            }))\r\n    );\r\n\r\n    loginInProgress$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(login, renewSessionToken),\r\n            mergeMap(() => of(loginInProgress()))\r\n        ));\r\n\r\n    loginStarted$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(loginStarted),\r\n            mergeMap(({ payload: { username, password, readOnlyChecked } }) => {\r\n                const encodedAuthorizationString = window.btoa(`${username}:${password}`);\r\n                const authorization = `${this.authorizationType.BASIC} ${encodedAuthorizationString}`;\r\n\r\n                const loginPostObservable = readOnlyChecked ? this.secService.loginPost({\r\n                    Authorization: authorization, body: {\r\n                        ReadOnlyMode: readOnlyChecked\r\n                    }\r\n                }) : this.secService.loginPost({\r\n                    Authorization: authorization\r\n                });\r\n\r\n                return loginPostObservable.pipe(\r\n                    takeUntil(this.cancelLogin$),\r\n                    tap((response: LoginResponse) => {\r\n                        sessionStorage.setItem(TokenType.BEARER, response.Token);\r\n                    }),\r\n                    switchMap((loginResponse: LoginResponse) =>\r\n                        this.statusService.getVnfcs$Response().pipe(\r\n                            mergeMap(vnfcsResponse => {\r\n                                const vnfcType = getVnfcHeader(vnfcsResponse);\r\n                                sessionStorage.setItem(vnfcTypeSessionKey, vnfcType);\r\n                                this.vnfcSharedService.setVnfcType(vnfcType);\r\n\r\n                                return of(loginResponse);\r\n                            }),\r\n                            catchError(err => {\r\n                                console.log(`\\n${StatusService.GetVnfcsPath} failed, ${err.message}\\n`, err);\r\n\r\n                                return of(loginResponse);\r\n                            }),\r\n                        )\r\n                    ),\r\n                    mergeMap((response: LoginResponse) => {\r\n                        if ( !this.vnfcSharedService.isVmcu()) {\r\n                            if (!ROLE_NAME_MAPPING[response.Role]) return of(loginFailed({ payload: 'Invalid user profile' }));\r\n\r\n                            return [\r\n                                updateLoginResponse({ payload: { response, username } }),\r\n                                openLegalNoticeModal()\r\n                            ];\r\n                        }\r\n\r\n                        return this.loginResponseMap(response, username || '');\r\n                    }),\r\n                    catchError((error: HttpErrorResponse) => of(handleLoginRelatedError({ error, username, password,  readOnlyChecked})))\r\n                );\r\n            })\r\n        )\r\n    );\r\n\r\n    ssoLoginStarted$ = createEffect(() => this.actions$.pipe(\r\n        ofType(ssoLoginStarted),\r\n        mergeMap((action) => this.sessionMgmtService.getTokenInfo().pipe(\r\n            takeUntil(this.cancelLogin$),\r\n            switchMap((response: TokenInfo) =>\r\n                this.statusService.getVnfcs$Response().pipe(\r\n                    mergeMap(vnfcsResponse => {\r\n                        const vnfcType = getVnfcHeader(vnfcsResponse);\r\n                        sessionStorage.setItem(vnfcTypeSessionKey, vnfcType);\r\n                        this.vnfcSharedService.setVnfcType(vnfcType);\r\n\r\n                        return of(response);\r\n                    }),\r\n                    catchError(err => {\r\n                        console.log(`\\n${StatusService.GetVnfcsPath} failed, ${err.message}\\n`, err);\r\n\r\n                        return of(response);\r\n                    }),\r\n                )\r\n            ),\r\n            mergeMap((response: TokenInfo) => {\r\n                if ( !this.vnfcSharedService.isVmcu()) {\r\n                    if (!ROLE_NAME_MAPPING[response.Role]) return this.handleSsoNormalError();\r\n\r\n                    return [\r\n                        updateLoginResponse({ payload: { response, username: response.User } }),\r\n                        openLegalNoticeModal()\r\n                    ];\r\n                }\r\n\r\n                return this.loginResponseMap(response, response.User || '');\r\n            }),\r\n            catchError((error: HttpErrorResponse) => {\r\n                if (error.status === 403) {\r\n                    return of(\r\n                        removeToken({ payload: TokenType.BEARER }),\r\n                        setToken({ payload: { type: TokenType.PASSWORD_CHANGE, value: action.payload } }),\r\n                        setUsernameForPasswordExpired({ payload: error.error.User }),\r\n                        redirect({ routerLink: RouterLink.passwordExpired, activatedRoute: this.activatedRoute })\r\n                    );\r\n                } else {\r\n                    return this.handleSsoNormalError();\r\n                }\r\n            })\r\n        )))\r\n    );\r\n\r\n    handleLoginRelatedError$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(handleLoginRelatedError),\r\n            mergeMap(({ error, username, password, readOnlyChecked }) => {\r\n                if (error.status === 403) {\r\n                    return of(\r\n                        setToken({ payload: { type: TokenType.PASSWORD_CHANGE, value: error.error.Token } }),\r\n                        setUsernameForPasswordExpired({ payload: username || '' }),\r\n                        redirect({\r\n                            routerLink: RouterLink.passwordExpired,\r\n                            activatedRoute: this.activatedRoute\r\n                        })\r\n                    );\r\n                } else if (error.status === 401) {\r\n                    if(error.error.additionalStatus && error.error.additionalStatus === 106){\r\n                        return of(loginFailed({ payload: 'This role is deactivated' }));\r\n                    }\r\n\r\n                    return of(typeof error.error === 'object' ? loginFailed({ payload: error.error.title }):loginFailed({ payload: error.error }));\r\n                } else if (error.status === 460) {\r\n                    return of(loginFailed({ payload: 'Restricted access feature is activated' }));\r\n                } else if (error.status === 461) {\r\n                    return of(loginFailed({ payload: 'Maximum session number is reached' }));\r\n                } else if (error.status === 462) {\r\n                    const errorResponse = error.error as unknown as EnforceLogoutResponse;\r\n\r\n                    return of(loginLater({\r\n                        message: `Session will be created after ${DateTime.convertSecondToHourMinuteSecond(errorResponse.EnforceLogoutDelay)}.\r\n                        Restricted access is activated.`,\r\n                        enforcedLogoutDelay: errorResponse.EnforceLogoutDelay,\r\n                        username: username,\r\n                        password: password,\r\n                        readOnlyChecked: readOnlyChecked\r\n                    }));\r\n                } else if (error.status === 503)  {\r\n                    return of(loginFailed({ payload: 'Due to service temporarily unavailable, please try later' }));\r\n                } else return of(loginFailed({ payload: 'Login failed. Please try again' }));\r\n            })\r\n        );\r\n    });\r\n\r\n    loginLater$ = createEffect(() => this.actions$.pipe(\r\n        ofType(loginLater),\r\n        mergeMap(( loginLaterAction) => {\r\n            return of(loginLaterAction).pipe(\r\n                delayWhen( ({ enforcedLogoutDelay }) => timer(enforcedLogoutDelay * 1000 + this.LOGIN_RETRY_BUFFER)),\r\n                takeUntil(this.cancelLogin$),\r\n                mergeMap(({ username, password, readOnlyChecked }) => {\r\n                    return [\r\n                        loginStarted({ payload: { username, password, readOnlyChecked } })\r\n                    ];\r\n                })\r\n            );\r\n        })\r\n    ));\r\n\r\n    renewSessionToken$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(renewSessionToken),\r\n            withLatestFrom(this.store.pipe(select(getUser))),\r\n            mergeMap(([{ username, password, shouldStartOperation }, userInformation]) => {\r\n                const encodedAuthorizationString = window.btoa(`${username}:${password}`);\r\n                const authorization = `${this.authorizationType.BASIC} ${encodedAuthorizationString}`;\r\n                const authToken = sessionStorage.getItem(`${TokenType.BEARER}`);\r\n\r\n                if (this.vnfcSharedService.isVmcu()) {\r\n                    return this.secService.loginPost({\r\n                            Authorization: authorization, body: {\r\n                                ReadOnlyMode: !!userInformation?.information?.readOnlyMode\r\n                            }\r\n                        }\r\n                    ).pipe(\r\n                        takeUntil(this.cancelLogin$),\r\n                        mergeMap((response: LoginResponse) => [\r\n                            setLastSessionToken({ authToken }),\r\n                            setToken({ payload: { type: TokenType.BEARER, value: response.Token } }),\r\n                            ...this.renewTokenResponseMap(response, username || '', shouldStartOperation)\r\n                        ]),\r\n                        catchError((error: HttpErrorResponse) => of(handleLoginRelatedError({ error, username, password })))\r\n                    );\r\n                }\r\n\r\n                return this.sessionMgmtService.refreshTokenPatch({ Authorization: authorization,body: {\r\n                        Token: authToken as string,\r\n                        Type: TokenType.BEARER\r\n                    } })\r\n                    .pipe(\r\n                        mergeMap((response: RefreshTokenResponse) => this.onRefreshTokenSucceeded(response, shouldStartOperation, authToken)),\r\n                        catchError((error: HttpErrorResponse) => {\r\n                            return [400, 404, 500].includes(error.status) ?\r\n                                of(loginFailed({ payload: error.error })) :\r\n                                of(loginFailed({ payload: 'Service is temporarily unavailable' }));\r\n                        })\r\n                    );\r\n            })\r\n        )\r\n    );\r\n\r\n    removeLastSession$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(removeLastSession),\r\n            withLatestFrom(this.store.select(selectLastSessionToken)),\r\n            mergeMap(([, token]) => this.secService.logoutPost({\r\n                Authorization: `${this.authorizationType.BEARER} ${token}`\r\n            }).pipe(\r\n                map(() => removeLastSessionSuccessfull())\r\n            ))\r\n        ));\r\n\r\n    openLegalNoticeModal$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(openLegalNoticeModal),\r\n            filter(() => !this.vnfcSharedService.isVmcu()),\r\n            switchMap(() => of (\r\n                showLegalNoticeModal(),\r\n                getLegalNoticeMessage()))\r\n        )\r\n    );\r\n\r\n    submitLegalNoticeModal$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(submitLegalNoticeModal),\r\n            withLatestFrom(this.store.select(selectLonginResponse)),\r\n            mergeMap(([, response]) => this.loginResponseMap(response.response, response.username))\r\n        )\r\n    );\r\n\r\n    loginResponseMap(loginResponse: LoginResponse | TokenInfo, user: string) {\r\n        const userInfo = {\r\n            username: user,\r\n            expires: loginResponse.Expires,\r\n            failedLoginAttempts: loginResponse.FailedLoginAttempts,\r\n            lastFailedLogin: loginResponse.LastFailedLogin,\r\n            lastLogin: loginResponse.LastLogin,\r\n            passwordAboutToExpireMessage: loginResponse.AdditionalText,\r\n            readOnlyMode: loginResponse.ReadOnlyMode,\r\n            role: loginResponse.Role\r\n        } as UserInformation;\r\n\r\n        const layout = this.vnfcSharedService.getVnfcType() === 'vDu' ? VduLayout : (this.vnfcSharedService.getVnfcType()  === 'vCu' ? CuLayout : VmCuLayout);\r\n        validateAndClearLayout(this.store, layout);\r\n\r\n        const { redirectUrl } = this.activatedRoute.snapshot.queryParams;\r\n\r\n        return [\r\n            loginSuccessful(),\r\n            updateDowngradedPrivilegesDialogPopupFlag({ payload: userInfo.readOnlyMode }),\r\n            updateUserInformation({ payload: userInfo }),\r\n            updateUser({ payload: userInfo }),\r\n            redirect({ routerLink: redirectUrl || RouterLink.dashboard, activatedRoute: this.activatedRoute })\r\n        ];\r\n    }\r\n\r\n    renewTokenResponseMap(loginResponse: LoginResponse | TokenInfo, user: string, shouldStartOperation: boolean) {\r\n        const userInfo = {\r\n            username: user,\r\n            expires: loginResponse.Expires,\r\n            failedLoginAttempts: loginResponse.FailedLoginAttempts,\r\n            lastFailedLogin: loginResponse.LastFailedLogin,\r\n            lastLogin: loginResponse.LastLogin,\r\n            passwordAboutToExpireMessage: loginResponse.AdditionalText,\r\n            role: loginResponse.Role\r\n        } as UserInformation;\r\n\r\n\r\n        return [\r\n            removeLastSession(),\r\n            tokenRenewalSuccessful({ shouldStartOperation }),\r\n            updateUserInformation({ payload: userInfo }),\r\n            updateUser({ payload: userInfo })\r\n        ];\r\n    }\r\n\r\n    onRefreshTokenSucceeded(response: RefreshTokenResponse, shouldStartOperation: boolean, authToken: string | null) {\r\n        const userInfo = {\r\n            expires: response.Expires\r\n        } as UserInformation;\r\n\r\n        return [\r\n            setLastSessionToken({ authToken }),\r\n            setToken({ payload: { type: response.Type, value: response.Token } }),\r\n            tokenRenewalSuccessful({ shouldStartOperation }),\r\n            updateUserInformation({ payload: userInfo })\r\n        ];\r\n    }\r\n\r\n    handleSsoNormalError() {\r\n        return of(\r\n            removeToken({ payload: TokenType.BEARER }),\r\n            redirect({ routerLink: RouterLink.login, activatedRoute: this.activatedRoute }),\r\n            loginFailed({ payload: 'Login failed. Please try again' })\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, mapTo, mergeMap } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { redirect } from '@oam/core/lib/actions/router.actions';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { setLoginInitialValues } from '../actions/login.actions';\r\nimport { removeAllNotifications } from '@oam/core/lib/actions/toast-message.actions';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { clearTokens, removeUser } from '@oam/core/lib/actions/user.actions';\r\nimport {\r\n    logout,\r\n    logoutFailed,\r\n    logoutInProgress,\r\n    logoutSuccessful\r\n} from '../actions/logout.actions';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { AuthenticationService } from '@oam/cu-api-gw-api/services/authentication.service';\r\nimport { TokenType } from '@oam/core/lib/store/user-state';\r\nimport { closeAllDialogs } from '@oam/cu-ui/lib/webem-overlay/core/actions/overlay.actions';\r\nimport { pmServerAvailable } from '@oam/pm-v2/lib/core/actions/counters-pm-service.actions';\r\n\r\n@Injectable()\r\nexport class LogoutEffects {\r\n\r\n    constructor(private readonly actions$: Actions,\r\n                private readonly activatedRoute: ActivatedRoute,\r\n                private readonly secService: AuthenticationService,\r\n    ) {\r\n    }\r\n\r\n    logout$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(logout),\r\n            mergeMap(() => {\r\n                const authToken = sessionStorage.getItem(TokenType.BEARER);\r\n                const authorization = `${TokenType.BEARER} ${authToken}`;\r\n\r\n                return this.secService.logoutPost({ Authorization: authorization }).pipe(\r\n                        mergeMap(() => [\r\n                            clearTokens(),\r\n                            removeUser(),\r\n                            setLoginInitialValues(),\r\n                            removeAllNotifications(),\r\n                            closeAllDialogs(),\r\n                            redirect({ routerLink: RouterLink.login, activatedRoute: this.activatedRoute }),\r\n                            logoutSuccessful(),\r\n                            pmServerAvailable()\r\n                        ]),\r\n                        catchError((error: HttpErrorResponse) => of(logoutFailed({ payload: error.error })))\r\n                    );\r\n                }\r\n            )\r\n        )\r\n    );\r\n\r\n    logoutInProgress$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(logout),\r\n            mapTo(logoutInProgress())\r\n        )\r\n    );\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport {\r\n    subscribeTokenInfoWatch,\r\n    unsubscribeTokenInfoWatch,\r\n    subscribeTokenInfoWatchError,\r\n    tokenInfoRequest,\r\n    setTokenInfo,\r\n    PostTokenInfo,\r\n    SubscribeUserOperationWatch,\r\n    UnsubscribeUserOperationWatch,\r\n    RenewOperationedAction,\r\n    ExpiredPollingErrorAction\r\n} from '@oam/auth/lib/auth/core/actions/token-info.actions';\r\nimport { asyncScheduler, of } from 'rxjs';\r\nimport {\r\n    catchError,\r\n    map,\r\n    mergeMap,\r\n    takeUntil,\r\n    tap,\r\n    timeout\r\n} from 'rxjs/operators';\r\nimport { PollingService } from '@oam/core/lib/services/polling.service';\r\nimport { SessionMgmtService } from '@oam/cu-api-gw-api/services/session-mgmt.service';\r\nimport { UserOperationService } from '@oam/core/lib/services/user-operation.service';\r\n\r\n@Injectable()\r\nexport class TokenInfoEffects {\r\n\r\n  constructor(private actions$: Actions,\r\n              private readonly pollingService: PollingService,\r\n              private readonly sessionMgmtService: SessionMgmtService,\r\n              private readonly userOperationService: UserOperationService\r\n              ) {}\r\n\r\n  subscribeTokenInfoWatch$ = createEffect(() => ({ scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(subscribeTokenInfoWatch),\r\n            mergeMap(() => this.pollingService.getTimer(scheduler).pipe(\r\n                takeUntil(this.unsubscribeTokenInfoWatch$),\r\n                map(() => tokenInfoRequest())\r\n            ))\r\n        )\r\n    );\r\n\r\n  tokenInfoRequest$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(tokenInfoRequest),\r\n            mergeMap(() => this.sessionMgmtService.getTokenInfo().pipe(\r\n                map((tokenInfo) => setTokenInfo({tokenInfo})),\r\n                catchError(err => of(subscribeTokenInfoWatchError(err)))\r\n                )\r\n            )\r\n        ));\r\n\r\n  unsubscribeTokenInfoWatch$ = createEffect(() =>\r\n            this.actions$.pipe(\r\n                ofType(unsubscribeTokenInfoWatch)\r\n            ),\r\n        { dispatch: false }\r\n    );\r\n\r\n    postTokenInfo$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(PostTokenInfo),\r\n            mergeMap(() =>\r\n                this.sessionMgmtService.tokenInfoPost({body: {OperationTimestamp: this.userOperationService.getFlag()}}\r\n                ).pipe(\r\n                    timeout(this.pollingService.REQUEST_TIMEOUT_MS),\r\n                    tap(() => this.userOperationService.setFlag(false)),\r\n                    map(() => RenewOperationedAction({OperationTimestamp: false}) ),\r\n                    catchError(err => {\r\n                        this.userOperationService.setFlag(false);\r\n\r\n                        return of(ExpiredPollingErrorAction(err));\r\n                    })\r\n                ))\r\n        )\r\n    );\r\n\r\n    subscribeUserOperationWatch$ = createEffect(() => ({scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(SubscribeUserOperationWatch),\r\n            mergeMap(() => this.pollingService.getTimer(scheduler).pipe(\r\n                takeUntil(this.unsubscribeUserOperationWatch$),\r\n                map(() => PostTokenInfo())\r\n            ))\r\n        )\r\n    );\r\n\r\n    unsubscribeUserOperationWatch$ = createEffect(() =>\r\n            this.actions$.pipe(\r\n                ofType(UnsubscribeUserOperationWatch)\r\n            ),\r\n        { dispatch: false }\r\n    );\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { LoginPageComponent } from './components/login/login-page.component';\r\nimport { TokenInfoDialogComponent } from './components/token-info/token-info-dialog.component';\r\nimport { SsoLoginPageComponent } from './components/sso-login/sso-login-page.component';\r\nimport * as loginState from './core/reducers/login.reducer';\r\nimport * as logoutState from './core/reducers/logout.reducer';\r\nimport * as tokenInfoReducer from './core/reducers/token-info.reducer';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { LoginEffects } from './core/effects/login.effects';\r\nimport { LogoutEffects } from './core/effects/logout.effects';\r\nimport { TokenInfoEffects } from './core/effects/token-info.effects';\r\nimport { CardModule } from 'primeng/card';\r\nimport { ProgressBarModule } from 'primeng/progressbar';\r\nimport { AutoFocusDirective } from './components/login/directives/auto-focus.directive';\r\nimport { WebemButtonModule, ShowPasswordButtonModule, TrackCapsLockModule } from '@oam/cu-ui';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        LoginPageComponent,\r\n        SsoLoginPageComponent,\r\n        TokenInfoDialogComponent,\r\n        AutoFocusDirective,\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        StoreModule.forFeature(loginState.featureKey, loginState.reducer),\r\n        StoreModule.forFeature(logoutState.featureKey, logoutState.reducer),\r\n        StoreModule.forFeature(tokenInfoReducer.tokenInfoFeatureKey, tokenInfoReducer.reducer),\r\n        EffectsModule.forFeature([LoginEffects, LogoutEffects, TokenInfoEffects]),\r\n        CardModule,\r\n        WebemButtonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        ProgressBarModule,\r\n        TrackCapsLockModule,\r\n        ShowPasswordButtonModule,\r\n        CheckboxModule\r\n    ],\r\n    exports: [\r\n        LoginPageComponent,\r\n        SsoLoginPageComponent,\r\n        TokenInfoDialogComponent,\r\n        StoreModule,\r\n        CheckboxModule\r\n    ]\r\n})\r\nexport class AuthModule {\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { AccountConfig } from '@oam/account-shared/lib/accounts-management/services/account-config.service';\r\n\r\n\r\n@NgModule({})\r\nexport class AccountConfigModule {\r\n    static forRoot(additionalData: AccountConfig): ModuleWithProviders<AccountConfigModule> {\r\n        return {\r\n            ngModule: AccountConfigModule,\r\n            providers: [\r\n                {\r\n                    provide: AccountConfig,\r\n                    useValue: additionalData\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { StatusService } from '@oam/cu-asm-api/services';\r\nimport { CuCellsDiff } from '@oam/cu-asm-api';\r\n\r\nexport const cuCellsInfoConfig = {\r\n    getCellsDiff: getCuCellsDif\r\n};\r\n\r\nfunction getCuCellsDif(statusService: StatusService): Observable<CuCellsDiff> {\r\n    return statusService.getCuCellsDiff();\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { DiagnosticContentMenuConfig } from './diagnostic-content-menu-config.service';\r\n\r\n\r\n@NgModule({})\r\nexport class DiagnosticContentMenuConfigModule {\r\n    static forRoot(additionalData: DiagnosticContentMenuConfig): ModuleWithProviders<DiagnosticContentMenuConfigModule> {\r\n        return {\r\n            ngModule: DiagnosticContentMenuConfigModule,\r\n            providers: [\r\n                {\r\n                    provide: DiagnosticContentMenuConfig,\r\n                    useValue: additionalData\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { ErrorsTabConfig } from '@oam/errors/lib/core/services/errors-tab-config.service';\r\n\r\n@NgModule({})\r\nexport class ErrorsTabConfigModule {\r\n    static forRoot(additionalData: ErrorsTabConfig): ModuleWithProviders<ErrorsTabConfigModule> {\r\n        return {\r\n            ngModule: ErrorsTabConfigModule,\r\n            providers: [\r\n                {\r\n                    provide: ErrorsTabConfig,\r\n                    useValue: additionalData\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { MenuItemMap } from '@oam/core/lib/models/menuu-item-map.type';\r\n\r\nexport const CU_ERRORS_TAB_MENU_ITEMS: MenuItemMap = {\r\n    missingMandatoryObjects: {\r\n        label: 'Missing Mandatory Objects',\r\n        url: 'missing-mandatory-objects',\r\n        index: 0\r\n    },\r\n    parameterErrors: {\r\n        label: 'Parameter Errors',\r\n        url: 'parameter-errors',\r\n        index: 1\r\n    },\r\n    objectsQuantityErrors: {\r\n        label: 'Objects Quantity Errors',\r\n        url: 'objects-quantity-errors',\r\n        index: 2\r\n    },\r\n    globalRelationErrors: {\r\n        label: 'Global Relation Errors',\r\n        url: 'global-relation-errors',\r\n        index: 3\r\n    },\r\n    parameterRelationErrors: {\r\n        label: 'Parameter Relation Errors',\r\n        url: 'parameter-relation-errors',\r\n        index: 4\r\n    }\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanLoad, Route, UrlSegment } from '@angular/router';\r\nimport { NgFeatureFlagModuleConfig } from '@oam/ng-feature-flag';\r\nimport { FeatureFlag } from '@oam/feature-flag';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FeatureFlagGuard implements CanActivate, CanLoad {\r\n    private mapping: Map<string, string>;\r\n\r\n    constructor(private ngFeatureFlagModuleConfig: NgFeatureFlagModuleConfig, private featureFlag: FeatureFlag) {\r\n        this.mapping = this.ngFeatureFlagModuleConfig.featureFlagGuardRules.reduce((sum, rule) => {\r\n\r\n            sum.set(rule.path, rule.featureFlag);\r\n\r\n            return sum;\r\n        }, new Map<string, string>());\r\n    }\r\n\r\n    canLoad(route: Route, segments: UrlSegment[]) {\r\n        return this.isPathEnabled(route.path);\r\n    }\r\n\r\n    isPathEnabled(path = ''): boolean {\r\n        const featureFlag = this.mapping.get(path);\r\n\r\n        return this.featureFlag.isFeatureEnabled(featureFlag);\r\n    }\r\n\r\n    canActivate(\r\n        route: ActivatedRouteSnapshot) {\r\n\r\n        return this.isPathEnabled(route.routeConfig?.path);\r\n    }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {PreloadingStrategy, Route} from '@angular/router';\r\nimport {Observable, of} from 'rxjs';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CustomPreloadingStrategyService implements PreloadingStrategy {\r\n    preload(route: Route, fn: () => Observable<any>): Observable<any> {\r\n        if (route.data && route.data.preload) {\r\n\r\n            return fn();\r\n        }\r\n\r\n        return of(null);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { WebemRoutesPaths } from '@oam/cu-shared';\r\nimport { AuthGuardService } from '@oam/core/lib/services/auth-guard-service.service';\r\nimport { SingleColumnLayoutComponent } from '@oam/layouts/lib/components/single-column-layout/single-column-layout.component';\r\nimport { SingleColumnLayoutWithActionsBarComponent } from '@oam/layouts/lib/components/single-column-layout-with-actions-bar/single-column-layout-with-actions-bar.component';\r\nimport { LayoutsConfigModule } from '@oam/layouts/lib/layouts-config.module';\r\nimport { LayoutsConfig } from '@oam/layouts/lib/layouts-config.service';\r\nimport { quickMenuItems } from '../models/quick-menu-items.model';\r\nimport { statusBarModel } from '..//models/status-bar-info.model';\r\nimport { quickMenuAlarmsModel } from '../models/quick-menu-alarms.model';\r\nimport { navigations } from '../models/navigations.model';\r\nimport { LayoutsModule } from '@oam/layouts/lib/layouts.module';\r\nimport { SplitViewLayoutComponent } from '@oam/split-view/lib/components/split-view-layout/split-view-layout.component';\r\nimport { TracingConfigModule } from '@oam/tracing/lib/tracing-config.module';\r\nimport { CU_TARGET_COMPONENTS } from '@oam/webem/app/core/constants/cu-target-components';\r\nimport { PageNotFoundComponent, PageNotFoundModule } from '@oam/cu-ui';\r\nimport { LoginPageComponent } from '@oam/auth/lib/auth/components/login/login-page.component';\r\nimport { SsoLoginPageComponent } from '@oam/auth/lib/auth/components/sso-login/sso-login-page.component';\r\nimport { AuthModule } from '@oam/auth';\r\nimport { AccountConfigModule } from '@oam/account-shared/lib/accounts-management/modules/account-config.module';\r\nimport { CellsInfoConfigModule } from '@oam/pm-counters-modal/lib/cells-info-config.module';\r\nimport { cuCellsInfoConfig } from '../config/pm-modal/cells-info-endpoint';\r\nimport { DiagnosticContentMenuConfigModule } from '@oam/diagnostic-shared/lib/components/diagnostic-content-menu/diagnostic-content-menu-config.module';\r\nimport { ErrorsTabConfigModule } from '@oam/errors/lib/core/services/errors-tab-config.module';\r\nimport { CU_ERRORS_TAB_MENU_ITEMS } from '@oam/webem/app/core/constants/cu-errors-tabs-routs.constants';\r\nimport { FeatureFlagGuard } from '../../../../../../libs/ng-feature-flag/src/lib/guards/feature-flag.guard';\r\nimport { RoleAccessGuard } from '@oam/role-access-ng/lib/guards/role-access.guard';\r\nimport { CustomPreloadingStrategyService } from '@oam/core/lib/services/custom-preloading-strategy.service';\r\nimport { XnLinksStatusModule } from '@oam/xn-links-status';\r\n\r\n\r\nconst mainPage = WebemRoutesPaths.dashboard;\r\n\r\nconst CAN_ACTIVATE_GUARD = {\r\n    canActivate: [AuthGuardService, FeatureFlagGuard, RoleAccessGuard]\r\n};\r\n\r\nconst COMMON_GUARD_SERVICE = {\r\n    ...CAN_ACTIVATE_GUARD,\r\n    canLoad: [AuthGuardService, FeatureFlagGuard, RoleAccessGuard]\r\n};\r\n\r\nexport const routes: Routes = [\r\n    {\r\n        path: WebemRoutesPaths.dashboard,\r\n        component: SingleColumnLayoutComponent,\r\n        data: { preload: true },\r\n        ...CAN_ACTIVATE_GUARD,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.CuDashboardModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.cuStatus,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.CuStatusModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.dusStatus,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.DusStatusModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.vnfcStatus,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.VmStatusModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.x2Status,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.X2StatusModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.xnLinksStatus,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.XnLinksStatusModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.networkSlicing,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.NetworkSlicingModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.ngLinkStatus,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.NgLinkModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.cellsStatus,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.CellsStatusModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.cellsMapping,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.CellsMappingModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.parameterEditor,\r\n        component: SingleColumnLayoutWithActionsBarComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.ParameterEditorModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.ipsecPskConfiguration,\r\n        component: SingleColumnLayoutWithActionsBarComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.IpsecPskConfigurationModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.parameterSearch,\r\n        component: SingleColumnLayoutWithActionsBarComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.ConfigurationParameterSearchModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.errors,\r\n        component: SingleColumnLayoutWithActionsBarComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.ConfigurationErrorsModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.splitView,\r\n        component: SplitViewLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.LazySplitViewLibModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.compareObjects,\r\n        component: SingleColumnLayoutWithActionsBarComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.ConfigurationCompareObjectsModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.alarmActive,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.AlarmActiveModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.alarmHistorical,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.AlarmHistoryModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.faultToggling,\r\n        component: SingleColumnLayoutComponent,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.FaultTogglingModule\r\n        ),\r\n        ...COMMON_GUARD_SERVICE\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.performance,\r\n        component: SingleColumnLayoutWithActionsBarComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.PmV2Module\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.certificateOperator,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.CertificateOperatorModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.certificateAutomatic,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.CertificateAutomaticModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.certificateCrl,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.CertificateCrlModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.uamLocalUserAccount,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.OperatorAccountManagementModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.uamServiceAccountManagement,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.ServiceAccountModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.uamSessions,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.SessionsModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.diagnosticSnapshot,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.DiagnosticSnapshotModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.diagnosticUplane,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.TracingModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.diagnosticCplane,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.DiagnosticCplaneModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.ipConnectivity,\r\n        component: SingleColumnLayoutComponent,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.DiagnosticIpConnectivityModule\r\n        ),\r\n        ...COMMON_GUARD_SERVICE\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.pmtuDiscovery,\r\n        component: SingleColumnLayoutComponent,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.DiagnosticPmtuDiscoveryModule\r\n        ),\r\n        ...COMMON_GUARD_SERVICE\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.ipsecAssociations,\r\n        component: SingleColumnLayoutComponent,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.DiagnosticIpSecurityAssociationModule\r\n        ),\r\n        ...COMMON_GUARD_SERVICE\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.uiSettings,\r\n        component: SingleColumnLayoutComponent,\r\n        ...COMMON_GUARD_SERVICE,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.UiSettingsModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.login,\r\n        component: LoginPageComponent,\r\n        data: { title: 'CU WebEM' }\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.ssologin,\r\n        component: SsoLoginPageComponent\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.passwordExpired,\r\n        loadChildren: () => import('./lazy-loaded-bundle').then(\r\n            m => m.PasswordExpiredModule\r\n        )\r\n    },\r\n    {\r\n        path: WebemRoutesPaths.pageNotFound,\r\n        component: PageNotFoundComponent\r\n    },\r\n    {\r\n        path: '',\r\n        redirectTo: mainPage,\r\n        pathMatch: 'full'\r\n    },\r\n    {\r\n        path: '**',\r\n        redirectTo: WebemRoutesPaths.pageNotFound\r\n    }\r\n];\r\n\r\nconst layoutConfig: LayoutsConfig = {\r\n    statusBarModel,\r\n    quickMenuAlarmsModel,\r\n    quickMenuItems,\r\n    navigations\r\n};\r\n\r\n@NgModule({\r\n    imports: [\r\n        AuthModule,\r\n        CommonModule,\r\n        RouterModule.forRoot(routes, {\r\n            initialNavigation: 'enabledNonBlocking',\r\n            relativeLinkResolution: 'legacy',\r\n            preloadingStrategy: CustomPreloadingStrategyService\r\n        }),\r\n        DiagnosticContentMenuConfigModule.forRoot({ splitTracingTabs : true }),\r\n        AccountConfigModule.forRoot({ isConfigCu: true }),\r\n        ErrorsTabConfigModule.forRoot({ routes: CU_ERRORS_TAB_MENU_ITEMS }),\r\n        CellsInfoConfigModule.forRoot(cuCellsInfoConfig),\r\n        TracingConfigModule.forRoot({ isConfigVdu: false, targetComponents: CU_TARGET_COMPONENTS, withBitmaskFilters: false }),\r\n        PageNotFoundModule,\r\n        LayoutsModule,\r\n        LayoutsConfigModule.forRoot(layoutConfig)\r\n    ],\r\n    exports: [RouterModule],\r\n    providers: [],\r\n    declarations: []\r\n})\r\nexport class WebemRouterModule {\r\n}\r\n","/* tslint:disable */\r\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\r\n\r\nimport { CertMgtService } from './services/cert-mgt.service';\r\nimport { AsyncOperationsService } from './services/async-operations.service';\r\nimport { TraceConfigurationService } from './services/trace-configuration.service';\r\nimport { VduInterfacesService } from './services/vdu-interfaces.service';\r\nimport { DiagnosticService } from './services/diagnostic.service';\r\nimport { StatusService } from './services/status.service';\r\nimport { NotificationsService } from './services/notifications.service';\r\nimport { SecurityService } from './services/security.service';\r\n\r\n/**\r\n * Module that provides all services and configuration.\r\n */\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: [],\r\n  providers: [\r\n    CertMgtService,\r\n    AsyncOperationsService,\r\n    TraceConfigurationService,\r\n    VduInterfacesService,\r\n    DiagnosticService,\r\n    StatusService,\r\n    NotificationsService,\r\n    SecurityService,\r\n    ApiConfiguration\r\n  ],\r\n})\r\nexport class CuTrsApiModule {\r\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<CuTrsApiModule> {\r\n    return {\r\n      ngModule: CuTrsApiModule,\r\n      providers: [\r\n        {\r\n          provide: ApiConfiguration,\r\n          useValue: params\r\n        }\r\n      ]\r\n    }\r\n  }\r\n\r\n  constructor( \r\n    @Optional() @SkipSelf() parentModule: CuTrsApiModule,\r\n    @Optional() http: HttpClient\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error('CuTrsApiModule is already loaded. Import in your base AppModule only.');\r\n    }\r\n    if (!http) {\r\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n      'See also https://github.com/angular/angular/issues/20575');\r\n    }\r\n  }\r\n}\r\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Definition } from '../models/definition';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UpstreamApiMgmtService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation publishPut\n   */\n  static readonly PublishPutPath = '/publish';\n\n  /**\n   * Allows to add a new upstream api definition to the already existing set of apis.\n   *\n   * This shall be used to modify existing svc-apidefs.It can be used for partial\n   * update/new additions/partial deletions of svc-apidefs. The defs present in this request\n   * will override all existing API defs. Validation : (1) File shall exists, if not exists\n   * it shall fail with HTTP error code 404. This endpoint is for internal use only\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `publishPut()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  publishPut$Response(params: {\n\n    /**\n     * Content type\n     */\n    'Content-Type': string;\n\n    /**\n     * File name. File must follow the naming conventions \\&lt;appname\\&gt;-svc-apidefs.json and should be in valid json format.\n     */\n    Name: string;\n      body?: Array<Definition>\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UpstreamApiMgmtService.PublishPutPath, 'put');\n    if (params) {\n\n      rb.header('Content-Type', params['Content-Type'], {});\n      rb.header('Name', params.Name, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Allows to add a new upstream api definition to the already existing set of apis.\n   *\n   * This shall be used to modify existing svc-apidefs.It can be used for partial\n   * update/new additions/partial deletions of svc-apidefs. The defs present in this request\n   * will override all existing API defs. Validation : (1) File shall exists, if not exists\n   * it shall fail with HTTP error code 404. This endpoint is for internal use only\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `publishPut$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  publishPut(params: {\n\n    /**\n     * Content type\n     */\n    'Content-Type': string;\n\n    /**\n     * File name. File must follow the naming conventions \\&lt;appname\\&gt;-svc-apidefs.json and should be in valid json format.\n     */\n    Name: string;\n      body?: Array<Definition>\n  }): Observable<void> {\n\n    return this.publishPut$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation publishPost\n   */\n  static readonly PublishPostPath = '/publish';\n\n  /**\n   * Allows to add a new upstream api definition.\n   *\n   * This shall be used to CREATE NON-EXISTING svc-apidefs [ TO BE USED FIRST TIME\n   * ONLY by any upstream-service or after DELETE]. Validation : File shall not exist and\n   * if file exists operation will fail with the HTTP error code 409. This endpoint is for internal use only.\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `publishPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  publishPost$Response(params: {\n\n    /**\n     * content type\n     */\n    'Content-Type': string;\n\n    /**\n     * File name. File must follow the naming conventions \\&lt;appname\\&gt;-svc-apidefs.json and should be in valid json format.\n     */\n    Name: string;\n  \n    /**\n     * Path to the input definition file.\n     */\n    body?: Array<Definition>\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UpstreamApiMgmtService.PublishPostPath, 'post');\n    if (params) {\n\n      rb.header('Content-Type', params['Content-Type'], {});\n      rb.header('Name', params.Name, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Allows to add a new upstream api definition.\n   *\n   * This shall be used to CREATE NON-EXISTING svc-apidefs [ TO BE USED FIRST TIME\n   * ONLY by any upstream-service or after DELETE]. Validation : File shall not exist and\n   * if file exists operation will fail with the HTTP error code 409. This endpoint is for internal use only.\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `publishPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  publishPost(params: {\n\n    /**\n     * content type\n     */\n    'Content-Type': string;\n\n    /**\n     * File name. File must follow the naming conventions \\&lt;appname\\&gt;-svc-apidefs.json and should be in valid json format.\n     */\n    Name: string;\n  \n    /**\n     * Path to the input definition file.\n     */\n    body?: Array<Definition>\n  }): Observable<void> {\n\n    return this.publishPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation publishDelete\n   */\n  static readonly PublishDeletePath = '/publish';\n\n  /**\n   * Removes existing upstream api definitions.\n   *\n   * This shall be used to REMOVE ALL EXISTING svc-apidefs, i.e., it is clearing\n   * all svc-apidefs from API-GW.\n   * Validation : file shall exists else HTTP error code 404 is returned. This endpoint is for internal use only\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `publishDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  publishDelete$Response(params: {\n\n    /**\n     * Name of the API definition file to be deleted\n     */\n    Name: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UpstreamApiMgmtService.PublishDeletePath, 'delete');\n    if (params) {\n\n      rb.header('Name', params.Name, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Removes existing upstream api definitions.\n   *\n   * This shall be used to REMOVE ALL EXISTING svc-apidefs, i.e., it is clearing\n   * all svc-apidefs from API-GW.\n   * Validation : file shall exists else HTTP error code 404 is returned. This endpoint is for internal use only\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `publishDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  publishDelete(params: {\n\n    /**\n     * Name of the API definition file to be deleted\n     */\n    Name: string;\n\n  }): Observable<void> {\n\n    return this.publishDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation publishPatch\n   */\n  static readonly PublishPatchPath = '/publish';\n\n  /**\n   * Allows to modify existing upstream api definition.\n   *\n   * This shall be used to ONLY TO ADD NON-EXISTING new svc-apidefs to the existing\n   * set of API defs. REMEMBER NOT TO USE IT FOR MODIFICATION OF ANY EXISTING API Defs.\n   * Validation : (1) File shall exist, if it does not exist the operation will fail with the HTTP error code 404,\n   * (2) If APIs defs are already present, operation will fail with the HTTP error code 409. This endpoint is for internal use only\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `publishPatch()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  publishPatch$Response(params: {\n\n    /**\n     * Content type\n     */\n    'Content-Type': string;\n\n    /**\n     * File name. File must follow the naming conventions \\&lt;appname\\&gt;-svc-apidefs.json and should be in valid json format.\n     */\n    Name: string;\n      body?: Array<Definition>\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, UpstreamApiMgmtService.PublishPatchPath, 'patch');\n    if (params) {\n\n      rb.header('Content-Type', params['Content-Type'], {});\n      rb.header('Name', params.Name, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Allows to modify existing upstream api definition.\n   *\n   * This shall be used to ONLY TO ADD NON-EXISTING new svc-apidefs to the existing\n   * set of API defs. REMEMBER NOT TO USE IT FOR MODIFICATION OF ANY EXISTING API Defs.\n   * Validation : (1) File shall exist, if it does not exist the operation will fail with the HTTP error code 404,\n   * (2) If APIs defs are already present, operation will fail with the HTTP error code 409. This endpoint is for internal use only\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `publishPatch$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  publishPatch(params: {\n\n    /**\n     * Content type\n     */\n    'Content-Type': string;\n\n    /**\n     * File name. File must follow the naming conventions \\&lt;appname\\&gt;-svc-apidefs.json and should be in valid json format.\n     */\n    Name: string;\n      body?: Array<Definition>\n  }): Observable<void> {\n\n    return this.publishPatch$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { AdminStats } from '../models/admin-stats';\nimport { SummaryStats } from '../models/summary-stats';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatisticsService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation adminstatsGet\n   */\n  static readonly AdminstatsGetPath = '/adminstats';\n\n  /**\n   * Provides API's administrator state summary.\n   *\n   * API Gateway exposed endpoints administrative status\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `adminstatsGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  adminstatsGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<AdminStats>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatisticsService.AdminstatsGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<AdminStats>>;\n      })\n    );\n  }\n\n  /**\n   * Provides API's administrator state summary.\n   *\n   * API Gateway exposed endpoints administrative status\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `adminstatsGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  adminstatsGet(params?: {\n\n  }): Observable<Array<AdminStats>> {\n\n    return this.adminstatsGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<AdminStats>>) => r.body as Array<AdminStats>)\n    );\n  }\n\n  /**\n   * Path part for operation statsGet\n   */\n  static readonly StatsGetPath = '/stats';\n\n  /**\n   * Provides API access summary statistics.\n   *\n   * API Gateway exposed endpoints Request/Response summary\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `statsGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  statsGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<SummaryStats>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatisticsService.StatsGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<SummaryStats>>;\n      })\n    );\n  }\n\n  /**\n   * Provides API access summary statistics.\n   *\n   * API Gateway exposed endpoints Request/Response summary\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `statsGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  statsGet(params?: {\n\n  }): Observable<Array<SummaryStats>> {\n\n    return this.statsGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<SummaryStats>>) => r.body as Array<SummaryStats>)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ConfigRequest } from '../models/config-request';\nimport { ConfigResponse } from '../models/config-response';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigurationService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation configGet\n   */\n  static readonly ConfigGetPath = '/config';\n\n  /**\n   * Get APIGW current active configuration.\n   *\n   * Read configuration data. This endpoint is for internal use only.\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `configGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  configGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<ConfigResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConfigurationService.ConfigGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ConfigResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get APIGW current active configuration.\n   *\n   * Read configuration data. This endpoint is for internal use only.\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `configGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  configGet(params?: {\n\n  }): Observable<ConfigResponse> {\n\n    return this.configGet$Response(params).pipe(\n      map((r: StrictHttpResponse<ConfigResponse>) => r.body as ConfigResponse)\n    );\n  }\n\n  /**\n   * Path part for operation configPut\n   */\n  static readonly ConfigPutPath = '/config';\n\n  /**\n   * Allows to update APIGW active configuration.\n   *\n   * Update configuration data. This endpoint is for internal use only.\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `configPut()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  configPut$Response(params?: {\n      body?: ConfigRequest\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConfigurationService.ConfigPutPath, 'put');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * Allows to update APIGW active configuration.\n   *\n   * Update configuration data. This endpoint is for internal use only.\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `configPut$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  configPut(params?: {\n      body?: ConfigRequest\n  }): Observable<string> {\n\n    return this.configPut$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { AuthenticationService } from './services/authentication.service';\nimport { SessionMgmtService } from './services/session-mgmt.service';\nimport { UpstreamApiMgmtService } from './services/upstream-api-mgmt.service';\nimport { StatisticsService } from './services/statistics.service';\nimport { ConfigurationService } from './services/configuration.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    AuthenticationService,\n    SessionMgmtService,\n    UpstreamApiMgmtService,\n    StatisticsService,\n    ConfigurationService,\n    ApiConfiguration\n  ],\n})\nexport class CuApiGwClientModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<CuApiGwClientModule> {\n    return {\n      ngModule: CuApiGwClientModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: CuApiGwClientModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('CuApiGwClientModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n","/* tslint:disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { CmService } from './services/cm.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    CmService,\n    ApiConfiguration\n  ],\n})\nexport class CuCmClientModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<CuCmClientModule> {\n    return {\n      ngModule: CuCmClientModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: CuCmClientModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('CuCmClientModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n","/* tslint:disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { CuPmv2ClientService } from './services/cu-pmv-2-client.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    CuPmv2ClientService,\n    ApiConfiguration\n  ],\n})\nexport class CuPmv2ClientModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<CuPmv2ClientModule> {\n    return {\n      ngModule: CuPmv2ClientModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: CuPmv2ClientModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('CuPmv2ClientModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n","/* tslint:disable */\r\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\r\n\r\nimport { PeService } from './services/pe.service';\r\nimport { SnapshotService } from './services/snapshot.service';\r\nimport { StatusService } from './services/status.service';\r\nimport { SecService } from './services/sec.service';\r\n\r\n/**\r\n * Module that provides all services and configuration.\r\n */\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: [],\r\n  providers: [\r\n    PeService,\r\n    SnapshotService,\r\n    StatusService,\r\n    SecService,\r\n    ApiConfiguration\r\n  ],\r\n})\r\nexport class CuAsmClientModule {\r\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<CuAsmClientModule> {\r\n    return {\r\n      ngModule: CuAsmClientModule,\r\n      providers: [\r\n        {\r\n          provide: ApiConfiguration,\r\n          useValue: params\r\n        }\r\n      ]\r\n    }\r\n  }\r\n\r\n  constructor( \r\n    @Optional() @SkipSelf() parentModule: CuAsmClientModule,\r\n    @Optional() http: HttpClient\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error('CuAsmClientModule is already loaded. Import in your base AppModule only.');\r\n    }\r\n    if (!http) {\r\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n      'See also https://github.com/angular/angular/issues/20575');\r\n    }\r\n  }\r\n}\r\n","/* tslint:disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { FmService } from './services/fm.service';\nimport { StatusService } from './services/status.service';\nimport { CuFmClientService } from './services/cu-fm-client.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    FmService,\n    StatusService,\n    CuFmClientService,\n    ApiConfiguration\n  ],\n})\nexport class CuFmClientModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<CuFmClientModule> {\n    return {\n      ngModule: CuFmClientModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: CuFmClientModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('CuFmClientModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n","/* tslint:disable */\r\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\r\n\r\nimport { StatusService } from './services/status.service';\r\nimport { TracingService } from './services/tracing.service';\r\nimport { NotificationsService } from './services/notifications.service';\r\nimport { FhConfigService } from './services/fh-config.service';\r\nimport { TransportService } from './services/transport.service';\r\nimport { TestModelsService } from './services/test-models.service';\r\n\r\n/**\r\n * Module that provides all services and configuration.\r\n */\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: [],\r\n  providers: [\r\n    StatusService,\r\n    TracingService,\r\n    NotificationsService,\r\n    FhConfigService,\r\n    TransportService,\r\n    TestModelsService,\r\n    ApiConfiguration\r\n  ],\r\n})\r\nexport class CuCpConfigClientModule {\r\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<CuCpConfigClientModule> {\r\n    return {\r\n      ngModule: CuCpConfigClientModule,\r\n      providers: [\r\n        {\r\n          provide: ApiConfiguration,\r\n          useValue: params\r\n        }\r\n      ]\r\n    }\r\n  }\r\n\r\n  constructor( \r\n    @Optional() @SkipSelf() parentModule: CuCpConfigClientModule,\r\n    @Optional() http: HttpClient\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error('CuCpConfigClientModule is already loaded. Import in your base AppModule only.');\r\n    }\r\n    if (!http) {\r\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n      'See also https://github.com/angular/angular/issues/20575');\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\r\nimport { asyncScheduler, of } from 'rxjs';\r\nimport { mergeMap, map, takeUntil, catchError, tap, exhaustMap } from 'rxjs/operators';\r\nimport { StatusService } from '@oam/cu-asm-api/services';\r\nimport { PollingService } from '@oam/core/lib/services/polling.service';\r\nimport {\r\n    setCu,\r\n    cuRequest,\r\n    subscribeCuError,\r\n    unsubscribeCuWatch,\r\n    subscribeCuWatch\r\n} from '../actions/cu.actions';\r\nimport { setCloudAction } from '@oam/shared/lib/core/actions/cloud.actions';\r\nimport { WebemStateService } from '@oam/core/lib/services/webem.state.service';\r\n\r\n@Injectable()\r\nexport class CuEffects {\r\n    constructor(\r\n        private readonly pollingService: PollingService,\r\n        private readonly actions$: Actions,\r\n        private readonly statusService: StatusService,\r\n        private readonly webemStateService: WebemStateService\r\n    ) {\r\n    }\r\n\r\n    unsubscribeCuWatch$ = createEffect(() =>\r\n            this.actions$.pipe(\r\n                ofType(unsubscribeCuWatch)\r\n            ),\r\n        { dispatch: false }\r\n    );\r\n\r\n    cuRequest$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(cuRequest),\r\n            exhaustMap(() => this.statusService.getCu().pipe(\r\n                tap(cu => this.webemStateService.setWebemState(cu)),\r\n                mergeMap(cu => ([\r\n                    setCu({ payload: cu }),\r\n                    setCloudAction({ payload: { cloudName: cu.name, cloudId: cu.id } })\r\n                ])),\r\n                catchError(err => of(subscribeCuError(err)))\r\n            ))\r\n        )\r\n    );\r\n\r\n    subscribeCuWatch$ = createEffect(() => ({ scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(subscribeCuWatch),\r\n            mergeMap(() => this.pollingService.getTimer(scheduler).pipe(\r\n                takeUntil(this.unsubscribeCuWatch$),\r\n                map(() => cuRequest())\r\n            ))\r\n        )\r\n    );\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { map, mergeMap, catchError } from 'rxjs/operators';\r\nimport {\r\n    importUiSettings,\r\n    exportUiSettingsFile,\r\n    exportUiSettingsFileError,\r\n    exportUiSettingsFileSuccess,\r\n    exportUiSettings,\r\n    importUiSettingsFile,\r\n    importUiSettingsFileError,\r\n    importUiSettingsFileSuccess,\r\n    restoreDefaultUiSettings,\r\n    restoreDefaultUiSettingsSuccess,\r\n    restoreDefaultUiSettingsValues,\r\n    restoreDefaultUiSettingsError,\r\n    uiRefresh\r\n} from '@oam/core/lib/actions/app-settings.actions';\r\nimport { addNotification } from '@oam/core/lib/actions/toast-message.actions';\r\nimport { AppSettingsService, ParseResult } from '@oam/core/lib/services/app-settings.service';\r\nimport { FileSaverService } from 'ngx-filesaver';\r\nimport { ToastMessage } from '@oam/core/lib/actions/toast-message';\r\nimport {\r\n    AppSettingsLabels,\r\n    ErrorMessageDetails,\r\n    APP_SETTINGS_FILE_EXTENSION\r\n} from '@oam/core/lib/models/app-settings.model';\r\n\r\n@Injectable()\r\nexport class AppSettingsEffects {\r\n\r\n    constructor(\r\n        private readonly actions$: Actions,\r\n        private readonly appSettingsService: AppSettingsService,\r\n        private readonly fileSaver: FileSaverService\r\n    ) {\r\n    }\r\n\r\n    importUiSettings$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(importUiSettings),\r\n            mergeMap((action) => {\r\n                return [\r\n                    this.notify$('Import settings started', 'info', 'Import settings'),\r\n                    importUiSettingsFile({ file: action.file })\r\n                ];\r\n            })\r\n        )\r\n    );\r\n\r\n    importUiSettingsFile$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(importUiSettingsFile),\r\n            mergeMap(({ file }) => this.appSettingsService.readAndValidate(file).pipe(\r\n                catchError(() => of(importUiSettingsFileError({ errorMessageDetails: ErrorMessageDetails.WRONG_FILE }))))),\r\n            map(({ isValid, content }: ParseResult) => {\r\n                if (!isValid) {\r\n                    return importUiSettingsFileError({ errorMessageDetails: ErrorMessageDetails.WRONG_FILE });\r\n                }\r\n\r\n                this.appSettingsService.importUiSettings(content);\r\n\r\n                return importUiSettingsFileSuccess();\r\n            })\r\n        );\r\n    });\r\n\r\n    importUiSettingsFileSuccess$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(importUiSettingsFileSuccess),\r\n            mergeMap(() => {\r\n                return [\r\n                    uiRefresh(),\r\n                    this.notify$(\r\n                        AppSettingsLabels.MODAL_IMPORT_SUCCESS_DETAIL,\r\n                        AppSettingsLabels.MODAL_TYPE_SUCCESS,\r\n                        AppSettingsLabels.MODAL_IMPORT_SUMMARY\r\n                    )\r\n                ];\r\n            })\r\n        )\r\n    );\r\n\r\n    importUiSettingsFileError$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(importUiSettingsFileError),\r\n            map(({ errorMessageDetails }) => {\r\n                return this.notify$(\r\n                    errorMessageDetails,\r\n                    AppSettingsLabels.MODAL_TYPE_ERROR,\r\n                    AppSettingsLabels.MODAL_IMPORT_SUMMARY);\r\n            })\r\n        )\r\n    );\r\n\r\n    exportUiSettings$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(exportUiSettings),\r\n            mergeMap(() => {\r\n                return [\r\n                    this.notify$('Export settings to file', 'info', 'Export settings'),\r\n                    exportUiSettingsFile()\r\n                ];\r\n            })\r\n        );\r\n    });\r\n\r\n    exportUiSettingsFile$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(exportUiSettingsFile),\r\n            mergeMap(() => this.appSettingsService.downloadUiSettingsFile().pipe(\r\n                map((file: Blob) => {\r\n                    this.saveFile$(file, 'ui_settings' + APP_SETTINGS_FILE_EXTENSION);\r\n\r\n                    return exportUiSettingsFileSuccess();\r\n                }),\r\n                catchError(error => of(exportUiSettingsFileError({ errorMessageDetails: error.message })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    exportUiSettingsFileSuccess$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(exportUiSettingsFileSuccess),\r\n            map(() => this.notify$('', 'success', 'Export file successful'))\r\n        )\r\n    );\r\n\r\n    exportUiSettingsFileError$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(exportUiSettingsFileError),\r\n            map(() => this.notify$('Error', 'error', 'Error while export settings file'))\r\n        )\r\n    );\r\n\r\n    restoreDefaultUiSettings$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(restoreDefaultUiSettings),\r\n            mergeMap(() => {\r\n                return [\r\n                    this.notify$('Restore default settings', 'info', 'Restore settings'),\r\n                    restoreDefaultUiSettingsValues()\r\n                ];\r\n            })\r\n        )\r\n    );\r\n\r\n    restoreDefaultUiSettingsValues$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(restoreDefaultUiSettingsValues),\r\n            map(() => {\r\n                this.appSettingsService.restoreDefaultUiSettings();\r\n\r\n                return restoreDefaultUiSettingsSuccess();\r\n            })\r\n        )\r\n    );\r\n\r\n    restoreDefaultUiSettingsSuccess$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(restoreDefaultUiSettingsSuccess),\r\n            map(() => this.notify$('', 'success', 'Restore default settings successful'))\r\n        )\r\n    );\r\n\r\n    restoreDefaultUiSettingsError$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(restoreDefaultUiSettingsError),\r\n            map(() => this.notify$('Error', 'error', 'Error while restoring default settings'))\r\n        )\r\n    );\r\n\r\n    saveFile$(blob: Blob, fileName: string): Observable<void> {\r\n        this.fileSaver.save(blob, fileName);\r\n\r\n        return new Observable<void>(\r\n            subscriber => subscriber.next()\r\n        );\r\n    }\r\n\r\n    notify$(detail: string, severity: ToastMessage['severity'], summary: string) {\r\n        return addNotification({\r\n            payload: { detail, severity, summary }\r\n        });\r\n    }\r\n}\r\n","import { Injectable, ErrorHandler } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ErrorHandlerService implements ErrorHandler {\r\n    handleError(error: any): void {\r\n        if (error.rejection && error.rejection.name === 'ChunkLoadError') {\r\n            window.location.reload();\r\n\r\n            return;\r\n        }\r\n\r\n        throw error;\r\n    }\r\n}\r\n","import { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { setVisibleDuByIdAction } from '@oam/core/lib/actions/status.actions';\r\nimport { map } from 'rxjs/operators';\r\nimport { changeFilter } from '@oam/cells-status/lib/core/actions/cells-status.actions';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class CellsStatusSetFilterEffects {\r\n    constructor(private readonly actions$: Actions) {\r\n    }\r\n\r\n    setVisibleDuByIdAction$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(setVisibleDuByIdAction),\r\n            map(({payload}) => changeFilter({payload: {servingDuId: payload}}))\r\n        )\r\n    );\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { SplitViewRestrictionsService } from './split-view-restrictions.service';\r\nimport { SplitViewConfig } from '@oam/split-view/lib/core/models';\r\nimport { NavigationService } from '@oam/navigation/lib/navigation/service/navigation.service';\r\n\r\nexport const SPLIT_VIEW_CONFIG = new InjectionToken<SplitViewConfig>(\r\n    'SplitViewConfig'\r\n);\r\n\r\n\r\nexport function provideSplitViewConfigService(splitViewConfig: any, navigationService: NavigationService) {\r\n\r\n    return new SplitViewRestrictionsService(splitViewConfig, navigationService);\r\n}\r\n","import {\r\n    provideSplitViewConfigService,\r\n    SPLIT_VIEW_CONFIG,\r\n} from './core/services/split-view-config-token';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { SplitViewRestrictionsService } from './core/services/split-view-restrictions.service';\r\nimport { SplitViewConfig } from '@oam/split-view/lib/core/models';\r\nimport { VnfcSharedService } from '@oam/vnfc-shared/lib/vnfc-store/services/vnfc-shared.service';\r\nimport { NavigationService } from '@oam/navigation/lib/navigation/service/navigation.service';\r\n\r\n@NgModule({})\r\nexport class SplitViewRestrictionsModule {\r\n    static forRoot(splitViewConfig: SplitViewConfig): ModuleWithProviders<SplitViewRestrictionsModule> {\r\n\r\n        return {\r\n            ngModule: SplitViewRestrictionsModule,\r\n            providers: [\r\n                {\r\n                    provide: SPLIT_VIEW_CONFIG,\r\n                    useValue: splitViewConfig\r\n                },\r\n                {\r\n                    provide: SplitViewRestrictionsService,\r\n                    useFactory: provideSplitViewConfigService,\r\n                    deps: [ SPLIT_VIEW_CONFIG, NavigationService ]\r\n                },\r\n                {\r\n                    provide: VnfcSharedService\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { WebemRoutesPaths } from '@oam/cu-shared';\r\n\r\nexport const RESTRICTED_PATTERNS = {\r\n    views: [\r\n        WebemRoutesPaths.parameterEditor,\r\n        WebemRoutesPaths.errors,\r\n        WebemRoutesPaths.parameterSearch,\r\n        WebemRoutesPaths.compareObjects,\r\n        WebemRoutesPaths.errorsMissingMandatoryObjects,\r\n        WebemRoutesPaths.errorsParameterErrors,\r\n        WebemRoutesPaths.errorsObjectsQuantityErrors,\r\n        WebemRoutesPaths.errorsGlobalRelationErrors,\r\n        WebemRoutesPaths.errorsParameterRelationErrors\r\n    ],\r\n    splitViews: [\r\n        WebemRoutesPaths.dashboard,\r\n        WebemRoutesPaths.cuStatus,\r\n        WebemRoutesPaths.dusStatus,\r\n        WebemRoutesPaths.vnfcStatus,\r\n        WebemRoutesPaths.x2Status,\r\n        WebemRoutesPaths.xnLinksStatus,\r\n        WebemRoutesPaths.ngLinkStatus,\r\n        WebemRoutesPaths.cellsStatus,\r\n        WebemRoutesPaths.cellsMapping,\r\n        WebemRoutesPaths.networkSlicing,\r\n        WebemRoutesPaths.alarmActive,\r\n        WebemRoutesPaths.alarmHistorical,\r\n        WebemRoutesPaths.faultToggling\r\n    ],\r\n    splitBottomViews: [\r\n        WebemRoutesPaths.alarmActive,\r\n        WebemRoutesPaths.alarmHistorical,\r\n        WebemRoutesPaths.faultToggling\r\n    ]\r\n};\r\n\r\n","import { WebemRoutesPaths } from '@oam/cu-shared';\r\nimport { SPLIT_VIEW_LOCATION } from '@oam/split-view';\r\n\r\nexport const CU_AVAILABLE_VIEWS = [\r\n    {\r\n        label: 'Dashboard',\r\n        icon: 'mdi mdi-view-quilt',\r\n        items: [\r\n            {\r\n                label: 'Dashboard',\r\n                value: WebemRoutesPaths.dashboard,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        label: 'Status',\r\n        icon: 'mdi mdi-shield-check',\r\n        items: [\r\n            {\r\n                label: 'CU Properties',\r\n                value: WebemRoutesPaths.cuStatus,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'DUs Status',\r\n                value: WebemRoutesPaths.dusStatus,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'Cells Status',\r\n                value: WebemRoutesPaths.cellsStatus,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'Cells Mapping',\r\n                value: WebemRoutesPaths.cellsMapping,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'VNFC Status',\r\n                value: WebemRoutesPaths.vnfcStatus,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'X2 Links Status',\r\n                value: WebemRoutesPaths.x2Status,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'Xn Links Status',\r\n                value: WebemRoutesPaths.xnLinksStatus,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'NG Links Status',\r\n                value: WebemRoutesPaths.ngLinkStatus,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        label: 'Alarms',\r\n        icon: 'mdi mdi-bell',\r\n        items: [\r\n            {\r\n                label: 'Active Alarms',\r\n                value: WebemRoutesPaths.alarmActive,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'Historical Alarms',\r\n                value: WebemRoutesPaths.alarmHistorical,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'Fault Toggling History',\r\n                value: WebemRoutesPaths.faultToggling,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        label: 'Performance',\r\n        icon: 'mdi mdi-chart-bar',\r\n        items: [\r\n            {\r\n                label: 'Performance',\r\n                value: WebemRoutesPaths.performance,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        label: 'Configuration',\r\n        icon: 'mdi mdi-settings',\r\n        items: [\r\n            {\r\n                label: 'Parameter Editor',\r\n                value: WebemRoutesPaths.parameterEditor,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'Errors',\r\n                value: { url: WebemRoutesPaths.errors, param: 'missing-mandatory-objects' },\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'Parameter Search',\r\n                value: WebemRoutesPaths.parameterSearch,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'Compare Objects',\r\n                value: WebemRoutesPaths.compareObjects,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        label: 'Certificate Management',\r\n        icon: 'mdi mdi-medal',\r\n        items: [\r\n            {\r\n                label: 'Operator Certificates',\r\n                value: WebemRoutesPaths.certificateOperator,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'Automatic Management',\r\n                value: WebemRoutesPaths.certificateAutomatic,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'Certificate Revocation Lists',\r\n                value: WebemRoutesPaths.certificateCrl,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        label: 'User Account Management',\r\n        icon: 'mdi mdi-account',\r\n        items: [\r\n            {\r\n                label: 'Local Users',\r\n                value: WebemRoutesPaths.uamLocalUserAccount,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'Service Users',\r\n                value: WebemRoutesPaths.uamServiceAccountManagement,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'Session List',\r\n                value: WebemRoutesPaths.uamSessions,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        label: 'Diagnostic',\r\n        icon: 'mdi mdi-stethoscope',\r\n        items: [\r\n            {\r\n                label: 'Snapshot',\r\n                value: WebemRoutesPaths.diagnosticSnapshot,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'User Plane Traces',\r\n                value: WebemRoutesPaths.diagnosticUplane,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'Control Plane Traces',\r\n                value: WebemRoutesPaths.diagnosticCplane,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'IP Connectivity',\r\n                value: WebemRoutesPaths.ipConnectivity,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            },\r\n            {\r\n                label: 'PMTU Discovery',\r\n                value: WebemRoutesPaths.pmtuDiscovery,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        label: 'Settings',\r\n        icon: 'mdi mdi-cogs',\r\n        items: [\r\n            {\r\n                label: 'Layout Settings',\r\n                value: WebemRoutesPaths.uiSettings,\r\n                disabled: false,\r\n                disabledBy: SPLIT_VIEW_LOCATION.NONE\r\n            }\r\n        ]\r\n    }\r\n];\r\n","import { InjectionToken } from '@angular/core';\r\nimport { DetailsPanelConfigService } from '@oam/details-panel/lib/core/services/details-panel-config.service';\r\nimport { DetailsPanelConfig } from '@oam/details-panel/lib/core/model/details-panel-config';\r\n\r\n\r\nexport const DETAILS_PANEL_CONFIG = new InjectionToken<DetailsPanelConfig>(\r\n    'DetailsPanelConfig'\r\n);\r\n\r\n\r\nexport function provideDetailsPanelConfigService(detailsPanelConfig: any) {\r\n    const detailsPanelConfigService = new DetailsPanelConfigService();\r\n    detailsPanelConfigService.config = detailsPanelConfig;\r\n\r\n    return (detailsPanelConfigService);\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { DetailsPanelConfig } from '@oam/details-panel/lib/core/model/details-panel-config';\r\nimport {\r\n    DETAILS_PANEL_CONFIG,\r\n    provideDetailsPanelConfigService\r\n} from '@oam/details-panel/lib/core/services/details-panel-config-token';\r\nimport { DetailsPanelConfigService } from '@oam/details-panel/lib/core/services/details-panel-config.service';\r\n\r\n\r\n@NgModule({})\r\nexport class DetailsPanelConfigModule {\r\n    static forRoot(detailsPanelConfig: DetailsPanelConfig): ModuleWithProviders<DetailsPanelConfigModule> {\r\n\r\n        return {\r\n            ngModule: DetailsPanelConfigModule,\r\n            providers: [\r\n                {\r\n                    provide: DETAILS_PANEL_CONFIG,\r\n                    useValue: detailsPanelConfig\r\n                },\r\n                {\r\n                    provide: DetailsPanelConfigService,\r\n                    useFactory: provideDetailsPanelConfigService,\r\n                    deps: [ DETAILS_PANEL_CONFIG ]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { WebemRoutesPaths } from '@oam/cu-shared';\r\n\r\nexport const CU_DETAILS_PANEL_CONFIG = {\r\n    urlsWithDetailPanel: [\r\n        WebemRoutesPaths.parameterEditor,\r\n        WebemRoutesPaths.parameterSearch,\r\n        WebemRoutesPaths.compareObjects,\r\n        WebemRoutesPaths.cellsStatus,\r\n        WebemRoutesPaths.cellsMapping,\r\n        WebemRoutesPaths.dusStatus,\r\n        WebemRoutesPaths.x2Status,\r\n        WebemRoutesPaths.xnLinksStatus,\r\n        WebemRoutesPaths.ngLinkStatus,\r\n        WebemRoutesPaths.networkSlicing,\r\n        WebemRoutesPaths.vnfcStatus,\r\n        WebemRoutesPaths.performance,\r\n        WebemRoutesPaths.certificateOperator,\r\n        WebemRoutesPaths.certificateCrl,\r\n        WebemRoutesPaths.ipConnectivity,\r\n        WebemRoutesPaths.alarmActive,\r\n        WebemRoutesPaths.alarmHistorical,\r\n        WebemRoutesPaths.errorsParameterErrors,\r\n        WebemRoutesPaths.errorsObjectsQuantityErrors,\r\n        WebemRoutesPaths.errorsParameterRelationErrors,\r\n        WebemRoutesPaths.ipsecAssociations\r\n    ]\r\n};\r\n","import { WebemRoutesPaths } from '@oam/cu-shared';\r\n\r\nexport const CU_REFRESHING_VIEWS: WebemRoutesPaths[] = [\r\n    WebemRoutesPaths.uiSettings\r\n];\r\n","import { WebemRoutesPaths } from '@oam/cu-shared';\r\n\r\nexport const SHORTCUT_PATHS_CU = {\r\n    DB: '/' + WebemRoutesPaths.dashboard,\r\n    AA: '/' + WebemRoutesPaths.alarmActive,\r\n    PF: '/' + WebemRoutesPaths.performance,\r\n    PE: '/' + WebemRoutesPaths.parameterEditor,\r\n    ER: '/' + WebemRoutesPaths.errors,\r\n    PS: '/' + WebemRoutesPaths.parameterSearch,\r\n    SN: '/' + WebemRoutesPaths.diagnosticSnapshot,\r\n    SW: '/' + WebemRoutesPaths.splitView,\r\n    CP: '/' + WebemRoutesPaths.cuStatus,\r\n    DS: '/' + WebemRoutesPaths.dusStatus,\r\n    CM: '/' + WebemRoutesPaths.cellsMapping,\r\n    VS: '/' + WebemRoutesPaths.vnfcStatus,\r\n    XS: '/' + WebemRoutesPaths.x2Status,\r\n    XN: '/' + WebemRoutesPaths.xnLinksStatus,\r\n    CS: '/' + WebemRoutesPaths.cellsStatus,\r\n    NS: '/' + WebemRoutesPaths.networkSlicing,\r\n    NG: '/' + WebemRoutesPaths.ngLinkStatus\r\n};\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { Environment } from '../environment-variables/core/models';\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    imports: []\r\n})\r\nexport class EnvironmentVariablesModule {\r\n    static forRoot(config: Environment): ModuleWithProviders<EnvironmentVariablesModule> {\r\n        return {\r\n            ngModule: EnvironmentVariablesModule,\r\n            providers: [\r\n                {\r\n                    provide: Environment,\r\n                    useValue: config\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { TokenType } from '@oam/core/lib/store/user-state';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n    constructor() {}\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const authToken = sessionStorage.getItem(`${TokenType.BEARER}`) || sessionStorage.getItem(`${TokenType.PASSWORD_CHANGE}`);\r\n\r\n        if (authToken && !request.headers.get('Authorization')) {\r\n            const cloned = request.clone({\r\n                headers: request.headers.set('Authorization', `Bearer ${authToken}`)\r\n            });\r\n\r\n            return next.handle(cloned);\r\n        } else {\r\n            return next.handle(request);\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { SecService } from '@oam/cu-asm-api/services';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, filter, mapTo, mergeMap, tap, map } from 'rxjs/operators';\r\nimport { AccountInformation } from '@oam/cu-asm-api/models/account-information';\r\nimport { addNotification } from '@oam/core/lib/actions/toast-message.actions';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { of } from 'rxjs';\r\nimport {\r\n    clearTokens,\r\n    displayPasswordExpirationWarning, removeFromUserInformation, removeToken,\r\n    removeUser,\r\n    setToken,\r\n    updateUser, updateUserInformation\r\n} from '@oam/core/lib/actions/user.actions';\r\nimport { TokenType } from '@oam/core/lib/store/user-state';\r\nimport { setTokenInfoInitialValues } from '@oam/auth/lib/auth/core/actions/token-info.actions';\r\n\r\n@Injectable()\r\nexport class UserEffects {\r\n    updateUser$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(updateUser),\r\n            mergeMap((action) => {\r\n                const encodedUsername = window.btoa(action.payload.username);\r\n\r\n                return this.secService.accountUsersSystemGet({\r\n                    Username: encodedUsername\r\n                }).pipe(\r\n                    mergeMap((accountInfo: AccountInformation) => [\r\n                        updateUserInformation({\r\n                            payload: {\r\n                                ...action.payload,\r\n                                passwordExpirationDate: accountInfo.passwordExpirationDate || ''\r\n                            }\r\n                        })]),\r\n                    catchError((httpResponse: HttpErrorResponse) => {\r\n                        if (httpResponse.status === 500) {\r\n                            return of(addNotification({\r\n                                payload: {\r\n                                    severity: 'error',\r\n                                    summary: httpResponse.error.summary,\r\n                                    detail: httpResponse.error.content\r\n                                }\r\n                            }));\r\n                        }\r\n\r\n                        return of(addNotification({\r\n                            payload: {\r\n                                severity: 'error',\r\n                                summary: 'Retrieve user account information for local system administrator',\r\n                                detail: 'Failed to retrieve additional user information'\r\n                            }\r\n                        }));\r\n                    })\r\n                );\r\n            })\r\n        )\r\n    );\r\n\r\n    checkIfPasswordExpired$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(updateUser),\r\n            filter((action) => !!action.payload.passwordAboutToExpireMessage),\r\n            mapTo(displayPasswordExpirationWarning())\r\n        )\r\n    );\r\n\r\n    removeUser$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(removeUser),\r\n            tap(() => {\r\n                sessionStorage.removeItem('userInfo');\r\n            })\r\n        ), { dispatch: false }\r\n    );\r\n\r\n    setToken$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(setToken),\r\n            tap((action) => {\r\n                sessionStorage.setItem(`${action.payload.type}`, action.payload.value);\r\n            })\r\n        ), { dispatch: false }\r\n    );\r\n\r\n    clearToken$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(clearTokens),\r\n            tap(() => {\r\n                sessionStorage.removeItem(`${TokenType.BEARER}`);\r\n                sessionStorage.removeItem(`${TokenType.PASSWORD_CHANGE}`);\r\n            }),\r\n            map(() => {\r\n                return setTokenInfoInitialValues();\r\n            })\r\n        )\r\n    );\r\n\r\n    removeToken$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(removeToken),\r\n            tap((action) => {\r\n                sessionStorage.removeItem(`${action.payload}`);\r\n            })\r\n        ), { dispatch: false }\r\n    );\r\n\r\n    updateUserInformation$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(updateUserInformation),\r\n            tap((action) => {\r\n                const existingUserInfo = sessionStorage.getItem('userInfo');\r\n                const updatedUserInfo = existingUserInfo ? { ...JSON.parse(existingUserInfo), ...action.payload } : action.payload;\r\n                sessionStorage.setItem('userInfo', JSON.stringify(updatedUserInfo));\r\n            })\r\n        ), { dispatch: false }\r\n    );\r\n\r\n    RemoveFromUserInformation$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(removeFromUserInformation),\r\n            tap((action) => {\r\n                const userInfo = JSON.parse(sessionStorage.getItem('userInfo') || '');\r\n                delete userInfo[action.payload];\r\n                sessionStorage.setItem('userInfo', JSON.stringify(userInfo));\r\n            })\r\n        ), { dispatch: false }\r\n    );\r\n\r\n    constructor(private readonly actions$: Actions,\r\n                private readonly secService: SecService\r\n    ) {\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport * as userState from './core/reducers/user-reducer';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { UserEffects } from './core/effects/user.effects';\r\nimport { ButtonModule } from 'primeng/button';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ButtonModule,\r\n        StoreModule.forFeature(userState.featureKey, userState.reducer),\r\n        EffectsModule.forFeature([UserEffects])\r\n    ],\r\n    exports: [StoreModule]\r\n})\r\nexport class UserModule {\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { RouterStateSerializer } from '@ngrx/router-store';\r\nimport { RouterStateSnapshot } from '@angular/router';\r\nimport { RouterStateUrl } from '@oam/core/lib/models/router-state-url';\r\n\r\n@Injectable()\r\nexport class CustomSerializer implements RouterStateSerializer<RouterStateUrl> {\r\n    serialize(routerState: RouterStateSnapshot): RouterStateUrl {\r\n        let route = routerState.root;\r\n        while (route.firstChild) {\r\n            route = route.firstChild;\r\n        }\r\n\r\n        const {\r\n            url,\r\n            root: { queryParams }\r\n        } = routerState;\r\n        const { params } = route;\r\n\r\n        // Only return an object including the URL, params and query params\r\n        // instead of the entire snapshot\r\n        return { url, params, queryParams };\r\n    }\r\n}\r\n","export const SNAPSHOT_NAME_PARAMETERS_CU = [\r\n    'mrbtsId',\r\n    'btsName'\r\n];\r\n","import {\r\n    AvailableFeatureFlagsEnum\r\n} from '@oam/core/lib/environment-variables/core/models';\r\nimport { FlagsType } from '@oam/feature-flag';\r\n\r\nexport const featureFlagConf: FlagsType = {\r\n    [AvailableFeatureFlagsEnum.WIP_ALD_STATUS]: true,\r\n    [AvailableFeatureFlagsEnum.WIP_CB007962_TOKENINFO]: false,\r\n    [AvailableFeatureFlagsEnum.PRODUCT_SNAPSHOT_TRANSFER]: false\r\n};\r\n\r\nconsole.log('Production flag loaded', featureFlagConf);\r\n","import { Role } from '@oam/role-access-core';\r\nimport { RoleAccessForbiddenFlagEnum } from '@oam/core/lib/models/role-access/role-access-forbidden-flag.enmu';\r\n\r\nexport const LOCAL_USER_PROFILES = {\r\n    [Role.SYSTEM_USER]: {\r\n        forbidden: [] as []\r\n    },\r\n    [Role.SEC_USER]: {\r\n        forbidden: [\r\n            RoleAccessForbiddenFlagEnum.VCU_RESET_SITE,\r\n            RoleAccessForbiddenFlagEnum.VDU_RESET_SITE,\r\n            RoleAccessForbiddenFlagEnum.VDU_RESET_RADIO,\r\n            RoleAccessForbiddenFlagEnum.LOCK_UNLOCK,\r\n            RoleAccessForbiddenFlagEnum.BLOCK_UNBLOCK,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_USER_PLANE_TRACES,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_CONTROL_PLANE_TRACES,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_IP_CONNECTIVITY,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_PMTU_DISCOVERY,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_SFP_MONITORING,\r\n            RoleAccessForbiddenFlagEnum.STAGE_PLAN,\r\n            RoleAccessForbiddenFlagEnum.DOWNLOAD_PLAN_WITHOUT_ACTIVATION,\r\n            RoleAccessForbiddenFlagEnum.PLANNED_CONFIGURATIONS,\r\n            RoleAccessForbiddenFlagEnum.INACTIVE_CONFIGURATIONS,\r\n            RoleAccessForbiddenFlagEnum.CREATE_PLAN,\r\n            RoleAccessForbiddenFlagEnum.LOAD_SCF,\r\n            RoleAccessForbiddenFlagEnum.CHANGE_TO_PLANNED_CONFIGURATION,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_TEST_MODEL,\r\n            RoleAccessForbiddenFlagEnum.IPSEC_PSK_CONFIGURATION,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_IP_SECURITY_ASSOCIATIONS\r\n        ]\r\n    },\r\n    [Role.APP_USER]: {\r\n        forbidden: [\r\n            RoleAccessForbiddenFlagEnum.CERTIFICATE_AUTOMATIC,\r\n            RoleAccessForbiddenFlagEnum.CERTIFICATE_OPERATOR,\r\n            RoleAccessForbiddenFlagEnum.CERTIFICATE_REVOCATION,\r\n            RoleAccessForbiddenFlagEnum.SERVICE_USERS,\r\n            RoleAccessForbiddenFlagEnum.STAGE_PLAN,\r\n            RoleAccessForbiddenFlagEnum.DOWNLOAD_PLAN_WITHOUT_ACTIVATION,\r\n            RoleAccessForbiddenFlagEnum.PLANNED_CONFIGURATIONS,\r\n            RoleAccessForbiddenFlagEnum.INACTIVE_CONFIGURATIONS,\r\n            RoleAccessForbiddenFlagEnum.CREATE_PLAN,\r\n            RoleAccessForbiddenFlagEnum.LOAD_SCF,\r\n            RoleAccessForbiddenFlagEnum.CHANGE_TO_PLANNED_CONFIGURATION\r\n        ]\r\n    },\r\n    [Role.READ_ONLY_USER]: {\r\n        forbidden: [\r\n            RoleAccessForbiddenFlagEnum.VCU_RESET_SITE,\r\n            RoleAccessForbiddenFlagEnum.VDU_RESET_SITE,\r\n            RoleAccessForbiddenFlagEnum.VDU_RESET_RADIO,\r\n            RoleAccessForbiddenFlagEnum.LOCK_UNLOCK,\r\n            RoleAccessForbiddenFlagEnum.BLOCK_UNBLOCK,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_SNAPSHOT,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_USER_PLANE_TRACES,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_CONTROL_PLANE_TRACES,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_IP_CONNECTIVITY,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_PMTU_DISCOVERY,\r\n            RoleAccessForbiddenFlagEnum.CERTIFICATE_AUTOMATIC,\r\n            RoleAccessForbiddenFlagEnum.CERTIFICATE_OPERATOR,\r\n            RoleAccessForbiddenFlagEnum.CERTIFICATE_REVOCATION,\r\n            RoleAccessForbiddenFlagEnum.SERVICE_USERS,\r\n            RoleAccessForbiddenFlagEnum.PLANNED_CONFIGURATIONS,\r\n            RoleAccessForbiddenFlagEnum.INACTIVE_CONFIGURATIONS,\r\n            RoleAccessForbiddenFlagEnum.VALIDATE_PLAN,\r\n            RoleAccessForbiddenFlagEnum.ACTIVATE_PLAN,\r\n            RoleAccessForbiddenFlagEnum.FIX_PLAN_ERRORS,\r\n            RoleAccessForbiddenFlagEnum.DELETE_PLAN,\r\n            RoleAccessForbiddenFlagEnum.CREATE_PLAN,\r\n            RoleAccessForbiddenFlagEnum.CREATE_DELTA_PLAN,\r\n            RoleAccessForbiddenFlagEnum.LOAD_SCF,\r\n            RoleAccessForbiddenFlagEnum.CHANGE_TO_PLANNED_CONFIGURATION,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_TEST_MODEL,\r\n            RoleAccessForbiddenFlagEnum.IPSEC_PSK_CONFIGURATION,\r\n            RoleAccessForbiddenFlagEnum.DIAGNOSTIC_IP_SECURITY_ASSOCIATIONS\r\n        ]\r\n    }\r\n};\r\n","import { LOCAL_USER_PROFILES } from '@oam/core/lib/models/role-access/local-user-profiles';\r\nimport { Role } from '@oam/role-access-core';\r\nimport { RoleAccessForbiddenFlagEnum } from '@oam/core/lib/models/role-access/role-access-forbidden-flag.enmu';\r\n\r\nconst VCU_SYSTEM_ADMIN_FORBIDDEN: string[] = [];\r\nconst VCU_SECURITY_ADMIN_FORBIDDEN: string[] = [\r\n    RoleAccessForbiddenFlagEnum.VCU_RESET_SITE\r\n];\r\nconst VCU_APPLICATION_ADMIN_FORBIDDENS: string[] = [];\r\nconst VCU_READ_ONLY_FORBIDDEN: string[] = [\r\n    RoleAccessForbiddenFlagEnum.VCU_RESET_SITE\r\n];\r\n\r\nexport const VCU_LOCAL_USER_PROFILES = [\r\n    {\r\n        roleId: Role.SYSTEM_USER,\r\n        forbidden: [\r\n            ...VCU_SYSTEM_ADMIN_FORBIDDEN,\r\n            ...LOCAL_USER_PROFILES.systemUserAccessMode.forbidden\r\n        ]\r\n    },\r\n    {\r\n        roleId: Role.SEC_USER,\r\n        forbidden: [\r\n            ...VCU_SECURITY_ADMIN_FORBIDDEN,\r\n            ...LOCAL_USER_PROFILES.secUserAccessMode.forbidden\r\n        ]\r\n    },\r\n    {\r\n        roleId: Role.APP_USER,\r\n        forbidden: [\r\n            ...VCU_APPLICATION_ADMIN_FORBIDDENS,\r\n            ...LOCAL_USER_PROFILES.appUserAccessMode.forbidden\r\n        ]\r\n    },\r\n    {\r\n        roleId: Role.READ_ONLY_USER,\r\n        forbidden: [\r\n            ...VCU_READ_ONLY_FORBIDDEN,\r\n            ...LOCAL_USER_PROFILES.readOnlyUserAccessMode.forbidden\r\n        ]\r\n    }\r\n];\r\n","import { RoleAccessGuardRule } from '@oam/role-access-ng';\r\n\r\ntype NavWithRoleAccessFlag = { roleAccessFlag?: string, routerLink: string };\r\n\r\nexport function mapToRoleAccessGuardRules(navs: NavWithRoleAccessFlag[]): Required<RoleAccessGuardRule>[] {\r\n    return navs\r\n        .filter(({ roleAccessFlag }) => !!roleAccessFlag)\r\n        .map(({ roleAccessFlag, routerLink }) => {\r\n            return {\r\n                path: routerLink.replace(/^\\//, ''),\r\n                roleAccessFlag\r\n            } as Required<RoleAccessGuardRule>;\r\n        });\r\n}\r\n","import { ErrorHandler, NgModule } from '@angular/core';\r\nimport { AppComponent } from './app.component';\r\nimport { metaReducers, reducers } from './core/reducers/webem-reducer';\r\nimport { environment } from '../environments/environment';\r\nimport * as fromCu from '@oam/cu-shared/lib/core/reducers/cu.reducer';\r\nimport * as fromCloud from '@oam/core/lib/reducers/cloud.reducer';\r\nimport * as cellsStatusReducer from '@oam/cells-status/lib/core/reducers/cells-status.reducer';\r\nimport * as fromToast from '@oam/core/lib/reducers/toast-message.reducer';\r\nimport * as fromUser from '@oam/core/lib/reducers/user.reducer';\r\nimport * as fromAppSettings from '@oam/core/lib/reducers/app-settings.reducer';\r\nimport {\r\n    DefaultRouterStateSerializer,\r\n    routerReducer,\r\n    RouterStateSerializer,\r\n    StoreRouterConnectingModule\r\n} from '@ngrx/router-store';\r\nimport { ROUTER_STATE } from '@oam/core/lib/selectors/router.selectors';\r\nimport { LoggerModule, NgxLoggerLevel } from 'ngx-logger';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\nimport { RouterEffects } from '@oam/core/lib/effects/router.effects';\r\nimport { ToastMessageEffects } from '@oam/core/lib/effects/toast-message.effects';\r\nimport { HelpEffects } from '@oam/core/lib/effects/help.effects';\r\nimport { LogForActionsEffects } from '@oam/core/lib/effects/log-for-actions.effects';\r\nimport { getRuntimeChecksConfiguration } from '@oam/webem/app/core/store/store-runtime-checks-configuration';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { WebemRouterModule } from './core/router/webem-router.module';\r\nimport { NxModule } from '@nrwl/angular';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { CuTrsApiModule } from '@oam/cu-trs-api/cu-trs-api.module';\r\nimport { CuApiGwClientModule } from '@oam/cu-api-gw-api/cu-api-gw-client.module';\r\nimport { CuCmClientModule } from '@oam/cu-cm-api/cu-cm-client.module';\r\nimport { CuPmv2ClientModule } from '@oam/cu-pmv2-api/cu-pmv-2-client.module';\r\nimport { CuAsmClientModule } from '@oam/cu-asm-api/cu-asm-client.module';\r\nimport { CuFmClientModule } from '@oam/cu-fm-api/cu-fm-client.module';\r\nimport { CuCpConfigClientModule } from '@oam/cu-cp-config-api/cu-cp-config-client.module';\r\nimport { CuEffects } from '@oam/cu-shared/lib/core/effects/cu.effects';\r\nimport { ConfigurationSharedServicesModule } from '@oam/configuration-shared/lib/configuration-shared-services.module';\r\nimport {\r\n    fromBrowserCompatibilityReducer,\r\n    fromOverlay,\r\n    LegalNoticeModalModule,\r\n    SpinnerModule,\r\n    WebemOverlayModule\r\n} from '@oam/cu-ui';\r\nimport { AppSettingsEffects } from '@oam/core/lib/effects/app-settings.effects';\r\nimport { BlockUIModule } from 'primeng/blockui';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { ErrorHandlerService } from '@oam/webem/app/error-handler.service';\r\nimport { CellsStatusSetFilterEffects } from '@oam/cells-status/lib/core/effects/cells-status-set-filter.effects';\r\nimport { KeyboardShortcutsModule } from '@oam/keyboard-shortcuts/lib/keyboard-shortcuts.module';\r\nimport { SplitViewRestrictionsModule } from '@oam/split-view/lib/split-view-restrictions.module';\r\nimport { RESTRICTED_PATTERNS } from './core/config/split-view/restricted-selection-group';\r\nimport { CU_AVAILABLE_VIEWS } from '@oam/webem/app/core/config/split-view/available-list-of-views';\r\nimport { DetailsPanelConfigModule } from '@oam/details-panel/lib/details-panel-config.module';\r\nimport { CU_DETAILS_PANEL_CONFIG } from '@oam/webem/app/core/config/details-panel/details-panel-config';\r\nimport { CU_REFRESHING_VIEWS } from './core/config/split-view/refreshing-views';\r\nimport { WebemRoutesPaths } from '@oam/cu-shared';\r\nimport { SHORTCUT_PATHS_CU } from '@oam/webem/app/core/config/keyboard-shortcuts/keyboard-shortcuts-config';\r\nimport { EnvironmentVariablesModule } from '@oam/core/lib/environment-variables/environment-variables.module';\r\nimport { ErrorInterceptor } from '@oam/core/lib/interceptors/error.interceptor';\r\nimport { JwtInterceptor } from '@oam/core/lib/interceptors/jwt.interceptor';\r\nimport { UserModule } from '@oam/core/lib/user/user.module';\r\nimport * as fromNavigationSearch\r\n    from '@oam/layouts/lib/modules/navigation-search/core/reducers/navigation-search.reducer';\r\nimport { CustomSerializer } from '@oam/core/lib/services/custom-serializer.service';\r\nimport { CuOamAgentClientModule } from '@oam/cu-oam-agent-api';\r\nimport { DiagnosticSnapshotModule } from '@oam/diagnostic-snapshot/diagnostic-snapshot.module';\r\nimport { SNAPSHOT_NAME_PARAMETERS_CU } from '@oam/webem/app/core/config/snapshot-name-parameters/snapshot-name-parameters-config';\r\nimport { NgFeatureFlagModule } from '@oam/ng-feature-flag';\r\nimport { featureFlagConf } from '@oam/webem/environments/feature-flag-conf.prod';\r\nimport { navigations } from '@oam/webem/app/core/models/navigations.model';\r\nimport { mapToFeatureFlagGuardRules } from '@oam/core/lib/functions/feature-flag-util';\r\nimport { NavigationModule } from '@oam/navigation';\r\nimport { VCU_LOCAL_USER_PROFILES } from '@oam/webem/app/core/models/vcu-local-user-profiles';\r\nimport { RoleAccessModule } from '@oam/role-access-ng';\r\nimport { mapToRoleAccessGuardRules } from '@oam/role-access-ng/lib/guards/role-access.util';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { VnfcSharedService } from '@oam/vnfc-shared/lib/vnfc-store/services/vnfc-shared.service';\r\n\r\n@NgModule({\r\n    declarations: [AppComponent],\r\n    imports: [\r\n        NavigationModule.forRoot(navigations),\r\n        NgFeatureFlagModule.forRoot({\r\n            featureFlagConf,\r\n            featureFlagGuardRules: mapToFeatureFlagGuardRules(navigations)\r\n        }),\r\n        RoleAccessModule.forRoot({\r\n            userProfiles: VCU_LOCAL_USER_PROFILES,\r\n            roleAccessGuardRules: mapToRoleAccessGuardRules(navigations),\r\n            index: RouterLink.dashboard,\r\n            ignoreWhen: {\r\n                token: VnfcSharedService,\r\n                fn: vnfcSharedService => () => vnfcSharedService.isVmcu()\r\n            }\r\n        }),\r\n        HttpClientModule,\r\n        EnvironmentVariablesModule.forRoot(environment),\r\n        LoggerModule.forRoot({\r\n            level: environment.production ? NgxLoggerLevel.LOG : NgxLoggerLevel.TRACE\r\n        }),\r\n        BrowserModule,\r\n        NoopAnimationsModule,\r\n        LegalNoticeModalModule,\r\n        WebemRouterModule,\r\n        NxModule.forRoot(),\r\n        ToastrModule.forRoot({\r\n            positionClass: 'toast-bottom-right'\r\n        }),\r\n        StoreModule.forRoot(reducers, {\r\n            ...getRuntimeChecksConfiguration(environment),\r\n            metaReducers\r\n        }),\r\n        StoreModule.forFeature(cellsStatusReducer.featureKey, cellsStatusReducer.reducer),\r\n        StoreModule.forFeature(fromBrowserCompatibilityReducer.featureKey, fromBrowserCompatibilityReducer.reducer),\r\n        StoreModule.forFeature(fromOverlay.overlayStateFeatureKey, fromOverlay.reducer),\r\n        StoreModule.forFeature(fromNavigationSearch.navigationSearchStateFeatureKey, fromNavigationSearch.reducer),\r\n        StoreModule.forFeature(fromCu.featureKey, fromCu.reducer),\r\n        StoreModule.forFeature(ROUTER_STATE, routerReducer),\r\n        StoreModule.forFeature(fromToast.featureKey, fromToast.reducer),\r\n        StoreModule.forFeature(fromUser.featureKey, fromUser.reducer),\r\n        StoreModule.forFeature(fromAppSettings.appSettingsFeatureKey, fromAppSettings.reducer),\r\n        StoreModule.forFeature(fromCloud.featureKey, fromCloud.reducer),\r\n\r\n        EffectsModule.forRoot([ToastMessageEffects, LogForActionsEffects]),\r\n        EffectsModule.forFeature([RouterEffects, CuEffects, HelpEffects, AppSettingsEffects, CellsStatusSetFilterEffects]),\r\n        ConfigurationSharedServicesModule,\r\n        WebemOverlayModule.forRoot(),\r\n        WebemOverlayModule.forFeature(),\r\n        FlexLayoutModule,\r\n        UserModule,\r\n        CuApiGwClientModule.forRoot({ rootUrl: '/api/sec/v1' }),\r\n        CuTrsApiModule.forRoot({ rootUrl: '/api/trs/v1' }),\r\n        CuPmv2ClientModule.forRoot({ rootUrl: '/api/pm/v2' }),\r\n        CuFmClientModule.forRoot({ rootUrl: '/api/fm/v2' }),\r\n        StoreRouterConnectingModule.forRoot({ serializer: DefaultRouterStateSerializer, stateKey: ROUTER_STATE }),\r\n        CuAsmClientModule.forRoot({ rootUrl: '/api/asm/v1' }),\r\n        CuCpConfigClientModule.forRoot({ rootUrl: '/api/cp-config/v1' }),\r\n        CuOamAgentClientModule.forRoot({ rootUrl: '/api/agent/v1' }),\r\n        CuCmClientModule.forRoot({ rootUrl: '/api/cm' }),\r\n        environment.instrumentation,\r\n        SpinnerModule,\r\n        BlockUIModule,\r\n        KeyboardShortcutsModule.forRoot({\r\n            SHORTCUTS_PATHS: SHORTCUT_PATHS_CU\r\n        }),\r\n        DetailsPanelConfigModule.forRoot(CU_DETAILS_PANEL_CONFIG),\r\n        SplitViewRestrictionsModule.forRoot({\r\n            RESTRICTED_PATTERNS,\r\n            AVAILABLE_VIEWS: CU_AVAILABLE_VIEWS,\r\n            REFRESHING_VIEWS: CU_REFRESHING_VIEWS,\r\n            DEFAULT_REDIRECTION_AFTER_FAILED_RESTRICTION_CHECKED: WebemRoutesPaths.splitView\r\n        }),\r\n        DiagnosticSnapshotModule.forRoot({\r\n                SNAPSHOT_NAME_PARAMETERS: SNAPSHOT_NAME_PARAMETERS_CU\r\n        })\r\n    ],\r\n    entryComponents: [],\r\n    providers: [\r\n        { provide: RouterStateSerializer, useClass: CustomSerializer },\r\n        { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\r\n        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\r\n        { provide: ErrorHandler, useClass: ErrorHandlerService },\r\n        ConfirmationService\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n\r\n","import { Navigation } from '@oam/navigation/lib/navigation/core/models/navigation.interface';\r\nimport { FeatureFlagGuardRule } from '@oam/ng-feature-flag';\r\n\r\nexport function mapToFeatureFlagGuardRules(navs: Navigation[]): Required<FeatureFlagGuardRule>[] {\r\n  return navs\r\n    .filter(({ featureFlag }) => !!featureFlag)\r\n    .map(({ featureFlag, routerLink }) => {\r\n      return {\r\n        path: routerLink.replace(/^\\//, ''),\r\n        featureFlag\r\n      } as Required<FeatureFlagGuardRule>;\r\n    });\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n    enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule).catch(err => console.log(err));\r\n","import { Injectable } from '@angular/core';\r\n\r\nexport class AccountConfig {\r\n    isConfigCu: boolean;\r\n}\r\n\r\nexport enum NetElementType {\r\n    CU = 'CU',\r\n    VDU = 'vDU'\r\n}\r\n\r\nexport enum ACTIVATION_FEEDBACK {\r\n    ACTIVATION_SUCCEDED = 'Plan activation has finished successfully',\r\n    ACTIVATION_WITH_RESET = ' reset will be performed after plan activation',\r\n    CELLS_LOCK = 'The following will be locked\\nCells:'\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AccountConfigService {\r\n    private readonly isCu: boolean;\r\n    private readonly netElementType: NetElementType;\r\n\r\n    constructor(config: AccountConfig) {\r\n        if (config) {\r\n            this.isCu = config.isConfigCu;\r\n            this.netElementType = this.isCu ? NetElementType.CU : NetElementType.VDU;\r\n        }\r\n    }\r\n\r\n    get isConfigCu(): boolean {\r\n        return this.isCu;\r\n    }\r\n\r\n    getNetElementType(): NetElementType {\r\n        return this.netElementType;\r\n    }\r\n}\r\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = 'http://apigw.local:50443/api/sec/v1';\n}\n\n/**\n * Parameters for `CuApiGwClientModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { AllowedFunctionalitiesResponse } from '../models/allowed-functionalities-response';\nimport { PostTokenInfo } from '../models/post-token-info';\nimport { RefreshTokenRequest } from '../models/refresh-token-request';\nimport { RefreshTokenResponse } from '../models/refresh-token-response';\nimport { SessionInfo } from '../models/session-info';\nimport { TokenInfo } from '../models/token-info';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SessionMgmtService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation revokeSessionsPost\n   */\n  static readonly RevokeSessionsPostPath = '/revoke-sessions';\n\n  /**\n   * Allows user to revoke/delete all logged-in session.\n   *\n   * User specific all sessions deletion : user password required <br> Authentication is actually performed by rcpum, for Authentication failure case, rcpum may send an additional status code in \"additionalStatus\" field of the error response structure, the original http status code from rcpum is stored in \"status\" filed of the error response structure. apigw will not change the error response structure.<br> As WebEM is not able to handle other new error case status codes than {401 403 405 460 461 462}, apigw will convert all other rcpum authentication failure status code to HTTP status code \"401\".<br> <br> The additional status codes are the following:\n   *  - 7  Authentication failed\n   *  - 13 User account is expired\n   *  - 101 Authentication failed and the account was locked because of that\n   *  - 102 Account is locked because of too many authentication failures\n   *  - 103 User account is invalid due to expired password\n   *  - 104 Too many simultaneous sessions in the system\n   *  - 105 Too many simultaneous sessions for the user\n   *  - 106 Account is locked by the administrator\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `revokeSessionsPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  revokeSessionsPost$Response(params: {\n\n    /**\n     * Authorization containing the word Basic followed by a space and a base64-encoded string username:password\n     */\n    Authorization: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SessionMgmtService.RevokeSessionsPostPath, 'post');\n    if (params) {\n\n      rb.header('Authorization', params.Authorization, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Allows user to revoke/delete all logged-in session.\n   *\n   * User specific all sessions deletion : user password required <br> Authentication is actually performed by rcpum, for Authentication failure case, rcpum may send an additional status code in \"additionalStatus\" field of the error response structure, the original http status code from rcpum is stored in \"status\" filed of the error response structure. apigw will not change the error response structure.<br> As WebEM is not able to handle other new error case status codes than {401 403 405 460 461 462}, apigw will convert all other rcpum authentication failure status code to HTTP status code \"401\".<br> <br> The additional status codes are the following:\n   *  - 7  Authentication failed\n   *  - 13 User account is expired\n   *  - 101 Authentication failed and the account was locked because of that\n   *  - 102 Account is locked because of too many authentication failures\n   *  - 103 User account is invalid due to expired password\n   *  - 104 Too many simultaneous sessions in the system\n   *  - 105 Too many simultaneous sessions for the user\n   *  - 106 Account is locked by the administrator\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `revokeSessionsPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  revokeSessionsPost(params: {\n\n    /**\n     * Authorization containing the word Basic followed by a space and a base64-encoded string username:password\n     */\n    Authorization: string;\n\n  }): Observable<void> {\n\n    return this.revokeSessionsPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation sessionsGet\n   */\n  static readonly SessionsGetPath = '/sessions';\n\n  /**\n   * Provides currently logged-in session information.\n   *\n   * API Gateway session information\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `sessionsGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  sessionsGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<SessionInfo>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SessionMgmtService.SessionsGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<SessionInfo>>;\n      })\n    );\n  }\n\n  /**\n   * Provides currently logged-in session information.\n   *\n   * API Gateway session information\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `sessionsGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  sessionsGet(params?: {\n\n  }): Observable<Array<SessionInfo>> {\n\n    return this.sessionsGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<SessionInfo>>) => r.body as Array<SessionInfo>)\n    );\n  }\n\n  /**\n   * Path part for operation getTokenInfo\n   */\n  static readonly GetTokenInfoPath = '/token-info';\n\n  /**\n   * Get the authentication-token (JWT) information.\n   *\n   * Endpoint to get information about token.\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getTokenInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTokenInfo$Response(params?: {\n\n  }): Observable<StrictHttpResponse<TokenInfo>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SessionMgmtService.GetTokenInfoPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<TokenInfo>;\n      })\n    );\n  }\n\n  /**\n   * Get the authentication-token (JWT) information.\n   *\n   * Endpoint to get information about token.\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getTokenInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTokenInfo(params?: {\n\n  }): Observable<TokenInfo> {\n\n    return this.getTokenInfo$Response(params).pipe(\n      map((r: StrictHttpResponse<TokenInfo>) => r.body as TokenInfo)\n    );\n  }\n\n  /**\n   * Path part for operation tokenInfoPost\n   */\n  static readonly TokenInfoPostPath = '/token-info';\n\n  /**\n   * Set the authentication-token (JWT) information.\n   *\n   * Endpoint set information about token\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `tokenInfoPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  tokenInfoPost$Response(params?: {\n  \n    /**\n     * Indicate Changeable Parameters\n     */\n    body?: PostTokenInfo\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SessionMgmtService.TokenInfoPostPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Set the authentication-token (JWT) information.\n   *\n   * Endpoint set information about token\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `tokenInfoPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  tokenInfoPost(params?: {\n  \n    /**\n     * Indicate Changeable Parameters\n     */\n    body?: PostTokenInfo\n  }): Observable<void> {\n\n    return this.tokenInfoPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation refreshTokenPatch\n   */\n  static readonly RefreshTokenPatchPath = '/refresh-token';\n\n  /**\n   * refresh the authentication-token (JWT) expiration time.\n   *\n   * Refresh the token expiration time, new expiration time = operation time  + session validity <br> Only When the user is deactivated, the repsone is 401 to indicate the anthentication failure. Password not match or token not match is considered as bad request and not lock the user.\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `refreshTokenPatch()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  refreshTokenPatch$Response(params: {\n\n    /**\n     * Authorization containing the word Basic followed by a space and a base64-encoded string username:password\n     */\n    Authorization: string;\n  \n    /**\n     * Indicate the token which needs to refresh expiration time\n     */\n    body?: RefreshTokenRequest\n  }): Observable<StrictHttpResponse<RefreshTokenResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SessionMgmtService.RefreshTokenPatchPath, 'patch');\n    if (params) {\n\n      rb.header('Authorization', params.Authorization, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<RefreshTokenResponse>;\n      })\n    );\n  }\n\n  /**\n   * refresh the authentication-token (JWT) expiration time.\n   *\n   * Refresh the token expiration time, new expiration time = operation time  + session validity <br> Only When the user is deactivated, the repsone is 401 to indicate the anthentication failure. Password not match or token not match is considered as bad request and not lock the user.\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `refreshTokenPatch$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  refreshTokenPatch(params: {\n\n    /**\n     * Authorization containing the word Basic followed by a space and a base64-encoded string username:password\n     */\n    Authorization: string;\n  \n    /**\n     * Indicate the token which needs to refresh expiration time\n     */\n    body?: RefreshTokenRequest\n  }): Observable<RefreshTokenResponse> {\n\n    return this.refreshTokenPatch$Response(params).pipe(\n      map((r: StrictHttpResponse<RefreshTokenResponse>) => r.body as RefreshTokenResponse)\n    );\n  }\n\n  /**\n   * Path part for operation allowedFunctionalitiesGet\n   */\n  static readonly AllowedFunctionalitiesGetPath = '/allowed-functionalities';\n\n  /**\n   * Get a list of allowed upstream APIs.\n   *\n   * Get a list of allowed upstream APIs: session jwt required.\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `allowedFunctionalitiesGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  allowedFunctionalitiesGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<AllowedFunctionalitiesResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SessionMgmtService.AllowedFunctionalitiesGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<AllowedFunctionalitiesResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get a list of allowed upstream APIs.\n   *\n   * Get a list of allowed upstream APIs: session jwt required.\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `allowedFunctionalitiesGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  allowedFunctionalitiesGet(params?: {\n\n  }): Observable<AllowedFunctionalitiesResponse> {\n\n    return this.allowedFunctionalitiesGet$Response(params).pipe(\n      map((r: StrictHttpResponse<AllowedFunctionalitiesResponse>) => r.body as AllowedFunctionalitiesResponse)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '/api/asm/v1';\n}\n\n/**\n * Parameters for `CuAsmClientModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\nexport enum AdministrativeState {\n  Locked = 'Locked',\n  Unlocked = 'Unlocked'\n}\n","/* tslint:disable */\nexport enum CellAdministrativeState {\n  Locked = 'Locked',\n  Unlocked = 'Unlocked',\n  ShuttingDown = 'Shutting Down'\n}\n","/* tslint:disable */\nexport enum CellTechnologyType {\n  Tdd = 'TDD',\n  Fdd = 'FDD'\n}\n","/* tslint:disable */\nexport enum F1LinkStatus {\n  Available = 'available',\n  Unavailable = 'unavailable'\n}\n","/* tslint:disable */\nexport enum NgLinkStatus {\n  Inactive = 'Inactive',\n  Active = 'Active'\n}\n","/* tslint:disable */\nexport enum NullableAvailabilityStatus {\n  InTest = 'in test',\n  Failed = 'failed',\n  PowerOff = 'power off',\n  OffLine = 'off line',\n  OffDuty = 'off duty',\n  Dependency = 'dependency',\n  Degraded = 'degraded',\n  NotInstalled = 'not installed',\n  LogFull = 'log full',\n  OnLine = 'on line'\n}\n","/* tslint:disable */\nexport enum NullableOperationalState {\n  Enabled = 'enabled',\n  Disabled = 'disabled',\n  Testing = 'testing'\n}\n","/* tslint:disable */\nexport enum Userrole {\n  SystemUserAccessMode = 'systemUserAccessMode',\n  SecUserAccessMode = 'secUserAccessMode',\n  AppUserAccessMode = 'appUserAccessMode',\n  ReadOnlyUserAccessMode = 'readOnlyUserAccessMode'\n}\n","/* tslint:disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ActivateDeltaPlanOperationResponse } from '../models/activate-delta-plan-operation-response';\nimport { ActivateDeltaPlanRequestOptions } from '../models/activate-delta-plan-request-options';\nimport { ActivateOperationResponse } from '../models/activate-operation-response';\nimport { CopyManagedObjectsRequest } from '../models/copy-managed-objects-request';\nimport { CopyManagedObjectsResponse } from '../models/copy-managed-objects-response';\nimport { CopyPlanRequest } from '../models/copy-plan-request';\nimport { CreateObjectRequest } from '../models/create-object-request';\nimport { CreateObjectResponse } from '../models/create-object-response';\nimport { DeleteObjectRequest } from '../models/delete-object-request';\nimport { DeleteObjectResponse } from '../models/delete-object-response';\nimport { DeltaPlanInfoResponse } from '../models/delta-plan-info-response';\nimport { DownloadPlanFileRequest } from '../models/download-plan-file-request';\nimport { FileDownloadGeneratePlanResponse } from '../models/file-download-generate-plan-response';\nimport { FixPlanRequest } from '../models/fix-plan-request';\nimport { FixPlanResponse } from '../models/fix-plan-response';\nimport { GeneratePlanResponse } from '../models/generate-plan-response';\nimport { ManagedObjectCopySources } from '../models/managed-object-copy-sources';\nimport { ManagedObjectData } from '../models/managed-object-data';\nimport { ManagedObjectParameters } from '../models/managed-object-parameters';\nimport { NiddDefinition } from '../models/nidd-definition';\nimport { ObjectChangesNotification } from '../models/object-changes-notification';\nimport { ParameterRelationErrorDetail } from '../models/parameter-relation-error-detail';\nimport { PatchPlanInfoRequest } from '../models/patch-plan-info-request';\nimport { PlanInfoRequest } from '../models/plan-info-request';\nimport { PlanInfoResponse } from '../models/plan-info-response';\nimport { PlanTreeDiff } from '../models/plan-tree-diff';\nimport { PlanUploadOptions } from '../models/plan-upload-options';\nimport { RevertObjectRequest } from '../models/revert-object-request';\nimport { RevertObjectResponse } from '../models/revert-object-response';\nimport { SearchParameterResponse } from '../models/search-parameter-response';\nimport { UpdateParametersRequest } from '../models/update-parameters-request';\nimport { UpdateParametersResponse } from '../models/update-parameters-response';\nimport { UploadActionResponse } from '../models/upload-action-response';\nimport { ValidationActionResponse } from '../models/validation-action-response';\nimport { ValidationErrorType } from '../models/validation-error-type';\nimport { ValidationResult } from '../models/validation-result';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PeService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getDeltaPlanList\n   */\n  static readonly GetDeltaPlanListPath = '/delta-plans';\n\n  /**\n   * Get list of delta plan info.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getDeltaPlanList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDeltaPlanList$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<DeltaPlanInfoResponse>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetDeltaPlanListPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<DeltaPlanInfoResponse>>;\n      })\n    );\n  }\n\n  /**\n   * Get list of delta plan info.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getDeltaPlanList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDeltaPlanList(params?: {\n\n  }): Observable<Array<DeltaPlanInfoResponse>> {\n\n    return this.getDeltaPlanList$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<DeltaPlanInfoResponse>>) => r.body as Array<DeltaPlanInfoResponse>)\n    );\n  }\n\n  /**\n   * Path part for operation getDeltaPlanInfo\n   */\n  static readonly GetDeltaPlanInfoPath = '/delta-plans/{planId}';\n\n  /**\n   * Get delta plan info by given planId.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getDeltaPlanInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDeltaPlanInfo$Response(params: {\n    planId: string;\n\n  }): Observable<StrictHttpResponse<DeltaPlanInfoResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetDeltaPlanInfoPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<DeltaPlanInfoResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get delta plan info by given planId.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getDeltaPlanInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDeltaPlanInfo(params: {\n    planId: string;\n\n  }): Observable<DeltaPlanInfoResponse> {\n\n    return this.getDeltaPlanInfo$Response(params).pipe(\n      map((r: StrictHttpResponse<DeltaPlanInfoResponse>) => r.body as DeltaPlanInfoResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteDeltaPlan\n   */\n  static readonly DeleteDeltaPlanPath = '/delta-plans/{planId}';\n\n  /**\n   * Delete plan and sub-resources by given planId.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteDeltaPlan$Response(params: {\n    planId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteDeltaPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete plan and sub-resources by given planId.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteDeltaPlan(params: {\n    planId: string;\n\n  }): Observable<void> {\n\n    return this.deleteDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation updateDeltaPlanInfo\n   */\n  static readonly UpdateDeltaPlanInfoPath = '/delta-plans/{planId}';\n\n  /**\n   * Update this delta plan info by given planId.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updateDeltaPlanInfo()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateDeltaPlanInfo$Response(params: {\n    planId: string;\n  \n    /**\n     * Changes to this plan\n     */\n    body: PatchPlanInfoRequest\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.UpdateDeltaPlanInfoPath, 'patch');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Update this delta plan info by given planId.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `updateDeltaPlanInfo$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateDeltaPlanInfo(params: {\n    planId: string;\n  \n    /**\n     * Changes to this plan\n     */\n    body: PatchPlanInfoRequest\n  }): Observable<void> {\n\n    return this.updateDeltaPlanInfo$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getPlanList\n   */\n  static readonly GetPlanListPath = '/staged-plans';\n\n  /**\n   * Get a list of staged plan info.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getPlanList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPlanList$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<PlanInfoResponse>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetPlanListPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<PlanInfoResponse>>;\n      })\n    );\n  }\n\n  /**\n   * Get a list of staged plan info.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getPlanList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPlanList(params?: {\n\n  }): Observable<Array<PlanInfoResponse>> {\n\n    return this.getPlanList$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<PlanInfoResponse>>) => r.body as Array<PlanInfoResponse>)\n    );\n  }\n\n  /**\n   * Path part for operation getPlanInfo\n   */\n  static readonly GetPlanInfoPath = '/staged-plans/{planId}';\n\n  /**\n   * Get staged plan info by given planId.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getPlanInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPlanInfo$Response(params: {\n    planId: string;\n\n  }): Observable<StrictHttpResponse<PlanInfoResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetPlanInfoPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<PlanInfoResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get staged plan info by given planId.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getPlanInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPlanInfo(params: {\n    planId: string;\n\n  }): Observable<PlanInfoResponse> {\n\n    return this.getPlanInfo$Response(params).pipe(\n      map((r: StrictHttpResponse<PlanInfoResponse>) => r.body as PlanInfoResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteStagedPlan\n   */\n  static readonly DeleteStagedPlanPath = '/staged-plans/{planId}';\n\n  /**\n   * Delete plan and sub-resources by given planId.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteStagedPlan$Response(params: {\n    planId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteStagedPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete plan and sub-resources by given planId.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteStagedPlan(params: {\n    planId: string;\n\n  }): Observable<void> {\n\n    return this.deleteStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation updatePlanInfo\n   */\n  static readonly UpdatePlanInfoPath = '/staged-plans/{planId}';\n\n  /**\n   * Update this plan info by given planId.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updatePlanInfo()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updatePlanInfo$Response(params: {\n    planId: string;\n  \n    /**\n     * Changes to this plan\n     */\n    body: PatchPlanInfoRequest\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.UpdatePlanInfoPath, 'patch');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Update this plan info by given planId.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `updatePlanInfo$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updatePlanInfo(params: {\n    planId: string;\n  \n    /**\n     * Changes to this plan\n     */\n    body: PatchPlanInfoRequest\n  }): Observable<void> {\n\n    return this.updatePlanInfo$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation generatePlanByDownloadScfFile\n   */\n  static readonly GeneratePlanByDownloadScfFilePath = '/staged-plans/actions/downloads';\n\n  /**\n   * Generate staged plan by download scf file.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `generatePlanByDownloadScfFile()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  generatePlanByDownloadScfFile$Response(params: {\n      body: DownloadPlanFileRequest\n  }): Observable<StrictHttpResponse<FileDownloadGeneratePlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GeneratePlanByDownloadScfFilePath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'multipart/form-data');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<FileDownloadGeneratePlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Generate staged plan by download scf file.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `generatePlanByDownloadScfFile$Response()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  generatePlanByDownloadScfFile(params: {\n      body: DownloadPlanFileRequest\n  }): Observable<FileDownloadGeneratePlanResponse> {\n\n    return this.generatePlanByDownloadScfFile$Response(params).pipe(\n      map((r: StrictHttpResponse<FileDownloadGeneratePlanResponse>) => r.body as FileDownloadGeneratePlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getActionStateOfGeneratingPlanByScf\n   */\n  static readonly GetActionStateOfGeneratingPlanByScfPath = '/staged-plans/actions/downloads/{actionId}';\n\n  /**\n   * Get action state of scf file download and generate plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActionStateOfGeneratingPlanByScf()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfGeneratingPlanByScf$Response(params: {\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<FileDownloadGeneratePlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetActionStateOfGeneratingPlanByScfPath, 'get');\n    if (params) {\n\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<FileDownloadGeneratePlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get action state of scf file download and generate plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActionStateOfGeneratingPlanByScf$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfGeneratingPlanByScf(params: {\n    actionId: string;\n\n  }): Observable<FileDownloadGeneratePlanResponse> {\n\n    return this.getActionStateOfGeneratingPlanByScf$Response(params).pipe(\n      map((r: StrictHttpResponse<FileDownloadGeneratePlanResponse>) => r.body as FileDownloadGeneratePlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionStateOfGeneratingPlanByScf\n   */\n  static readonly DeleteActionStateOfGeneratingPlanByScfPath = '/staged-plans/actions/downloads/{actionId}';\n\n  /**\n   * Delete action state of scf file download and generate plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionStateOfGeneratingPlanByScf()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfGeneratingPlanByScf$Response(params: {\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionStateOfGeneratingPlanByScfPath, 'delete');\n    if (params) {\n\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of scf file download and generate plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionStateOfGeneratingPlanByScf$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfGeneratingPlanByScf(params: {\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionStateOfGeneratingPlanByScf$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation generatePlanByCopyCurrentPlan\n   */\n  static readonly GeneratePlanByCopyCurrentPlanPath = '/staged-plans/actions/current-plan-copies';\n\n  /**\n   * Generate plan by copy from current plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `generatePlanByCopyCurrentPlan()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generatePlanByCopyCurrentPlan$Response(params: {\n      body: PlanInfoRequest\n  }): Observable<StrictHttpResponse<GeneratePlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GeneratePlanByCopyCurrentPlanPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<GeneratePlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Generate plan by copy from current plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `generatePlanByCopyCurrentPlan$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generatePlanByCopyCurrentPlan(params: {\n      body: PlanInfoRequest\n  }): Observable<GeneratePlanResponse> {\n\n    return this.generatePlanByCopyCurrentPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<GeneratePlanResponse>) => r.body as GeneratePlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getActionStateOfCopyingCurrentPlan\n   */\n  static readonly GetActionStateOfCopyingCurrentPlanPath = '/staged-plans/actions/current-plan-copies/{actionId}';\n\n  /**\n   * Get action state of generating plan by copy current plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActionStateOfCopyingCurrentPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfCopyingCurrentPlan$Response(params: {\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<GeneratePlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetActionStateOfCopyingCurrentPlanPath, 'get');\n    if (params) {\n\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<GeneratePlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get action state of generating plan by copy current plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActionStateOfCopyingCurrentPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfCopyingCurrentPlan(params: {\n    actionId: string;\n\n  }): Observable<GeneratePlanResponse> {\n\n    return this.getActionStateOfCopyingCurrentPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<GeneratePlanResponse>) => r.body as GeneratePlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionStateOfCopyingCurrentPlan\n   */\n  static readonly DeleteActionStateOfCopyingCurrentPlanPath = '/staged-plans/actions/current-plan-copies/{actionId}';\n\n  /**\n   * Delete action state of generating plan by copy current plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionStateOfCopyingCurrentPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfCopyingCurrentPlan$Response(params: {\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionStateOfCopyingCurrentPlanPath, 'delete');\n    if (params) {\n\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of generating plan by copy current plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionStateOfCopyingCurrentPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfCopyingCurrentPlan(params: {\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionStateOfCopyingCurrentPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation generatePlanByCopyDeltaPlan\n   */\n  static readonly GeneratePlanByCopyDeltaPlanPath = '/staged-plans/actions/delta-plan-copies';\n\n  /**\n   * Generate plan by copy from delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `generatePlanByCopyDeltaPlan()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generatePlanByCopyDeltaPlan$Response(params: {\n      body: CopyPlanRequest\n  }): Observable<StrictHttpResponse<GeneratePlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GeneratePlanByCopyDeltaPlanPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<GeneratePlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Generate plan by copy from delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `generatePlanByCopyDeltaPlan$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generatePlanByCopyDeltaPlan(params: {\n      body: CopyPlanRequest\n  }): Observable<GeneratePlanResponse> {\n\n    return this.generatePlanByCopyDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<GeneratePlanResponse>) => r.body as GeneratePlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getActionStateOfCopyingDeltaPlan\n   */\n  static readonly GetActionStateOfCopyingDeltaPlanPath = '/staged-plans/actions/delta-plan-copies/{actionId}';\n\n  /**\n   * Get action state of generating plan by copy delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActionStateOfCopyingDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfCopyingDeltaPlan$Response(params: {\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<GeneratePlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetActionStateOfCopyingDeltaPlanPath, 'get');\n    if (params) {\n\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<GeneratePlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get action state of generating plan by copy delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActionStateOfCopyingDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfCopyingDeltaPlan(params: {\n    actionId: string;\n\n  }): Observable<GeneratePlanResponse> {\n\n    return this.getActionStateOfCopyingDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<GeneratePlanResponse>) => r.body as GeneratePlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionStateOfCopyingDeltaPlan\n   */\n  static readonly DeleteActionStateOfCopyingDeltaPlanPath = '/staged-plans/actions/delta-plan-copies/{actionId}';\n\n  /**\n   * Delete action state of generating plan by copy delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionStateOfCopyingDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfCopyingDeltaPlan$Response(params: {\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionStateOfCopyingDeltaPlanPath, 'delete');\n    if (params) {\n\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of generating plan by copy delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionStateOfCopyingDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfCopyingDeltaPlan(params: {\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionStateOfCopyingDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation generatePlanByCopyStagedPlan\n   */\n  static readonly GeneratePlanByCopyStagedPlanPath = '/staged-plans/actions/copies';\n\n  /**\n   * Generate plan by copy staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `generatePlanByCopyStagedPlan()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generatePlanByCopyStagedPlan$Response(params: {\n      body: CopyPlanRequest\n  }): Observable<StrictHttpResponse<GeneratePlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GeneratePlanByCopyStagedPlanPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<GeneratePlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Generate plan by copy staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `generatePlanByCopyStagedPlan$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generatePlanByCopyStagedPlan(params: {\n      body: CopyPlanRequest\n  }): Observable<GeneratePlanResponse> {\n\n    return this.generatePlanByCopyStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<GeneratePlanResponse>) => r.body as GeneratePlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getActionStateOfCopyingStagedPlan\n   */\n  static readonly GetActionStateOfCopyingStagedPlanPath = '/staged-plans/actions/copies/{actionId}';\n\n  /**\n   * Get action state of generating plan by copy staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActionStateOfCopyingStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfCopyingStagedPlan$Response(params: {\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<GeneratePlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetActionStateOfCopyingStagedPlanPath, 'get');\n    if (params) {\n\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<GeneratePlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get action state of generating plan by copy staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActionStateOfCopyingStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfCopyingStagedPlan(params: {\n    actionId: string;\n\n  }): Observable<GeneratePlanResponse> {\n\n    return this.getActionStateOfCopyingStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<GeneratePlanResponse>) => r.body as GeneratePlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionStateOfCopyingStagedPlan\n   */\n  static readonly DeleteActionStateOfCopyingStagedPlanPath = '/staged-plans/actions/copies/{actionId}';\n\n  /**\n   * Delete action state of generating plan by copy staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionStateOfCopyingStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfCopyingStagedPlan$Response(params: {\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionStateOfCopyingStagedPlanPath, 'delete');\n    if (params) {\n\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of generating plan by copy staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionStateOfCopyingStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfCopyingStagedPlan(params: {\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionStateOfCopyingStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation generateNewPlan\n   */\n  static readonly GenerateNewPlanPath = '/staged-plans/actions/generations';\n\n  /**\n   * Action to generate an new plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `generateNewPlan()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generateNewPlan$Response(params: {\n      body: PlanInfoRequest\n  }): Observable<StrictHttpResponse<GeneratePlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GenerateNewPlanPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<GeneratePlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Action to generate an new plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `generateNewPlan$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generateNewPlan(params: {\n      body: PlanInfoRequest\n  }): Observable<GeneratePlanResponse> {\n\n    return this.generateNewPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<GeneratePlanResponse>) => r.body as GeneratePlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getActionStateOfGeneratingNewPlan\n   */\n  static readonly GetActionStateOfGeneratingNewPlanPath = '/staged-plans/actions/generations/{actionId}';\n\n  /**\n   * Get action state of generating an new plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActionStateOfGeneratingNewPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfGeneratingNewPlan$Response(params: {\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<GeneratePlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetActionStateOfGeneratingNewPlanPath, 'get');\n    if (params) {\n\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<GeneratePlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get action state of generating an new plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActionStateOfGeneratingNewPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfGeneratingNewPlan(params: {\n    actionId: string;\n\n  }): Observable<GeneratePlanResponse> {\n\n    return this.getActionStateOfGeneratingNewPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<GeneratePlanResponse>) => r.body as GeneratePlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionStateOfGeneratingNewPlan\n   */\n  static readonly DeleteActionStateOfGeneratingNewPlanPath = '/staged-plans/actions/generations/{actionId}';\n\n  /**\n   * Delete action state of generating new plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionStateOfGeneratingNewPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfGeneratingNewPlan$Response(params: {\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionStateOfGeneratingNewPlanPath, 'delete');\n    if (params) {\n\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of generating new plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionStateOfGeneratingNewPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfGeneratingNewPlan(params: {\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionStateOfGeneratingNewPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation generateDeltaPlan\n   */\n  static readonly GenerateDeltaPlanPath = '/delta-plans/actions/generations';\n\n  /**\n   * Action to generate plan by fetch delta plan from CM.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `generateDeltaPlan()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generateDeltaPlan$Response(params: {\n      body: PlanInfoRequest\n  }): Observable<StrictHttpResponse<GeneratePlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GenerateDeltaPlanPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<GeneratePlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Action to generate plan by fetch delta plan from CM.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `generateDeltaPlan$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generateDeltaPlan(params: {\n      body: PlanInfoRequest\n  }): Observable<GeneratePlanResponse> {\n\n    return this.generateDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<GeneratePlanResponse>) => r.body as GeneratePlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getActionStateOfGeneratingDeltaPlan\n   */\n  static readonly GetActionStateOfGeneratingDeltaPlanPath = '/delta-plans/actions/generations/{actionId}';\n\n  /**\n   * Get action state of generating delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActionStateOfGeneratingDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfGeneratingDeltaPlan$Response(params: {\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<GeneratePlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetActionStateOfGeneratingDeltaPlanPath, 'get');\n    if (params) {\n\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<GeneratePlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get action state of generating delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActionStateOfGeneratingDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfGeneratingDeltaPlan(params: {\n    actionId: string;\n\n  }): Observable<GeneratePlanResponse> {\n\n    return this.getActionStateOfGeneratingDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<GeneratePlanResponse>) => r.body as GeneratePlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionStateOfGeneratingDeltaPlan\n   */\n  static readonly DeleteActionStateOfGeneratingDeltaPlanPath = '/delta-plans/actions/generations/{actionId}';\n\n  /**\n   * Delete action state of generating delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionStateOfGeneratingDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfGeneratingDeltaPlan$Response(params: {\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionStateOfGeneratingDeltaPlanPath, 'delete');\n    if (params) {\n\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of generating delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionStateOfGeneratingDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfGeneratingDeltaPlan(params: {\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionStateOfGeneratingDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation generatePlanFileForUploading\n   */\n  static readonly GeneratePlanFileForUploadingPath = '/staged-plans/{planId}/actions/uploads';\n\n  /**\n   * Generate raml file.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `generatePlanFileForUploading()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generatePlanFileForUploading$Response(params: {\n    planId: string;\n      body: PlanUploadOptions\n  }): Observable<StrictHttpResponse<UploadActionResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GeneratePlanFileForUploadingPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<UploadActionResponse>;\n      })\n    );\n  }\n\n  /**\n   * Generate raml file.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `generatePlanFileForUploading$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generatePlanFileForUploading(params: {\n    planId: string;\n      body: PlanUploadOptions\n  }): Observable<UploadActionResponse> {\n\n    return this.generatePlanFileForUploading$Response(params).pipe(\n      map((r: StrictHttpResponse<UploadActionResponse>) => r.body as UploadActionResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getActionStateOfUploadingPlanFile\n   */\n  static readonly GetActionStateOfUploadingPlanFilePath = '/staged-plans/{planId}/actions/uploads/{actionId}';\n\n  /**\n   * Get action state of upload raml file.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActionStateOfUploadingPlanFile()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfUploadingPlanFile$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<UploadActionResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetActionStateOfUploadingPlanFilePath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<UploadActionResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get action state of upload raml file.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActionStateOfUploadingPlanFile$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfUploadingPlanFile(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<UploadActionResponse> {\n\n    return this.getActionStateOfUploadingPlanFile$Response(params).pipe(\n      map((r: StrictHttpResponse<UploadActionResponse>) => r.body as UploadActionResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionStateOfUploadingPlanFile\n   */\n  static readonly DeleteActionStateOfUploadingPlanFilePath = '/staged-plans/{planId}/actions/uploads/{actionId}';\n\n  /**\n   * Delete action state of plan upload.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionStateOfUploadingPlanFile()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfUploadingPlanFile$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionStateOfUploadingPlanFilePath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of plan upload.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionStateOfUploadingPlanFile$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfUploadingPlanFile(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionStateOfUploadingPlanFile$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation generateDeltaPlanFileForUploading\n   */\n  static readonly GenerateDeltaPlanFileForUploadingPath = '/delta-plans/{planId}/actions/uploads';\n\n  /**\n   * Generate raml file.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `generateDeltaPlanFileForUploading()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generateDeltaPlanFileForUploading$Response(params: {\n    planId: string;\n      body: PlanUploadOptions\n  }): Observable<StrictHttpResponse<UploadActionResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GenerateDeltaPlanFileForUploadingPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<UploadActionResponse>;\n      })\n    );\n  }\n\n  /**\n   * Generate raml file.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `generateDeltaPlanFileForUploading$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  generateDeltaPlanFileForUploading(params: {\n    planId: string;\n      body: PlanUploadOptions\n  }): Observable<UploadActionResponse> {\n\n    return this.generateDeltaPlanFileForUploading$Response(params).pipe(\n      map((r: StrictHttpResponse<UploadActionResponse>) => r.body as UploadActionResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getActionStateOfUploadingDeltaPlanFile\n   */\n  static readonly GetActionStateOfUploadingDeltaPlanFilePath = '/delta-plans/{planId}/actions/uploads/{actionId}';\n\n  /**\n   * Get action state of upload raml file.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActionStateOfUploadingDeltaPlanFile()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfUploadingDeltaPlanFile$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<UploadActionResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetActionStateOfUploadingDeltaPlanFilePath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<UploadActionResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get action state of upload raml file.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActionStateOfUploadingDeltaPlanFile$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActionStateOfUploadingDeltaPlanFile(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<UploadActionResponse> {\n\n    return this.getActionStateOfUploadingDeltaPlanFile$Response(params).pipe(\n      map((r: StrictHttpResponse<UploadActionResponse>) => r.body as UploadActionResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionStateOfUploadingDeltaPlanFile\n   */\n  static readonly DeleteActionStateOfUploadingDeltaPlanFilePath = '/delta-plans/{planId}/actions/uploads/{actionId}';\n\n  /**\n   * Delete action state of plan upload.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionStateOfUploadingDeltaPlanFile()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfUploadingDeltaPlanFile$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionStateOfUploadingDeltaPlanFilePath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of plan upload.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionStateOfUploadingDeltaPlanFile$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionStateOfUploadingDeltaPlanFile(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionStateOfUploadingDeltaPlanFile$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation uploadFile\n   */\n  static readonly UploadFilePath = '/files/{fileName}';\n\n  /**\n   * Upload file.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `uploadFile()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  uploadFile$Response(params: {\n    fileName: string;\n\n  }): Observable<StrictHttpResponse<Blob>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.UploadFilePath, 'get');\n    if (params) {\n\n      rb.path('fileName', params.fileName, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: 'application/xml'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Blob>;\n      })\n    );\n  }\n\n  /**\n   * Upload file.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `uploadFile$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  uploadFile(params: {\n    fileName: string;\n\n  }): Observable<Blob> {\n\n    return this.uploadFile$Response(params).pipe(\n      map((r: StrictHttpResponse<Blob>) => r.body as Blob)\n    );\n  }\n\n  /**\n   * Path part for operation activateStagedPlan\n   */\n  static readonly ActivateStagedPlanPath = '/staged-plans/{planId}/operations/activations';\n\n  /**\n   * Staged plan activation.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `activateStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  activateStagedPlan$Response(params: {\n    planId: string;\n\n  }): Observable<StrictHttpResponse<ActivateOperationResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.ActivateStagedPlanPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ActivateOperationResponse>;\n      })\n    );\n  }\n\n  /**\n   * Staged plan activation.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `activateStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  activateStagedPlan(params: {\n    planId: string;\n\n  }): Observable<ActivateOperationResponse> {\n\n    return this.activateStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ActivateOperationResponse>) => r.body as ActivateOperationResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getOperationStateOfActivatingStagedPlan\n   */\n  static readonly GetOperationStateOfActivatingStagedPlanPath = '/staged-plans/{planId}/operations/activations/{operationId}';\n\n  /**\n   * Get operation state of activating staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getOperationStateOfActivatingStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getOperationStateOfActivatingStagedPlan$Response(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<ActivateOperationResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetOperationStateOfActivatingStagedPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ActivateOperationResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get operation state of activating staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getOperationStateOfActivatingStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getOperationStateOfActivatingStagedPlan(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<ActivateOperationResponse> {\n\n    return this.getOperationStateOfActivatingStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ActivateOperationResponse>) => r.body as ActivateOperationResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteOperationStateOfActivatingStagedPlan\n   */\n  static readonly DeleteOperationStateOfActivatingStagedPlanPath = '/staged-plans/{planId}/operations/activations/{operationId}';\n\n  /**\n   * Delete operation state of activating staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteOperationStateOfActivatingStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteOperationStateOfActivatingStagedPlan$Response(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteOperationStateOfActivatingStagedPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete operation state of activating staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteOperationStateOfActivatingStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteOperationStateOfActivatingStagedPlan(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<void> {\n\n    return this.deleteOperationStateOfActivatingStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation activateDeltaPlan\n   */\n  static readonly ActivateDeltaPlanPath = '/delta-plans/{planId}/operations/activations';\n\n  /**\n   * Activate delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `activateDeltaPlan()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  activateDeltaPlan$Response(params: {\n    planId: string;\n      body: ActivateDeltaPlanRequestOptions\n  }): Observable<StrictHttpResponse<ActivateDeltaPlanOperationResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.ActivateDeltaPlanPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ActivateDeltaPlanOperationResponse>;\n      })\n    );\n  }\n\n  /**\n   * Activate delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `activateDeltaPlan$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  activateDeltaPlan(params: {\n    planId: string;\n      body: ActivateDeltaPlanRequestOptions\n  }): Observable<ActivateDeltaPlanOperationResponse> {\n\n    return this.activateDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ActivateDeltaPlanOperationResponse>) => r.body as ActivateDeltaPlanOperationResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getOperationStateOfActivatingDeltaPlan\n   */\n  static readonly GetOperationStateOfActivatingDeltaPlanPath = '/delta-plans/{planId}/operations/activations/{operationId}';\n\n  /**\n   * Get operation state of activating delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getOperationStateOfActivatingDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getOperationStateOfActivatingDeltaPlan$Response(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<ActivateDeltaPlanOperationResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetOperationStateOfActivatingDeltaPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ActivateDeltaPlanOperationResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get operation state of activating delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getOperationStateOfActivatingDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getOperationStateOfActivatingDeltaPlan(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<ActivateDeltaPlanOperationResponse> {\n\n    return this.getOperationStateOfActivatingDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ActivateDeltaPlanOperationResponse>) => r.body as ActivateDeltaPlanOperationResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteOperationStateOfActivatingDeltaPlan\n   */\n  static readonly DeleteOperationStateOfActivatingDeltaPlanPath = '/delta-plans/{planId}/operations/activations/{operationId}';\n\n  /**\n   * Delete operation state of activating delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteOperationStateOfActivatingDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteOperationStateOfActivatingDeltaPlan$Response(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteOperationStateOfActivatingDeltaPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete operation state of activating delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteOperationStateOfActivatingDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteOperationStateOfActivatingDeltaPlan(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<void> {\n\n    return this.deleteOperationStateOfActivatingDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getManagedObjectOfStagedPlan\n   */\n  static readonly GetManagedObjectOfStagedPlanPath = '/staged-plans/{planId}/managed-objects/{moUuid}';\n\n  /**\n   * Query managed object data.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getManagedObjectOfStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getManagedObjectOfStagedPlan$Response(params: {\n    planId: string;\n\n    /**\n     * Uuid of managed object\n     */\n    moUuid: string;\n\n  }): Observable<StrictHttpResponse<ManagedObjectData>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetManagedObjectOfStagedPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('moUuid', params.moUuid, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ManagedObjectData>;\n      })\n    );\n  }\n\n  /**\n   * Query managed object data.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getManagedObjectOfStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getManagedObjectOfStagedPlan(params: {\n    planId: string;\n\n    /**\n     * Uuid of managed object\n     */\n    moUuid: string;\n\n  }): Observable<ManagedObjectData> {\n\n    return this.getManagedObjectOfStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ManagedObjectData>) => r.body as ManagedObjectData)\n    );\n  }\n\n  /**\n   * Path part for operation getManagedObjectOfDeltaPlan\n   */\n  static readonly GetManagedObjectOfDeltaPlanPath = '/delta-plans/{planId}/managed-objects/{moUuid}';\n\n  /**\n   * Query managed object data.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getManagedObjectOfDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getManagedObjectOfDeltaPlan$Response(params: {\n    planId: string;\n\n    /**\n     * Uuid of managed object\n     */\n    moUuid: string;\n\n  }): Observable<StrictHttpResponse<ManagedObjectData>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetManagedObjectOfDeltaPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('moUuid', params.moUuid, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ManagedObjectData>;\n      })\n    );\n  }\n\n  /**\n   * Query managed object data.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getManagedObjectOfDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getManagedObjectOfDeltaPlan(params: {\n    planId: string;\n\n    /**\n     * Uuid of managed object\n     */\n    moUuid: string;\n\n  }): Observable<ManagedObjectData> {\n\n    return this.getManagedObjectOfDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ManagedObjectData>) => r.body as ManagedObjectData)\n    );\n  }\n\n  /**\n   * Path part for operation createManagedObject\n   */\n  static readonly CreateManagedObjectPath = '/staged-plans/{planId}/actions/create-objects';\n\n  /**\n   * Create managed object in a staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createManagedObject()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  createManagedObject$Response(params: {\n    planId: string;\n      body: CreateObjectRequest\n  }): Observable<StrictHttpResponse<CreateObjectResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.CreateManagedObjectPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CreateObjectResponse>;\n      })\n    );\n  }\n\n  /**\n   * Create managed object in a staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createManagedObject$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  createManagedObject(params: {\n    planId: string;\n      body: CreateObjectRequest\n  }): Observable<CreateObjectResponse> {\n\n    return this.createManagedObject$Response(params).pipe(\n      map((r: StrictHttpResponse<CreateObjectResponse>) => r.body as CreateObjectResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getCreateManagedObjectAction\n   */\n  static readonly GetCreateManagedObjectActionPath = '/staged-plans/{planId}/actions/create-objects/{actionId}';\n\n  /**\n   * Fetch create managed object action result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getCreateManagedObjectAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCreateManagedObjectAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<CreateObjectResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetCreateManagedObjectActionPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CreateObjectResponse>;\n      })\n    );\n  }\n\n  /**\n   * Fetch create managed object action result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getCreateManagedObjectAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCreateManagedObjectAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<CreateObjectResponse> {\n\n    return this.getCreateManagedObjectAction$Response(params).pipe(\n      map((r: StrictHttpResponse<CreateObjectResponse>) => r.body as CreateObjectResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteCreateManagedObjectAction\n   */\n  static readonly DeleteCreateManagedObjectActionPath = '/staged-plans/{planId}/actions/create-objects/{actionId}';\n\n  /**\n   * Delete action state of create object in staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteCreateManagedObjectAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteCreateManagedObjectAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteCreateManagedObjectActionPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of create object in staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteCreateManagedObjectAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteCreateManagedObjectAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteCreateManagedObjectAction$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation createManagedObjectOfDeltaPlan\n   */\n  static readonly CreateManagedObjectOfDeltaPlanPath = '/delta-plans/{planId}/actions/create-objects';\n\n  /**\n   * Create managed object in a delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createManagedObjectOfDeltaPlan()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  createManagedObjectOfDeltaPlan$Response(params: {\n    planId: string;\n      body: CreateObjectRequest\n  }): Observable<StrictHttpResponse<CreateObjectResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.CreateManagedObjectOfDeltaPlanPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CreateObjectResponse>;\n      })\n    );\n  }\n\n  /**\n   * Create managed object in a delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createManagedObjectOfDeltaPlan$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  createManagedObjectOfDeltaPlan(params: {\n    planId: string;\n      body: CreateObjectRequest\n  }): Observable<CreateObjectResponse> {\n\n    return this.createManagedObjectOfDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<CreateObjectResponse>) => r.body as CreateObjectResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getCreateManagedObjectOfDeltaPlanAction\n   */\n  static readonly GetCreateManagedObjectOfDeltaPlanActionPath = '/delta-plans/{planId}/actions/create-objects/{actionId}';\n\n  /**\n   * Fetch create managed object action result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getCreateManagedObjectOfDeltaPlanAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCreateManagedObjectOfDeltaPlanAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<CreateObjectResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetCreateManagedObjectOfDeltaPlanActionPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CreateObjectResponse>;\n      })\n    );\n  }\n\n  /**\n   * Fetch create managed object action result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getCreateManagedObjectOfDeltaPlanAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCreateManagedObjectOfDeltaPlanAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<CreateObjectResponse> {\n\n    return this.getCreateManagedObjectOfDeltaPlanAction$Response(params).pipe(\n      map((r: StrictHttpResponse<CreateObjectResponse>) => r.body as CreateObjectResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteCreateManagedObjectInDeltaPlanAction\n   */\n  static readonly DeleteCreateManagedObjectInDeltaPlanActionPath = '/delta-plans/{planId}/actions/create-objects/{actionId}';\n\n  /**\n   * Delete action state of create object in delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteCreateManagedObjectInDeltaPlanAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteCreateManagedObjectInDeltaPlanAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteCreateManagedObjectInDeltaPlanActionPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of create object in delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteCreateManagedObjectInDeltaPlanAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteCreateManagedObjectInDeltaPlanAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteCreateManagedObjectInDeltaPlanAction$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation updateParameters\n   */\n  static readonly UpdateParametersPath = '/staged-plans/{planId}/actions/update-parameters';\n\n  /**\n   * Update parameters in a managed object.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updateParameters()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateParameters$Response(params: {\n    planId: string;\n      body: UpdateParametersRequest\n  }): Observable<StrictHttpResponse<UpdateParametersResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.UpdateParametersPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<UpdateParametersResponse>;\n      })\n    );\n  }\n\n  /**\n   * Update parameters in a managed object.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `updateParameters$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateParameters(params: {\n    planId: string;\n      body: UpdateParametersRequest\n  }): Observable<UpdateParametersResponse> {\n\n    return this.updateParameters$Response(params).pipe(\n      map((r: StrictHttpResponse<UpdateParametersResponse>) => r.body as UpdateParametersResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getUpdateParametersAction\n   */\n  static readonly GetUpdateParametersActionPath = '/staged-plans/{planId}/actions/update-parameters/{actionId}';\n\n  /**\n   * Fetch update parameters action result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getUpdateParametersAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUpdateParametersAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<UpdateParametersResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetUpdateParametersActionPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<UpdateParametersResponse>;\n      })\n    );\n  }\n\n  /**\n   * Fetch update parameters action result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getUpdateParametersAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUpdateParametersAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<UpdateParametersResponse> {\n\n    return this.getUpdateParametersAction$Response(params).pipe(\n      map((r: StrictHttpResponse<UpdateParametersResponse>) => r.body as UpdateParametersResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteUpdateParametersAction\n   */\n  static readonly DeleteUpdateParametersActionPath = '/staged-plans/{planId}/actions/update-parameters/{actionId}';\n\n  /**\n   * Delete action state of update parameter in staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteUpdateParametersAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteUpdateParametersAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteUpdateParametersActionPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of update parameter in staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteUpdateParametersAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteUpdateParametersAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteUpdateParametersAction$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation checkCurrentPlan\n   */\n  static readonly CheckCurrentPlanPath = '/current-plan';\n\n  /**\n   * Check whether current plan exist.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `checkCurrentPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  checkCurrentPlan$Response(params?: {\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.CheckCurrentPlanPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Check whether current plan exist.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `checkCurrentPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  checkCurrentPlan(params?: {\n\n  }): Observable<void> {\n\n    return this.checkCurrentPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getManagedObjectOfCurrentPlan\n   */\n  static readonly GetManagedObjectOfCurrentPlanPath = '/current-plan/managed-objects/{moUuid}';\n\n  /**\n   * Query managed object data of current plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getManagedObjectOfCurrentPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getManagedObjectOfCurrentPlan$Response(params: {\n\n    /**\n     * Uuid of managed object\n     */\n    moUuid: string;\n\n  }): Observable<StrictHttpResponse<ManagedObjectData>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetManagedObjectOfCurrentPlanPath, 'get');\n    if (params) {\n\n      rb.path('moUuid', params.moUuid, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ManagedObjectData>;\n      })\n    );\n  }\n\n  /**\n   * Query managed object data of current plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getManagedObjectOfCurrentPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getManagedObjectOfCurrentPlan(params: {\n\n    /**\n     * Uuid of managed object\n     */\n    moUuid: string;\n\n  }): Observable<ManagedObjectData> {\n\n    return this.getManagedObjectOfCurrentPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ManagedObjectData>) => r.body as ManagedObjectData)\n    );\n  }\n\n  /**\n   * Path part for operation getManagedObjectParametersOfCurrentPlan\n   */\n  static readonly GetManagedObjectParametersOfCurrentPlanPath = '/current-plan/managed-object-parameters';\n\n  /**\n   * Query managed object parameters of current plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getManagedObjectParametersOfCurrentPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getManagedObjectParametersOfCurrentPlan$Response(params: {\n\n    /**\n     * DistName of managed object\n     */\n    distName: string;\n\n  }): Observable<StrictHttpResponse<ManagedObjectParameters>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetManagedObjectParametersOfCurrentPlanPath, 'get');\n    if (params) {\n\n      rb.query('distName', params.distName, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ManagedObjectParameters>;\n      })\n    );\n  }\n\n  /**\n   * Query managed object parameters of current plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getManagedObjectParametersOfCurrentPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getManagedObjectParametersOfCurrentPlan(params: {\n\n    /**\n     * DistName of managed object\n     */\n    distName: string;\n\n  }): Observable<ManagedObjectParameters> {\n\n    return this.getManagedObjectParametersOfCurrentPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ManagedObjectParameters>) => r.body as ManagedObjectParameters)\n    );\n  }\n\n  /**\n   * Path part for operation notifyCurrentPlanChanged\n   */\n  static readonly NotifyCurrentPlanChangedPath = '/current-plan/changed-objects';\n\n  /**\n   * notify for current plan data change.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `notifyCurrentPlanChanged()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  notifyCurrentPlanChanged$Response(params: {\n    'X-OAM-Channel-ID': string;\n    'X-OAM-Resource-URI': string;\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\n    'X-OAM-Message-Number': string;\n    'X-OAM-Client-Label'?: string;\n  \n    /**\n     * changed objects\n     */\n    body: ObjectChangesNotification\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.NotifyCurrentPlanChangedPath, 'post');\n    if (params) {\n\n      rb.header('X-OAM-Channel-ID', params['X-OAM-Channel-ID'], {});\n      rb.header('X-OAM-Resource-URI', params['X-OAM-Resource-URI'], {});\n      rb.header('X-OAM-Resource-State', params['X-OAM-Resource-State'], {});\n      rb.header('X-OAM-Message-Number', params['X-OAM-Message-Number'], {});\n      rb.header('X-OAM-Client-Label', params['X-OAM-Client-Label'], {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * notify for current plan data change.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `notifyCurrentPlanChanged$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  notifyCurrentPlanChanged(params: {\n    'X-OAM-Channel-ID': string;\n    'X-OAM-Resource-URI': string;\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\n    'X-OAM-Message-Number': string;\n    'X-OAM-Client-Label'?: string;\n  \n    /**\n     * changed objects\n     */\n    body: ObjectChangesNotification\n  }): Observable<void> {\n\n    return this.notifyCurrentPlanChanged$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation updateParametersOfDeltaPlan\n   */\n  static readonly UpdateParametersOfDeltaPlanPath = '/delta-plans/{planId}/actions/update-parameters';\n\n  /**\n   * Update parameters in a managed object.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updateParametersOfDeltaPlan()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateParametersOfDeltaPlan$Response(params: {\n    planId: string;\n      body: UpdateParametersRequest\n  }): Observable<StrictHttpResponse<UpdateParametersResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.UpdateParametersOfDeltaPlanPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<UpdateParametersResponse>;\n      })\n    );\n  }\n\n  /**\n   * Update parameters in a managed object.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `updateParametersOfDeltaPlan$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateParametersOfDeltaPlan(params: {\n    planId: string;\n      body: UpdateParametersRequest\n  }): Observable<UpdateParametersResponse> {\n\n    return this.updateParametersOfDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<UpdateParametersResponse>) => r.body as UpdateParametersResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getUpdateParametersOfDeltaPlanAction\n   */\n  static readonly GetUpdateParametersOfDeltaPlanActionPath = '/delta-plans/{planId}/actions/update-parameters/{actionId}';\n\n  /**\n   * Fetch update parameters action result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getUpdateParametersOfDeltaPlanAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUpdateParametersOfDeltaPlanAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<UpdateParametersResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetUpdateParametersOfDeltaPlanActionPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<UpdateParametersResponse>;\n      })\n    );\n  }\n\n  /**\n   * Fetch update parameters action result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getUpdateParametersOfDeltaPlanAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUpdateParametersOfDeltaPlanAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<UpdateParametersResponse> {\n\n    return this.getUpdateParametersOfDeltaPlanAction$Response(params).pipe(\n      map((r: StrictHttpResponse<UpdateParametersResponse>) => r.body as UpdateParametersResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteUpdateParametersOfDeltaPlanAction\n   */\n  static readonly DeleteUpdateParametersOfDeltaPlanActionPath = '/delta-plans/{planId}/actions/update-parameters/{actionId}';\n\n  /**\n   * Delete action state of update parameter in delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteUpdateParametersOfDeltaPlanAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteUpdateParametersOfDeltaPlanAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteUpdateParametersOfDeltaPlanActionPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of update parameter in delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteUpdateParametersOfDeltaPlanAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteUpdateParametersOfDeltaPlanAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteUpdateParametersOfDeltaPlanAction$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation deleteManagedObject\n   */\n  static readonly DeleteManagedObjectPath = '/staged-plans/{planId}/actions/delete-objects';\n\n  /**\n   * Delete managed object.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteManagedObject()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  deleteManagedObject$Response(params: {\n    planId: string;\n      body: DeleteObjectRequest\n  }): Observable<StrictHttpResponse<DeleteObjectResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteManagedObjectPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<DeleteObjectResponse>;\n      })\n    );\n  }\n\n  /**\n   * Delete managed object.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteManagedObject$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  deleteManagedObject(params: {\n    planId: string;\n      body: DeleteObjectRequest\n  }): Observable<DeleteObjectResponse> {\n\n    return this.deleteManagedObject$Response(params).pipe(\n      map((r: StrictHttpResponse<DeleteObjectResponse>) => r.body as DeleteObjectResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getDeleteManagedObjectAction\n   */\n  static readonly GetDeleteManagedObjectActionPath = '/staged-plans/{planId}/actions/delete-objects/{actionId}';\n\n  /**\n   * Fetch delete object action result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getDeleteManagedObjectAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDeleteManagedObjectAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<DeleteObjectResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetDeleteManagedObjectActionPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<DeleteObjectResponse>;\n      })\n    );\n  }\n\n  /**\n   * Fetch delete object action result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getDeleteManagedObjectAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDeleteManagedObjectAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<DeleteObjectResponse> {\n\n    return this.getDeleteManagedObjectAction$Response(params).pipe(\n      map((r: StrictHttpResponse<DeleteObjectResponse>) => r.body as DeleteObjectResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionOfDeleteManagedObject\n   */\n  static readonly DeleteActionOfDeleteManagedObjectPath = '/staged-plans/{planId}/actions/delete-objects/{actionId}';\n\n  /**\n   * Delete action state of delete MO in staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionOfDeleteManagedObject()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfDeleteManagedObject$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionOfDeleteManagedObjectPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of delete MO in staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionOfDeleteManagedObject$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfDeleteManagedObject(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionOfDeleteManagedObject$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation deleteManagedObjectOfDeltaPlan\n   */\n  static readonly DeleteManagedObjectOfDeltaPlanPath = '/delta-plans/{planId}/actions/delete-objects';\n\n  /**\n   * Delete managed object.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteManagedObjectOfDeltaPlan()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  deleteManagedObjectOfDeltaPlan$Response(params: {\n    planId: string;\n      body: DeleteObjectRequest\n  }): Observable<StrictHttpResponse<DeleteObjectResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteManagedObjectOfDeltaPlanPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<DeleteObjectResponse>;\n      })\n    );\n  }\n\n  /**\n   * Delete managed object.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteManagedObjectOfDeltaPlan$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  deleteManagedObjectOfDeltaPlan(params: {\n    planId: string;\n      body: DeleteObjectRequest\n  }): Observable<DeleteObjectResponse> {\n\n    return this.deleteManagedObjectOfDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<DeleteObjectResponse>) => r.body as DeleteObjectResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getDeleteManagedObjectOfDeltaPlanAction\n   */\n  static readonly GetDeleteManagedObjectOfDeltaPlanActionPath = '/delta-plans/{planId}/actions/delete-objects/{actionId}';\n\n  /**\n   * Fetch delete object action result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getDeleteManagedObjectOfDeltaPlanAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDeleteManagedObjectOfDeltaPlanAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<DeleteObjectResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetDeleteManagedObjectOfDeltaPlanActionPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<DeleteObjectResponse>;\n      })\n    );\n  }\n\n  /**\n   * Fetch delete object action result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getDeleteManagedObjectOfDeltaPlanAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDeleteManagedObjectOfDeltaPlanAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<DeleteObjectResponse> {\n\n    return this.getDeleteManagedObjectOfDeltaPlanAction$Response(params).pipe(\n      map((r: StrictHttpResponse<DeleteObjectResponse>) => r.body as DeleteObjectResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionOfDeleteManagedObjectOfDeltaPlan\n   */\n  static readonly DeleteActionOfDeleteManagedObjectOfDeltaPlanPath = '/delta-plans/{planId}/actions/delete-objects/{actionId}';\n\n  /**\n   * Delete action state of delete MO in delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionOfDeleteManagedObjectOfDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfDeleteManagedObjectOfDeltaPlan$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionOfDeleteManagedObjectOfDeltaPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of delete MO in delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionOfDeleteManagedObjectOfDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfDeleteManagedObjectOfDeltaPlan(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionOfDeleteManagedObjectOfDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation revertManagedObject\n   */\n  static readonly RevertManagedObjectPath = '/delta-plans/{planId}/actions/revert-objects';\n\n  /**\n   * Revert managed object.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `revertManagedObject()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  revertManagedObject$Response(params: {\n    planId: string;\n      body: RevertObjectRequest\n  }): Observable<StrictHttpResponse<RevertObjectResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.RevertManagedObjectPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<RevertObjectResponse>;\n      })\n    );\n  }\n\n  /**\n   * Revert managed object.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `revertManagedObject$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  revertManagedObject(params: {\n    planId: string;\n      body: RevertObjectRequest\n  }): Observable<RevertObjectResponse> {\n\n    return this.revertManagedObject$Response(params).pipe(\n      map((r: StrictHttpResponse<RevertObjectResponse>) => r.body as RevertObjectResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getRevertManagedObjectAction\n   */\n  static readonly GetRevertManagedObjectActionPath = '/delta-plans/{planId}/actions/revert-objects/{actionId}';\n\n  /**\n   * Fetch revert object action result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getRevertManagedObjectAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getRevertManagedObjectAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<RevertObjectResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetRevertManagedObjectActionPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<RevertObjectResponse>;\n      })\n    );\n  }\n\n  /**\n   * Fetch revert object action result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getRevertManagedObjectAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getRevertManagedObjectAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<RevertObjectResponse> {\n\n    return this.getRevertManagedObjectAction$Response(params).pipe(\n      map((r: StrictHttpResponse<RevertObjectResponse>) => r.body as RevertObjectResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionOfRevertManagedObject\n   */\n  static readonly DeleteActionOfRevertManagedObjectPath = '/delta-plans/{planId}/actions/revert-objects/{actionId}';\n\n  /**\n   * Delete action state of revert managed object in delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionOfRevertManagedObject()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfRevertManagedObject$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionOfRevertManagedObjectPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of revert managed object in delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionOfRevertManagedObject$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfRevertManagedObject(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionOfRevertManagedObject$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation fixStagedPlan\n   */\n  static readonly FixStagedPlanPath = '/staged-plans/{planId}/actions/fix';\n\n  /**\n   * Fix plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `fixStagedPlan()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  fixStagedPlan$Response(params: {\n    planId: string;\n      body: FixPlanRequest\n  }): Observable<StrictHttpResponse<FixPlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.FixStagedPlanPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<FixPlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Fix plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `fixStagedPlan$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  fixStagedPlan(params: {\n    planId: string;\n      body: FixPlanRequest\n  }): Observable<FixPlanResponse> {\n\n    return this.fixStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<FixPlanResponse>) => r.body as FixPlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getFixStagedPlanAction\n   */\n  static readonly GetFixStagedPlanActionPath = '/staged-plans/{planId}/actions/fix/{actionId}';\n\n  /**\n   * Fetch fix plan action result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getFixStagedPlanAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getFixStagedPlanAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<FixPlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetFixStagedPlanActionPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<FixPlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Fetch fix plan action result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getFixStagedPlanAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getFixStagedPlanAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<FixPlanResponse> {\n\n    return this.getFixStagedPlanAction$Response(params).pipe(\n      map((r: StrictHttpResponse<FixPlanResponse>) => r.body as FixPlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionOfFixStagedPlan\n   */\n  static readonly DeleteActionOfFixStagedPlanPath = '/staged-plans/{planId}/actions/fix/{actionId}';\n\n  /**\n   * Delete action state of fix staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionOfFixStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfFixStagedPlan$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionOfFixStagedPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of fix staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionOfFixStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfFixStagedPlan(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionOfFixStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation fixDeltaPlan\n   */\n  static readonly FixDeltaPlanPath = '/delta-plans/{planId}/actions/fix';\n\n  /**\n   * Fix delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `fixDeltaPlan()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  fixDeltaPlan$Response(params: {\n    planId: string;\n      body: FixPlanRequest\n  }): Observable<StrictHttpResponse<FixPlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.FixDeltaPlanPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<FixPlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Fix delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `fixDeltaPlan$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  fixDeltaPlan(params: {\n    planId: string;\n      body: FixPlanRequest\n  }): Observable<FixPlanResponse> {\n\n    return this.fixDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<FixPlanResponse>) => r.body as FixPlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getFixDeltaPlanAction\n   */\n  static readonly GetFixDeltaPlanActionPath = '/delta-plans/{planId}/actions/fix/{actionId}';\n\n  /**\n   * Fetch fix delta plan action result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getFixDeltaPlanAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getFixDeltaPlanAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<FixPlanResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetFixDeltaPlanActionPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<FixPlanResponse>;\n      })\n    );\n  }\n\n  /**\n   * Fetch fix delta plan action result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getFixDeltaPlanAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getFixDeltaPlanAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<FixPlanResponse> {\n\n    return this.getFixDeltaPlanAction$Response(params).pipe(\n      map((r: StrictHttpResponse<FixPlanResponse>) => r.body as FixPlanResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionOfFixDeltaPlan\n   */\n  static readonly DeleteActionOfFixDeltaPlanPath = '/delta-plans/{planId}/actions/fix/{actionId}';\n\n  /**\n   * Delete action state of fix delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionOfFixDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfFixDeltaPlan$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionOfFixDeltaPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of fix delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionOfFixDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfFixDeltaPlan(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionOfFixDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getPossibleManagedObjectsToCopyForStagedPlan\n   */\n  static readonly GetPossibleManagedObjectsToCopyForStagedPlanPath = '/staged-plans/{targetPlanId}/managed-object-copy-sources/{sourcePlanId}/{moUuid}/{childNiddId}';\n\n  /**\n   * Get possible to copy managed objects into specified staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getPossibleManagedObjectsToCopyForStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPossibleManagedObjectsToCopyForStagedPlan$Response(params: {\n    targetPlanId: string;\n    sourcePlanId: string;\n    moUuid: string;\n    childNiddId: string;\n\n  }): Observable<StrictHttpResponse<Array<ManagedObjectCopySources>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetPossibleManagedObjectsToCopyForStagedPlanPath, 'get');\n    if (params) {\n\n      rb.path('targetPlanId', params.targetPlanId, {});\n      rb.path('sourcePlanId', params.sourcePlanId, {});\n      rb.path('moUuid', params.moUuid, {});\n      rb.path('childNiddId', params.childNiddId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<ManagedObjectCopySources>>;\n      })\n    );\n  }\n\n  /**\n   * Get possible to copy managed objects into specified staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getPossibleManagedObjectsToCopyForStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPossibleManagedObjectsToCopyForStagedPlan(params: {\n    targetPlanId: string;\n    sourcePlanId: string;\n    moUuid: string;\n    childNiddId: string;\n\n  }): Observable<Array<ManagedObjectCopySources>> {\n\n    return this.getPossibleManagedObjectsToCopyForStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<ManagedObjectCopySources>>) => r.body as Array<ManagedObjectCopySources>)\n    );\n  }\n\n  /**\n   * Path part for operation getPossibleManagedObjectsToCopyForDeltaPlans\n   */\n  static readonly GetPossibleManagedObjectsToCopyForDeltaPlansPath = '/delta-plans/{targetPlanId}/managed-object-copy-sources/{sourcePlanId}/{moUuid}/{childNiddId}';\n\n  /**\n   * Get possible to copy managed objects into specified delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getPossibleManagedObjectsToCopyForDeltaPlans()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPossibleManagedObjectsToCopyForDeltaPlans$Response(params: {\n    targetPlanId: string;\n    sourcePlanId: string;\n    moUuid: string;\n    childNiddId: string;\n\n  }): Observable<StrictHttpResponse<Array<ManagedObjectCopySources>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetPossibleManagedObjectsToCopyForDeltaPlansPath, 'get');\n    if (params) {\n\n      rb.path('targetPlanId', params.targetPlanId, {});\n      rb.path('sourcePlanId', params.sourcePlanId, {});\n      rb.path('moUuid', params.moUuid, {});\n      rb.path('childNiddId', params.childNiddId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<ManagedObjectCopySources>>;\n      })\n    );\n  }\n\n  /**\n   * Get possible to copy managed objects into specified delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getPossibleManagedObjectsToCopyForDeltaPlans$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPossibleManagedObjectsToCopyForDeltaPlans(params: {\n    targetPlanId: string;\n    sourcePlanId: string;\n    moUuid: string;\n    childNiddId: string;\n\n  }): Observable<Array<ManagedObjectCopySources>> {\n\n    return this.getPossibleManagedObjectsToCopyForDeltaPlans$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<ManagedObjectCopySources>>) => r.body as Array<ManagedObjectCopySources>)\n    );\n  }\n\n  /**\n   * Path part for operation copyManagedObjectsIntoStagedPlan\n   */\n  static readonly CopyManagedObjectsIntoStagedPlanPath = '/staged-plans/{planId}/actions/copy-managed-objects';\n\n  /**\n   * Copy managed objects into a staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `copyManagedObjectsIntoStagedPlan()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  copyManagedObjectsIntoStagedPlan$Response(params: {\n    planId: string;\n      body: CopyManagedObjectsRequest\n  }): Observable<StrictHttpResponse<CopyManagedObjectsResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.CopyManagedObjectsIntoStagedPlanPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CopyManagedObjectsResponse>;\n      })\n    );\n  }\n\n  /**\n   * Copy managed objects into a staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `copyManagedObjectsIntoStagedPlan$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  copyManagedObjectsIntoStagedPlan(params: {\n    planId: string;\n      body: CopyManagedObjectsRequest\n  }): Observable<CopyManagedObjectsResponse> {\n\n    return this.copyManagedObjectsIntoStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<CopyManagedObjectsResponse>) => r.body as CopyManagedObjectsResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getCopyManagedObjectsIntoStagedPlanAction\n   */\n  static readonly GetCopyManagedObjectsIntoStagedPlanActionPath = '/staged-plans/{planId}/actions/copy-managed-objects/{actionId}';\n\n  /**\n   * Fetch copy managed objects into staged plan action result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getCopyManagedObjectsIntoStagedPlanAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCopyManagedObjectsIntoStagedPlanAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<CopyManagedObjectsResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetCopyManagedObjectsIntoStagedPlanActionPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CopyManagedObjectsResponse>;\n      })\n    );\n  }\n\n  /**\n   * Fetch copy managed objects into staged plan action result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getCopyManagedObjectsIntoStagedPlanAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCopyManagedObjectsIntoStagedPlanAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<CopyManagedObjectsResponse> {\n\n    return this.getCopyManagedObjectsIntoStagedPlanAction$Response(params).pipe(\n      map((r: StrictHttpResponse<CopyManagedObjectsResponse>) => r.body as CopyManagedObjectsResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionOfCopyManagedObjectsIntoStagedPlan\n   */\n  static readonly DeleteActionOfCopyManagedObjectsIntoStagedPlanPath = '/staged-plans/{planId}/actions/copy-managed-objects/{actionId}';\n\n  /**\n   * Delete action state of copy managed objects into staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionOfCopyManagedObjectsIntoStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfCopyManagedObjectsIntoStagedPlan$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionOfCopyManagedObjectsIntoStagedPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of copy managed objects into staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionOfCopyManagedObjectsIntoStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfCopyManagedObjectsIntoStagedPlan(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionOfCopyManagedObjectsIntoStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation copyManagedObjectsIntoDeltaPlan\n   */\n  static readonly CopyManagedObjectsIntoDeltaPlanPath = '/delta-plans/{planId}/actions/copy-managed-objects';\n\n  /**\n   * Copy managed objects into a delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `copyManagedObjectsIntoDeltaPlan()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  copyManagedObjectsIntoDeltaPlan$Response(params: {\n    planId: string;\n      body: CopyManagedObjectsRequest\n  }): Observable<StrictHttpResponse<CopyManagedObjectsResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.CopyManagedObjectsIntoDeltaPlanPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CopyManagedObjectsResponse>;\n      })\n    );\n  }\n\n  /**\n   * Copy managed objects into a delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `copyManagedObjectsIntoDeltaPlan$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  copyManagedObjectsIntoDeltaPlan(params: {\n    planId: string;\n      body: CopyManagedObjectsRequest\n  }): Observable<CopyManagedObjectsResponse> {\n\n    return this.copyManagedObjectsIntoDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<CopyManagedObjectsResponse>) => r.body as CopyManagedObjectsResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getCopyManagedObjectsIntoDeltaPlanAction\n   */\n  static readonly GetCopyManagedObjectsIntoDeltaPlanActionPath = '/delta-plans/{planId}/actions/copy-managed-objects/{actionId}';\n\n  /**\n   * Fetch copy managed objects into delta plan action result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getCopyManagedObjectsIntoDeltaPlanAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCopyManagedObjectsIntoDeltaPlanAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<CopyManagedObjectsResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetCopyManagedObjectsIntoDeltaPlanActionPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CopyManagedObjectsResponse>;\n      })\n    );\n  }\n\n  /**\n   * Fetch copy managed objects into delta plan action result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getCopyManagedObjectsIntoDeltaPlanAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCopyManagedObjectsIntoDeltaPlanAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<CopyManagedObjectsResponse> {\n\n    return this.getCopyManagedObjectsIntoDeltaPlanAction$Response(params).pipe(\n      map((r: StrictHttpResponse<CopyManagedObjectsResponse>) => r.body as CopyManagedObjectsResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteActionOfCopyManagedObjectsIntoDeltaPlan\n   */\n  static readonly DeleteActionOfCopyManagedObjectsIntoDeltaPlanPath = '/delta-plans/{planId}/actions/copy-managed-objects/{actionId}';\n\n  /**\n   * Delete action state of copy managed objects into delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteActionOfCopyManagedObjectsIntoDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfCopyManagedObjectsIntoDeltaPlan$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteActionOfCopyManagedObjectsIntoDeltaPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action state of copy managed objects into delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteActionOfCopyManagedObjectsIntoDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteActionOfCopyManagedObjectsIntoDeltaPlan(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteActionOfCopyManagedObjectsIntoDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getTreeOfCurrentPlan\n   */\n  static readonly GetTreeOfCurrentPlanPath = '/current-plan/plan-tree-diff';\n\n  /**\n   * Get plan tree with mo lites of current plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getTreeOfCurrentPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTreeOfCurrentPlan$Response(params?: {\n    filterByName?: string;\n    oldRevision?: string;\n    parentUuid?: string;\n\n  }): Observable<StrictHttpResponse<PlanTreeDiff>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetTreeOfCurrentPlanPath, 'get');\n    if (params) {\n\n      rb.query('filterByName', params.filterByName, {});\n      rb.query('oldRevision', params.oldRevision, {});\n      rb.query('parentUuid', params.parentUuid, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<PlanTreeDiff>;\n      })\n    );\n  }\n\n  /**\n   * Get plan tree with mo lites of current plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getTreeOfCurrentPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTreeOfCurrentPlan(params?: {\n    filterByName?: string;\n    oldRevision?: string;\n    parentUuid?: string;\n\n  }): Observable<PlanTreeDiff> {\n\n    return this.getTreeOfCurrentPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<PlanTreeDiff>) => r.body as PlanTreeDiff)\n    );\n  }\n\n  /**\n   * Path part for operation searchParametersOfCurrentPlan\n   */\n  static readonly SearchParametersOfCurrentPlanPath = '/current-plan/parameters';\n\n  /**\n   * Query parameter data.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchParametersOfCurrentPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchParametersOfCurrentPlan$Response(params?: {\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Filter by text by any field of the parameter name\n     */\n    filterByName?: string;\n\n    /**\n     * Parameter search results sorting criteria\n     */\n    sortedBy?: 'parameterFullName' | 'parameterAbbreviation';\n\n  }): Observable<StrictHttpResponse<SearchParameterResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.SearchParametersOfCurrentPlanPath, 'get');\n    if (params) {\n\n      rb.query('pageNumber', params.pageNumber, {});\n      rb.query('itemsPerPage', params.itemsPerPage, {});\n      rb.query('sortOrder', params.sortOrder, {});\n      rb.query('filterByName', params.filterByName, {});\n      rb.query('sortedBy', params.sortedBy, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SearchParameterResponse>;\n      })\n    );\n  }\n\n  /**\n   * Query parameter data.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `searchParametersOfCurrentPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchParametersOfCurrentPlan(params?: {\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Filter by text by any field of the parameter name\n     */\n    filterByName?: string;\n\n    /**\n     * Parameter search results sorting criteria\n     */\n    sortedBy?: 'parameterFullName' | 'parameterAbbreviation';\n\n  }): Observable<SearchParameterResponse> {\n\n    return this.searchParametersOfCurrentPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<SearchParameterResponse>) => r.body as SearchParameterResponse)\n    );\n  }\n\n  /**\n   * Path part for operation searchParametersOfStagedPlan\n   */\n  static readonly SearchParametersOfStagedPlanPath = '/staged-plans/{planId}/parameters';\n\n  /**\n   * Query parameter data.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchParametersOfStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchParametersOfStagedPlan$Response(params: {\n    planId: string;\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Filter by text by any field of the parameter name\n     */\n    filterByName?: string;\n\n    /**\n     * Parameter search results sorting criteria\n     */\n    sortedBy?: 'parameterFullName' | 'parameterAbbreviation';\n\n  }): Observable<StrictHttpResponse<SearchParameterResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.SearchParametersOfStagedPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.query('pageNumber', params.pageNumber, {});\n      rb.query('itemsPerPage', params.itemsPerPage, {});\n      rb.query('sortOrder', params.sortOrder, {});\n      rb.query('filterByName', params.filterByName, {});\n      rb.query('sortedBy', params.sortedBy, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SearchParameterResponse>;\n      })\n    );\n  }\n\n  /**\n   * Query parameter data.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `searchParametersOfStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchParametersOfStagedPlan(params: {\n    planId: string;\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Filter by text by any field of the parameter name\n     */\n    filterByName?: string;\n\n    /**\n     * Parameter search results sorting criteria\n     */\n    sortedBy?: 'parameterFullName' | 'parameterAbbreviation';\n\n  }): Observable<SearchParameterResponse> {\n\n    return this.searchParametersOfStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<SearchParameterResponse>) => r.body as SearchParameterResponse)\n    );\n  }\n\n  /**\n   * Path part for operation searchParametersOfDeltaPlan\n   */\n  static readonly SearchParametersOfDeltaPlanPath = '/delta-plans/{planId}/parameters';\n\n  /**\n   * Query parameter data.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchParametersOfDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchParametersOfDeltaPlan$Response(params: {\n    planId: string;\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Filter by text by any field of the parameter name\n     */\n    filterByName?: string;\n\n    /**\n     * Parameter search results sorting criteria\n     */\n    sortedBy?: 'parameterFullName' | 'parameterAbbreviation';\n\n  }): Observable<StrictHttpResponse<SearchParameterResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.SearchParametersOfDeltaPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.query('pageNumber', params.pageNumber, {});\n      rb.query('itemsPerPage', params.itemsPerPage, {});\n      rb.query('sortOrder', params.sortOrder, {});\n      rb.query('filterByName', params.filterByName, {});\n      rb.query('sortedBy', params.sortedBy, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SearchParameterResponse>;\n      })\n    );\n  }\n\n  /**\n   * Query parameter data.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `searchParametersOfDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchParametersOfDeltaPlan(params: {\n    planId: string;\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Filter by text by any field of the parameter name\n     */\n    filterByName?: string;\n\n    /**\n     * Parameter search results sorting criteria\n     */\n    sortedBy?: 'parameterFullName' | 'parameterAbbreviation';\n\n  }): Observable<SearchParameterResponse> {\n\n    return this.searchParametersOfDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<SearchParameterResponse>) => r.body as SearchParameterResponse)\n    );\n  }\n\n  /**\n   * Path part for operation validateStagedPlan\n   */\n  static readonly ValidateStagedPlanPath = '/staged-plans/{planId}/actions/validations';\n\n  /**\n   * Request for validating action of staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `validateStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  validateStagedPlan$Response(params: {\n    planId: string;\n\n  }): Observable<StrictHttpResponse<ValidationActionResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.ValidateStagedPlanPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ValidationActionResponse>;\n      })\n    );\n  }\n\n  /**\n   * Request for validating action of staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `validateStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  validateStagedPlan(params: {\n    planId: string;\n\n  }): Observable<ValidationActionResponse> {\n\n    return this.validateStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ValidationActionResponse>) => r.body as ValidationActionResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getValidateStagedPlanAction\n   */\n  static readonly GetValidateStagedPlanActionPath = '/staged-plans/{planId}/actions/validations/{actionId}';\n\n  /**\n   * Get action state of validating staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getValidateStagedPlanAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getValidateStagedPlanAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<ValidationActionResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetValidateStagedPlanActionPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ValidationActionResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get action state of validating staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getValidateStagedPlanAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getValidateStagedPlanAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<ValidationActionResponse> {\n\n    return this.getValidateStagedPlanAction$Response(params).pipe(\n      map((r: StrictHttpResponse<ValidationActionResponse>) => r.body as ValidationActionResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteValidateStagedPlanAction\n   */\n  static readonly DeleteValidateStagedPlanActionPath = '/staged-plans/{planId}/actions/validations/{actionId}';\n\n  /**\n   * Delete action of validating staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteValidateStagedPlanAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteValidateStagedPlanAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteValidateStagedPlanActionPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action of validating staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteValidateStagedPlanAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteValidateStagedPlanAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteValidateStagedPlanAction$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getValidationResultOfStagedPlan\n   */\n  static readonly GetValidationResultOfStagedPlanPath = '/staged-plans/{planId}/validation-results/{validationId}';\n\n  /**\n   * Get existing validation result of staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getValidationResultOfStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getValidationResultOfStagedPlan$Response(params: {\n    planId: string;\n    validationId: string;\n    filterByErrorType?: Array<ValidationErrorType>;\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Validation errors sorting criteria\n     */\n    sortedBy?: 'className' | 'parameterFullName' | 'parameterAbbreviation' | 'parentDistName';\n\n  }): Observable<StrictHttpResponse<ValidationResult>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetValidationResultOfStagedPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('validationId', params.validationId, {});\n      rb.query('filterByErrorType', params.filterByErrorType, {});\n      rb.query('pageNumber', params.pageNumber, {});\n      rb.query('itemsPerPage', params.itemsPerPage, {});\n      rb.query('sortOrder', params.sortOrder, {});\n      rb.query('sortedBy', params.sortedBy, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ValidationResult>;\n      })\n    );\n  }\n\n  /**\n   * Get existing validation result of staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getValidationResultOfStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getValidationResultOfStagedPlan(params: {\n    planId: string;\n    validationId: string;\n    filterByErrorType?: Array<ValidationErrorType>;\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Validation errors sorting criteria\n     */\n    sortedBy?: 'className' | 'parameterFullName' | 'parameterAbbreviation' | 'parentDistName';\n\n  }): Observable<ValidationResult> {\n\n    return this.getValidationResultOfStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ValidationResult>) => r.body as ValidationResult)\n    );\n  }\n\n  /**\n   * Path part for operation deleteValidationResultOfStagedPlan\n   */\n  static readonly DeleteValidationResultOfStagedPlanPath = '/staged-plans/{planId}/validation-results/{validationId}';\n\n  /**\n   * Delete validation result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteValidationResultOfStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteValidationResultOfStagedPlan$Response(params: {\n    planId: string;\n    validationId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteValidationResultOfStagedPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('validationId', params.validationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete validation result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteValidationResultOfStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteValidationResultOfStagedPlan(params: {\n    planId: string;\n    validationId: string;\n\n  }): Observable<void> {\n\n    return this.deleteValidationResultOfStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getLatestValidationResultOfStagedPlan\n   */\n  static readonly GetLatestValidationResultOfStagedPlanPath = '/staged-plans/{planId}/validation-results/latest';\n\n  /**\n   * Get latest validation result of staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getLatestValidationResultOfStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getLatestValidationResultOfStagedPlan$Response(params: {\n    planId: string;\n    filterByErrorType?: Array<ValidationErrorType>;\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Validation errors sorting criteria\n     */\n    sortedBy?: 'className' | 'parameterFullName' | 'parameterAbbreviation' | 'parentDistName';\n\n  }): Observable<StrictHttpResponse<ValidationResult>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetLatestValidationResultOfStagedPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.query('filterByErrorType', params.filterByErrorType, {});\n      rb.query('pageNumber', params.pageNumber, {});\n      rb.query('itemsPerPage', params.itemsPerPage, {});\n      rb.query('sortOrder', params.sortOrder, {});\n      rb.query('sortedBy', params.sortedBy, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ValidationResult>;\n      })\n    );\n  }\n\n  /**\n   * Get latest validation result of staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getLatestValidationResultOfStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getLatestValidationResultOfStagedPlan(params: {\n    planId: string;\n    filterByErrorType?: Array<ValidationErrorType>;\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Validation errors sorting criteria\n     */\n    sortedBy?: 'className' | 'parameterFullName' | 'parameterAbbreviation' | 'parentDistName';\n\n  }): Observable<ValidationResult> {\n\n    return this.getLatestValidationResultOfStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ValidationResult>) => r.body as ValidationResult)\n    );\n  }\n\n  /**\n   * Path part for operation deleteLatestValidationResultOfStagedPlan\n   */\n  static readonly DeleteLatestValidationResultOfStagedPlanPath = '/staged-plans/{planId}/validation-results/latest';\n\n  /**\n   * Delete latest validation result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteLatestValidationResultOfStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteLatestValidationResultOfStagedPlan$Response(params: {\n    planId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteLatestValidationResultOfStagedPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete latest validation result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteLatestValidationResultOfStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteLatestValidationResultOfStagedPlan(params: {\n    planId: string;\n\n  }): Observable<void> {\n\n    return this.deleteLatestValidationResultOfStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getRelationErrorRelevantObjectListOfStagedPlan\n   */\n  static readonly GetRelationErrorRelevantObjectListOfStagedPlanPath = '/staged-plans/{planId}/validation-results/relation-errors/{errorIndex}';\n\n  /**\n   * Get detail relevant object list in parameter relation error of staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getRelationErrorRelevantObjectListOfStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getRelationErrorRelevantObjectListOfStagedPlan$Response(params: {\n    planId: string;\n    errorIndex: string;\n\n  }): Observable<StrictHttpResponse<Array<ParameterRelationErrorDetail>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetRelationErrorRelevantObjectListOfStagedPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('errorIndex', params.errorIndex, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<ParameterRelationErrorDetail>>;\n      })\n    );\n  }\n\n  /**\n   * Get detail relevant object list in parameter relation error of staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getRelationErrorRelevantObjectListOfStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getRelationErrorRelevantObjectListOfStagedPlan(params: {\n    planId: string;\n    errorIndex: string;\n\n  }): Observable<Array<ParameterRelationErrorDetail>> {\n\n    return this.getRelationErrorRelevantObjectListOfStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<ParameterRelationErrorDetail>>) => r.body as Array<ParameterRelationErrorDetail>)\n    );\n  }\n\n  /**\n   * Path part for operation validateDeltaPlan\n   */\n  static readonly ValidateDeltaPlanPath = '/delta-plans/{planId}/actions/validations';\n\n  /**\n   * Request for validating action of delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `validateDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  validateDeltaPlan$Response(params: {\n    planId: string;\n\n  }): Observable<StrictHttpResponse<ValidationActionResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.ValidateDeltaPlanPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ValidationActionResponse>;\n      })\n    );\n  }\n\n  /**\n   * Request for validating action of delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `validateDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  validateDeltaPlan(params: {\n    planId: string;\n\n  }): Observable<ValidationActionResponse> {\n\n    return this.validateDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ValidationActionResponse>) => r.body as ValidationActionResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getValidateDeltaPlanAction\n   */\n  static readonly GetValidateDeltaPlanActionPath = '/delta-plans/{planId}/actions/validations/{actionId}';\n\n  /**\n   * Get action state of validating delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getValidateDeltaPlanAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getValidateDeltaPlanAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<ValidationActionResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetValidateDeltaPlanActionPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ValidationActionResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get action state of validating delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getValidateDeltaPlanAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getValidateDeltaPlanAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<ValidationActionResponse> {\n\n    return this.getValidateDeltaPlanAction$Response(params).pipe(\n      map((r: StrictHttpResponse<ValidationActionResponse>) => r.body as ValidationActionResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deleteValidateDeltaPlanAction\n   */\n  static readonly DeleteValidateDeltaPlanActionPath = '/delta-plans/{planId}/actions/validations/{actionId}';\n\n  /**\n   * Delete action of validating delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteValidateDeltaPlanAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteValidateDeltaPlanAction$Response(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteValidateDeltaPlanActionPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('actionId', params.actionId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete action of validating delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteValidateDeltaPlanAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteValidateDeltaPlanAction(params: {\n    planId: string;\n    actionId: string;\n\n  }): Observable<void> {\n\n    return this.deleteValidateDeltaPlanAction$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getValidationResultOfDeltaPlan\n   */\n  static readonly GetValidationResultOfDeltaPlanPath = '/delta-plans/{planId}/validation-results/{validationId}';\n\n  /**\n   * Get existing validation result of delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getValidationResultOfDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getValidationResultOfDeltaPlan$Response(params: {\n    planId: string;\n    validationId: string;\n    filterByErrorType?: Array<ValidationErrorType>;\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Validation errors sorting criteria\n     */\n    sortedBy?: 'className' | 'parameterFullName' | 'parameterAbbreviation' | 'parentDistName';\n\n  }): Observable<StrictHttpResponse<ValidationResult>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetValidationResultOfDeltaPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('validationId', params.validationId, {});\n      rb.query('filterByErrorType', params.filterByErrorType, {});\n      rb.query('pageNumber', params.pageNumber, {});\n      rb.query('itemsPerPage', params.itemsPerPage, {});\n      rb.query('sortOrder', params.sortOrder, {});\n      rb.query('sortedBy', params.sortedBy, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ValidationResult>;\n      })\n    );\n  }\n\n  /**\n   * Get existing validation result of delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getValidationResultOfDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getValidationResultOfDeltaPlan(params: {\n    planId: string;\n    validationId: string;\n    filterByErrorType?: Array<ValidationErrorType>;\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Validation errors sorting criteria\n     */\n    sortedBy?: 'className' | 'parameterFullName' | 'parameterAbbreviation' | 'parentDistName';\n\n  }): Observable<ValidationResult> {\n\n    return this.getValidationResultOfDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ValidationResult>) => r.body as ValidationResult)\n    );\n  }\n\n  /**\n   * Path part for operation deleteValidationResultOfDeltaPlan\n   */\n  static readonly DeleteValidationResultOfDeltaPlanPath = '/delta-plans/{planId}/validation-results/{validationId}';\n\n  /**\n   * Delete validation result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteValidationResultOfDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteValidationResultOfDeltaPlan$Response(params: {\n    planId: string;\n    validationId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteValidationResultOfDeltaPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('validationId', params.validationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete validation result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteValidationResultOfDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteValidationResultOfDeltaPlan(params: {\n    planId: string;\n    validationId: string;\n\n  }): Observable<void> {\n\n    return this.deleteValidationResultOfDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getLatestValidationResultOfDeltaPlan\n   */\n  static readonly GetLatestValidationResultOfDeltaPlanPath = '/delta-plans/{planId}/validation-results/latest';\n\n  /**\n   * Get latest validation result of delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getLatestValidationResultOfDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getLatestValidationResultOfDeltaPlan$Response(params: {\n    planId: string;\n    filterByErrorType?: Array<ValidationErrorType>;\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Validation errors sorting criteria\n     */\n    sortedBy?: 'className' | 'parameterFullName' | 'parameterAbbreviation' | 'parentDistName';\n\n  }): Observable<StrictHttpResponse<ValidationResult>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetLatestValidationResultOfDeltaPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.query('filterByErrorType', params.filterByErrorType, {});\n      rb.query('pageNumber', params.pageNumber, {});\n      rb.query('itemsPerPage', params.itemsPerPage, {});\n      rb.query('sortOrder', params.sortOrder, {});\n      rb.query('sortedBy', params.sortedBy, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ValidationResult>;\n      })\n    );\n  }\n\n  /**\n   * Get latest validation result of delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getLatestValidationResultOfDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getLatestValidationResultOfDeltaPlan(params: {\n    planId: string;\n    filterByErrorType?: Array<ValidationErrorType>;\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of items per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Validation errors sorting criteria\n     */\n    sortedBy?: 'className' | 'parameterFullName' | 'parameterAbbreviation' | 'parentDistName';\n\n  }): Observable<ValidationResult> {\n\n    return this.getLatestValidationResultOfDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ValidationResult>) => r.body as ValidationResult)\n    );\n  }\n\n  /**\n   * Path part for operation deleteLatestValidationResultOfDeltaPlan\n   */\n  static readonly DeleteLatestValidationResultOfDeltaPlanPath = '/delta-plans/{planId}/validation-results/latest';\n\n  /**\n   * Delete latest validation result.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteLatestValidationResultOfDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteLatestValidationResultOfDeltaPlan$Response(params: {\n    planId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeleteLatestValidationResultOfDeltaPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete latest validation result.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteLatestValidationResultOfDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteLatestValidationResultOfDeltaPlan(params: {\n    planId: string;\n\n  }): Observable<void> {\n\n    return this.deleteLatestValidationResultOfDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getRelationErrorRelevantObjectListOfDeltaPlan\n   */\n  static readonly GetRelationErrorRelevantObjectListOfDeltaPlanPath = '/delta-plans/{planId}/validation-results/relation-errors/{errorIndex}';\n\n  /**\n   * Get detail relevant object list in parameter relation error  of delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getRelationErrorRelevantObjectListOfDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getRelationErrorRelevantObjectListOfDeltaPlan$Response(params: {\n    planId: string;\n    errorIndex: string;\n\n  }): Observable<StrictHttpResponse<Array<ParameterRelationErrorDetail>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetRelationErrorRelevantObjectListOfDeltaPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('errorIndex', params.errorIndex, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<ParameterRelationErrorDetail>>;\n      })\n    );\n  }\n\n  /**\n   * Get detail relevant object list in parameter relation error  of delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getRelationErrorRelevantObjectListOfDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getRelationErrorRelevantObjectListOfDeltaPlan(params: {\n    planId: string;\n    errorIndex: string;\n\n  }): Observable<Array<ParameterRelationErrorDetail>> {\n\n    return this.getRelationErrorRelevantObjectListOfDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<ParameterRelationErrorDetail>>) => r.body as Array<ParameterRelationErrorDetail>)\n    );\n  }\n\n  /**\n   * Path part for operation preActivateOperationForStagedPlan\n   */\n  static readonly PreActivateOperationForStagedPlanPath = '/staged-plans/{planId}/operations/pre-activations';\n\n  /**\n   * Request for pre-activate operation of staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `preActivateOperationForStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  preActivateOperationForStagedPlan$Response(params: {\n    planId: string;\n\n  }): Observable<StrictHttpResponse<ActivateOperationResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.PreActivateOperationForStagedPlanPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ActivateOperationResponse>;\n      })\n    );\n  }\n\n  /**\n   * Request for pre-activate operation of staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `preActivateOperationForStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  preActivateOperationForStagedPlan(params: {\n    planId: string;\n\n  }): Observable<ActivateOperationResponse> {\n\n    return this.preActivateOperationForStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ActivateOperationResponse>) => r.body as ActivateOperationResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getPreActivateOperationForStagedPlan\n   */\n  static readonly GetPreActivateOperationForStagedPlanPath = '/staged-plans/{planId}/operations/pre-activations/{operationId}';\n\n  /**\n   * Get operation state of pre-activating staged plan.\n   *\n   * After operation succeed, this inactivated plan has been transferred to CM. The URL is provided in the links of response so that WebEM can fetch it directly. Also WebEM can assemble URL with returned cmInactivePlanId and cmValidationOperationId.\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getPreActivateOperationForStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPreActivateOperationForStagedPlan$Response(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<ActivateOperationResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetPreActivateOperationForStagedPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ActivateOperationResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get operation state of pre-activating staged plan.\n   *\n   * After operation succeed, this inactivated plan has been transferred to CM. The URL is provided in the links of response so that WebEM can fetch it directly. Also WebEM can assemble URL with returned cmInactivePlanId and cmValidationOperationId.\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getPreActivateOperationForStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPreActivateOperationForStagedPlan(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<ActivateOperationResponse> {\n\n    return this.getPreActivateOperationForStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ActivateOperationResponse>) => r.body as ActivateOperationResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deletePreActivateOperationForStagedPlan\n   */\n  static readonly DeletePreActivateOperationForStagedPlanPath = '/staged-plans/{planId}/operations/pre-activations/{operationId}';\n\n  /**\n   * Delete operation of pre-activating staged plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deletePreActivateOperationForStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deletePreActivateOperationForStagedPlan$Response(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeletePreActivateOperationForStagedPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete operation of pre-activating staged plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deletePreActivateOperationForStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deletePreActivateOperationForStagedPlan(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<void> {\n\n    return this.deletePreActivateOperationForStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation preActivateOperationForDeltaPlan\n   */\n  static readonly PreActivateOperationForDeltaPlanPath = '/delta-plans/{planId}/operations/pre-activations';\n\n  /**\n   * Request for pre-activate operation of delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `preActivateOperationForDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  preActivateOperationForDeltaPlan$Response(params: {\n    planId: string;\n\n  }): Observable<StrictHttpResponse<ActivateOperationResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.PreActivateOperationForDeltaPlanPath, 'post');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ActivateOperationResponse>;\n      })\n    );\n  }\n\n  /**\n   * Request for pre-activate operation of delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `preActivateOperationForDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  preActivateOperationForDeltaPlan(params: {\n    planId: string;\n\n  }): Observable<ActivateOperationResponse> {\n\n    return this.preActivateOperationForDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ActivateOperationResponse>) => r.body as ActivateOperationResponse)\n    );\n  }\n\n  /**\n   * Path part for operation getPreActivateOperationForDeltaPlan\n   */\n  static readonly GetPreActivateOperationForDeltaPlanPath = '/delta-plans/{planId}/operations/pre-activations/{operationId}';\n\n  /**\n   * Get operation state of pre-activating delta plan.\n   *\n   * After operation, this inactivated plan has been transferred to CM. The URL is provided in the links of response so that WebEM can fetch it directly.\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getPreActivateOperationForDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPreActivateOperationForDeltaPlan$Response(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<ActivateOperationResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetPreActivateOperationForDeltaPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ActivateOperationResponse>;\n      })\n    );\n  }\n\n  /**\n   * Get operation state of pre-activating delta plan.\n   *\n   * After operation, this inactivated plan has been transferred to CM. The URL is provided in the links of response so that WebEM can fetch it directly.\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getPreActivateOperationForDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPreActivateOperationForDeltaPlan(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<ActivateOperationResponse> {\n\n    return this.getPreActivateOperationForDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<ActivateOperationResponse>) => r.body as ActivateOperationResponse)\n    );\n  }\n\n  /**\n   * Path part for operation deletePreActivateOperationForDeltaPlan\n   */\n  static readonly DeletePreActivateOperationForDeltaPlanPath = '/delta-plans/{planId}/operations/pre-activations/{operationId}';\n\n  /**\n   * Delete operation of pre-activating delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deletePreActivateOperationForDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deletePreActivateOperationForDeltaPlan$Response(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.DeletePreActivateOperationForDeltaPlanPath, 'delete');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete operation of pre-activating delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deletePreActivateOperationForDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deletePreActivateOperationForDeltaPlan(params: {\n    planId: string;\n    operationId: string;\n\n  }): Observable<void> {\n\n    return this.deletePreActivateOperationForDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getTreeOfStagedPlan\n   */\n  static readonly GetTreeOfStagedPlanPath = '/staged-plans/{planId}/plan-tree-diff';\n\n  /**\n   * Get plan tree with mo lites.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getTreeOfStagedPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTreeOfStagedPlan$Response(params: {\n    planId: string;\n    filterByName?: string;\n    oldRevision?: string;\n    parentUuid?: string;\n\n  }): Observable<StrictHttpResponse<PlanTreeDiff>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetTreeOfStagedPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.query('filterByName', params.filterByName, {});\n      rb.query('oldRevision', params.oldRevision, {});\n      rb.query('parentUuid', params.parentUuid, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<PlanTreeDiff>;\n      })\n    );\n  }\n\n  /**\n   * Get plan tree with mo lites.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getTreeOfStagedPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTreeOfStagedPlan(params: {\n    planId: string;\n    filterByName?: string;\n    oldRevision?: string;\n    parentUuid?: string;\n\n  }): Observable<PlanTreeDiff> {\n\n    return this.getTreeOfStagedPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<PlanTreeDiff>) => r.body as PlanTreeDiff)\n    );\n  }\n\n  /**\n   * Path part for operation getTreeOfDeltaPlan\n   */\n  static readonly GetTreeOfDeltaPlanPath = '/delta-plans/{planId}/plan-tree-diff';\n\n  /**\n   * Get plan tree with mo lites of delta plan.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getTreeOfDeltaPlan()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTreeOfDeltaPlan$Response(params: {\n    planId: string;\n    filterByName?: string;\n    oldRevision?: string;\n    parentUuid?: string;\n\n  }): Observable<StrictHttpResponse<PlanTreeDiff>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetTreeOfDeltaPlanPath, 'get');\n    if (params) {\n\n      rb.path('planId', params.planId, {});\n      rb.query('filterByName', params.filterByName, {});\n      rb.query('oldRevision', params.oldRevision, {});\n      rb.query('parentUuid', params.parentUuid, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<PlanTreeDiff>;\n      })\n    );\n  }\n\n  /**\n   * Get plan tree with mo lites of delta plan.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getTreeOfDeltaPlan$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTreeOfDeltaPlan(params: {\n    planId: string;\n    filterByName?: string;\n    oldRevision?: string;\n    parentUuid?: string;\n\n  }): Observable<PlanTreeDiff> {\n\n    return this.getTreeOfDeltaPlan$Response(params).pipe(\n      map((r: StrictHttpResponse<PlanTreeDiff>) => r.body as PlanTreeDiff)\n    );\n  }\n\n  /**\n   * Path part for operation getAllNiddDefinitions\n   */\n  static readonly GetAllNiddDefinitionsPath = '/nidd';\n\n  /**\n   * Get all NIDD definitions.\n   *\n   * Get all NIDD definitions\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllNiddDefinitions()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllNiddDefinitions$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<NiddDefinition>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, PeService.GetAllNiddDefinitionsPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<NiddDefinition>>;\n      })\n    );\n  }\n\n  /**\n   * Get all NIDD definitions.\n   *\n   * Get all NIDD definitions\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getAllNiddDefinitions$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllNiddDefinitions(params?: {\n\n  }): Observable<Array<NiddDefinition>> {\n\n    return this.getAllNiddDefinitions$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<NiddDefinition>>) => r.body as Array<NiddDefinition>)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { AccountInformation } from '../models/account-information';\nimport { ActivateNotification } from '../models/activate-notification';\nimport { ChangeExpiredPasswordRequest } from '../models/change-expired-password-request';\nimport { LocalUserPropertie } from '../models/local-user-propertie';\nimport { SecurityGenericResponse } from '../models/security-generic-response';\nimport { ServiceUserTypePropertie } from '../models/service-user-type-propertie';\nimport { SystemInfo } from '../models/system-info';\nimport { UmEventNotification } from '../models/um-event-notification';\nimport { UpdateServiceUserPasswordRequest } from '../models/update-service-user-password-request';\nimport { UpdateSystemAdministratorRequest } from '../models/update-system-administrator-request';\nimport { UserAccountsSettings } from '../models/user-accounts-settings';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SecService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getSystemInfo\n   */\n  static readonly GetSystemInfoPath = '/system/info';\n\n  /**\n   * Get system related information.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getSystemInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemInfo$Response(params?: {\n\n  }): Observable<StrictHttpResponse<SystemInfo>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SecService.GetSystemInfoPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SystemInfo>;\n      })\n    );\n  }\n\n  /**\n   * Get system related information.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getSystemInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemInfo(params?: {\n\n  }): Observable<SystemInfo> {\n\n    return this.getSystemInfo$Response(params).pipe(\n      map((r: StrictHttpResponse<SystemInfo>) => r.body as SystemInfo)\n    );\n  }\n\n  /**\n   * Path part for operation notifyPlanActivation\n   */\n  static readonly NotifyPlanActivationPath = '/security/plan-activation/state';\n\n  /**\n   * Notify for plan activation.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `notifyPlanActivation()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  notifyPlanActivation$Response(params: {\n    'X-OAM-Channel-ID': string;\n    'X-OAM-Resource-URI': string;\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\n    'X-OAM-Message-Number': string;\n      body: ActivateNotification\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SecService.NotifyPlanActivationPath, 'post');\n    if (params) {\n\n      rb.header('X-OAM-Channel-ID', params['X-OAM-Channel-ID'], {});\n      rb.header('X-OAM-Resource-URI', params['X-OAM-Resource-URI'], {});\n      rb.header('X-OAM-Resource-State', params['X-OAM-Resource-State'], {});\n      rb.header('X-OAM-Message-Number', params['X-OAM-Message-Number'], {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Notify for plan activation.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `notifyPlanActivation$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  notifyPlanActivation(params: {\n    'X-OAM-Channel-ID': string;\n    'X-OAM-Resource-URI': string;\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\n    'X-OAM-Message-Number': string;\n      body: ActivateNotification\n  }): Observable<void> {\n\n    return this.notifyPlanActivation$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation accountSettingsGet\n   */\n  static readonly AccountSettingsGetPath = '/account/settings';\n\n  /**\n   * Get parameters for user accounts.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `accountSettingsGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  accountSettingsGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<UserAccountsSettings>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SecService.AccountSettingsGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<UserAccountsSettings>;\n      })\n    );\n  }\n\n  /**\n   * Get parameters for user accounts.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `accountSettingsGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  accountSettingsGet(params?: {\n\n  }): Observable<UserAccountsSettings> {\n\n    return this.accountSettingsGet$Response(params).pipe(\n      map((r: StrictHttpResponse<UserAccountsSettings>) => r.body as UserAccountsSettings)\n    );\n  }\n\n  /**\n   * Path part for operation accountServiceUserPropertiesGet\n   */\n  static readonly AccountServiceUserPropertiesGetPath = '/account/service-user-properties';\n\n  /**\n   * Get service user type list & properties.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `accountServiceUserPropertiesGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  accountServiceUserPropertiesGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<ServiceUserTypePropertie>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SecService.AccountServiceUserPropertiesGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<ServiceUserTypePropertie>>;\n      })\n    );\n  }\n\n  /**\n   * Get service user type list & properties.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `accountServiceUserPropertiesGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  accountServiceUserPropertiesGet(params?: {\n\n  }): Observable<Array<ServiceUserTypePropertie>> {\n\n    return this.accountServiceUserPropertiesGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<ServiceUserTypePropertie>>) => r.body as Array<ServiceUserTypePropertie>)\n    );\n  }\n\n  /**\n   * Path part for operation accountLocalUserPropertiesGet\n   */\n  static readonly AccountLocalUserPropertiesGetPath = '/account/local-user-properties';\n\n  /**\n   * Get local user properties list.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `accountLocalUserPropertiesGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  accountLocalUserPropertiesGet$Response(params?: {\n    'X-Nokia-Username'?: string;\n    'X-Nokia-Accessmode'?: 'rw' | 'ro';\n    'X-Nokia-Userrole'?: 'systemUserAccessMode' | 'secUserAccessMode' | 'appUserAccessMode' | 'readOnlyUserAccessMode';\n\n  }): Observable<StrictHttpResponse<Array<LocalUserPropertie>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SecService.AccountLocalUserPropertiesGetPath, 'get');\n    if (params) {\n\n      rb.header('X-Nokia-Username', params['X-Nokia-Username'], {});\n      rb.header('X-Nokia-Accessmode', params['X-Nokia-Accessmode'], {});\n      rb.header('X-Nokia-Userrole', params['X-Nokia-Userrole'], {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<LocalUserPropertie>>;\n      })\n    );\n  }\n\n  /**\n   * Get local user properties list.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `accountLocalUserPropertiesGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  accountLocalUserPropertiesGet(params?: {\n    'X-Nokia-Username'?: string;\n    'X-Nokia-Accessmode'?: 'rw' | 'ro';\n    'X-Nokia-Userrole'?: 'systemUserAccessMode' | 'secUserAccessMode' | 'appUserAccessMode' | 'readOnlyUserAccessMode';\n\n  }): Observable<Array<LocalUserPropertie>> {\n\n    return this.accountLocalUserPropertiesGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<LocalUserPropertie>>) => r.body as Array<LocalUserPropertie>)\n    );\n  }\n\n  /**\n   * Path part for operation notifyUmEvent\n   */\n  static readonly NotifyUmEventPath = '/account/um-event-notification';\n\n  /**\n   * Receive um event notification.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `notifyUmEvent()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  notifyUmEvent$Response(params: {\n      body: UmEventNotification\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SecService.NotifyUmEventPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Receive um event notification.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `notifyUmEvent$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  notifyUmEvent(params: {\n      body: UmEventNotification\n  }): Observable<void> {\n\n    return this.notifyUmEvent$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation accountUsersSystemGet\n   */\n  static readonly AccountUsersSystemGetPath = '/account/users/system';\n\n  /**\n   * Retrieve local user account information.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `accountUsersSystemGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  accountUsersSystemGet$Response(params: {\n\n    /**\n     * base64 encoded username\n     */\n    Username: string;\n    'X-Nokia-Username'?: string;\n    'X-Nokia-Accessmode'?: 'rw' | 'ro';\n    'X-Nokia-Userrole'?: 'systemUserAccessMode' | 'secUserAccessMode' | 'appUserAccessMode' | 'readOnlyUserAccessMode';\n\n  }): Observable<StrictHttpResponse<AccountInformation>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SecService.AccountUsersSystemGetPath, 'get');\n    if (params) {\n\n      rb.query('Username', params.Username, {});\n      rb.header('X-Nokia-Username', params['X-Nokia-Username'], {});\n      rb.header('X-Nokia-Accessmode', params['X-Nokia-Accessmode'], {});\n      rb.header('X-Nokia-Userrole', params['X-Nokia-Userrole'], {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<AccountInformation>;\n      })\n    );\n  }\n\n  /**\n   * Retrieve local user account information.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `accountUsersSystemGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  accountUsersSystemGet(params: {\n\n    /**\n     * base64 encoded username\n     */\n    Username: string;\n    'X-Nokia-Username'?: string;\n    'X-Nokia-Accessmode'?: 'rw' | 'ro';\n    'X-Nokia-Userrole'?: 'systemUserAccessMode' | 'secUserAccessMode' | 'appUserAccessMode' | 'readOnlyUserAccessMode';\n\n  }): Observable<AccountInformation> {\n\n    return this.accountUsersSystemGet$Response(params).pipe(\n      map((r: StrictHttpResponse<AccountInformation>) => r.body as AccountInformation)\n    );\n  }\n\n  /**\n   * Path part for operation accountUsersSystemPatch\n   */\n  static readonly AccountUsersSystemPatchPath = '/account/users/system';\n\n  /**\n   * Update local system administrator account.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `accountUsersSystemPatch()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  accountUsersSystemPatch$Response(params: {\n    'X-Nokia-Username'?: string;\n    'X-Nokia-Accessmode'?: 'rw' | 'ro';\n    'X-Nokia-Userrole'?: 'systemUserAccessMode' | 'secUserAccessMode' | 'appUserAccessMode' | 'readOnlyUserAccessMode';\n      body: UpdateSystemAdministratorRequest\n  }): Observable<StrictHttpResponse<SecurityGenericResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SecService.AccountUsersSystemPatchPath, 'patch');\n    if (params) {\n\n      rb.header('X-Nokia-Username', params['X-Nokia-Username'], {});\n      rb.header('X-Nokia-Accessmode', params['X-Nokia-Accessmode'], {});\n      rb.header('X-Nokia-Userrole', params['X-Nokia-Userrole'], {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SecurityGenericResponse>;\n      })\n    );\n  }\n\n  /**\n   * Update local system administrator account.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `accountUsersSystemPatch$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  accountUsersSystemPatch(params: {\n    'X-Nokia-Username'?: string;\n    'X-Nokia-Accessmode'?: 'rw' | 'ro';\n    'X-Nokia-Userrole'?: 'systemUserAccessMode' | 'secUserAccessMode' | 'appUserAccessMode' | 'readOnlyUserAccessMode';\n      body: UpdateSystemAdministratorRequest\n  }): Observable<SecurityGenericResponse> {\n\n    return this.accountUsersSystemPatch$Response(params).pipe(\n      map((r: StrictHttpResponse<SecurityGenericResponse>) => r.body as SecurityGenericResponse)\n    );\n  }\n\n  /**\n   * Path part for operation accountServicePatch\n   */\n  static readonly AccountServicePatchPath = '/account/service';\n\n  /**\n   * Update service account password.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `accountServicePatch()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  accountServicePatch$Response(params: {\n    'X-Nokia-Username'?: string;\n    'X-Nokia-Accessmode'?: 'rw' | 'ro';\n    'X-Nokia-Userrole'?: 'systemUserAccessMode' | 'secUserAccessMode' | 'appUserAccessMode' | 'readOnlyUserAccessMode';\n  \n    /**\n     * Change service password request parameters\n     */\n    body: UpdateServiceUserPasswordRequest\n  }): Observable<StrictHttpResponse<SecurityGenericResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SecService.AccountServicePatchPath, 'patch');\n    if (params) {\n\n      rb.header('X-Nokia-Username', params['X-Nokia-Username'], {});\n      rb.header('X-Nokia-Accessmode', params['X-Nokia-Accessmode'], {});\n      rb.header('X-Nokia-Userrole', params['X-Nokia-Userrole'], {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SecurityGenericResponse>;\n      })\n    );\n  }\n\n  /**\n   * Update service account password.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `accountServicePatch$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  accountServicePatch(params: {\n    'X-Nokia-Username'?: string;\n    'X-Nokia-Accessmode'?: 'rw' | 'ro';\n    'X-Nokia-Userrole'?: 'systemUserAccessMode' | 'secUserAccessMode' | 'appUserAccessMode' | 'readOnlyUserAccessMode';\n  \n    /**\n     * Change service password request parameters\n     */\n    body: UpdateServiceUserPasswordRequest\n  }): Observable<SecurityGenericResponse> {\n\n    return this.accountServicePatch$Response(params).pipe(\n      map((r: StrictHttpResponse<SecurityGenericResponse>) => r.body as SecurityGenericResponse)\n    );\n  }\n\n  /**\n   * Path part for operation accountExpiredPasswordPatch\n   */\n  static readonly AccountExpiredPasswordPatchPath = '/account/expired-password';\n\n  /**\n   * Update expired password for local account.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `accountExpiredPasswordPatch()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  accountExpiredPasswordPatch$Response(params: {\n    'X-Nokia-Username'?: string;\n    'X-Nokia-Accessmode'?: 'rw' | 'ro';\n      body: ChangeExpiredPasswordRequest\n  }): Observable<StrictHttpResponse<SecurityGenericResponse>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SecService.AccountExpiredPasswordPatchPath, 'patch');\n    if (params) {\n\n      rb.header('X-Nokia-Username', params['X-Nokia-Username'], {});\n      rb.header('X-Nokia-Accessmode', params['X-Nokia-Accessmode'], {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SecurityGenericResponse>;\n      })\n    );\n  }\n\n  /**\n   * Update expired password for local account.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `accountExpiredPasswordPatch$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  accountExpiredPasswordPatch(params: {\n    'X-Nokia-Username'?: string;\n    'X-Nokia-Accessmode'?: 'rw' | 'ro';\n      body: ChangeExpiredPasswordRequest\n  }): Observable<SecurityGenericResponse> {\n\n    return this.accountExpiredPasswordPatch$Response(params).pipe(\n      map((r: StrictHttpResponse<SecurityGenericResponse>) => r.body as SecurityGenericResponse)\n    );\n  }\n\n}\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { ActivateNotification } from '../models/activate-notification';\r\nimport { CollectSnapshotRequest } from '../models/collect-snapshot-request';\r\nimport { LocalSnapshotResp } from '../models/local-snapshot-resp';\r\nimport { RemoteSnapshotResp } from '../models/remote-snapshot-resp';\r\nimport { SnapshotFilesReport } from '../models/snapshot-files-report';\r\nimport { SnapshotRuLogResult } from '../models/snapshot-ru-log-result';\r\nimport { SnapshotStatus } from '../models/snapshot-status';\r\nimport { SnapshotUploadResult } from '../models/snapshot-upload-result';\r\nimport { UploadSnapshotRequest } from '../models/upload-snapshot-request';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SnapshotService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation checkSnapshotStatus\r\n   */\r\n  static readonly CheckSnapshotStatusPath = '/snapshot';\r\n\r\n  /**\r\n   * Check server snapshot status.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `checkSnapshotStatus()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  checkSnapshotStatus$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<{ 'status'?: 'idle' | 'remote-ongoing' | 'local-ongoing' | 'canceling' }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.CheckSnapshotStatusPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'status'?: 'idle' | 'remote-ongoing' | 'local-ongoing' | 'canceling' }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check server snapshot status.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `checkSnapshotStatus$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  checkSnapshotStatus(params?: {\r\n\r\n  }): Observable<{ 'status'?: 'idle' | 'remote-ongoing' | 'local-ongoing' | 'canceling' }> {\r\n\r\n    return this.checkSnapshotStatus$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'status'?: 'idle' | 'remote-ongoing' | 'local-ongoing' | 'canceling' }>) => r.body as { 'status'?: 'idle' | 'remote-ongoing' | 'local-ongoing' | 'canceling' })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation notifySnapshotConfigPlanActivation\r\n   */\r\n  static readonly NotifySnapshotConfigPlanActivationPath = '/snapshot/plan-activation/state';\r\n\r\n  /**\r\n   * Notify for snapshot config plan activation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `notifySnapshotConfigPlanActivation()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifySnapshotConfigPlanActivation$Response(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n      body: ActivateNotification\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.NotifySnapshotConfigPlanActivationPath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Channel-ID', params['X-OAM-Channel-ID'], {});\r\n      rb.header('X-OAM-Resource-URI', params['X-OAM-Resource-URI'], {});\r\n      rb.header('X-OAM-Resource-State', params['X-OAM-Resource-State'], {});\r\n      rb.header('X-OAM-Message-Number', params['X-OAM-Message-Number'], {});\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Notify for snapshot config plan activation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `notifySnapshotConfigPlanActivation$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifySnapshotConfigPlanActivation(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n      body: ActivateNotification\r\n  }): Observable<void> {\r\n\r\n    return this.notifySnapshotConfigPlanActivation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getLocalSnapshotOperations\r\n   */\r\n  static readonly GetLocalSnapshotOperationsPath = '/snapshot/operations/locals';\r\n\r\n  /**\r\n   * Get local snapshot operations.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getLocalSnapshotOperations()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getLocalSnapshotOperations$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<LocalSnapshotResp>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.GetLocalSnapshotOperationsPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<LocalSnapshotResp>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get local snapshot operations.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getLocalSnapshotOperations$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getLocalSnapshotOperations(params?: {\r\n\r\n  }): Observable<Array<LocalSnapshotResp>> {\r\n\r\n    return this.getLocalSnapshotOperations$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<LocalSnapshotResp>>) => r.body as Array<LocalSnapshotResp>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation triggerLocalSnapshot\r\n   */\r\n  static readonly TriggerLocalSnapshotPath = '/snapshot/operations/locals';\r\n\r\n  /**\r\n   * Trigger local snapshot.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `triggerLocalSnapshot()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  triggerLocalSnapshot$Response(params: {\r\n      body: CollectSnapshotRequest\r\n  }): Observable<StrictHttpResponse<LocalSnapshotResp>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.TriggerLocalSnapshotPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<LocalSnapshotResp>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger local snapshot.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `triggerLocalSnapshot$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  triggerLocalSnapshot(params: {\r\n      body: CollectSnapshotRequest\r\n  }): Observable<LocalSnapshotResp> {\r\n\r\n    return this.triggerLocalSnapshot$Response(params).pipe(\r\n      map((r: StrictHttpResponse<LocalSnapshotResp>) => r.body as LocalSnapshotResp)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getRemoteSnapshotOperations\r\n   */\r\n  static readonly GetRemoteSnapshotOperationsPath = '/snapshot/operations/remotes';\r\n\r\n  /**\r\n   * Get remote snapshot operations.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getRemoteSnapshotOperations()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRemoteSnapshotOperations$Response(params?: {\r\n\r\n    /**\r\n     * filter specified status remote snapshot\r\n     */\r\n    status?: SnapshotStatus;\r\n\r\n  }): Observable<StrictHttpResponse<Array<RemoteSnapshotResp>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.GetRemoteSnapshotOperationsPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('status', params.status, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<RemoteSnapshotResp>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get remote snapshot operations.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getRemoteSnapshotOperations$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRemoteSnapshotOperations(params?: {\r\n\r\n    /**\r\n     * filter specified status remote snapshot\r\n     */\r\n    status?: SnapshotStatus;\r\n\r\n  }): Observable<Array<RemoteSnapshotResp>> {\r\n\r\n    return this.getRemoteSnapshotOperations$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<RemoteSnapshotResp>>) => r.body as Array<RemoteSnapshotResp>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation uploadExistRemoteSnapshot\r\n   */\r\n  static readonly UploadExistRemoteSnapshotPath = '/snapshot/operations/remotes';\r\n\r\n  /**\r\n   * Upload exist remote snapshot.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `uploadExistRemoteSnapshot()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  uploadExistRemoteSnapshot$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.UploadExistRemoteSnapshotPath, 'put');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Upload exist remote snapshot.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `uploadExistRemoteSnapshot$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  uploadExistRemoteSnapshot(params?: {\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.uploadExistRemoteSnapshot$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation triggerRemoteSnapshot\r\n   */\r\n  static readonly TriggerRemoteSnapshotPath = '/snapshot/operations/remotes';\r\n\r\n  /**\r\n   * Trigger remote snapshot.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `triggerRemoteSnapshot()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  triggerRemoteSnapshot$Response(params: {\r\n      body: CollectSnapshotRequest\r\n  }): Observable<StrictHttpResponse<RemoteSnapshotResp>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.TriggerRemoteSnapshotPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<RemoteSnapshotResp>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger remote snapshot.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `triggerRemoteSnapshot$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  triggerRemoteSnapshot(params: {\r\n      body: CollectSnapshotRequest\r\n  }): Observable<RemoteSnapshotResp> {\r\n\r\n    return this.triggerRemoteSnapshot$Response(params).pipe(\r\n      map((r: StrictHttpResponse<RemoteSnapshotResp>) => r.body as RemoteSnapshotResp)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getLocalSnapshotOperation\r\n   */\r\n  static readonly GetLocalSnapshotOperationPath = '/snapshot/operations/locals/{operationId}';\r\n\r\n  /**\r\n   * Get local snapshot operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getLocalSnapshotOperation()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getLocalSnapshotOperation$Response(params: {\r\n\r\n    /**\r\n     * Snapshot operation Id\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<LocalSnapshotResp>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.GetLocalSnapshotOperationPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<LocalSnapshotResp>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get local snapshot operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getLocalSnapshotOperation$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getLocalSnapshotOperation(params: {\r\n\r\n    /**\r\n     * Snapshot operation Id\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<LocalSnapshotResp> {\r\n\r\n    return this.getLocalSnapshotOperation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<LocalSnapshotResp>) => r.body as LocalSnapshotResp)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteLocalSnapshotOperation\r\n   */\r\n  static readonly DeleteLocalSnapshotOperationPath = '/snapshot/operations/locals/{operationId}';\r\n\r\n  /**\r\n   * Cancel the snapshot if it is ongoing, and delete this operation resource.It's a asynchronous api.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteLocalSnapshotOperation()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteLocalSnapshotOperation$Response(params: {\r\n\r\n    /**\r\n     * Snapshot operation Id\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.DeleteLocalSnapshotOperationPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Cancel the snapshot if it is ongoing, and delete this operation resource.It's a asynchronous api.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteLocalSnapshotOperation$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteLocalSnapshotOperation(params: {\r\n\r\n    /**\r\n     * Snapshot operation Id\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteLocalSnapshotOperation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getRemoteSnapshotOperation\r\n   */\r\n  static readonly GetRemoteSnapshotOperationPath = '/snapshot/operations/remotes/{operationId}';\r\n\r\n  /**\r\n   * Get remote snapshot operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getRemoteSnapshotOperation()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRemoteSnapshotOperation$Response(params: {\r\n\r\n    /**\r\n     * Snapshot operation Id\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<RemoteSnapshotResp>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.GetRemoteSnapshotOperationPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<RemoteSnapshotResp>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get remote snapshot operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getRemoteSnapshotOperation$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRemoteSnapshotOperation(params: {\r\n\r\n    /**\r\n     * Snapshot operation Id\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<RemoteSnapshotResp> {\r\n\r\n    return this.getRemoteSnapshotOperation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<RemoteSnapshotResp>) => r.body as RemoteSnapshotResp)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation uploadRemoteSnapshot\r\n   */\r\n  static readonly UploadRemoteSnapshotPath = '/snapshot/operations/remotes/{operationId}';\r\n\r\n  /**\r\n   * Upload remote snapshot.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `uploadRemoteSnapshot()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  uploadRemoteSnapshot$Response(params: {\r\n\r\n    /**\r\n     * Snapshot operation Id\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.UploadRemoteSnapshotPath, 'put');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Upload remote snapshot.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `uploadRemoteSnapshot$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  uploadRemoteSnapshot(params: {\r\n\r\n    /**\r\n     * Snapshot operation Id\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.uploadRemoteSnapshot$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteRemoteSnapshotOperation\r\n   */\r\n  static readonly DeleteRemoteSnapshotOperationPath = '/snapshot/operations/remotes/{operationId}';\r\n\r\n  /**\r\n   * Cancel the snapshot if it is ongoing, and delete this operation resource.It's a asynchronous api.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteRemoteSnapshotOperation()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteRemoteSnapshotOperation$Response(params: {\r\n\r\n    /**\r\n     * Snapshot operation Id\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.DeleteRemoteSnapshotOperationPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Cancel the snapshot if it is ongoing, and delete this operation resource.It's a asynchronous api.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteRemoteSnapshotOperation$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteRemoteSnapshotOperation(params: {\r\n\r\n    /**\r\n     * Snapshot operation Id\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteRemoteSnapshotOperation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getLocalSnapshotFile\r\n   */\r\n  static readonly GetLocalSnapshotFilePath = '/snapshot/operations/locals/{operationId}/files/{fileId}';\r\n\r\n  /**\r\n   * Get specified local snapshot unit file.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getLocalSnapshotFile()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getLocalSnapshotFile$Response(params: {\r\n\r\n    /**\r\n     * Snapshot operation id\r\n     */\r\n    operationId: string;\r\n\r\n    /**\r\n     * Snapshot unit file id\r\n     */\r\n    fileId: string;\r\n\r\n  }): Observable<StrictHttpResponse<ArrayBuffer>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.GetLocalSnapshotFilePath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n      rb.path('fileId', params.fileId, {});\r\n\r\n    }\r\n\r\n      // if in the future some one re-generating this file\r\n      // and sees here turned back to responseType: 'blob',\r\n      // then you need to revert here to arraybuffer for the reason PR564806 -- ('blob' doesn't work well with chrome in special environment)\r\n      // https://stackoverflow.com/questions/55106303/angular-fail-to-download-file-10mb-from-server-on-google-chrome/57108968#57108968\r\n      // later on there'd be generate script integrated to original ng-swagger-gen's call, to make it free from manually-maintaining.\r\n    return this.http.request(rb.build({\r\n      responseType: 'arraybuffer',\r\n      accept: 'application/octet-stream'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ArrayBuffer>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get specified local snapshot unit file.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getLocalSnapshotFile$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getLocalSnapshotFile(params: {\r\n\r\n    /**\r\n     * Snapshot operation id\r\n     */\r\n    operationId: string;\r\n\r\n    /**\r\n     * Snapshot unit file id\r\n     */\r\n    fileId: string;\r\n\r\n  }): Observable<ArrayBuffer> {\r\n\r\n    return this.getLocalSnapshotFile$Response(params).pipe(\r\n      map((r: StrictHttpResponse<ArrayBuffer>) => r.body as ArrayBuffer)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation notifyRuLogResult\r\n   */\r\n  static readonly NotifyRuLogResultPath = '/snapshot/ru/log/result';\r\n\r\n  /**\r\n   * notify ASM ru log collect result.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `notifyRuLogResult()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyRuLogResult$Response(params: {\r\n      body: SnapshotRuLogResult\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.NotifyRuLogResultPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * notify ASM ru log collect result.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `notifyRuLogResult$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyRuLogResult(params: {\r\n      body: SnapshotRuLogResult\r\n  }): Observable<void> {\r\n\r\n    return this.notifyRuLogResult$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation keepSnapshotAlive\r\n   */\r\n  static readonly KeepSnapshotAlivePath = '/snapshot/operations/{operationId}/heartbeat';\r\n\r\n  /**\r\n   * send heartbeat to keepalive.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `keepSnapshotAlive()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  keepSnapshotAlive$Response(params: {\r\n\r\n    /**\r\n     * Snapshot operation id\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.KeepSnapshotAlivePath, 'post');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * send heartbeat to keepalive.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `keepSnapshotAlive$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  keepSnapshotAlive(params: {\r\n\r\n    /**\r\n     * Snapshot operation id\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.keepSnapshotAlive$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation snapshotNmsUpload\r\n   */\r\n  static readonly SnapshotNmsUploadPath = '/snapshot/nms/upload';\r\n\r\n  /**\r\n   * receive snapshot upload request.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `snapshotNmsUpload()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  snapshotNmsUpload$Response(params: {\r\n      body: UploadSnapshotRequest\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.SnapshotNmsUploadPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * receive snapshot upload request.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `snapshotNmsUpload$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  snapshotNmsUpload(params: {\r\n      body: UploadSnapshotRequest\r\n  }): Observable<void> {\r\n\r\n    return this.snapshotNmsUpload$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation snapshotNmsFilesReport\r\n   */\r\n  static readonly SnapshotNmsFilesReportPath = '/snapshot/nms/unit/status';\r\n\r\n  /**\r\n   * receive snapshot files status report.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `snapshotNmsFilesReport()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  snapshotNmsFilesReport$Response(params: {\r\n      body: SnapshotFilesReport\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.SnapshotNmsFilesReportPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * receive snapshot files status report.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `snapshotNmsFilesReport$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  snapshotNmsFilesReport(params: {\r\n      body: SnapshotFilesReport\r\n  }): Observable<void> {\r\n\r\n    return this.snapshotNmsFilesReport$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation snapshotNmsUploadResult\r\n   */\r\n  static readonly SnapshotNmsUploadResultPath = '/snapshot/nms/result';\r\n\r\n  /**\r\n   * notify nms upload result.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `snapshotNmsUploadResult()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  snapshotNmsUploadResult$Response(params: {\r\n      body: SnapshotUploadResult\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SnapshotService.SnapshotNmsUploadResultPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * notify nms upload result.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `snapshotNmsUploadResult$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  snapshotNmsUploadResult(params: {\r\n      body: SnapshotUploadResult\r\n  }): Observable<void> {\r\n\r\n    return this.snapshotNmsUploadResult$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { CellId } from '../models/cell-id';\r\nimport { Cu } from '../models/cu';\r\nimport { CuCell } from '../models/cu-cell';\r\nimport { CuCellsDiff } from '../models/cu-cells-diff';\r\nimport { CuCellsSummary } from '../models/cu-cells-summary';\r\nimport { Du } from '../models/du';\r\nimport { DusDiff } from '../models/dus-diff';\r\nimport { DusSummary } from '../models/dus-summary';\r\nimport { ExternalSystemModule } from '../models/external-system-module';\r\nimport { MhasDiff } from '../models/mhas-diff';\r\nimport { NetworkSlicingDiff } from '../models/network-slicing-diff';\r\nimport { NetworkSlicingSummary } from '../models/network-slicing-summary';\r\nimport { NgLinksDiff } from '../models/ng-links-diff';\r\nimport { NgLinksSummary } from '../models/ng-links-summary';\r\nimport { ObjectChangesNotification } from '../models/object-changes-notification';\r\nimport { Operation } from '../models/operation';\r\nimport { OperationType } from '../models/operation-type';\r\nimport { Pod } from '../models/pod';\r\nimport { RaesDiff } from '../models/raes-diff';\r\nimport { ResourceIdsRequest } from '../models/resource-ids-request';\r\nimport { RetsDiff } from '../models/rets-diff';\r\nimport { RmodsDiff } from '../models/rmods-diff';\r\nimport { RmodsSummary } from '../models/rmods-summary';\r\nimport { SfPsDiff } from '../models/sf-ps-diff';\r\nimport { VDu } from '../models/v-du';\r\nimport { VduCell } from '../models/vdu-cell';\r\nimport { VduCellsDiff } from '../models/vdu-cells-diff';\r\nimport { VduCellsSummary } from '../models/vdu-cells-summary';\r\nimport { Vm } from '../models/vm';\r\nimport { Vnf } from '../models/vnf';\r\nimport { Vnfc } from '../models/vnfc';\r\nimport { X2LinkLockUnLockResponse } from '../models/x-2-link-lock-un-lock-response';\r\nimport { X2LinksDiff } from '../models/x-2-links-diff';\r\nimport { X2LinksSummary } from '../models/x-2-links-summary';\r\nimport { XnLinksDiff } from '../models/xn-links-diff';\r\nimport { XnLinksSummary } from '../models/xn-links-summary';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StatusService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCu\r\n   */\r\n  static readonly GetCuPath = '/cu';\r\n\r\n  /**\r\n   * Get CU state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCu()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCu$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Cu>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCuPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Cu>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get CU state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCu$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCu(params?: {\r\n\r\n  }): Observable<Cu> {\r\n\r\n    return this.getCu$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Cu>) => r.body as Cu)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getVDu\r\n   */\r\n  static readonly GetVDuPath = '/vdu';\r\n\r\n  /**\r\n   * Get vDU state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getVDu()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVDu$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<VDu>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetVDuPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<VDu>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get vDU state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getVDu$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVDu(params?: {\r\n\r\n  }): Observable<VDu> {\r\n\r\n    return this.getVDu$Response(params).pipe(\r\n      map((r: StrictHttpResponse<VDu>) => r.body as VDu)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getExtSystemModules\r\n   */\r\n  static readonly GetExtSystemModulesPath = '/external-system-modules';\r\n\r\n  /**\r\n   * Get list of available external system modules.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getExtSystemModules()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getExtSystemModules$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<ExternalSystemModule>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetExtSystemModulesPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<ExternalSystemModule>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get list of available external system modules.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getExtSystemModules$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getExtSystemModules(params?: {\r\n\r\n  }): Observable<Array<ExternalSystemModule>> {\r\n\r\n    return this.getExtSystemModules$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<ExternalSystemModule>>) => r.body as Array<ExternalSystemModule>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getExtSystemModuleById\r\n   */\r\n  static readonly GetExtSystemModuleByIdPath = '/external-system-modules/{smodExtRId}';\r\n\r\n  /**\r\n   * Get.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getExtSystemModuleById()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getExtSystemModuleById$Response(params: {\r\n\r\n    /**\r\n     * Unique ID of external system module\r\n     */\r\n    smodExtRId: string;\r\n\r\n  }): Observable<StrictHttpResponse<ExternalSystemModule>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetExtSystemModuleByIdPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('smodExtRId', params.smodExtRId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ExternalSystemModule>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getExtSystemModuleById$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getExtSystemModuleById(params: {\r\n\r\n    /**\r\n     * Unique ID of external system module\r\n     */\r\n    smodExtRId: string;\r\n\r\n  }): Observable<ExternalSystemModule> {\r\n\r\n    return this.getExtSystemModuleById$Response(params).pipe(\r\n      map((r: StrictHttpResponse<ExternalSystemModule>) => r.body as ExternalSystemModule)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getRetsDiff\r\n   */\r\n  static readonly GetRetsDiffPath = '/rets/diff';\r\n\r\n  /**\r\n   * Get RET difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing RETs in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getRetsDiff()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRetsDiff$Response(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<StrictHttpResponse<RetsDiff>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetRetsDiffPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('oldRevision', params.oldRevision, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<RetsDiff>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get RET difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing RETs in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getRetsDiff$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRetsDiff(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<RetsDiff> {\r\n\r\n    return this.getRetsDiff$Response(params).pipe(\r\n      map((r: StrictHttpResponse<RetsDiff>) => r.body as RetsDiff)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getRmodsDiff\r\n   */\r\n  static readonly GetRmodsDiffPath = '/rmods/diff';\r\n\r\n  /**\r\n   * Get radio modules difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing RMODs in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getRmodsDiff()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRmodsDiff$Response(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<StrictHttpResponse<RmodsDiff>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetRmodsDiffPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('oldRevision', params.oldRevision, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<RmodsDiff>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get radio modules difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing RMODs in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getRmodsDiff$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRmodsDiff(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<RmodsDiff> {\r\n\r\n    return this.getRmodsDiff$Response(params).pipe(\r\n      map((r: StrictHttpResponse<RmodsDiff>) => r.body as RmodsDiff)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getMhasDiff\r\n   */\r\n  static readonly GetMhasDiffPath = '/mhas/diff';\r\n\r\n  /**\r\n   * Get MHA difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing MHAs in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getMhasDiff()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getMhasDiff$Response(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<StrictHttpResponse<MhasDiff>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetMhasDiffPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('oldRevision', params.oldRevision, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<MhasDiff>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get MHA difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing MHAs in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getMhasDiff$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getMhasDiff(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<MhasDiff> {\r\n\r\n    return this.getMhasDiff$Response(params).pipe(\r\n      map((r: StrictHttpResponse<MhasDiff>) => r.body as MhasDiff)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getRaesDiff\r\n   */\r\n  static readonly GetRaesDiffPath = '/raes/diff';\r\n\r\n  /**\r\n   * Get RAE difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing RAEs in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getRaesDiff()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRaesDiff$Response(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<StrictHttpResponse<RaesDiff>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetRaesDiffPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('oldRevision', params.oldRevision, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<RaesDiff>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get RAE difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing RAEs in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getRaesDiff$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRaesDiff(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<RaesDiff> {\r\n\r\n    return this.getRaesDiff$Response(params).pipe(\r\n      map((r: StrictHttpResponse<RaesDiff>) => r.body as RaesDiff)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getRmodsSummary\r\n   */\r\n  static readonly GetRmodsSummaryPath = '/rmods/summary';\r\n\r\n  /**\r\n   * Get summary of all radio modules.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getRmodsSummary()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRmodsSummary$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<RmodsSummary>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetRmodsSummaryPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<RmodsSummary>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get summary of all radio modules.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getRmodsSummary$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRmodsSummary(params?: {\r\n\r\n  }): Observable<RmodsSummary> {\r\n\r\n    return this.getRmodsSummary$Response(params).pipe(\r\n      map((r: StrictHttpResponse<RmodsSummary>) => r.body as RmodsSummary)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation lockRmods\r\n   */\r\n  static readonly LockRmodsPath = '/rmods/operations/locks';\r\n\r\n  /**\r\n   * Trigger Rmods lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `lockRmods()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockRmods$Response(params: {\r\n  \r\n    /**\r\n     * Rmods instance IDs (RMOD_R MO IDs)\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.LockRmodsPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger Rmods lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `lockRmods$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockRmods(params: {\r\n  \r\n    /**\r\n     * Rmods instance IDs (RMOD_R MO IDs)\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.lockRmods$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation unlockRmods\r\n   */\r\n  static readonly UnlockRmodsPath = '/rmods/operations/unlocks';\r\n\r\n  /**\r\n   * Trigger Rmods unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `unlockRmods()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockRmods$Response(params: {\r\n  \r\n    /**\r\n     * Rmods instance IDs (RMOD_R MO IDs)\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.UnlockRmodsPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger Rmods unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `unlockRmods$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockRmods(params: {\r\n  \r\n    /**\r\n     * Rmods instance IDs (RMOD_R MO IDs)\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.unlockRmods$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getRmodsLock\r\n   */\r\n  static readonly GetRmodsLockPath = '/rmods/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Get Rmods lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getRmodsLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRmodsLock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetRmodsLockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get Rmods lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getRmodsLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRmodsLock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getRmodsLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteRmodsLock\r\n   */\r\n  static readonly DeleteRmodsLockPath = '/rmods/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Delete operation state of Rmods lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteRmodsLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteRmodsLock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteRmodsLockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete operation state of Rmods lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteRmodsLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteRmodsLock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteRmodsLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getRmodsUnlock\r\n   */\r\n  static readonly GetRmodsUnlockPath = '/rmods/operations/unlocks/{operationId}';\r\n\r\n  /**\r\n   * Get Rmods unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getRmodsUnlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRmodsUnlock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetRmodsUnlockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get Rmods unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getRmodsUnlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getRmodsUnlock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getRmodsUnlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteRmodsUnlock\r\n   */\r\n  static readonly DeleteRmodsUnlockPath = '/rmods/operations/unlocks/{operationId}';\r\n\r\n  /**\r\n   * Delete operation state of Rmods unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteRmodsUnlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteRmodsUnlock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteRmodsUnlockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete operation state of Rmods unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteRmodsUnlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteRmodsUnlock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteRmodsUnlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getDusDiff\r\n   */\r\n  static readonly GetDusDiffPath = '/dus/diff';\r\n\r\n  /**\r\n   * Get distributed units difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing DUs in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getDusDiff()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDusDiff$Response(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<StrictHttpResponse<DusDiff>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetDusDiffPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('oldRevision', params.oldRevision, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<DusDiff>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get distributed units difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing DUs in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getDusDiff$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDusDiff(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<DusDiff> {\r\n\r\n    return this.getDusDiff$Response(params).pipe(\r\n      map((r: StrictHttpResponse<DusDiff>) => r.body as DusDiff)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getDu\r\n   */\r\n  static readonly GetDuPath = '/dus/{duId}';\r\n\r\n  /**\r\n   * Get distributed unit state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getDu()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDu$Response(params: {\r\n\r\n    /**\r\n     * Distributed unit instance id.\r\n     */\r\n    duId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Du>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetDuPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('duId', params.duId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Du>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get distributed unit state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getDu$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDu(params: {\r\n\r\n    /**\r\n     * Distributed unit instance id.\r\n     */\r\n    duId: string;\r\n\r\n  }): Observable<Du> {\r\n\r\n    return this.getDu$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Du>) => r.body as Du)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getDusSummary\r\n   */\r\n  static readonly GetDusSummaryPath = '/dus/summary';\r\n\r\n  /**\r\n   * Get distributed units summary.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getDusSummary()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDusSummary$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<DusSummary>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetDusSummaryPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<DusSummary>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get distributed units summary.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getDusSummary$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDusSummary(params?: {\r\n\r\n  }): Observable<DusSummary> {\r\n\r\n    return this.getDusSummary$Response(params).pipe(\r\n      map((r: StrictHttpResponse<DusSummary>) => r.body as DusSummary)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation lockDus\r\n   */\r\n  static readonly LockDusPath = '/dus/operations/locks';\r\n\r\n  /**\r\n   * Trigger distributed units lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `lockDus()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockDus$Response(params: {\r\n  \r\n    /**\r\n     * DUs instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.LockDusPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger distributed units lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `lockDus$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockDus(params: {\r\n  \r\n    /**\r\n     * DUs instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.lockDus$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation unlockDus\r\n   */\r\n  static readonly UnlockDusPath = '/dus/operations/unlocks';\r\n\r\n  /**\r\n   * Trigger distributed units unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `unlockDus()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockDus$Response(params: {\r\n  \r\n    /**\r\n     * DUs instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.UnlockDusPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger distributed units unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `unlockDus$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockDus(params: {\r\n  \r\n    /**\r\n     * DUs instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.unlockDus$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getDusLock\r\n   */\r\n  static readonly GetDusLockPath = '/dus/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Get DUs lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getDusLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDusLock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetDusLockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get DUs lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getDusLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDusLock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getDusLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteDusLock\r\n   */\r\n  static readonly DeleteDusLockPath = '/dus/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Delete operation state of DUs lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteDusLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteDusLock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteDusLockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete operation state of DUs lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteDusLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteDusLock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteDusLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getDusUnlock\r\n   */\r\n  static readonly GetDusUnlockPath = '/dus/operations/unlocks/{operationId}';\r\n\r\n  /**\r\n   * Get DUs unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getDusUnlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDusUnlock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetDusUnlockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get DUs unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getDusUnlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDusUnlock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getDusUnlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteDusUnlock\r\n   */\r\n  static readonly DeleteDusUnlockPath = '/dus/operations/unlocks/{operationId}';\r\n\r\n  /**\r\n   * Delete operation state of DUs unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteDusUnlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteDusUnlock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteDusUnlockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete operation state of DUs unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteDusUnlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteDusUnlock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteDusUnlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCuCellsDiff\r\n   */\r\n  static readonly GetCuCellsDiffPath = '/cu-cells/diff';\r\n\r\n  /**\r\n   * Get CU cells difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing cells in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCuCellsDiff()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCuCellsDiff$Response(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<StrictHttpResponse<CuCellsDiff>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCuCellsDiffPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('oldRevision', params.oldRevision, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CuCellsDiff>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get CU cells difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing cells in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCuCellsDiff$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCuCellsDiff(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<CuCellsDiff> {\r\n\r\n    return this.getCuCellsDiff$Response(params).pipe(\r\n      map((r: StrictHttpResponse<CuCellsDiff>) => r.body as CuCellsDiff)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCuCell\r\n   */\r\n  static readonly GetCuCellPath = '/cu-cells/{cellId}';\r\n\r\n  /**\r\n   * Get CU cell state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCuCell()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCuCell$Response(params: {\r\n\r\n    /**\r\n     * CU Cell instance id.\r\n     */\r\n    cellId: CellId;\r\n\r\n  }): Observable<StrictHttpResponse<CuCell>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCuCellPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('cellId', params.cellId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CuCell>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get CU cell state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCuCell$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCuCell(params: {\r\n\r\n    /**\r\n     * CU Cell instance id.\r\n     */\r\n    cellId: CellId;\r\n\r\n  }): Observable<CuCell> {\r\n\r\n    return this.getCuCell$Response(params).pipe(\r\n      map((r: StrictHttpResponse<CuCell>) => r.body as CuCell)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCuCellsSummary\r\n   */\r\n  static readonly GetCuCellsSummaryPath = '/cu-cells/summary';\r\n\r\n  /**\r\n   * Get summary of all CU cells.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCuCellsSummary()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCuCellsSummary$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<CuCellsSummary>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCuCellsSummaryPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CuCellsSummary>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get summary of all CU cells.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCuCellsSummary$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCuCellsSummary(params?: {\r\n\r\n  }): Observable<CuCellsSummary> {\r\n\r\n    return this.getCuCellsSummary$Response(params).pipe(\r\n      map((r: StrictHttpResponse<CuCellsSummary>) => r.body as CuCellsSummary)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getVduCellsDiff\r\n   */\r\n  static readonly GetVduCellsDiffPath = '/vdu-cells/diff';\r\n\r\n  /**\r\n   * Get vDU cells difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing cells in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getVduCellsDiff()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVduCellsDiff$Response(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<StrictHttpResponse<VduCellsDiff>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetVduCellsDiffPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('oldRevision', params.oldRevision, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<VduCellsDiff>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get vDU cells difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing cells in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getVduCellsDiff$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVduCellsDiff(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<VduCellsDiff> {\r\n\r\n    return this.getVduCellsDiff$Response(params).pipe(\r\n      map((r: StrictHttpResponse<VduCellsDiff>) => r.body as VduCellsDiff)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getVduCell\r\n   */\r\n  static readonly GetVduCellPath = '/vdu-cells/{cellId}';\r\n\r\n  /**\r\n   * Get cell state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getVduCell()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVduCell$Response(params: {\r\n\r\n    /**\r\n     * vDU Cell instance id.\r\n     */\r\n    cellId: CellId;\r\n\r\n  }): Observable<StrictHttpResponse<VduCell>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetVduCellPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('cellId', params.cellId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<VduCell>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get cell state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getVduCell$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVduCell(params: {\r\n\r\n    /**\r\n     * vDU Cell instance id.\r\n     */\r\n    cellId: CellId;\r\n\r\n  }): Observable<VduCell> {\r\n\r\n    return this.getVduCell$Response(params).pipe(\r\n      map((r: StrictHttpResponse<VduCell>) => r.body as VduCell)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getVduCellsSummary\r\n   */\r\n  static readonly GetVduCellsSummaryPath = '/vdu-cells/summary';\r\n\r\n  /**\r\n   * Get summary of all vDU cells.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getVduCellsSummary()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVduCellsSummary$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<VduCellsSummary>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetVduCellsSummaryPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<VduCellsSummary>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get summary of all vDU cells.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getVduCellsSummary$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVduCellsSummary(params?: {\r\n\r\n  }): Observable<VduCellsSummary> {\r\n\r\n    return this.getVduCellsSummary$Response(params).pipe(\r\n      map((r: StrictHttpResponse<VduCellsSummary>) => r.body as VduCellsSummary)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation lockCells\r\n   */\r\n  static readonly LockCellsPath = '/cells/operations/locks';\r\n\r\n  /**\r\n   * Trigger CU or vDU Cells lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `lockCells()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockCells$Response(params: {\r\n  \r\n    /**\r\n     * CU or vDU Cells instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.LockCellsPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger CU or vDU Cells lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `lockCells$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockCells(params: {\r\n  \r\n    /**\r\n     * CU or vDU Cells instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.lockCells$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation unlockCells\r\n   */\r\n  static readonly UnlockCellsPath = '/cells/operations/unlocks';\r\n\r\n  /**\r\n   * Trigger CU or vDU Cells unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `unlockCells()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockCells$Response(params: {\r\n  \r\n    /**\r\n     * CU or vDU Cells instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.UnlockCellsPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger CU or vDU Cells unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `unlockCells$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockCells(params: {\r\n  \r\n    /**\r\n     * CU or vDU Cells instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.unlockCells$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCellsLock\r\n   */\r\n  static readonly GetCellsLockPath = '/cells/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Get CU or vDU Cells lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCellsLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellsLock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCellsLockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get CU or vDU Cells lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCellsLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellsLock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getCellsLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteCellsLock\r\n   */\r\n  static readonly DeleteCellsLockPath = '/cells/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Delete operation state of Cells lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteCellsLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteCellsLock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteCellsLockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete operation state of Cells lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteCellsLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteCellsLock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteCellsLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCellsUnlock\r\n   */\r\n  static readonly GetCellsUnlockPath = '/cells/operations/unlocks/{operationId}';\r\n\r\n  /**\r\n   * Get CU or vDU Cells unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCellsUnlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellsUnlock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCellsUnlockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get CU or vDU Cells unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCellsUnlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellsUnlock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getCellsUnlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteCellsUnlock\r\n   */\r\n  static readonly DeleteCellsUnlockPath = '/cells/operations/unlocks/{operationId}';\r\n\r\n  /**\r\n   * Delete operation state of Cells unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteCellsUnlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteCellsUnlock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteCellsUnlockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete operation state of Cells unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteCellsUnlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteCellsUnlock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteCellsUnlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation lockCellGroups\r\n   */\r\n  static readonly LockCellGroupsPath = '/cell-groups/operations/locks';\r\n\r\n  /**\r\n   * Trigger CU or vDU Cell Groups lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `lockCellGroups()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockCellGroups$Response(params: {\r\n  \r\n    /**\r\n     * CU or vDU Cell Groups IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.LockCellGroupsPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger CU or vDU Cell Groups lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `lockCellGroups$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockCellGroups(params: {\r\n  \r\n    /**\r\n     * CU or vDU Cell Groups IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.lockCellGroups$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation unlockCellGroups\r\n   */\r\n  static readonly UnlockCellGroupsPath = '/cell-groups/operations/unlocks';\r\n\r\n  /**\r\n   * Trigger CU or vDU Cell Groups unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `unlockCellGroups()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockCellGroups$Response(params: {\r\n  \r\n    /**\r\n     * CU or vDU Cell Groups IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.UnlockCellGroupsPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger CU or vDU Cell Groups unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `unlockCellGroups$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockCellGroups(params: {\r\n  \r\n    /**\r\n     * CU or vDU Cell Groups IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.unlockCellGroups$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCellGroupsLock\r\n   */\r\n  static readonly GetCellGroupsLockPath = '/cell-groups/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Get CU or vDU Cell Groups lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCellGroupsLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellGroupsLock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCellGroupsLockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get CU or vDU Cell Groups lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCellGroupsLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellGroupsLock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getCellGroupsLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteCellGroupsLock\r\n   */\r\n  static readonly DeleteCellGroupsLockPath = '/cell-groups/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Delete operation state of Cell Groups lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteCellGroupsLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteCellGroupsLock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteCellGroupsLockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete operation state of Cell Groups lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteCellGroupsLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteCellGroupsLock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteCellGroupsLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCellGroupsUnlock\r\n   */\r\n  static readonly GetCellGroupsUnlockPath = '/cell-groups/operations/unlocks/{operationId}';\r\n\r\n  /**\r\n   * Get CU or vDU Cell Groups unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCellGroupsUnlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellGroupsUnlock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCellGroupsUnlockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get CU or vDU Cell Groups unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCellGroupsUnlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellGroupsUnlock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getCellGroupsUnlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteCellGroupsUnlock\r\n   */\r\n  static readonly DeleteCellGroupsUnlockPath = '/cell-groups/operations/unlocks/{operationId}';\r\n\r\n  /**\r\n   * Delete operation state of Cell Groups unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteCellGroupsUnlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteCellGroupsUnlock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteCellGroupsUnlockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete operation state of Cell Groups unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteCellGroupsUnlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteCellGroupsUnlock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteCellGroupsUnlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation notifyObjectsChanged\r\n   */\r\n  static readonly NotifyObjectsChangedPath = '/status/changed-objects';\r\n\r\n  /**\r\n   * notify for objects change.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `notifyObjectsChanged()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyObjectsChanged$Response(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n  \r\n    /**\r\n     * changed objects\r\n     */\r\n    body: ObjectChangesNotification\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.NotifyObjectsChangedPath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Channel-ID', params['X-OAM-Channel-ID'], {});\r\n      rb.header('X-OAM-Resource-URI', params['X-OAM-Resource-URI'], {});\r\n      rb.header('X-OAM-Resource-State', params['X-OAM-Resource-State'], {});\r\n      rb.header('X-OAM-Message-Number', params['X-OAM-Message-Number'], {});\r\n      rb.header('X-OAM-Client-Label', params['X-OAM-Client-Label'], {});\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * notify for objects change.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `notifyObjectsChanged$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyObjectsChanged(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n  \r\n    /**\r\n     * changed objects\r\n     */\r\n    body: ObjectChangesNotification\r\n  }): Observable<void> {\r\n\r\n    return this.notifyObjectsChanged$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getVms\r\n   */\r\n  static readonly GetVmsPath = '/vms';\r\n\r\n  /**\r\n   * Get VMs states.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getVms()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  getVms$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<Vm>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetVmsPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<Vm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get VMs states.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getVms$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  getVms(params?: {\r\n\r\n  }): Observable<Array<Vm>> {\r\n\r\n    return this.getVms$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<Vm>>) => r.body as Array<Vm>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getVm\r\n   */\r\n  static readonly GetVmPath = '/vms/{vmId}';\r\n\r\n  /**\r\n   * Get VM state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getVm()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  getVm$Response(params: {\r\n\r\n    /**\r\n     * VM instance id.\r\n     */\r\n    vmId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Vm>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetVmPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('vmId', params.vmId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Vm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get VM state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getVm$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  getVm(params: {\r\n\r\n    /**\r\n     * VM instance id.\r\n     */\r\n    vmId: string;\r\n\r\n  }): Observable<Vm> {\r\n\r\n    return this.getVm$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Vm>) => r.body as Vm)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getVnfcs\r\n   */\r\n  static readonly GetVnfcsPath = '/vnfcs';\r\n\r\n  /**\r\n   * Get vnfcs states.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getVnfcs()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVnfcs$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<Vnfc>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetVnfcsPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<Vnfc>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get vnfcs states.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getVnfcs$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVnfcs(params?: {\r\n\r\n  }): Observable<Array<Vnfc>> {\r\n\r\n    return this.getVnfcs$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<Vnfc>>) => r.body as Array<Vnfc>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getPods\r\n   */\r\n  static readonly GetPodsPath = '/pods';\r\n\r\n  /**\r\n   * Get PODs statuses.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getPods()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  getPods$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<Pod>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetPodsPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<Pod>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get PODs statuses.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getPods$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  getPods(params?: {\r\n\r\n  }): Observable<Array<Pod>> {\r\n\r\n    return this.getPods$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<Pod>>) => r.body as Array<Pod>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getPod\r\n   */\r\n  static readonly GetPodPath = '/pods/{podId}';\r\n\r\n  /**\r\n   * Get POD status.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getPod()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  getPod$Response(params: {\r\n\r\n    /**\r\n     * POD id\r\n     */\r\n    podId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Pod>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetPodPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('podId', params.podId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Pod>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get POD status.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getPod$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  getPod(params: {\r\n\r\n    /**\r\n     * POD id\r\n     */\r\n    podId: string;\r\n\r\n  }): Observable<Pod> {\r\n\r\n    return this.getPod$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Pod>) => r.body as Pod)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getX2LinksDiff\r\n   */\r\n  static readonly GetX2LinksDiffPath = '/x2links/diff';\r\n\r\n  /**\r\n   * Get X2 links difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing X2 links in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getX2LinksDiff()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getX2LinksDiff$Response(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<StrictHttpResponse<X2LinksDiff>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetX2LinksDiffPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('oldRevision', params.oldRevision, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<X2LinksDiff>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get X2 links difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing X2 links in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getX2LinksDiff$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getX2LinksDiff(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<X2LinksDiff> {\r\n\r\n    return this.getX2LinksDiff$Response(params).pipe(\r\n      map((r: StrictHttpResponse<X2LinksDiff>) => r.body as X2LinksDiff)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getX2LinksSummary\r\n   */\r\n  static readonly GetX2LinksSummaryPath = '/x2links/summary';\r\n\r\n  /**\r\n   * Get X2 links summary.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getX2LinksSummary()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getX2LinksSummary$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<X2LinksSummary>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetX2LinksSummaryPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<X2LinksSummary>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get X2 links summary.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getX2LinksSummary$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getX2LinksSummary(params?: {\r\n\r\n  }): Observable<X2LinksSummary> {\r\n\r\n    return this.getX2LinksSummary$Response(params).pipe(\r\n      map((r: StrictHttpResponse<X2LinksSummary>) => r.body as X2LinksSummary)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation lockX2Link\r\n   */\r\n  static readonly LockX2LinkPath = '/x2links/{x2LinkId}/operations/locks';\r\n\r\n  /**\r\n   * Trigger X2 link lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `lockX2Link()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  lockX2Link$Response(params: {\r\n\r\n    /**\r\n     * X2 link instance Id\r\n     */\r\n    x2LinkId: string;\r\n\r\n  }): Observable<StrictHttpResponse<X2LinkLockUnLockResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.LockX2LinkPath, 'post');\r\n    if (params) {\r\n\r\n      rb.path('x2LinkId', params.x2LinkId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<X2LinkLockUnLockResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger X2 link lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `lockX2Link$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  lockX2Link(params: {\r\n\r\n    /**\r\n     * X2 link instance Id\r\n     */\r\n    x2LinkId: string;\r\n\r\n  }): Observable<X2LinkLockUnLockResponse> {\r\n\r\n    return this.lockX2Link$Response(params).pipe(\r\n      map((r: StrictHttpResponse<X2LinkLockUnLockResponse>) => r.body as X2LinkLockUnLockResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation unlockX2Link\r\n   */\r\n  static readonly UnlockX2LinkPath = '/x2links/{x2LinkId}/operations/unlocks';\r\n\r\n  /**\r\n   * Trigger X2 link unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `unlockX2Link()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  unlockX2Link$Response(params: {\r\n\r\n    /**\r\n     * X2 link instance Id\r\n     */\r\n    x2LinkId: string;\r\n\r\n  }): Observable<StrictHttpResponse<X2LinkLockUnLockResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.UnlockX2LinkPath, 'post');\r\n    if (params) {\r\n\r\n      rb.path('x2LinkId', params.x2LinkId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<X2LinkLockUnLockResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger X2 link unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `unlockX2Link$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  unlockX2Link(params: {\r\n\r\n    /**\r\n     * X2 link instance Id\r\n     */\r\n    x2LinkId: string;\r\n\r\n  }): Observable<X2LinkLockUnLockResponse> {\r\n\r\n    return this.unlockX2Link$Response(params).pipe(\r\n      map((r: StrictHttpResponse<X2LinkLockUnLockResponse>) => r.body as X2LinkLockUnLockResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getX2LinkLock\r\n   */\r\n  static readonly GetX2LinkLockPath = '/x2links/{x2LinkId}/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Get X2 link lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getX2LinkLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  getX2LinkLock$Response(params: {\r\n\r\n    /**\r\n     * X2 link instance Id\r\n     */\r\n    x2LinkId: string;\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<X2LinkLockUnLockResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetX2LinkLockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('x2LinkId', params.x2LinkId, {});\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<X2LinkLockUnLockResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get X2 link lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getX2LinkLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  getX2LinkLock(params: {\r\n\r\n    /**\r\n     * X2 link instance Id\r\n     */\r\n    x2LinkId: string;\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<X2LinkLockUnLockResponse> {\r\n\r\n    return this.getX2LinkLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<X2LinkLockUnLockResponse>) => r.body as X2LinkLockUnLockResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteX2LinkLock\r\n   */\r\n  static readonly DeleteX2LinkLockPath = '/x2links/{x2LinkId}/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Delete operation state of X2 link lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteX2LinkLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  deleteX2LinkLock$Response(params: {\r\n\r\n    /**\r\n     * X2 link instance Id\r\n     */\r\n    x2LinkId: string;\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteX2LinkLockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('x2LinkId', params.x2LinkId, {});\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete operation state of X2 link lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteX2LinkLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  deleteX2LinkLock(params: {\r\n\r\n    /**\r\n     * X2 link instance Id\r\n     */\r\n    x2LinkId: string;\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteX2LinkLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getX2LinkUnlock\r\n   */\r\n  static readonly GetX2LinkUnlockPath = '/x2links/{x2LinkId}/operations/unlocks/{operationId}';\r\n\r\n  /**\r\n   * Get X2 link unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getX2LinkUnlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  getX2LinkUnlock$Response(params: {\r\n\r\n    /**\r\n     * X2 link instance Id\r\n     */\r\n    x2LinkId: string;\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<X2LinkLockUnLockResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetX2LinkUnlockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('x2LinkId', params.x2LinkId, {});\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<X2LinkLockUnLockResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get X2 link unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getX2LinkUnlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  getX2LinkUnlock(params: {\r\n\r\n    /**\r\n     * X2 link instance Id\r\n     */\r\n    x2LinkId: string;\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<X2LinkLockUnLockResponse> {\r\n\r\n    return this.getX2LinkUnlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<X2LinkLockUnLockResponse>) => r.body as X2LinkLockUnLockResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteX2LinkUnlock\r\n   */\r\n  static readonly DeleteX2LinkUnlockPath = '/x2links/{x2LinkId}/operations/unlocks/{operationId}';\r\n\r\n  /**\r\n   * Delete operation state of X2 link unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteX2LinkUnlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  deleteX2LinkUnlock$Response(params: {\r\n\r\n    /**\r\n     * X2 link instance Id\r\n     */\r\n    x2LinkId: string;\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteX2LinkUnlockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('x2LinkId', params.x2LinkId, {});\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete operation state of X2 link unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteX2LinkUnlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   *\r\n   * @deprecated\r\n   */\r\n  deleteX2LinkUnlock(params: {\r\n\r\n    /**\r\n     * X2 link instance Id\r\n     */\r\n    x2LinkId: string;\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteX2LinkUnlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation lockX2Links\r\n   */\r\n  static readonly LockX2LinksPath = '/x2links/operations/locks';\r\n\r\n  /**\r\n   * Trigger X2 links lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `lockX2Links()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockX2Links$Response(params: {\r\n  \r\n    /**\r\n     * X2 links instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.LockX2LinksPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger X2 links lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `lockX2Links$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockX2Links(params: {\r\n  \r\n    /**\r\n     * X2 links instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.lockX2Links$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation unlockX2Links\r\n   */\r\n  static readonly UnlockX2LinksPath = '/x2links/operations/unlocks';\r\n\r\n  /**\r\n   * Trigger X2 links unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `unlockX2Links()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockX2Links$Response(params: {\r\n  \r\n    /**\r\n     * X2 links instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.UnlockX2LinksPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger X2 links unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `unlockX2Links$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockX2Links(params: {\r\n  \r\n    /**\r\n     * X2 links instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.unlockX2Links$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getX2LinksLock\r\n   */\r\n  static readonly GetX2LinksLockPath = '/x2links/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Get X2 links lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getX2LinksLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getX2LinksLock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetX2LinksLockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get X2 links lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getX2LinksLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getX2LinksLock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getX2LinksLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteX2LinksLock\r\n   */\r\n  static readonly DeleteX2LinksLockPath = '/x2links/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Delete operation state of X2 links lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteX2LinksLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteX2LinksLock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteX2LinksLockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete operation state of X2 links lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteX2LinksLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteX2LinksLock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteX2LinksLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getX2LinksUnlock\r\n   */\r\n  static readonly GetX2LinksUnlockPath = '/x2links/operations/unlocks/{operationId}';\r\n\r\n  /**\r\n   * Get X2 links unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getX2LinksUnlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getX2LinksUnlock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetX2LinksUnlockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get X2 links unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getX2LinksUnlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getX2LinksUnlock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getX2LinksUnlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteX2LinksUnlock\r\n   */\r\n  static readonly DeleteX2LinksUnlockPath = '/x2links/operations/unlocks/{operationId}';\r\n\r\n  /**\r\n   * Delete operation state of X2 links unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteX2LinksUnlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteX2LinksUnlock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteX2LinksUnlockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete operation state of X2 links unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteX2LinksUnlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteX2LinksUnlock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteX2LinksUnlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation lockXnLinks\r\n   */\r\n  static readonly LockXnLinksPath = '/xnlinks/operations/locks';\r\n\r\n  /**\r\n   * Trigger Xn links lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `lockXnLinks()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockXnLinks$Response(params: {\r\n  \r\n    /**\r\n     * (Only for vCU)Xn links instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.LockXnLinksPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger Xn links lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `lockXnLinks$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockXnLinks(params: {\r\n  \r\n    /**\r\n     * (Only for vCU)Xn links instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.lockXnLinks$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation unlockXnLinks\r\n   */\r\n  static readonly UnlockXnLinksPath = '/xnlinks/operations/unlocks';\r\n\r\n  /**\r\n   * Trigger Xn links unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `unlockXnLinks()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockXnLinks$Response(params: {\r\n  \r\n    /**\r\n     * (Only for vCU)Xn links instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.UnlockXnLinksPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger Xn links unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `unlockXnLinks$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockXnLinks(params: {\r\n  \r\n    /**\r\n     * (Only for vCU)Xn links instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.unlockXnLinks$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getOperationState\r\n   */\r\n  static readonly GetOperationStatePath = '/operations/{operationId}';\r\n\r\n  /**\r\n   * Get operation state.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getOperationState()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getOperationState$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n    /**\r\n     * Operation type\r\n     */\r\n    type: OperationType;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetOperationStatePath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n      rb.query('type', params.type, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get operation state.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getOperationState$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getOperationState(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n    /**\r\n     * Operation type\r\n     */\r\n    type: OperationType;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getOperationState$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteOperationState\r\n   */\r\n  static readonly DeleteOperationStatePath = '/operations/{operationId}';\r\n\r\n  /**\r\n   * Delete operation state.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteOperationState()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteOperationState$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n    /**\r\n     * Operation type\r\n     */\r\n    type: OperationType;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteOperationStatePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n      rb.query('type', params.type, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete operation state.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteOperationState$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteOperationState(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n    /**\r\n     * Operation type\r\n     */\r\n    type: OperationType;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteOperationState$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation lockNgLinks\r\n   */\r\n  static readonly LockNgLinksPath = '/nglinks/operations/locks';\r\n\r\n  /**\r\n   * Trigger Ng links lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `lockNgLinks()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockNgLinks$Response(params: {\r\n  \r\n    /**\r\n     * (Only for vCU)Ng links instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.LockNgLinksPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger Ng links lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `lockNgLinks$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockNgLinks(params: {\r\n  \r\n    /**\r\n     * (Only for vCU)Ng links instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.lockNgLinks$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation unlockNgLinks\r\n   */\r\n  static readonly UnlockNgLinksPath = '/nglinks/operations/unlocks';\r\n\r\n  /**\r\n   * Trigger Ng links unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `unlockNgLinks()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockNgLinks$Response(params: {\r\n  \r\n    /**\r\n     * (Only for vCU)Ng links instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.UnlockNgLinksPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger Ng links unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `unlockNgLinks$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockNgLinks(params: {\r\n  \r\n    /**\r\n     * (Only for vCU)Ng links instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.unlockNgLinks$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation lockNetworkSlicing\r\n   */\r\n  static readonly LockNetworkSlicingPath = '/network-slicing/operations/locks';\r\n\r\n  /**\r\n   * Trigger network slicing lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `lockNetworkSlicing()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockNetworkSlicing$Response(params: {\r\n  \r\n    /**\r\n     * network slicing instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.LockNetworkSlicingPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger network slicing lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `lockNetworkSlicing$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  lockNetworkSlicing(params: {\r\n  \r\n    /**\r\n     * network slicing instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.lockNetworkSlicing$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation unlockNetworkSlicing\r\n   */\r\n  static readonly UnlockNetworkSlicingPath = '/network-slicing/operations/unlocks';\r\n\r\n  /**\r\n   * Trigger network slicing unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `unlockNetworkSlicing()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockNetworkSlicing$Response(params: {\r\n  \r\n    /**\r\n     * network slicing instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.UnlockNetworkSlicingPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger network slicing unlock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `unlockNetworkSlicing$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unlockNetworkSlicing(params: {\r\n  \r\n    /**\r\n     * network slicing instance IDs\r\n     */\r\n    body: ResourceIdsRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.unlockNetworkSlicing$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getXnLinksDiff\r\n   */\r\n  static readonly GetXnLinksDiffPath = '/xnlinks/diff';\r\n\r\n  /**\r\n   * Get Xn links difference since last revision.\r\n   *\r\n   * (Only support vCU)During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing Xn links in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getXnLinksDiff()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getXnLinksDiff$Response(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<StrictHttpResponse<XnLinksDiff>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetXnLinksDiffPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('oldRevision', params.oldRevision, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<XnLinksDiff>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get Xn links difference since last revision.\r\n   *\r\n   * (Only support vCU)During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing Xn links in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getXnLinksDiff$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getXnLinksDiff(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<XnLinksDiff> {\r\n\r\n    return this.getXnLinksDiff$Response(params).pipe(\r\n      map((r: StrictHttpResponse<XnLinksDiff>) => r.body as XnLinksDiff)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getXnLinksSummary\r\n   */\r\n  static readonly GetXnLinksSummaryPath = '/xnlinks/summary';\r\n\r\n  /**\r\n   * Get Xn links summary.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getXnLinksSummary()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getXnLinksSummary$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<XnLinksSummary>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetXnLinksSummaryPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<XnLinksSummary>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get Xn links summary.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getXnLinksSummary$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getXnLinksSummary(params?: {\r\n\r\n  }): Observable<XnLinksSummary> {\r\n\r\n    return this.getXnLinksSummary$Response(params).pipe(\r\n      map((r: StrictHttpResponse<XnLinksSummary>) => r.body as XnLinksSummary)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getNgLinksDiff\r\n   */\r\n  static readonly GetNgLinksDiffPath = '/nglinks/diff';\r\n\r\n  /**\r\n   * Get Ng links difference since last revision.\r\n   *\r\n   * (Only support vCU)During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing Ng links in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getNgLinksDiff()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getNgLinksDiff$Response(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<StrictHttpResponse<NgLinksDiff>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetNgLinksDiffPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('oldRevision', params.oldRevision, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<NgLinksDiff>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get Ng links difference since last revision.\r\n   *\r\n   * (Only support vCU)During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing Ng links in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getNgLinksDiff$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getNgLinksDiff(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<NgLinksDiff> {\r\n\r\n    return this.getNgLinksDiff$Response(params).pipe(\r\n      map((r: StrictHttpResponse<NgLinksDiff>) => r.body as NgLinksDiff)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getNgLinksSummary\r\n   */\r\n  static readonly GetNgLinksSummaryPath = '/nglinks/summary';\r\n\r\n  /**\r\n   * Get Ng links summary.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getNgLinksSummary()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getNgLinksSummary$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<NgLinksSummary>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetNgLinksSummaryPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<NgLinksSummary>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get Ng links summary.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getNgLinksSummary$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getNgLinksSummary(params?: {\r\n\r\n  }): Observable<NgLinksSummary> {\r\n\r\n    return this.getNgLinksSummary$Response(params).pipe(\r\n      map((r: StrictHttpResponse<NgLinksSummary>) => r.body as NgLinksSummary)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getNetworkSlicingDiff\r\n   */\r\n  static readonly GetNetworkSlicingDiffPath = '/network-slicing/diff';\r\n\r\n  /**\r\n   * Get network slicing difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing Network slicing in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getNetworkSlicingDiff()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getNetworkSlicingDiff$Response(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<StrictHttpResponse<NetworkSlicingDiff>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetNetworkSlicingDiffPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('oldRevision', params.oldRevision, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<NetworkSlicingDiff>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get network slicing difference since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing Network slicing in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getNetworkSlicingDiff$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getNetworkSlicingDiff(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<NetworkSlicingDiff> {\r\n\r\n    return this.getNetworkSlicingDiff$Response(params).pipe(\r\n      map((r: StrictHttpResponse<NetworkSlicingDiff>) => r.body as NetworkSlicingDiff)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getNetworkSlicingSummary\r\n   */\r\n  static readonly GetNetworkSlicingSummaryPath = '/network-slicing/summary';\r\n\r\n  /**\r\n   * Get network slicing summary.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getNetworkSlicingSummary()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getNetworkSlicingSummary$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<NetworkSlicingSummary>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetNetworkSlicingSummaryPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<NetworkSlicingSummary>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get network slicing summary.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getNetworkSlicingSummary$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getNetworkSlicingSummary(params?: {\r\n\r\n  }): Observable<NetworkSlicingSummary> {\r\n\r\n    return this.getNetworkSlicingSummary$Response(params).pipe(\r\n      map((r: StrictHttpResponse<NetworkSlicingSummary>) => r.body as NetworkSlicingSummary)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getSfPsDiff\r\n   */\r\n  static readonly GetSfPsDiffPath = '/sfps/diff';\r\n\r\n  /**\r\n   * Get link diagnostic information from SFP connectors since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing SFP connectors in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getSfPsDiff()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getSfPsDiff$Response(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<StrictHttpResponse<SfPsDiff>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetSfPsDiffPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('oldRevision', params.oldRevision, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<SfPsDiff>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get link diagnostic information from SFP connectors since last revision.\r\n   *\r\n   * During first execution client does not provide oldRevision parameter, server responds with filled revision and all existing SFP connectors in 'created' array. Next executions are triggered periodically with set oldRevision query parameter and server responds with changes since oldRevision. If particular revision is not found by server, client will execute another request without oldRevision like the first time.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getSfPsDiff$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getSfPsDiff(params?: {\r\n    oldRevision?: string;\r\n\r\n  }): Observable<SfPsDiff> {\r\n\r\n    return this.getSfPsDiff$Response(params).pipe(\r\n      map((r: StrictHttpResponse<SfPsDiff>) => r.body as SfPsDiff)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getVnf\r\n   */\r\n  static readonly GetVnfPath = '/georedundancy/vnf';\r\n\r\n  /**\r\n   * Get gNB vCU VNF data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getVnf()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVnf$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Vnf>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetVnfPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Vnf>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get gNB vCU VNF data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getVnf$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVnf(params?: {\r\n\r\n  }): Observable<Vnf> {\r\n\r\n    return this.getVnf$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Vnf>) => r.body as Vnf)\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Global configuration\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ApiConfiguration {\r\n  rootUrl: string = '';\r\n}\r\n\r\n/**\r\n * Parameters for `CuCmClientModule.forRoot()`\r\n */\r\nexport interface ApiConfigurationParams {\r\n  rootUrl?: string;\r\n}\r\n","/* tslint:disable */\nexport enum ClientType {\n  Em = 'em',\n  Nms = 'nms',\n  Internal = 'internal'\n}\n","/* tslint:disable */\r\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\r\n\r\n/**\r\n * Custom parameter codec to correctly handle the plus sign in parameter\r\n * values. See https://github.com/angular/angular/issues/18261\r\n */\r\nclass ParameterCodec implements HttpParameterCodec {\r\n  encodeKey(key: string): string {\r\n    return encodeURIComponent(key);\r\n  }\r\n\r\n  encodeValue(value: string): string {\r\n    return encodeURIComponent(value);\r\n  }\r\n\r\n  decodeKey(key: string): string {\r\n    return decodeURIComponent(key);\r\n  }\r\n\r\n  decodeValue(value: string): string {\r\n    return decodeURIComponent(value);\r\n  }\r\n}\r\nconst ParameterCodecInstance = new ParameterCodec();\r\n\r\n/**\r\n * Helper to build http requests from parameters\r\n */\r\nexport class RequestBuilder {\r\n\r\n  private _path = new Map<string, any>();\r\n  private _query = new Map<string, any>();\r\n  private _header = new Map<string, any>();\r\n  _bodyContent: any | null;\r\n  _bodyContentType?: string;\r\n\r\n  constructor(\r\n    public rootUrl: string,\r\n    public operationPath: string,\r\n    public method: string) {\r\n  }\r\n\r\n  /**\r\n   * Sets a path parameter\r\n   */\r\n  path(name: string, value: any): void {\r\n    if (value !== null && value !== undefined) {\r\n      this._path.set(name, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a query parameter\r\n   */\r\n  query(name: string, value: any): void {\r\n    if (value !== null && value !== undefined) {\r\n      this._query.set(name, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a header parameter\r\n   */\r\n  header(name: string, value: any): void {\r\n    if (value !== null && value !== undefined) {\r\n      this._header.set(name, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the body content, along with the content type\r\n   */\r\n  body(value: any, contentType = 'application/json'): void {\r\n    if (value instanceof Blob) {\r\n      this._bodyContentType = value.type;\r\n    } else {\r\n      this._bodyContentType = contentType;\r\n    }\r\n    if ((this._bodyContentType || '').startsWith('multipart/form-data')) {\r\n      // Handle multipart form data\r\n      const formData = new FormData();\r\n      if (value != null) {\r\n        for (const key of Object.keys(value)) {\r\n          const val = value[key]\r\n          if (val instanceof Array) {\r\n            for (const v of val) {\r\n              const toAppend = this.formDataValue(v);\r\n              if (toAppend !== null) {\r\n                formData.append(key, toAppend);\r\n              }\r\n            }\r\n          } else {\r\n            const toAppend = this.formDataValue(val);\r\n            if (toAppend !== null) {\r\n              formData.set(key, toAppend);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this._bodyContent = formData;\r\n    } else {\r\n      // The body is the plain content\r\n      this._bodyContent = value;\r\n    }\r\n  }\r\n\r\n  private formDataValue(value: any): any {\r\n    if (value === null || value === undefined) {\r\n      return null;\r\n    }\r\n    if (value instanceof Blob) {\r\n      return value;\r\n    }\r\n    if (typeof value === 'object') {\r\n      return new Blob([JSON.stringify(value)], { type: 'application/json' });\r\n    }\r\n    return new Blob([String(value)], { type: 'text/plain' });\r\n  }\r\n\r\n  /**\r\n   * Builds the request with the current set parameters\r\n   */\r\n  build<T=any>(options?: {\r\n    /** Which content types to accept */\r\n    accept?: string;\r\n\r\n    /** The expected response type */\r\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\r\n\r\n    /** Whether to report progress on uploads / downloads */\r\n    reportProgress?: boolean;\r\n  }): HttpRequest<T> {\r\n\r\n    options = options || {};\r\n\r\n    // Path parameters\r\n    let path = this.operationPath;\r\n    for (const param of Array.from(this._path.keys())) {\r\n      path = path.replace(`{${param}}`, (this._path.get(param) || '').toString());\r\n    }\r\n    const url = this.rootUrl + path;\r\n\r\n    // Query parameters\r\n    let httpParams = new HttpParams({\r\n      encoder: ParameterCodecInstance\r\n    });\r\n    for (const param of Array.from(this._query.keys())) {\r\n      const value = this._query.get(param);\r\n      if (value instanceof Array) {\r\n        for (const item of value) {\r\n          httpParams = httpParams.append(param, (item !== undefined && item !== null ? item : '').toString());\r\n        }\r\n      } else {\r\n        httpParams = httpParams.set(param, (value !== undefined && value !== null ? value : '').toString());\r\n      }\r\n    }\r\n\r\n    // Header parameters\r\n    let httpHeaders = new HttpHeaders();\r\n    if (options.accept) {\r\n      httpHeaders = httpHeaders.append('Accept', options.accept);\r\n    }\r\n    for (const param of Array.from(this._header.keys())) {\r\n      const value = this._header.get(param);\r\n      if (value instanceof Array) {\r\n        for (const item of value) {\r\n          httpHeaders = httpHeaders.append(param, (item !== undefined && item !== null ? item : '').toString());\r\n        }\r\n      } else {\r\n        httpHeaders = httpHeaders.set(param, (value !== undefined && value !== null ? value : '').toString());\r\n      }\r\n    }\r\n\r\n    // Request content headers\r\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\r\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\r\n    }\r\n\r\n    // Perform the request\r\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\r\n      params: httpParams,\r\n      headers: httpHeaders,\r\n      responseType: options.responseType,\r\n      reportProgress: options.reportProgress\r\n    });\r\n  }\r\n}\r\n\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { ActivationResponse } from '../models/activation-response';\r\nimport { ActivationResponseCollection } from '../models/activation-response-collection';\r\nimport { ActivatorRole } from '../models/activator-role';\r\nimport { BasicPlanInfo } from '../models/basic-plan-info';\r\nimport { Channel } from '../models/channel';\r\nimport { ClientType } from '../models/client-type';\r\nimport { ConfigFilesCu } from '../models/config-files-cu';\r\nimport { CreateChannelResponse } from '../models/create-channel-response';\r\nimport { CreateResultResponse } from '../models/create-result-response';\r\nimport { CurrentPlan } from '../models/current-plan';\r\nimport { CurrentPlanResponse } from '../models/current-plan-response';\r\nimport { DownloadPlanResponse } from '../models/download-plan-response';\r\nimport { GroupedValidationResult } from '../models/grouped-validation-result';\r\nimport { Heartbeat } from '../models/heartbeat';\r\nimport { ImpactDeduction } from '../models/impact-deduction';\r\nimport { ImpactDeductionResult } from '../models/impact-deduction-result';\r\nimport { InactivePlan } from '../models/inactive-plan';\r\nimport { InterfaceCu } from '../models/interface-cu';\r\nimport { Link } from '../models/link';\r\nimport { ManagedObjectChanges } from '../models/managed-object-changes';\r\nimport { ObjectChanges } from '../models/object-changes';\r\nimport { Operation } from '../models/operation';\r\nimport { OperationRequest } from '../models/operation-request';\r\nimport { OperationResponse } from '../models/operation-response';\r\nimport { OperationResult } from '../models/operation-result';\r\nimport { Plan } from '../models/plan';\r\nimport { PlanChanges } from '../models/plan-changes';\r\nimport { PlanRequest } from '../models/plan-request';\r\nimport { UpdateChannelRequest } from '../models/update-channel-request';\r\nimport { UploadRequest } from '../models/upload-request';\r\nimport { VmCu } from '../models/vm-cu';\r\nimport { VmR } from '../models/vm-r';\r\nimport { WatchRequest } from '../models/watch-request';\r\nimport { WatchResponse } from '../models/watch-response';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CmService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getPlanIds\r\n   */\r\n  static readonly GetPlanIdsPath = '/v2/plans';\r\n\r\n  /**\r\n   * consumer - **external** `WebEM`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getPlanIds()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getPlanIds$Response(params?: {\r\n\r\n    /**\r\n     * Plan status\r\n     */\r\n    status?: Array<'downloaded' | 'validated' | 'activating' | 'activated'>;\r\n\r\n  }): Observable<StrictHttpResponse<Array<InactivePlan>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetPlanIdsPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('status', params.status);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<InactivePlan>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **external** `WebEM`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getPlanIds$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getPlanIds(params?: {\r\n\r\n    /**\r\n     * Plan status\r\n     */\r\n    status?: Array<'downloaded' | 'validated' | 'activating' | 'activated'>;\r\n\r\n  }): Observable<Array<InactivePlan>> {\r\n\r\n    return this.getPlanIds$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<InactivePlan>>) => r.body as Array<InactivePlan>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation downloadPlanFile\r\n   */\r\n  static readonly DownloadPlanFilePath = '/v2/plans';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `downloadPlanFile()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  downloadPlanFile$Response(params: {\r\n\r\n    /**\r\n     * When upload or fetch current plan, if this is set as &#x60;nms&#x60; or &#x60;em&#x60;, parameters and mos which are hidden or cannot be uploaded to corresponding interface will be filtered.\r\n     */\r\n    xOamClientType: ClientType;\r\n\r\n    body: PlanRequest\r\n  }): Observable<StrictHttpResponse<DownloadPlanResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.DownloadPlanFilePath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Client-Type', params.xOamClientType);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<DownloadPlanResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `downloadPlanFile$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  downloadPlanFile(params: {\r\n\r\n    /**\r\n     * When upload or fetch current plan, if this is set as &#x60;nms&#x60; or &#x60;em&#x60;, parameters and mos which are hidden or cannot be uploaded to corresponding interface will be filtered.\r\n     */\r\n    xOamClientType: ClientType;\r\n\r\n    body: PlanRequest\r\n  }): Observable<DownloadPlanResponse> {\r\n\r\n    return this.downloadPlanFile$Response(params).pipe(\r\n      map((r: StrictHttpResponse<DownloadPlanResponse>) => r.body as DownloadPlanResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation fetchPlan\r\n   */\r\n  static readonly FetchPlanPath = '/v2/plans/{planId}';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-CP/UP` and other services\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `fetchPlan()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  fetchPlan$Response(params: {\r\n    planId: string;\r\n\r\n    /**\r\n     * objects matching given className. Can be used together with &#x60;ancestorDistName&#x60;.\r\n     */\r\n    className?: Array<string>;\r\n\r\n    /**\r\n     * object belong to given ancestor subtree. Can be used together with &#x60;className&#x60; and &#x60;step&#x60;.\r\n     */\r\n    ancestorDistName?: string;\r\n\r\n    /**\r\n     * ancestor subtree step, must be used together with &#x60;ancestorDistName&#x60;, cannot be used alone with &#x60;className&#x60;. For example &#x27;step&#x3D;3&amp;ancestorDistName&#x3D;AAA-1&#x27;, only depth before &#x27;AAA-1/BBB-1/CCC-1/DDD-1&#x27; will be fetched, &#x27;AAA-1/BBB-1/CCC-1/DDD-1/FFF-1&#x27; will not be fetched. step&#x3D;0 means only fetch current distName content. If step is not provided, the full subtree of &#x60;ancestorDistName&#x60; will be fetched.\r\n     */\r\n    step?: number;\r\n\r\n  }): Observable<StrictHttpResponse<PlanChanges>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.FetchPlanPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.query('className', params.className);\r\n      rb.query('ancestorDistName', params.ancestorDistName);\r\n      rb.query('step', params.step);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<PlanChanges>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-CP/UP` and other services\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `fetchPlan$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  fetchPlan(params: {\r\n    planId: string;\r\n\r\n    /**\r\n     * objects matching given className. Can be used together with &#x60;ancestorDistName&#x60;.\r\n     */\r\n    className?: Array<string>;\r\n\r\n    /**\r\n     * object belong to given ancestor subtree. Can be used together with &#x60;className&#x60; and &#x60;step&#x60;.\r\n     */\r\n    ancestorDistName?: string;\r\n\r\n    /**\r\n     * ancestor subtree step, must be used together with &#x60;ancestorDistName&#x60;, cannot be used alone with &#x60;className&#x60;. For example &#x27;step&#x3D;3&amp;ancestorDistName&#x3D;AAA-1&#x27;, only depth before &#x27;AAA-1/BBB-1/CCC-1/DDD-1&#x27; will be fetched, &#x27;AAA-1/BBB-1/CCC-1/DDD-1/FFF-1&#x27; will not be fetched. step&#x3D;0 means only fetch current distName content. If step is not provided, the full subtree of &#x60;ancestorDistName&#x60; will be fetched.\r\n     */\r\n    step?: number;\r\n\r\n  }): Observable<PlanChanges> {\r\n\r\n    return this.fetchPlan$Response(params).pipe(\r\n      map((r: StrictHttpResponse<PlanChanges>) => r.body as PlanChanges)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deletePlan\r\n   */\r\n  static readonly DeletePlanPath = '/v2/plans/{planId}';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deletePlan()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  deletePlan$Response(params: {\r\n    planId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.DeletePlanPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deletePlan$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  deletePlan(params: {\r\n    planId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deletePlan$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCurrentPlanObjects\r\n   */\r\n  static readonly GetCurrentPlanObjectsPath = '/v2/current-plan';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `OAM-CP/UP` and other services, `NE3SAgent`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCurrentPlanObjects()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getCurrentPlanObjects$Response(params: {\r\n\r\n    /**\r\n     * Operation timeout in seconds\r\n     */\r\n    xOamOperationTimeout?: number;\r\n\r\n    /**\r\n     * When upload or fetch current plan, if this is set as &#x60;nms&#x60; or &#x60;em&#x60;, parameters and mos which are hidden or cannot be uploaded to corresponding interface will be filtered.\r\n     */\r\n    xOamClientType: ClientType;\r\n\r\n    /**\r\n     * Comma separated channel id lists.\r\n     * CM will suspend current plan notifications of the given channels after recieving GET /current-plan request.\r\n     * The suspended notifications will be sent after GET /current-plan response is sent.\r\n     */\r\n    xOamChannelIDs?: Array<string>;\r\n\r\n    /**\r\n     * objects matching given className. Can be used together with &#x60;ancestorDistName&#x60;.\r\n     */\r\n    className?: Array<string>;\r\n\r\n    /**\r\n     * object belong to given ancestor subtree. Can be used together with &#x60;className&#x60; and &#x60;step&#x60;.\r\n     */\r\n    ancestorDistName?: string;\r\n\r\n    /**\r\n     * ancestor subtree step, must be used together with &#x60;ancestorDistName&#x60;, cannot be used alone with &#x60;className&#x60;. For example &#x27;step&#x3D;3&amp;ancestorDistName&#x3D;AAA-1&#x27;, only depth before &#x27;AAA-1/BBB-1/CCC-1/DDD-1&#x27; will be fetched, &#x27;AAA-1/BBB-1/CCC-1/DDD-1/FFF-1&#x27; will not be fetched. step&#x3D;0 means only fetch current distName content. If step is not provided, the full subtree of &#x60;ancestorDistName&#x60; will be fetched.\r\n     */\r\n    step?: number;\r\n\r\n  }): Observable<StrictHttpResponse<CurrentPlanResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetCurrentPlanObjectsPath, 'get');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Operation-Timeout', params.xOamOperationTimeout);\r\n      rb.header('X-OAM-Client-Type', params.xOamClientType);\r\n      rb.header('X-OAM-Channel-IDs', params.xOamChannelIDs);\r\n      rb.query('className', params.className);\r\n      rb.query('ancestorDistName', params.ancestorDistName);\r\n      rb.query('step', params.step);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CurrentPlanResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `OAM-CP/UP` and other services, `NE3SAgent`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCurrentPlanObjects$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getCurrentPlanObjects(params: {\r\n\r\n    /**\r\n     * Operation timeout in seconds\r\n     */\r\n    xOamOperationTimeout?: number;\r\n\r\n    /**\r\n     * When upload or fetch current plan, if this is set as &#x60;nms&#x60; or &#x60;em&#x60;, parameters and mos which are hidden or cannot be uploaded to corresponding interface will be filtered.\r\n     */\r\n    xOamClientType: ClientType;\r\n\r\n    /**\r\n     * Comma separated channel id lists.\r\n     * CM will suspend current plan notifications of the given channels after recieving GET /current-plan request.\r\n     * The suspended notifications will be sent after GET /current-plan response is sent.\r\n     */\r\n    xOamChannelIDs?: Array<string>;\r\n\r\n    /**\r\n     * objects matching given className. Can be used together with &#x60;ancestorDistName&#x60;.\r\n     */\r\n    className?: Array<string>;\r\n\r\n    /**\r\n     * object belong to given ancestor subtree. Can be used together with &#x60;className&#x60; and &#x60;step&#x60;.\r\n     */\r\n    ancestorDistName?: string;\r\n\r\n    /**\r\n     * ancestor subtree step, must be used together with &#x60;ancestorDistName&#x60;, cannot be used alone with &#x60;className&#x60;. For example &#x27;step&#x3D;3&amp;ancestorDistName&#x3D;AAA-1&#x27;, only depth before &#x27;AAA-1/BBB-1/CCC-1/DDD-1&#x27; will be fetched, &#x27;AAA-1/BBB-1/CCC-1/DDD-1/FFF-1&#x27; will not be fetched. step&#x3D;0 means only fetch current distName content. If step is not provided, the full subtree of &#x60;ancestorDistName&#x60; will be fetched.\r\n     */\r\n    step?: number;\r\n\r\n  }): Observable<CurrentPlanResponse> {\r\n\r\n    return this.getCurrentPlanObjects$Response(params).pipe(\r\n      map((r: StrictHttpResponse<CurrentPlanResponse>) => r.body as CurrentPlanResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation updateCurrentPlanObjects\r\n   */\r\n  static readonly UpdateCurrentPlanObjectsPath = '/v2/current-plan';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-CP/UP` and other services\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateCurrentPlanObjects()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  updateCurrentPlanObjects$Response(params: {\r\n\r\n    /**\r\n     * Indicate the client role who sends the request\r\n     */\r\n    xOamActivatorRole: ActivatorRole;\r\n\r\n  \r\n  /**\r\n   * changed objects to current plan\r\n   */\r\n  body: ObjectChanges\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.UpdateCurrentPlanObjectsPath, 'patch');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Activator-Role', params.xOamActivatorRole);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-CP/UP` and other services\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `updateCurrentPlanObjects$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  updateCurrentPlanObjects(params: {\r\n\r\n    /**\r\n     * Indicate the client role who sends the request\r\n     */\r\n    xOamActivatorRole: ActivatorRole;\r\n\r\n  \r\n  /**\r\n   * changed objects to current plan\r\n   */\r\n  body: ObjectChanges\r\n  }): Observable<void> {\r\n\r\n    return this.updateCurrentPlanObjects$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation startUpload\r\n   */\r\n  static readonly StartUploadPath = '/v2/current-plan/operations/uploads';\r\n\r\n  /**\r\n   * consumer - **external** `WebEM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `startUpload()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  startUpload$Response(params: {\r\n\r\n    /**\r\n     * Operation timeout in seconds\r\n     */\r\n    xOamOperationTimeout?: number;\r\n\r\n    /**\r\n     * When upload or fetch current plan, if this is set as &#x60;nms&#x60; or &#x60;em&#x60;, parameters and mos which are hidden or cannot be uploaded to corresponding interface will be filtered.\r\n     */\r\n    xOamClientType: ClientType;\r\n\r\n    body?: UploadRequest\r\n  }): Observable<StrictHttpResponse<OperationResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.StartUploadPath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Operation-Timeout', params.xOamOperationTimeout);\r\n      rb.header('X-OAM-Client-Type', params.xOamClientType);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<OperationResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **external** `WebEM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `startUpload$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  startUpload(params: {\r\n\r\n    /**\r\n     * Operation timeout in seconds\r\n     */\r\n    xOamOperationTimeout?: number;\r\n\r\n    /**\r\n     * When upload or fetch current plan, if this is set as &#x60;nms&#x60; or &#x60;em&#x60;, parameters and mos which are hidden or cannot be uploaded to corresponding interface will be filtered.\r\n     */\r\n    xOamClientType: ClientType;\r\n\r\n    body?: UploadRequest\r\n  }): Observable<OperationResponse> {\r\n\r\n    return this.startUpload$Response(params).pipe(\r\n      map((r: StrictHttpResponse<OperationResponse>) => r.body as OperationResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getUpload\r\n   */\r\n  static readonly GetUploadPath = '/v2/current-plan/operations/uploads/{operationId}';\r\n\r\n  /**\r\n   * consumer - **external** `WebEM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getUpload()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getUpload$Response(params: {\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<OperationResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetUploadPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<OperationResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **external** `WebEM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getUpload$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getUpload(params: {\r\n    operationId: string;\r\n\r\n  }): Observable<OperationResponse> {\r\n\r\n    return this.getUpload$Response(params).pipe(\r\n      map((r: StrictHttpResponse<OperationResponse>) => r.body as OperationResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteUpload\r\n   */\r\n  static readonly DeleteUploadPath = '/v2/current-plan/operations/uploads/{operationId}';\r\n\r\n  /**\r\n   * consumer - **external** `WebEM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteUpload()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  deleteUpload$Response(params: {\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.DeleteUploadPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **external** `WebEM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteUpload$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  deleteUpload(params: {\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteUpload$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getUploadFile\r\n   */\r\n  static readonly GetUploadFilePath = '/v2/current-plan/operations/uploads/{operationId}/file';\r\n\r\n  /**\r\n   * consumer - **external** `WebEM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getUploadFile()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getUploadFile$Response(params: {\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Blob>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetUploadFilePath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'blob',\r\n      accept: 'application/xml'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Blob>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **external** `WebEM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getUploadFile$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getUploadFile(params: {\r\n    operationId: string;\r\n\r\n  }): Observable<Blob> {\r\n\r\n    return this.getUploadFile$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Blob>) => r.body as Blob)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation startValidation\r\n   */\r\n  static readonly StartValidationPath = '/v2/plans/{planId}/operations/validations';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `startValidation()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  startValidation$Response(params: {\r\n\r\n    /**\r\n     * Operation timeout in seconds\r\n     */\r\n    xOamOperationTimeout?: number;\r\n\r\n    /**\r\n     * When upload or fetch current plan, if this is set as &#x60;nms&#x60; or &#x60;em&#x60;, parameters and mos which are hidden or cannot be uploaded to corresponding interface will be filtered.\r\n     */\r\n    xOamClientType: ClientType;\r\n    planId: string;\r\n\r\n    /**\r\n     * Only for &#x60;OAM-ASM&#x60; to trigger a tool validation without concurrecy check, default:false\r\n     */\r\n    toolValidation?: boolean;\r\n\r\n    body?: OperationRequest\r\n  }): Observable<StrictHttpResponse<OperationResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.StartValidationPath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Operation-Timeout', params.xOamOperationTimeout);\r\n      rb.header('X-OAM-Client-Type', params.xOamClientType);\r\n      rb.path('planId', params.planId);\r\n      rb.query('toolValidation', params.toolValidation);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<OperationResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `startValidation$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  startValidation(params: {\r\n\r\n    /**\r\n     * Operation timeout in seconds\r\n     */\r\n    xOamOperationTimeout?: number;\r\n\r\n    /**\r\n     * When upload or fetch current plan, if this is set as &#x60;nms&#x60; or &#x60;em&#x60;, parameters and mos which are hidden or cannot be uploaded to corresponding interface will be filtered.\r\n     */\r\n    xOamClientType: ClientType;\r\n    planId: string;\r\n\r\n    /**\r\n     * Only for &#x60;OAM-ASM&#x60; to trigger a tool validation without concurrecy check, default:false\r\n     */\r\n    toolValidation?: boolean;\r\n\r\n    body?: OperationRequest\r\n  }): Observable<OperationResponse> {\r\n\r\n    return this.startValidation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<OperationResponse>) => r.body as OperationResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getValidation\r\n   */\r\n  static readonly GetValidationPath = '/v2/plans/{planId}/operations/validations/{operationId}';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getValidation()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getValidation$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<OperationResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetValidationPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<OperationResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getValidation$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getValidation(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<OperationResponse> {\r\n\r\n    return this.getValidation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<OperationResponse>) => r.body as OperationResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteValidation\r\n   */\r\n  static readonly DeleteValidationPath = '/v2/plans/{planId}/operations/validations/{operationId}';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`, **external** `WebEM`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteValidation()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  deleteValidation$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.DeleteValidationPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`, **external** `WebEM`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteValidation$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  deleteValidation(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteValidation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getValidationResult\r\n   */\r\n  static readonly GetValidationResultPath = '/v2/plans/{planId}/operations/validations/{operationId}/results';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getValidationResult()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getValidationResult$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<OperationResult>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetValidationResultPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<OperationResult>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getValidationResult$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getValidationResult(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<OperationResult> {\r\n\r\n    return this.getValidationResult$Response(params).pipe(\r\n      map((r: StrictHttpResponse<OperationResult>) => r.body as OperationResult)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getGroupedValidationResult\r\n   */\r\n  static readonly GetGroupedValidationResultPath = '/v2/plans/{planId}/operations/validations/{operationId}/grouped-results';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getGroupedValidationResult()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getGroupedValidationResult$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<GroupedValidationResult>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetGroupedValidationResultPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<GroupedValidationResult>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getGroupedValidationResult$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getGroupedValidationResult(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<GroupedValidationResult> {\r\n\r\n    return this.getGroupedValidationResult$Response(params).pipe(\r\n      map((r: StrictHttpResponse<GroupedValidationResult>) => r.body as GroupedValidationResult)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation startImpactDeduction\r\n   */\r\n  static readonly StartImpactDeductionPath = '/v2/plans/{planId}/operations/activation-impact-deductions';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`\r\n   * To perform plan impact analysis including 'Conditional BTS restart', 'BTS restart needed'\r\n   * and cell Lockings of 'Object blocking' analysis.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `startImpactDeduction()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  startImpactDeduction$Response(params: {\r\n    planId: string;\r\n\r\n    body?: OperationRequest\r\n  }): Observable<StrictHttpResponse<OperationResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.StartImpactDeductionPath, 'post');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<OperationResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`\r\n   * To perform plan impact analysis including 'Conditional BTS restart', 'BTS restart needed'\r\n   * and cell Lockings of 'Object blocking' analysis.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `startImpactDeduction$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  startImpactDeduction(params: {\r\n    planId: string;\r\n\r\n    body?: OperationRequest\r\n  }): Observable<OperationResponse> {\r\n\r\n    return this.startImpactDeduction$Response(params).pipe(\r\n      map((r: StrictHttpResponse<OperationResponse>) => r.body as OperationResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getImpactDeduction\r\n   */\r\n  static readonly GetImpactDeductionPath = '/v2/plans/{planId}/operations/activation-impact-deductions/{operationId}';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getImpactDeduction()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getImpactDeduction$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<OperationResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetImpactDeductionPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<OperationResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getImpactDeduction$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getImpactDeduction(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<OperationResponse> {\r\n\r\n    return this.getImpactDeduction$Response(params).pipe(\r\n      map((r: StrictHttpResponse<OperationResponse>) => r.body as OperationResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteImpactDeduction\r\n   */\r\n  static readonly DeleteImpactDeductionPath = '/v2/plans/{planId}/operations/activation-impact-deductions/{operationId}';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteImpactDeduction()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  deleteImpactDeduction$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.DeleteImpactDeductionPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteImpactDeduction$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  deleteImpactDeduction(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteImpactDeduction$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getImpactDeductionResult\r\n   */\r\n  static readonly GetImpactDeductionResultPath = '/v2/plans/{planId}/operations/activation-impact-deductions/{operationId}/results';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`\r\n   * Until all services which are defined as mandatory roles provide deduction results,\r\n   * OAM CM will aggregate results and provide it here.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getImpactDeductionResult()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getImpactDeductionResult$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<ImpactDeduction>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetImpactDeductionResultPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ImpactDeduction>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`\r\n   * Until all services which are defined as mandatory roles provide deduction results,\r\n   * OAM CM will aggregate results and provide it here.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getImpactDeductionResult$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getImpactDeductionResult(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<ImpactDeduction> {\r\n\r\n    return this.getImpactDeductionResult$Response(params).pipe(\r\n      map((r: StrictHttpResponse<ImpactDeduction>) => r.body as ImpactDeduction)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation informImpactDeductionResult\r\n   */\r\n  static readonly InformImpactDeductionResultPath = '/v2/plans/{planId}/operations/activation-impact-deductions/{operationId}/results';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-CP/UP` and other services\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `informImpactDeductionResult()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  informImpactDeductionResult$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n    body: ImpactDeductionResult\r\n  }): Observable<StrictHttpResponse<CreateResultResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.InformImpactDeductionResultPath, 'post');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CreateResultResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-CP/UP` and other services\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `informImpactDeductionResult$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  informImpactDeductionResult(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n    body: ImpactDeductionResult\r\n  }): Observable<CreateResultResponse> {\r\n\r\n    return this.informImpactDeductionResult$Response(params).pipe(\r\n      map((r: StrictHttpResponse<CreateResultResponse>) => r.body as CreateResultResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getRoleImpactDeductionResult\r\n   */\r\n  static readonly GetRoleImpactDeductionResultPath = '/v2/plans/{planId}/operations/activation-impact-deductions/{operationId}/results/{resultId}';\r\n\r\n  /**\r\n   * consumer - **internal**\r\n   * Fetch each activator role's activation impact deduction result by result id\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getRoleImpactDeductionResult()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getRoleImpactDeductionResult$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n    resultId: string;\r\n\r\n  }): Observable<StrictHttpResponse<ImpactDeductionResult>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetRoleImpactDeductionResultPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n      rb.path('resultId', params.resultId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ImpactDeductionResult>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal**\r\n   * Fetch each activator role's activation impact deduction result by result id\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getRoleImpactDeductionResult$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getRoleImpactDeductionResult(params: {\r\n    planId: string;\r\n    operationId: string;\r\n    resultId: string;\r\n\r\n  }): Observable<ImpactDeductionResult> {\r\n\r\n    return this.getRoleImpactDeductionResult$Response(params).pipe(\r\n      map((r: StrictHttpResponse<ImpactDeductionResult>) => r.body as ImpactDeductionResult)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation startActivation\r\n   */\r\n  static readonly StartActivationPath = '/v2/plans/{planId}/operations/activations';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`, **external** `WebEM`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `startActivation()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  startActivation$Response(params: {\r\n\r\n    /**\r\n     * Operation timeout in seconds\r\n     */\r\n    xOamOperationTimeout?: number;\r\n\r\n    /**\r\n     * When upload or fetch current plan, if this is set as &#x60;nms&#x60; or &#x60;em&#x60;, parameters and mos which are hidden or cannot be uploaded to corresponding interface will be filtered.\r\n     */\r\n    xOamClientType: ClientType;\r\n    planId: string;\r\n\r\n    body?: OperationRequest\r\n  }): Observable<StrictHttpResponse<OperationResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.StartActivationPath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Operation-Timeout', params.xOamOperationTimeout);\r\n      rb.header('X-OAM-Client-Type', params.xOamClientType);\r\n      rb.path('planId', params.planId);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<OperationResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`, **external** `WebEM`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `startActivation$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  startActivation(params: {\r\n\r\n    /**\r\n     * Operation timeout in seconds\r\n     */\r\n    xOamOperationTimeout?: number;\r\n\r\n    /**\r\n     * When upload or fetch current plan, if this is set as &#x60;nms&#x60; or &#x60;em&#x60;, parameters and mos which are hidden or cannot be uploaded to corresponding interface will be filtered.\r\n     */\r\n    xOamClientType: ClientType;\r\n    planId: string;\r\n\r\n    body?: OperationRequest\r\n  }): Observable<OperationResponse> {\r\n\r\n    return this.startActivation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<OperationResponse>) => r.body as OperationResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getActivation\r\n   */\r\n  static readonly GetActivationPath = '/v2/plans/{planId}/operations/activations/{operationId}';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`, **external** `WebEM`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getActivation()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getActivation$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<OperationResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetActivationPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<OperationResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`, **external** `WebEM`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getActivation$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getActivation(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<OperationResponse> {\r\n\r\n    return this.getActivation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<OperationResponse>) => r.body as OperationResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteActivation\r\n   */\r\n  static readonly DeleteActivationPath = '/v2/plans/{planId}/operations/activations/{operationId}';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`, **external** `WebEM`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteActivation()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  deleteActivation$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.DeleteActivationPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`, **external** `WebEM`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteActivation$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  deleteActivation(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteActivation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getActivationResult\r\n   */\r\n  static readonly GetActivationResultPath = '/v2/plans/{planId}/operations/activations/{operationId}/results';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`, **external** `WebEM`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getActivationResult()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getActivationResult$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<ActivationResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetActivationResultPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ActivationResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-ASM`, `NE3SAgent`, **external** `WebEM`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getActivationResult$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getActivationResult(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<ActivationResponse> {\r\n\r\n    return this.getActivationResult$Response(params).pipe(\r\n      map((r: StrictHttpResponse<ActivationResponse>) => r.body as ActivationResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation informActivationResult\r\n   */\r\n  static readonly InformActivationResultPath = '/v2/plans/{planId}/operations/activations/{operationId}/results';\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-CP/UP` and other services\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `informActivationResult()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  informActivationResult$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  \r\n  /**\r\n   * Create activation operation result request body\r\n   */\r\n  body: ActivationResponse\r\n  }): Observable<StrictHttpResponse<CreateResultResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.InformActivationResultPath, 'post');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CreateResultResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `OAM-CP/UP` and other services\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `informActivationResult$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  informActivationResult(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  \r\n  /**\r\n   * Create activation operation result request body\r\n   */\r\n  body: ActivationResponse\r\n  }): Observable<CreateResultResponse> {\r\n\r\n    return this.informActivationResult$Response(params).pipe(\r\n      map((r: StrictHttpResponse<CreateResultResponse>) => r.body as CreateResultResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getRoleActivationResult\r\n   */\r\n  static readonly GetRoleActivationResultPath = '/v2/plans/{planId}/operations/activations/{operationId}/results/{resultId}';\r\n\r\n  /**\r\n   * consumer - **internal**\r\n   * Fetch each activator role's activation result by result id\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getRoleActivationResult()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getRoleActivationResult$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n    resultId: string;\r\n\r\n  }): Observable<StrictHttpResponse<ActivationResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetRoleActivationResultPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n      rb.path('resultId', params.resultId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ActivationResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal**\r\n   * Fetch each activator role's activation result by result id\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getRoleActivationResult$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getRoleActivationResult(params: {\r\n    planId: string;\r\n    operationId: string;\r\n    resultId: string;\r\n\r\n  }): Observable<ActivationResponse> {\r\n\r\n    return this.getRoleActivationResult$Response(params).pipe(\r\n      map((r: StrictHttpResponse<ActivationResponse>) => r.body as ActivationResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation updateRoleActivationResult\r\n   */\r\n  static readonly UpdateRoleActivationResultPath = '/v2/plans/{planId}/operations/activations/{operationId}/results/{resultId}';\r\n\r\n  /**\r\n   * consumer - **internal**\r\n   * Update each activator role's activation result by result id, can be used to update `planUpdateStatus`\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateRoleActivationResult()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  updateRoleActivationResult$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n    resultId: string;\r\n\r\n    body: ActivationResponse\r\n  }): Observable<StrictHttpResponse<ActivationResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.UpdateRoleActivationResultPath, 'patch');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n      rb.path('resultId', params.resultId);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ActivationResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal**\r\n   * Update each activator role's activation result by result id, can be used to update `planUpdateStatus`\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `updateRoleActivationResult$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  updateRoleActivationResult(params: {\r\n    planId: string;\r\n    operationId: string;\r\n    resultId: string;\r\n\r\n    body: ActivationResponse\r\n  }): Observable<ActivationResponse> {\r\n\r\n    return this.updateRoleActivationResult$Response(params).pipe(\r\n      map((r: StrictHttpResponse<ActivationResponse>) => r.body as ActivationResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getActivationResultCollection\r\n   */\r\n  static readonly GetActivationResultCollectionPath = '/v2/plans/{planId}/operations/activations/{operationId}/results-collection';\r\n\r\n  /**\r\n   * consumer - **internal**\r\n   * Fetch all activator role's activation results collection\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getActivationResultCollection()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getActivationResultCollection$Response(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<ActivationResponseCollection>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetActivationResultCollectionPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ActivationResponseCollection>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal**\r\n   * Fetch all activator role's activation results collection\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getActivationResultCollection$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getActivationResultCollection(params: {\r\n    planId: string;\r\n    operationId: string;\r\n\r\n  }): Observable<ActivationResponseCollection> {\r\n\r\n    return this.getActivationResultCollection$Response(params).pipe(\r\n      map((r: StrictHttpResponse<ActivationResponseCollection>) => r.body as ActivationResponseCollection)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation createChannel\r\n   */\r\n  static readonly CreateChannelPath = '/v2/channels';\r\n\r\n  /**\r\n   * consumer - **internal** `NE3SAgent`, `OAM-CP/UP` and other services\r\n   * - For `ActivateOperation` channel, notification content will be `OperationResponse` in [`/plans/{planId}/operations/activations/{operationId}`](#/cm/getActivation).\r\n   * - For `CurrentPlanChange` channel, notification content will be `ObjectChanges` in [`/current-plan`](#/cm/updateCurrentPlanObjects).\r\n   * - For `ActivationResultsCollection` channel, notification content will be `ActivationResultsCollection` in [`/plans/{planId}/operations/activations/{operationId}/results-collection`](#/cm/getActivationResultCollection).\r\n   * - For `ActivationImpactDeduction` channel, notification content will be `OperationResponse` in [`/plans/{planId}/operations/activation-impact-deductions/{operationId}`](#/cm/getImpactDeduction).\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `createChannel()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  createChannel$Response(params: {\r\n\r\n  \r\n  /**\r\n   * Channel request body\r\n   */\r\n  body: Channel\r\n  }): Observable<StrictHttpResponse<CreateChannelResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.CreateChannelPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CreateChannelResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `NE3SAgent`, `OAM-CP/UP` and other services\r\n   * - For `ActivateOperation` channel, notification content will be `OperationResponse` in [`/plans/{planId}/operations/activations/{operationId}`](#/cm/getActivation).\r\n   * - For `CurrentPlanChange` channel, notification content will be `ObjectChanges` in [`/current-plan`](#/cm/updateCurrentPlanObjects).\r\n   * - For `ActivationResultsCollection` channel, notification content will be `ActivationResultsCollection` in [`/plans/{planId}/operations/activations/{operationId}/results-collection`](#/cm/getActivationResultCollection).\r\n   * - For `ActivationImpactDeduction` channel, notification content will be `OperationResponse` in [`/plans/{planId}/operations/activation-impact-deductions/{operationId}`](#/cm/getImpactDeduction).\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `createChannel$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  createChannel(params: {\r\n\r\n  \r\n  /**\r\n   * Channel request body\r\n   */\r\n  body: Channel\r\n  }): Observable<CreateChannelResponse> {\r\n\r\n    return this.createChannel$Response(params).pipe(\r\n      map((r: StrictHttpResponse<CreateChannelResponse>) => r.body as CreateChannelResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getChannel\r\n   */\r\n  static readonly GetChannelPath = '/v2/channels/{channelId}';\r\n\r\n  /**\r\n   * consumer - **internal** `NE3SAgent`, `OAM-CP/UP` and other services\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getChannel()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getChannel$Response(params: {\r\n    channelId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Channel>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetChannelPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('channelId', params.channelId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Channel>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `NE3SAgent`, `OAM-CP/UP` and other services\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getChannel$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getChannel(params: {\r\n    channelId: string;\r\n\r\n  }): Observable<Channel> {\r\n\r\n    return this.getChannel$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Channel>) => r.body as Channel)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation removeChannel\r\n   */\r\n  static readonly RemoveChannelPath = '/v2/channels/{channelId}';\r\n\r\n  /**\r\n   * consumer - **internal** `NE3SAgent`, `OAM-CP/UP` and other services\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `removeChannel()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  removeChannel$Response(params: {\r\n    channelId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.RemoveChannelPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('channelId', params.channelId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `NE3SAgent`, `OAM-CP/UP` and other services\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `removeChannel$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  removeChannel(params: {\r\n    channelId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.removeChannel$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation headChannel\r\n   */\r\n  static readonly HeadChannelPath = '/v2/channels/{channelId}';\r\n\r\n  /**\r\n   * consumer - **internal** `NE3SAgent`, `OAM-CP/UP` and other services\r\n   * - Channel will be removed when subscriber does not respond to notifications.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `headChannel()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  headChannel$Response(params: {\r\n    channelId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.HeadChannelPath, 'head');\r\n    if (params) {\r\n\r\n      rb.path('channelId', params.channelId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `NE3SAgent`, `OAM-CP/UP` and other services\r\n   * - Channel will be removed when subscriber does not respond to notifications.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `headChannel$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  headChannel(params: {\r\n    channelId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.headChannel$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation syncChannel\r\n   */\r\n  static readonly SyncChannelPath = '/v2/channels/{channelId}';\r\n\r\n  /**\r\n   * consumer - **internal** `NE3SAgent`, `OAM-CP/UP` and other services\r\n   * - PATCH `enabled` from `false` to `true` will trigger a sync notification on this channel.\r\n   * - PATCH `enabled` from `true` to `false` will stop any notifications on this channel.\r\n   * - Updated value in `clientLabel` will be included in the header of following notifications\r\n   * - It is not supported to update channel `filter`, `resourceId` or `notificationUrl`.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `syncChannel()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  syncChannel$Response(params: {\r\n    channelId: string;\r\n\r\n  \r\n  /**\r\n   * Channel request body\r\n   */\r\n  body: UpdateChannelRequest\r\n  }): Observable<StrictHttpResponse<Channel>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.SyncChannelPath, 'patch');\r\n    if (params) {\r\n\r\n      rb.path('channelId', params.channelId);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Channel>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * consumer - **internal** `NE3SAgent`, `OAM-CP/UP` and other services\r\n   * - PATCH `enabled` from `false` to `true` will trigger a sync notification on this channel.\r\n   * - PATCH `enabled` from `true` to `false` will stop any notifications on this channel.\r\n   * - Updated value in `clientLabel` will be included in the header of following notifications\r\n   * - It is not supported to update channel `filter`, `resourceId` or `notificationUrl`.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `syncChannel$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  syncChannel(params: {\r\n    channelId: string;\r\n\r\n  \r\n  /**\r\n   * Channel request body\r\n   */\r\n  body: UpdateChannelRequest\r\n  }): Observable<Channel> {\r\n\r\n    return this.syncChannel$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Channel>) => r.body as Channel)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v2OperationsRestartAboutToHappenPost\r\n   */\r\n  static readonly V2OperationsRestartAboutToHappenPostPath = '/v2/operations/restart-about-to-happen';\r\n\r\n  /**\r\n   * Announces other services that a restart is about to happen and waits for response.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v2OperationsRestartAboutToHappenPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  v2OperationsRestartAboutToHappenPost$Response(params?: {\r\n\r\n  \r\n  /**\r\n   * json containing reboot reason\r\n   */\r\n  body?: { 'reason': string }\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V2OperationsRestartAboutToHappenPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Announces other services that a restart is about to happen and waits for response.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v2OperationsRestartAboutToHappenPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  v2OperationsRestartAboutToHappenPost(params?: {\r\n\r\n  \r\n  /**\r\n   * json containing reboot reason\r\n   */\r\n  body?: { 'reason': string }\r\n  }): Observable<void> {\r\n\r\n    return this.v2OperationsRestartAboutToHappenPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1VnfVnfIdVmCuGet\r\n   */\r\n  static readonly V1VnfVnfIdVmCuGetPath = '/v1/vnf/{vnfId}/vm_cu';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1VnfVnfIdVmCuGet()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VnfVnfIdVmCuGet$Response(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n  }): Observable<StrictHttpResponse<{ 'DNs': Array<string> }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1VnfVnfIdVmCuGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('vnfId', params.vnfId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'DNs': Array<string> }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1VnfVnfIdVmCuGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VnfVnfIdVmCuGet(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n  }): Observable<{ 'DNs': Array<string> }> {\r\n\r\n    return this.v1VnfVnfIdVmCuGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'DNs': Array<string> }>) => r.body as { 'DNs': Array<string> })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1VnfVnfIdVmCuPost\r\n   */\r\n  static readonly V1VnfVnfIdVmCuPostPath = '/v1/vnf/{vnfId}/vm_cu';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1VnfVnfIdVmCuPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  v1VnfVnfIdVmCuPost$Response(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n  \r\n  /**\r\n   * json containing vm_cu configuration\r\n   */\r\n  body?: VmCu\r\n  }): Observable<StrictHttpResponse<{ 'link': Link }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1VnfVnfIdVmCuPostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.path('vnfId', params.vnfId);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'link': Link }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1VnfVnfIdVmCuPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  v1VnfVnfIdVmCuPost(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n  \r\n  /**\r\n   * json containing vm_cu configuration\r\n   */\r\n  body?: VmCu\r\n  }): Observable<{ 'link': Link }> {\r\n\r\n    return this.v1VnfVnfIdVmCuPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'link': Link }>) => r.body as { 'link': Link })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1VnfVnfIdVmCuVmIdHeartbeatCuPost\r\n   */\r\n  static readonly V1VnfVnfIdVmCuVmIdHeartbeatCuPostPath = '/v1/vnf/{vnfId}/vm_cu/{vmId}/heartbeat_cu';\r\n\r\n  /**\r\n   * Periodically, each OamAgent updates /vnf/1/vm_cu/x/heartbeat_cu/1. In this way CM knows which VM is alive and kicking.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1VnfVnfIdVmCuVmIdHeartbeatCuPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  v1VnfVnfIdVmCuVmIdHeartbeatCuPost$Response(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  \r\n  /**\r\n   * json containing bootid\r\n   */\r\n  body?: Heartbeat\r\n  }): Observable<StrictHttpResponse<Heartbeat>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1VnfVnfIdVmCuVmIdHeartbeatCuPostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.path('vnfId', params.vnfId);\r\n      rb.path('vmId', params.vmId);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Heartbeat>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Periodically, each OamAgent updates /vnf/1/vm_cu/x/heartbeat_cu/1. In this way CM knows which VM is alive and kicking.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1VnfVnfIdVmCuVmIdHeartbeatCuPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  v1VnfVnfIdVmCuVmIdHeartbeatCuPost(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  \r\n  /**\r\n   * json containing bootid\r\n   */\r\n  body?: Heartbeat\r\n  }): Observable<Heartbeat> {\r\n\r\n    return this.v1VnfVnfIdVmCuVmIdHeartbeatCuPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Heartbeat>) => r.body as Heartbeat)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1VnfVnfIdVmCuVmIdGet\r\n   */\r\n  static readonly V1VnfVnfIdVmCuVmIdGetPath = '/v1/vnf/{vnfId}/vm_cu/{vmId}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1VnfVnfIdVmCuVmIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VnfVnfIdVmCuVmIdGet$Response(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  }): Observable<StrictHttpResponse<VmCu>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1VnfVnfIdVmCuVmIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('vnfId', params.vnfId);\r\n      rb.path('vmId', params.vmId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<VmCu>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1VnfVnfIdVmCuVmIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VnfVnfIdVmCuVmIdGet(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  }): Observable<VmCu> {\r\n\r\n    return this.v1VnfVnfIdVmCuVmIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<VmCu>) => r.body as VmCu)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1VnfVnfIdVmCuVmIdPut\r\n   */\r\n  static readonly V1VnfVnfIdVmCuVmIdPutPath = '/v1/vnf/{vnfId}/vm_cu/{vmId}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1VnfVnfIdVmCuVmIdPut()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  v1VnfVnfIdVmCuVmIdPut$Response(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  \r\n  /**\r\n   * json containing vm_cu configuration\r\n   */\r\n  body?: VmCu\r\n  }): Observable<StrictHttpResponse<{ 'link': Link }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1VnfVnfIdVmCuVmIdPutPath, 'put');\r\n    if (params) {\r\n\r\n      rb.path('vnfId', params.vnfId);\r\n      rb.path('vmId', params.vmId);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'link': Link }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1VnfVnfIdVmCuVmIdPut$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  v1VnfVnfIdVmCuVmIdPut(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  \r\n  /**\r\n   * json containing vm_cu configuration\r\n   */\r\n  body?: VmCu\r\n  }): Observable<{ 'link': Link }> {\r\n\r\n    return this.v1VnfVnfIdVmCuVmIdPut$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'link': Link }>) => r.body as { 'link': Link })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1VnfVnfIdVmCuVmIdInterfaceCuGet\r\n   */\r\n  static readonly V1VnfVnfIdVmCuVmIdInterfaceCuGetPath = '/v1/vnf/{vnfId}/vm_cu/{vmId}/interface_cu';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1VnfVnfIdVmCuVmIdInterfaceCuGet()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VnfVnfIdVmCuVmIdInterfaceCuGet$Response(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  }): Observable<StrictHttpResponse<{ 'DNs': Array<string> }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1VnfVnfIdVmCuVmIdInterfaceCuGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('vnfId', params.vnfId);\r\n      rb.path('vmId', params.vmId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'DNs': Array<string> }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1VnfVnfIdVmCuVmIdInterfaceCuGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VnfVnfIdVmCuVmIdInterfaceCuGet(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  }): Observable<{ 'DNs': Array<string> }> {\r\n\r\n    return this.v1VnfVnfIdVmCuVmIdInterfaceCuGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'DNs': Array<string> }>) => r.body as { 'DNs': Array<string> })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1VnfVnfIdVmCuVmIdInterfaceCuPost\r\n   */\r\n  static readonly V1VnfVnfIdVmCuVmIdInterfaceCuPostPath = '/v1/vnf/{vnfId}/vm_cu/{vmId}/interface_cu';\r\n\r\n  /**\r\n   * Stores internal IPs used by OamAgent for syscom routes creation\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1VnfVnfIdVmCuVmIdInterfaceCuPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  v1VnfVnfIdVmCuVmIdInterfaceCuPost$Response(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  \r\n  /**\r\n   * json containing interface_cu configuration\r\n   */\r\n  body?: InterfaceCu\r\n  }): Observable<StrictHttpResponse<{ 'link': Link }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1VnfVnfIdVmCuVmIdInterfaceCuPostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.path('vnfId', params.vnfId);\r\n      rb.path('vmId', params.vmId);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'link': Link }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stores internal IPs used by OamAgent for syscom routes creation\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1VnfVnfIdVmCuVmIdInterfaceCuPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  v1VnfVnfIdVmCuVmIdInterfaceCuPost(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  \r\n  /**\r\n   * json containing interface_cu configuration\r\n   */\r\n  body?: InterfaceCu\r\n  }): Observable<{ 'link': Link }> {\r\n\r\n    return this.v1VnfVnfIdVmCuVmIdInterfaceCuPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'link': Link }>) => r.body as { 'link': Link })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1VnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet\r\n   */\r\n  static readonly V1VnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGetPath = '/v1/vnf/{vnfId}/vm_cu/{vmId}/interface_cu/{interfaceId}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1VnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet$Response(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n    /**\r\n     * interface_cu instance id\r\n     */\r\n    interfaceId: string;\r\n\r\n  }): Observable<StrictHttpResponse<InterfaceCu>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1VnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('vnfId', params.vnfId);\r\n      rb.path('vmId', params.vmId);\r\n      rb.path('interfaceId', params.interfaceId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<InterfaceCu>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1VnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n    /**\r\n     * interface_cu instance id\r\n     */\r\n    interfaceId: string;\r\n\r\n  }): Observable<InterfaceCu> {\r\n\r\n    return this.v1VnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<InterfaceCu>) => r.body as InterfaceCu)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1VnfVnfIdVmCuVmIdConfigFilesCuGet\r\n   */\r\n  static readonly V1VnfVnfIdVmCuVmIdConfigFilesCuGetPath = '/v1/vnf/{vnfId}/vm_cu/{vmId}/config_files_cu';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1VnfVnfIdVmCuVmIdConfigFilesCuGet()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VnfVnfIdVmCuVmIdConfigFilesCuGet$Response(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  }): Observable<StrictHttpResponse<{ 'DNs': Array<string> }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1VnfVnfIdVmCuVmIdConfigFilesCuGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('vnfId', params.vnfId);\r\n      rb.path('vmId', params.vmId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'DNs': Array<string> }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1VnfVnfIdVmCuVmIdConfigFilesCuGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VnfVnfIdVmCuVmIdConfigFilesCuGet(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  }): Observable<{ 'DNs': Array<string> }> {\r\n\r\n    return this.v1VnfVnfIdVmCuVmIdConfigFilesCuGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'DNs': Array<string> }>) => r.body as { 'DNs': Array<string> })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1VnfVnfIdVmCuVmIdConfigFilesCuPost\r\n   */\r\n  static readonly V1VnfVnfIdVmCuVmIdConfigFilesCuPostPath = '/v1/vnf/{vnfId}/vm_cu/{vmId}/config_files_cu';\r\n\r\n  /**\r\n   * Stores paths for temporary scf files used by control plane\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1VnfVnfIdVmCuVmIdConfigFilesCuPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  v1VnfVnfIdVmCuVmIdConfigFilesCuPost$Response(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  \r\n  /**\r\n   * json containing config_files_cu configuration\r\n   */\r\n  body?: ConfigFilesCu\r\n  }): Observable<StrictHttpResponse<{ 'link': Link }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1VnfVnfIdVmCuVmIdConfigFilesCuPostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.path('vnfId', params.vnfId);\r\n      rb.path('vmId', params.vmId);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'link': Link }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Stores paths for temporary scf files used by control plane\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1VnfVnfIdVmCuVmIdConfigFilesCuPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  v1VnfVnfIdVmCuVmIdConfigFilesCuPost(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n  \r\n  /**\r\n   * json containing config_files_cu configuration\r\n   */\r\n  body?: ConfigFilesCu\r\n  }): Observable<{ 'link': Link }> {\r\n\r\n    return this.v1VnfVnfIdVmCuVmIdConfigFilesCuPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'link': Link }>) => r.body as { 'link': Link })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1VnfVnfIdVmCuVmIdConfigFilesCuConfigIdGet\r\n   */\r\n  static readonly V1VnfVnfIdVmCuVmIdConfigFilesCuConfigIdGetPath = '/v1/vnf/{vnfId}/vm_cu/{vmId}/config_files_cu/{configId}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1VnfVnfIdVmCuVmIdConfigFilesCuConfigIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VnfVnfIdVmCuVmIdConfigFilesCuConfigIdGet$Response(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n    /**\r\n     * config_files_cu instance id\r\n     */\r\n    configId: string;\r\n\r\n  }): Observable<StrictHttpResponse<ConfigFilesCu>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1VnfVnfIdVmCuVmIdConfigFilesCuConfigIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('vnfId', params.vnfId);\r\n      rb.path('vmId', params.vmId);\r\n      rb.path('configId', params.configId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ConfigFilesCu>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1VnfVnfIdVmCuVmIdConfigFilesCuConfigIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VnfVnfIdVmCuVmIdConfigFilesCuConfigIdGet(params: {\r\n\r\n    /**\r\n     * VNF instance Id\r\n     */\r\n    vnfId: string;\r\n\r\n    /**\r\n     * vm_cu instance Id\r\n     */\r\n    vmId: string;\r\n\r\n    /**\r\n     * config_files_cu instance id\r\n     */\r\n    configId: string;\r\n\r\n  }): Observable<ConfigFilesCu> {\r\n\r\n    return this.v1VnfVnfIdVmCuVmIdConfigFilesCuConfigIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<ConfigFilesCu>) => r.body as ConfigFilesCu)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1BtsGet\r\n   */\r\n  static readonly V1BtsGetPath = '/v1/bts';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1BtsGet()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1BtsGet$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<{ 'status': string, 'name': string, 'btsId': string, 'numberOfAlarms': number }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1BtsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'blob',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'status': string, 'name': string, 'btsId': string, 'numberOfAlarms': number }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1BtsGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1BtsGet(params?: {\r\n\r\n  }): Observable<{ 'status': string, 'name': string, 'btsId': string, 'numberOfAlarms': number }> {\r\n\r\n    return this.v1BtsGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'status': string, 'name': string, 'btsId': string, 'numberOfAlarms': number }>) => r.body as { 'status': string, 'name': string, 'btsId': string, 'numberOfAlarms': number })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1PlanInfosGet\r\n   */\r\n  static readonly V1PlanInfosGetPath = '/v1/plan-infos';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1PlanInfosGet()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1PlanInfosGet$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<BasicPlanInfo>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1PlanInfosGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<BasicPlanInfo>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1PlanInfosGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1PlanInfosGet(params?: {\r\n\r\n  }): Observable<Array<BasicPlanInfo>> {\r\n\r\n    return this.v1PlanInfosGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<BasicPlanInfo>>) => r.body as Array<BasicPlanInfo>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1PlansPlanIdsGet\r\n   */\r\n  static readonly V1PlansPlanIdsGetPath = '/v1/plans/planIds';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1PlansPlanIdsGet()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1PlansPlanIdsGet$Response(params?: {\r\n\r\n    /**\r\n     * the plan status, only &quot;downloaded&quot;,&quot;validating&quot;,&quot;validate_fail&quot;, &quot;validated&quot;, &quot;activating&quot;,&quot;activate_fail&quot;,  &quot;activated&quot; are supported\r\n     */\r\n    planStatus?: Array<string>;\r\n\r\n  }): Observable<StrictHttpResponse<Array<string>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1PlansPlanIdsGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('planStatus', params.planStatus);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'blob',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<string>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1PlansPlanIdsGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1PlansPlanIdsGet(params?: {\r\n\r\n    /**\r\n     * the plan status, only &quot;downloaded&quot;,&quot;validating&quot;,&quot;validate_fail&quot;, &quot;validated&quot;, &quot;activating&quot;,&quot;activate_fail&quot;,  &quot;activated&quot; are supported\r\n     */\r\n    planStatus?: Array<string>;\r\n\r\n  }): Observable<Array<string>> {\r\n\r\n    return this.v1PlansPlanIdsGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<string>>) => r.body as Array<string>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation updatePlan\r\n   */\r\n  static readonly UpdatePlanPath = '/v1/plans/{planId}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updatePlan()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  updatePlan$Response(params: {\r\n    planId: string;\r\n\r\n  \r\n  /**\r\n   * changes to this plan\r\n   */\r\n  body?: Plan\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.UpdatePlanPath, 'patch');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `updatePlan$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  updatePlan(params: {\r\n    planId: string;\r\n\r\n  \r\n  /**\r\n   * changes to this plan\r\n   */\r\n  body?: Plan\r\n  }): Observable<void> {\r\n\r\n    return this.updatePlan$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getPlanFile\r\n   */\r\n  static readonly GetPlanFilePath = '/v1/plans/full-plan-files/{planId}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getPlanFile()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getPlanFile$Response(params: {\r\n    planId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Blob>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetPlanFilePath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('planId', params.planId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'blob',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Blob>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getPlanFile$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getPlanFile(params: {\r\n    planId: string;\r\n\r\n  }): Observable<Blob> {\r\n\r\n    return this.getPlanFile$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Blob>) => r.body as Blob)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation downloadFullPlanFile\r\n   */\r\n  static readonly DownloadFullPlanFilePath = '/v1/plans/full-plan-files';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `downloadFullPlanFile()` instead.\r\n   *\r\n   * This method sends `multipart/form-data` and handles response body of type `multipart/form-data`\r\n   */\r\n  downloadFullPlanFile$Response(params?: {\r\n\r\n    body?: { 'fullPlanFile': Blob, 'planFileDescription': string, 'userPlanId': string }\r\n  }): Observable<StrictHttpResponse<{ 'planId': string, 'link': Link }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.DownloadFullPlanFilePath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'multipart/form-data');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'planId': string, 'link': Link }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `downloadFullPlanFile$Response()` instead.\r\n   *\r\n   * This method sends `multipart/form-data` and handles response body of type `multipart/form-data`\r\n   */\r\n  downloadFullPlanFile(params?: {\r\n\r\n    body?: { 'fullPlanFile': Blob, 'planFileDescription': string, 'userPlanId': string }\r\n  }): Observable<{ 'planId': string, 'link': Link }> {\r\n\r\n    return this.downloadFullPlanFile$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'planId': string, 'link': Link }>) => r.body as { 'planId': string, 'link': Link })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getOperation\r\n   */\r\n  static readonly GetOperationPath = '/v1/plans/operations/{operationId}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getOperation()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getOperation$Response(params: {\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetOperationPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getOperation$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getOperation(params: {\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getOperation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteOperation\r\n   */\r\n  static readonly DeleteOperationPath = '/v1/plans/operations/{operationId}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteOperation()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  deleteOperation$Response(params: {\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.DeleteOperationPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteOperation$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  deleteOperation(params: {\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.deleteOperation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCurrentPlan\r\n   */\r\n  static readonly GetCurrentPlanPath = '/v1/plans/current-plan';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCurrentPlan()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getCurrentPlan$Response(params?: {\r\n\r\n    /**\r\n     * objects matching this className.\r\n     */\r\n    className?: Array<string>;\r\n\r\n    /**\r\n     * object belong to this given ancestor subtree.\r\n     */\r\n    ancestorDistName?: string;\r\n\r\n  }): Observable<StrictHttpResponse<CurrentPlan>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetCurrentPlanPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('className', params.className);\r\n      rb.query('ancestorDistName', params.ancestorDistName);\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CurrentPlan>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCurrentPlan$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getCurrentPlan(params?: {\r\n\r\n    /**\r\n     * objects matching this className.\r\n     */\r\n    className?: Array<string>;\r\n\r\n    /**\r\n     * object belong to this given ancestor subtree.\r\n     */\r\n    ancestorDistName?: string;\r\n\r\n  }): Observable<CurrentPlan> {\r\n\r\n    return this.getCurrentPlan$Response(params).pipe(\r\n      map((r: StrictHttpResponse<CurrentPlan>) => r.body as CurrentPlan)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation updateCurrentPlan\r\n   */\r\n  static readonly UpdateCurrentPlanPath = '/v1/plans/current-plan';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateCurrentPlan()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  updateCurrentPlan$Response(params?: {\r\n\r\n  \r\n  /**\r\n   * changed objects to current plan\r\n   */\r\n  body?: ManagedObjectChanges\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.UpdateCurrentPlanPath, 'patch');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `updateCurrentPlan$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  updateCurrentPlan(params?: {\r\n\r\n  \r\n  /**\r\n   * changed objects to current plan\r\n   */\r\n  body?: ManagedObjectChanges\r\n  }): Observable<void> {\r\n\r\n    return this.updateCurrentPlan$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation watchCurrentPlan\r\n   */\r\n  static readonly WatchCurrentPlanPath = '/v1/plans/current-plan/watch';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `watchCurrentPlan()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  watchCurrentPlan$Response(params: {\r\n\r\n  \r\n  /**\r\n   * watch request body\r\n   */\r\n  body: WatchRequest\r\n  }): Observable<StrictHttpResponse<WatchResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.WatchCurrentPlanPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<WatchResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `watchCurrentPlan$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles response body of type `application/json`\r\n   */\r\n  watchCurrentPlan(params: {\r\n\r\n  \r\n  /**\r\n   * watch request body\r\n   */\r\n  body: WatchRequest\r\n  }): Observable<WatchResponse> {\r\n\r\n    return this.watchCurrentPlan$Response(params).pipe(\r\n      map((r: StrictHttpResponse<WatchResponse>) => r.body as WatchResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCurrentPlanFile\r\n   */\r\n  static readonly GetCurrentPlanFilePath = '/v1/plans/current-plan/file';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCurrentPlanFile()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getCurrentPlanFile$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Blob>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.GetCurrentPlanFilePath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'blob',\r\n      accept: 'application/xml'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Blob>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCurrentPlanFile$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  getCurrentPlanFile(params?: {\r\n\r\n  }): Observable<Blob> {\r\n\r\n    return this.getCurrentPlanFile$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Blob>) => r.body as Blob)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1CellsGet\r\n   */\r\n  static readonly V1CellsGetPath = '/v1/cells';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1CellsGet$Any()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1CellsGet$Any$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<{ 'cellId': string, 'operationalState': 'disabled' | 'enabled' }>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1CellsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'blob',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<{ 'cellId': string, 'operationalState': 'disabled' | 'enabled' }>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1CellsGet$Any$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1CellsGet$Any(params?: {\r\n\r\n  }): Observable<Array<{ 'cellId': string, 'operationalState': 'disabled' | 'enabled' }>> {\r\n\r\n    return this.v1CellsGet$Any$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<{ 'cellId': string, 'operationalState': 'disabled' | 'enabled' }>>) => r.body as Array<{ 'cellId': string, 'operationalState': 'disabled' | 'enabled' }>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1CellsGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1CellsGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<any>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1CellsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<any>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1CellsGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1CellsGet$Json(params?: {\r\n\r\n  }): Observable<any> {\r\n\r\n    return this.v1CellsGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<any>) => r.body as any)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation v1VmsGet\r\n   */\r\n  static readonly V1VmsGetPath = '/v1/vms';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `v1VmsGet()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VmsGet$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<VmR>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CmService.V1VmsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<VmR>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `v1VmsGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any response body\r\n   */\r\n  v1VmsGet(params?: {\r\n\r\n  }): Observable<Array<VmR>> {\r\n\r\n    return this.v1VmsGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<VmR>>) => r.body as Array<VmR>)\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\nimport { ApiConfiguration } from './api-configuration';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n/**\r\n * Base class for services\r\n */\r\nexport class BaseService {\r\n  constructor(\r\n    protected config: ApiConfiguration,\r\n    protected http: HttpClient\r\n  ) {\r\n  }\r\n\r\n  private _rootUrl: string = '';\r\n\r\n  /**\r\n   * Returns the root url for all operations in this service. If not set directly in this\r\n   * service, will fallback to `ApiConfiguration.rootUrl`.\r\n   */\r\n  get rootUrl(): string {\r\n    return this._rootUrl || this.config.rootUrl;\r\n  }\r\n\r\n  /**\r\n   * Sets the root URL for API operations in this service.\r\n   */\r\n  set rootUrl(rootUrl: string) {\r\n    this._rootUrl = rootUrl;\r\n  }\r\n}\r\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '/api/cp-config/v1';\n}\n\n/**\n * Parameters for `CuCpConfigClientModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\n\n/**\n * Target component\n */\nexport enum TargetComponent {\n  L2Ps = 'L2Ps',\n  L2Lo = 'L2Lo',\n  L2HiRlc = 'L2HiRlc',\n  L2HiPdcp = 'l2hiPdcp'\n}\n","/* tslint:disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ChannelImpactedReq } from '../models/channel-impacted-req';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FhConfigService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation cellsPatch\n   */\n  static readonly CellsPatchPath = '/cells';\n\n  /**\n   * Information received from fhConfig to deactivate/activate cells.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `cellsPatch()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  cellsPatch$Response(params: {\n  \n    /**\n     * Deactivate/activate cells for impacted channels\n     */\n    body: ChannelImpactedReq\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, FhConfigService.CellsPatchPath, 'patch');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Information received from fhConfig to deactivate/activate cells.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `cellsPatch$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  cellsPatch(params: {\n  \n    /**\n     * Deactivate/activate cells for impacted channels\n     */\n    body: ChannelImpactedReq\n  }): Observable<void> {\n\n    return this.cellsPatch$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { Link } from '../models/link';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotificationsService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation notifyActivation\r\n   */\r\n  static readonly NotifyActivationPath = '/api/activation';\r\n\r\n  /**\r\n   * Activation operation notification.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivateOperation` - Notification send when ActivateOperation is about to happen\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `notifyActivation()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyActivation$Response(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'id': string, 'isCompleted': boolean, 'links': Array<Link> }\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, NotificationsService.NotifyActivationPath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Channel-ID', params['X-OAM-Channel-ID'], {});\r\n      rb.header('X-OAM-Resource-URI', params['X-OAM-Resource-URI'], {});\r\n      rb.header('X-OAM-Resource-State', params['X-OAM-Resource-State'], {});\r\n      rb.header('X-OAM-Message-Number', params['X-OAM-Message-Number'], {});\r\n      rb.header('X-OAM-Client-Label', params['X-OAM-Client-Label'], {});\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Activation operation notification.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivateOperation` - Notification send when ActivateOperation is about to happen\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `notifyActivation$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyActivation(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'id': string, 'isCompleted': boolean, 'links': Array<Link> }\r\n  }): Observable<void> {\r\n\r\n    return this.notifyActivation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation notifyImpactDeduction\r\n   */\r\n  static readonly NotifyImpactDeductionPath = '/api/activation-impact-deductions';\r\n\r\n  /**\r\n   * Activation Impact Deduction Notification.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivationImpactDeduction` - Notification sent when Impact Deduction is about to happen\r\n   * To perform plan impact analysis including 'Conditional BTS restart', 'BTS restart needed'\r\n   * and cell Locking of 'Object blocking' analysis\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `notifyImpactDeduction()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyImpactDeduction$Response(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: string\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, NotificationsService.NotifyImpactDeductionPath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Channel-ID', params['X-OAM-Channel-ID'], {});\r\n      rb.header('X-OAM-Resource-URI', params['X-OAM-Resource-URI'], {});\r\n      rb.header('X-OAM-Resource-State', params['X-OAM-Resource-State'], {});\r\n      rb.header('X-OAM-Message-Number', params['X-OAM-Message-Number'], {});\r\n      rb.header('X-OAM-Client-Label', params['X-OAM-Client-Label'], {});\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Activation Impact Deduction Notification.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivationImpactDeduction` - Notification sent when Impact Deduction is about to happen\r\n   * To perform plan impact analysis including 'Conditional BTS restart', 'BTS restart needed'\r\n   * and cell Locking of 'Object blocking' analysis\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `notifyImpactDeduction$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyImpactDeduction(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: string\r\n  }): Observable<void> {\r\n\r\n    return this.notifyImpactDeduction$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation notifyCurrentPlanChange\r\n   */\r\n  static readonly NotifyCurrentPlanChangePath = '/api/current-plan';\r\n\r\n  /**\r\n   * Notify Current Plan Change.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `CurrentPlanChange` - Notification send when Current Plan was modified\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `notifyCurrentPlanChange()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyCurrentPlanChange$Response(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'removed'?: Array<string>, 'created'?: Array<{ 'className'?: string, 'distName'?: string, 'version'?: string, 'payload'?: string }>, 'updated'?: Array<string> }\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, NotificationsService.NotifyCurrentPlanChangePath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Channel-ID', params['X-OAM-Channel-ID'], {});\r\n      rb.header('X-OAM-Resource-URI', params['X-OAM-Resource-URI'], {});\r\n      rb.header('X-OAM-Resource-State', params['X-OAM-Resource-State'], {});\r\n      rb.header('X-OAM-Message-Number', params['X-OAM-Message-Number'], {});\r\n      rb.header('X-OAM-Client-Label', params['X-OAM-Client-Label'], {});\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Notify Current Plan Change.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `CurrentPlanChange` - Notification send when Current Plan was modified\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `notifyCurrentPlanChange$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyCurrentPlanChange(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'removed'?: Array<string>, 'created'?: Array<{ 'className'?: string, 'distName'?: string, 'version'?: string, 'payload'?: string }>, 'updated'?: Array<string> }\r\n  }): Observable<void> {\r\n\r\n    return this.notifyCurrentPlanChange$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation notifyActivationResponceCollection\r\n   */\r\n  static readonly NotifyActivationResponceCollectionPath = '/api/activation-response-collection';\r\n\r\n  /**\r\n   * Notify Activation Response  Collection.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivationResultsCollection` - Notification send when ActivationResultsCollection  is happen\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `notifyActivationResponceCollection()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyActivationResponceCollection$Response(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'restartNeeded'?: boolean, 'activationStatus': 'ok' | 'ongoing' | 'not_ok', 'planUpdateStatus'?: 'ok' | 'ongoing' | 'not_ok', 'links'?: Array<Link> }\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, NotificationsService.NotifyActivationResponceCollectionPath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Channel-ID', params['X-OAM-Channel-ID'], {});\r\n      rb.header('X-OAM-Resource-URI', params['X-OAM-Resource-URI'], {});\r\n      rb.header('X-OAM-Resource-State', params['X-OAM-Resource-State'], {});\r\n      rb.header('X-OAM-Message-Number', params['X-OAM-Message-Number'], {});\r\n      rb.header('X-OAM-Client-Label', params['X-OAM-Client-Label'], {});\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Notify Activation Response  Collection.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivationResultsCollection` - Notification send when ActivationResultsCollection  is happen\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `notifyActivationResponceCollection$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyActivationResponceCollection(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'restartNeeded'?: boolean, 'activationStatus': 'ok' | 'ongoing' | 'not_ok', 'planUpdateStatus'?: 'ok' | 'ongoing' | 'not_ok', 'links'?: Array<Link> }\r\n  }): Observable<void> {\r\n\r\n    return this.notifyActivationResponceCollection$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { CuLinksLockResponse } from '../models/cu-links-lock-response';\r\nimport { CuResetResponse } from '../models/cu-reset-response';\r\nimport { DeltaPlanParametersResp } from '../models/delta-plan-parameters-resp';\r\nimport { DusDelayExample } from '../models/dus-delay-example';\r\nimport { LinkResource } from '../models/link-resource';\r\nimport { Operation } from '../models/operation';\r\nimport { ResourceSingleIdRequest } from '../models/resource-single-id-request';\r\nimport { VduResetResponse } from '../models/vdu-reset-response';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StatusService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation resetCu\r\n   */\r\n  static readonly ResetCuPath = '/cu/operations/resets';\r\n\r\n  /**\r\n   * Trigger CU reset operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `resetCu()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  resetCu$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<CuResetResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.ResetCuPath, 'post');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CuResetResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger CU reset operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `resetCu$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  resetCu(params?: {\r\n\r\n  }): Observable<CuResetResponse> {\r\n\r\n    return this.resetCu$Response(params).pipe(\r\n      map((r: StrictHttpResponse<CuResetResponse>) => r.body as CuResetResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation resetVDu\r\n   */\r\n  static readonly ResetVDuPath = '/vdu/operations/resets';\r\n\r\n  /**\r\n   * Trigger vDU reset operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `resetVDu()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  resetVDu$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<VduResetResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.ResetVDuPath, 'post');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<VduResetResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger vDU reset operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `resetVDu$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  resetVDu(params?: {\r\n\r\n  }): Observable<VduResetResponse> {\r\n\r\n    return this.resetVDu$Response(params).pipe(\r\n      map((r: StrictHttpResponse<VduResetResponse>) => r.body as VduResetResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCuReset\r\n   */\r\n  static readonly GetCuResetPath = '/cu/operations/resets/{operationId}';\r\n\r\n  /**\r\n   * Get CU reset operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCuReset()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCuReset$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<CuResetResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCuResetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CuResetResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get CU reset operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCuReset$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCuReset(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<CuResetResponse> {\r\n\r\n    return this.getCuReset$Response(params).pipe(\r\n      map((r: StrictHttpResponse<CuResetResponse>) => r.body as CuResetResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteCuReset\r\n   */\r\n  static readonly DeleteCuResetPath = '/cu/operations/resets/{operationId}';\r\n\r\n  /**\r\n   * Delete CU reset operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteCuReset()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteCuReset$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteCuResetPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete CU reset operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteCuReset$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteCuReset(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteCuReset$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getVDuReset\r\n   */\r\n  static readonly GetVDuResetPath = '/vdu/operations/resets/{operationId}';\r\n\r\n  /**\r\n   * Get vDU reset operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getVDuReset()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVDuReset$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<VduResetResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetVDuResetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<VduResetResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get vDU reset operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getVDuReset$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVDuReset(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<VduResetResponse> {\r\n\r\n    return this.getVDuReset$Response(params).pipe(\r\n      map((r: StrictHttpResponse<VduResetResponse>) => r.body as VduResetResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation dusDelayPost\r\n   */\r\n  static readonly DusDelayPostPath = '/dus/delay';\r\n\r\n  /**\r\n   * Update HW delay Uplink and Downlink.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `dusDelayPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  dusDelayPost$Response(params?: {\r\n      body?: DusDelayExample\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DusDelayPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update HW delay Uplink and Downlink.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `dusDelayPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  dusDelayPost(params?: {\r\n      body?: DusDelayExample\r\n  }): Observable<void> {\r\n\r\n    return this.dusDelayPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation blockCell\r\n   */\r\n  static readonly BlockCellPath = '/cells/operations/block';\r\n\r\n  /**\r\n   * Trigger cell block operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `blockCell()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  blockCell$Response(params: {\r\n\r\n    /**\r\n     * Cell instance id\r\n     */\r\n    body: ResourceSingleIdRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.BlockCellPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger cell block operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `blockCell$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  blockCell(params: {\r\n\r\n    /**\r\n     * Cell instance id\r\n     */\r\n    body: ResourceSingleIdRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.blockCell$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getBlock\r\n   */\r\n  static readonly GetBlockPath = '/cells/operations/block/{operationId}';\r\n\r\n  /**\r\n   * Get block cell operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getBlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getBlock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetBlockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get block cell operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getBlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getBlock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getBlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteBlock\r\n   */\r\n  static readonly DeleteBlockPath = '/cells/operations/block/{operationId}';\r\n\r\n  /**\r\n   * Delete block cell operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteBlock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteBlock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteBlockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete block cell operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteBlock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteBlock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteBlock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation unblockCell\r\n   */\r\n  static readonly UnblockCellPath = '/cells/operations/unblock';\r\n\r\n  /**\r\n   * Trigger cell unblock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `unblockCell()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unblockCell$Response(params: {\r\n\r\n    /**\r\n     * Cell instance id\r\n     */\r\n    body: ResourceSingleIdRequest\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.UnblockCellPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger cell unblock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `unblockCell$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  unblockCell(params: {\r\n\r\n    /**\r\n     * Cell instance id\r\n     */\r\n    body: ResourceSingleIdRequest\r\n  }): Observable<Operation> {\r\n\r\n    return this.unblockCell$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getUnblock\r\n   */\r\n  static readonly GetUnblockPath = '/cells/operations/unblock/{operationId}';\r\n\r\n  /**\r\n   * Get unblock cell operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getUnblock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getUnblock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Operation>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetUnblockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Operation>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get unblock cell operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getUnblock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getUnblock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<Operation> {\r\n\r\n    return this.getUnblock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteUnblock\r\n   */\r\n  static readonly DeleteUnblockPath = '/cells/operations/unblock/{operationId}';\r\n\r\n  /**\r\n   * Delete unblock cell operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteUnblock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteUnblock$Response(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteUnblockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete unblock cell operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteUnblock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteUnblock(params: {\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteUnblock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCellLockParm\r\n   */\r\n  static readonly GetCellLockParmPath = '/cells/operations/locks';\r\n\r\n  /**\r\n   * Get operation parameters for cell lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCellLockParm()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellLockParm$Response(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<StrictHttpResponse<Array<DeltaPlanParametersResp>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCellLockParmPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('ids', params.ids, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<DeltaPlanParametersResp>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get operation parameters for cell lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCellLockParm$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellLockParm(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<Array<DeltaPlanParametersResp>> {\r\n\r\n    return this.getCellLockParm$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<DeltaPlanParametersResp>>) => r.body as Array<DeltaPlanParametersResp>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCellUnLockParm\r\n   */\r\n  static readonly GetCellUnLockParmPath = '/cells/operations/unlocks';\r\n\r\n  /**\r\n   * Get operation parameters for cell unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCellUnLockParm()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellUnLockParm$Response(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<StrictHttpResponse<Array<DeltaPlanParametersResp>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCellUnLockParmPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('ids', params.ids, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<DeltaPlanParametersResp>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get operation parameters for cell unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCellUnLockParm$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellUnLockParm(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<Array<DeltaPlanParametersResp>> {\r\n\r\n    return this.getCellUnLockParm$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<DeltaPlanParametersResp>>) => r.body as Array<DeltaPlanParametersResp>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCellGroupsLockParm\r\n   */\r\n  static readonly GetCellGroupsLockParmPath = '/cell-groups/operations/locks';\r\n\r\n  /**\r\n   * Get operation parameters for cell-groups lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCellGroupsLockParm()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellGroupsLockParm$Response(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<StrictHttpResponse<Array<DeltaPlanParametersResp>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCellGroupsLockParmPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('ids', params.ids, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<DeltaPlanParametersResp>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get operation parameters for cell-groups lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCellGroupsLockParm$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellGroupsLockParm(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<Array<DeltaPlanParametersResp>> {\r\n\r\n    return this.getCellGroupsLockParm$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<DeltaPlanParametersResp>>) => r.body as Array<DeltaPlanParametersResp>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCellGroupsUnLockParm\r\n   */\r\n  static readonly GetCellGroupsUnLockParmPath = '/cell-groups/operations/unlocks';\r\n\r\n  /**\r\n   * Get operation parameters for cell-groups unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCellGroupsUnLockParm()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellGroupsUnLockParm$Response(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<StrictHttpResponse<Array<DeltaPlanParametersResp>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCellGroupsUnLockParmPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('ids', params.ids, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<DeltaPlanParametersResp>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get operation parameters for cell-groups unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCellGroupsUnLockParm$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCellGroupsUnLockParm(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<Array<DeltaPlanParametersResp>> {\r\n\r\n    return this.getCellGroupsUnLockParm$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<DeltaPlanParametersResp>>) => r.body as Array<DeltaPlanParametersResp>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getDuLockParm\r\n   */\r\n  static readonly GetDuLockParmPath = '/dus/operations/locks';\r\n\r\n  /**\r\n   * Get operation parameters for du lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getDuLockParm()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDuLockParm$Response(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<StrictHttpResponse<Array<DeltaPlanParametersResp>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetDuLockParmPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('ids', params.ids, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<DeltaPlanParametersResp>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get operation parameters for du lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getDuLockParm$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDuLockParm(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<Array<DeltaPlanParametersResp>> {\r\n\r\n    return this.getDuLockParm$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<DeltaPlanParametersResp>>) => r.body as Array<DeltaPlanParametersResp>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getDuUnLockParm\r\n   */\r\n  static readonly GetDuUnLockParmPath = '/dus/operations/unlocks';\r\n\r\n  /**\r\n   * Get operation parameters for du unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getDuUnLockParm()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDuUnLockParm$Response(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<StrictHttpResponse<Array<DeltaPlanParametersResp>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetDuUnLockParmPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('ids', params.ids, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<DeltaPlanParametersResp>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get operation parameters for du unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getDuUnLockParm$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getDuUnLockParm(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<Array<DeltaPlanParametersResp>> {\r\n\r\n    return this.getDuUnLockParm$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<DeltaPlanParametersResp>>) => r.body as Array<DeltaPlanParametersResp>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getx2LinkLockParm\r\n   */\r\n  static readonly Getx2LinkLockParmPath = '/x2links/operations/locks';\r\n\r\n  /**\r\n   * Get operation parameters for x2link lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getx2LinkLockParm()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getx2LinkLockParm$Response(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<StrictHttpResponse<Array<DeltaPlanParametersResp>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.Getx2LinkLockParmPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('ids', params.ids, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<DeltaPlanParametersResp>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get operation parameters for x2link lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getx2LinkLockParm$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getx2LinkLockParm(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<Array<DeltaPlanParametersResp>> {\r\n\r\n    return this.getx2LinkLockParm$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<DeltaPlanParametersResp>>) => r.body as Array<DeltaPlanParametersResp>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getx2LinkUnLockParm\r\n   */\r\n  static readonly Getx2LinkUnLockParmPath = '/x2links/operations/unlocks';\r\n\r\n  /**\r\n   * Get operation parameters for x2link unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getx2LinkUnLockParm()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getx2LinkUnLockParm$Response(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<StrictHttpResponse<Array<DeltaPlanParametersResp>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.Getx2LinkUnLockParmPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('ids', params.ids, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<DeltaPlanParametersResp>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get operation parameters for x2link unlock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getx2LinkUnLockParm$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getx2LinkUnLockParm(params?: {\r\n\r\n    /**\r\n     * Resource Ids for query\r\n     */\r\n    ids?: Array<string>;\r\n\r\n  }): Observable<Array<DeltaPlanParametersResp>> {\r\n\r\n    return this.getx2LinkUnLockParm$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<DeltaPlanParametersResp>>) => r.body as Array<DeltaPlanParametersResp>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation operationsRestartAboutToHappenPost\r\n   */\r\n  static readonly OperationsRestartAboutToHappenPostPath = '/operations/restart-about-to-happen';\r\n\r\n  /**\r\n   * Requests permission for restart.\r\n   *\r\n   * Announces other services that a restart is about to happen and waits for response.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `operationsRestartAboutToHappenPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  operationsRestartAboutToHappenPost$Response(params?: {\r\n\r\n    /**\r\n     * json containing reboot reason\r\n     */\r\n    body?: { 'reason': 'CM reboot request' | 'Manual reboot' | 'Recovery action', 'target': 'cluster' }\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.OperationsRestartAboutToHappenPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Requests permission for restart.\r\n   *\r\n   * Announces other services that a restart is about to happen and waits for response.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `operationsRestartAboutToHappenPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  operationsRestartAboutToHappenPost(params?: {\r\n\r\n    /**\r\n     * json containing reboot reason\r\n     */\r\n    body?: { 'reason': 'CM reboot request' | 'Manual reboot' | 'Recovery action', 'target': 'cluster' }\r\n  }): Observable<void> {\r\n\r\n    return this.operationsRestartAboutToHappenPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation triggerCuLinksLockByType\r\n   */\r\n  static readonly TriggerCuLinksLockByTypePath = '/links/{linkType}/operations/locks';\r\n\r\n  /**\r\n   * Trigger CU external links lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `triggerCuLinksLockByType()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  triggerCuLinksLockByType$Response(params: {\r\n\r\n    /**\r\n     * external link type\r\n     */\r\n    linkType: LinkResource;\r\n\r\n  }): Observable<StrictHttpResponse<CuLinksLockResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.TriggerCuLinksLockByTypePath, 'post');\r\n    if (params) {\r\n\r\n      rb.path('linkType', params.linkType, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CuLinksLockResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Trigger CU external links lock.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `triggerCuLinksLockByType$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  triggerCuLinksLockByType(params: {\r\n\r\n    /**\r\n     * external link type\r\n     */\r\n    linkType: LinkResource;\r\n\r\n  }): Observable<CuLinksLockResponse> {\r\n\r\n    return this.triggerCuLinksLockByType$Response(params).pipe(\r\n      map((r: StrictHttpResponse<CuLinksLockResponse>) => r.body as CuLinksLockResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getCuLinksLock\r\n   */\r\n  static readonly GetCuLinksLockPath = '/links/{linkType}/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Get CU external links lock operation status.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getCuLinksLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCuLinksLock$Response(params: {\r\n\r\n    /**\r\n     * external link type\r\n     */\r\n    linkType: LinkResource;\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<CuLinksLockResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCuLinksLockPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('linkType', params.linkType, {});\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CuLinksLockResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get CU external links lock operation status.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getCuLinksLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getCuLinksLock(params: {\r\n\r\n    /**\r\n     * external link type\r\n     */\r\n    linkType: LinkResource;\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<CuLinksLockResponse> {\r\n\r\n    return this.getCuLinksLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<CuLinksLockResponse>) => r.body as CuLinksLockResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation deleteCuLinksLock\r\n   */\r\n  static readonly DeleteCuLinksLockPath = '/links/{linkType}/operations/locks/{operationId}';\r\n\r\n  /**\r\n   * Delete CU external links lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteCuLinksLock()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteCuLinksLock$Response(params: {\r\n\r\n    /**\r\n     * external link type\r\n     */\r\n    linkType: LinkResource;\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteCuLinksLockPath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('linkType', params.linkType, {});\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete CU external links lock operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `deleteCuLinksLock$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteCuLinksLock(params: {\r\n\r\n    /**\r\n     * external link type\r\n     */\r\n    linkType: LinkResource;\r\n\r\n    /**\r\n     * operation unique ID\r\n     */\r\n    operationId: string;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.deleteCuLinksLock$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { BeamPatternId } from '../models/beam-pattern-id';\r\nimport { BeamPatternIdArray } from '../models/beam-pattern-id-array';\r\nimport { DlTestModelParams } from '../models/dl-test-model-params';\r\nimport { DownlinkPresetConfig } from '../models/downlink-preset-config';\r\nimport { NrCellId } from '../models/nr-cell-id';\r\nimport { PerformancePresetConfig } from '../models/performance-preset-config';\r\nimport { PrachTestParams } from '../models/prach-test-params';\r\nimport { PrachTestResult } from '../models/prach-test-result';\r\nimport { PucchTestParams } from '../models/pucch-test-params';\r\nimport { PucchTestResult } from '../models/pucch-test-result';\r\nimport { PuschTestParams } from '../models/pusch-test-params';\r\nimport { PuschTestResult } from '../models/pusch-test-result';\r\nimport { RunningTestModels } from '../models/running-test-models';\r\nimport { TestOperationStatus } from '../models/test-operation-status';\r\nimport { UlTestModelParams } from '../models/ul-test-model-params';\r\nimport { UlTestModelResult } from '../models/ul-test-model-result';\r\nimport { UplinkPresetConfig } from '../models/uplink-preset-config';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TestModelsService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsDownlinkStartPost\r\n   */\r\n  static readonly TestModelsOperationsDownlinkStartPostPath = '/test-models/operations/downlink/start';\r\n\r\n  /**\r\n   * Triggers start DL test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsDownlinkStartPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsDownlinkStartPost$Response(params: {\r\n  \r\n    /**\r\n     * Parameters for starting DL tests\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'dlTestModelParams': DlTestModelParams }\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsDownlinkStartPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Triggers start DL test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsDownlinkStartPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsDownlinkStartPost(params: {\r\n  \r\n    /**\r\n     * Parameters for starting DL tests\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'dlTestModelParams': DlTestModelParams }\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsDownlinkStartPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsDownlinkStartOperationIdGet\r\n   */\r\n  static readonly TestModelsOperationsDownlinkStartOperationIdGetPath = '/test-models/operations/downlink/start/{operationId}';\r\n\r\n  /**\r\n   * Gets the DL Test Status of the operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsDownlinkStartOperationIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsDownlinkStartOperationIdGet$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsDownlinkStartOperationIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the DL Test Status of the operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsDownlinkStartOperationIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsDownlinkStartOperationIdGet(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsDownlinkStartOperationIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsDownlinkStartOperationIdDelete\r\n   */\r\n  static readonly TestModelsOperationsDownlinkStartOperationIdDeletePath = '/test-models/operations/downlink/start/{operationId}';\r\n\r\n  /**\r\n   * Delete start test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsDownlinkStartOperationIdDelete()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsDownlinkStartOperationIdDelete$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsDownlinkStartOperationIdDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete start test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsDownlinkStartOperationIdDelete$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsDownlinkStartOperationIdDelete(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.testModelsOperationsDownlinkStartOperationIdDelete$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsDownlinkStopPost\r\n   */\r\n  static readonly TestModelsOperationsDownlinkStopPostPath = '/test-models/operations/downlink/stop';\r\n\r\n  /**\r\n   * Triggers stop DL test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsDownlinkStopPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsDownlinkStopPost$Response(params: {\r\n  \r\n    /**\r\n     * Parameters for stopping DL tests\r\n     */\r\n    body: { 'nrCellId': NrCellId }\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsDownlinkStopPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Triggers stop DL test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsDownlinkStopPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsDownlinkStopPost(params: {\r\n  \r\n    /**\r\n     * Parameters for stopping DL tests\r\n     */\r\n    body: { 'nrCellId': NrCellId }\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsDownlinkStopPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsDownlinkStopOperationIdGet\r\n   */\r\n  static readonly TestModelsOperationsDownlinkStopOperationIdGetPath = '/test-models/operations/downlink/stop/{operationId}';\r\n\r\n  /**\r\n   * Gets the Status of the stopped operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsDownlinkStopOperationIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsDownlinkStopOperationIdGet$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsDownlinkStopOperationIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the Status of the stopped operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsDownlinkStopOperationIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsDownlinkStopOperationIdGet(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsDownlinkStopOperationIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsDownlinkStopOperationIdDelete\r\n   */\r\n  static readonly TestModelsOperationsDownlinkStopOperationIdDeletePath = '/test-models/operations/downlink/stop/{operationId}';\r\n\r\n  /**\r\n   * Deletes stop test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsDownlinkStopOperationIdDelete()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsDownlinkStopOperationIdDelete$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsDownlinkStopOperationIdDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deletes stop test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsDownlinkStopOperationIdDelete$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsDownlinkStopOperationIdDelete(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.testModelsOperationsDownlinkStopOperationIdDelete$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsUplinkStartPost\r\n   */\r\n  static readonly TestModelsOperationsUplinkStartPostPath = '/test-models/operations/uplink/start';\r\n\r\n  /**\r\n   * Triggers start UL test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsUplinkStartPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsUplinkStartPost$Response(params: {\r\n  \r\n    /**\r\n     * Parameters for starting UL tests\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'ulTestModelParams': UlTestModelParams }\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsUplinkStartPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Triggers start UL test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsUplinkStartPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsUplinkStartPost(params: {\r\n  \r\n    /**\r\n     * Parameters for starting UL tests\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'ulTestModelParams': UlTestModelParams }\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsUplinkStartPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsUplinkStartOperationIdGet\r\n   */\r\n  static readonly TestModelsOperationsUplinkStartOperationIdGetPath = '/test-models/operations/uplink/start/{operationId}';\r\n\r\n  /**\r\n   * Gets the UL Test Status of the operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsUplinkStartOperationIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsUplinkStartOperationIdGet$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsUplinkStartOperationIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the UL Test Status of the operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsUplinkStartOperationIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsUplinkStartOperationIdGet(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsUplinkStartOperationIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsUplinkStartOperationIdDelete\r\n   */\r\n  static readonly TestModelsOperationsUplinkStartOperationIdDeletePath = '/test-models/operations/uplink/start/{operationId}';\r\n\r\n  /**\r\n   * Delete start test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsUplinkStartOperationIdDelete()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsUplinkStartOperationIdDelete$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsUplinkStartOperationIdDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete start test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsUplinkStartOperationIdDelete$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsUplinkStartOperationIdDelete(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.testModelsOperationsUplinkStartOperationIdDelete$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsUplinkStopPost\r\n   */\r\n  static readonly TestModelsOperationsUplinkStopPostPath = '/test-models/operations/uplink/stop';\r\n\r\n  /**\r\n   * Triggers stop UL test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsUplinkStopPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsUplinkStopPost$Response(params: {\r\n  \r\n    /**\r\n     * Parameters for stopping UL tests\r\n     */\r\n    body: { 'nrCellId': NrCellId }\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsUplinkStopPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Triggers stop UL test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsUplinkStopPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsUplinkStopPost(params: {\r\n  \r\n    /**\r\n     * Parameters for stopping UL tests\r\n     */\r\n    body: { 'nrCellId': NrCellId }\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsUplinkStopPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsUplinkStopOperationIdGet\r\n   */\r\n  static readonly TestModelsOperationsUplinkStopOperationIdGetPath = '/test-models/operations/uplink/stop/{operationId}';\r\n\r\n  /**\r\n   * Gets the Status of the stopped operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsUplinkStopOperationIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsUplinkStopOperationIdGet$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsUplinkStopOperationIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the Status of the stopped operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsUplinkStopOperationIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsUplinkStopOperationIdGet(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsUplinkStopOperationIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsUplinkStopOperationIdDelete\r\n   */\r\n  static readonly TestModelsOperationsUplinkStopOperationIdDeletePath = '/test-models/operations/uplink/stop/{operationId}';\r\n\r\n  /**\r\n   * Deletes stop test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsUplinkStopOperationIdDelete()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsUplinkStopOperationIdDelete$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsUplinkStopOperationIdDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deletes stop test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsUplinkStopOperationIdDelete$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsUplinkStopOperationIdDelete(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.testModelsOperationsUplinkStopOperationIdDelete$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsRunningTestModelsGet\r\n   */\r\n  static readonly TestModelsRunningTestModelsGetPath = '/test-models/running-test-models';\r\n\r\n  /**\r\n   * Gets running tests information.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsRunningTestModelsGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsRunningTestModelsGet$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<RunningTestModels>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsRunningTestModelsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<RunningTestModels>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets running tests information.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsRunningTestModelsGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsRunningTestModelsGet(params?: {\r\n\r\n  }): Observable<RunningTestModels> {\r\n\r\n    return this.testModelsRunningTestModelsGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<RunningTestModels>) => r.body as RunningTestModels)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsDownlinkTestPresetConfigsGet\r\n   */\r\n  static readonly TestModelsDownlinkTestPresetConfigsGetPath = '/test-models/downlink/test-preset-configs';\r\n\r\n  /**\r\n   * Gets cells information for downlink.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsDownlinkTestPresetConfigsGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsDownlinkTestPresetConfigsGet$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<DownlinkPresetConfig>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsDownlinkTestPresetConfigsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<DownlinkPresetConfig>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets cells information for downlink.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsDownlinkTestPresetConfigsGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsDownlinkTestPresetConfigsGet(params?: {\r\n\r\n  }): Observable<Array<DownlinkPresetConfig>> {\r\n\r\n    return this.testModelsDownlinkTestPresetConfigsGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<DownlinkPresetConfig>>) => r.body as Array<DownlinkPresetConfig>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsDownlinkChangeBeamPost\r\n   */\r\n  static readonly TestModelsOperationsDownlinkChangeBeamPostPath = '/test-models/operations/downlink/change-beam';\r\n\r\n  /**\r\n   * Triggers change beam operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsDownlinkChangeBeamPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsDownlinkChangeBeamPost$Response(params: {\r\n  \r\n    /**\r\n     * Parameters for triggering change beam\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'beamPatternId': BeamPatternId }\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsDownlinkChangeBeamPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Triggers change beam operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsDownlinkChangeBeamPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsDownlinkChangeBeamPost(params: {\r\n  \r\n    /**\r\n     * Parameters for triggering change beam\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'beamPatternId': BeamPatternId }\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsDownlinkChangeBeamPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsDownlinkChangeBeamOperationIdGet\r\n   */\r\n  static readonly TestModelsOperationsDownlinkChangeBeamOperationIdGetPath = '/test-models/operations/downlink/change-beam/{operationId}';\r\n\r\n  /**\r\n   * Gets the Status of the change beam operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsDownlinkChangeBeamOperationIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsDownlinkChangeBeamOperationIdGet$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsDownlinkChangeBeamOperationIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the Status of the change beam operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsDownlinkChangeBeamOperationIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsDownlinkChangeBeamOperationIdGet(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsDownlinkChangeBeamOperationIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsDownlinkChangeBeamOperationIdDelete\r\n   */\r\n  static readonly TestModelsOperationsDownlinkChangeBeamOperationIdDeletePath = '/test-models/operations/downlink/change-beam/{operationId}';\r\n\r\n  /**\r\n   * Deletes change beam operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsDownlinkChangeBeamOperationIdDelete()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsDownlinkChangeBeamOperationIdDelete$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsDownlinkChangeBeamOperationIdDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deletes change beam operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsDownlinkChangeBeamOperationIdDelete$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsDownlinkChangeBeamOperationIdDelete(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.testModelsOperationsDownlinkChangeBeamOperationIdDelete$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsUplinkTestPresetConfigsGet\r\n   */\r\n  static readonly TestModelsUplinkTestPresetConfigsGetPath = '/test-models/uplink/test-preset-configs';\r\n\r\n  /**\r\n   * Gets cells information for uplink.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsUplinkTestPresetConfigsGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsUplinkTestPresetConfigsGet$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<UplinkPresetConfig>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsUplinkTestPresetConfigsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<UplinkPresetConfig>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets cells information for uplink.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsUplinkTestPresetConfigsGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsUplinkTestPresetConfigsGet(params?: {\r\n\r\n  }): Observable<Array<UplinkPresetConfig>> {\r\n\r\n    return this.testModelsUplinkTestPresetConfigsGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<UplinkPresetConfig>>) => r.body as Array<UplinkPresetConfig>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsUplinkChangeBeamPost\r\n   */\r\n  static readonly TestModelsOperationsUplinkChangeBeamPostPath = '/test-models/operations/uplink/change-beam';\r\n\r\n  /**\r\n   * Triggers change beam operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsUplinkChangeBeamPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsUplinkChangeBeamPost$Response(params: {\r\n  \r\n    /**\r\n     * Parameters for triggering change beam\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'beamPatternId': BeamPatternId }\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsUplinkChangeBeamPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Triggers change beam operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsUplinkChangeBeamPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsUplinkChangeBeamPost(params: {\r\n  \r\n    /**\r\n     * Parameters for triggering change beam\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'beamPatternId': BeamPatternId }\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsUplinkChangeBeamPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsUplinkChangeBeamOperationIdGet\r\n   */\r\n  static readonly TestModelsOperationsUplinkChangeBeamOperationIdGetPath = '/test-models/operations/uplink/change-beam/{operationId}';\r\n\r\n  /**\r\n   * Gets the Status of the change beam operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsUplinkChangeBeamOperationIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsUplinkChangeBeamOperationIdGet$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsUplinkChangeBeamOperationIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the Status of the change beam operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsUplinkChangeBeamOperationIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsUplinkChangeBeamOperationIdGet(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsUplinkChangeBeamOperationIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsUplinkChangeBeamOperationIdDelete\r\n   */\r\n  static readonly TestModelsOperationsUplinkChangeBeamOperationIdDeletePath = '/test-models/operations/uplink/change-beam/{operationId}';\r\n\r\n  /**\r\n   * Deletes change beam operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsUplinkChangeBeamOperationIdDelete()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsUplinkChangeBeamOperationIdDelete$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsUplinkChangeBeamOperationIdDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deletes change beam operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsUplinkChangeBeamOperationIdDelete$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsUplinkChangeBeamOperationIdDelete(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.testModelsOperationsUplinkChangeBeamOperationIdDelete$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsUplinkTestResultGet\r\n   */\r\n  static readonly TestModelsUplinkTestResultGetPath = '/test-models/uplink/test-result';\r\n\r\n  /**\r\n   * For getting running tests result information.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsUplinkTestResultGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsUplinkTestResultGet$Response(params: {\r\n\r\n    /**\r\n     * Parameters for getting running tests result information.\r\n     */\r\n    testResult: { 'nrCellId': NrCellId };\r\n\r\n  }): Observable<StrictHttpResponse<{ 'ulTestModelResults': Array<UlTestModelResult>, 'ulTestModelParams': UlTestModelParams }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsUplinkTestResultGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('testResult', params.testResult, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'ulTestModelResults': Array<UlTestModelResult>, 'ulTestModelParams': UlTestModelParams }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * For getting running tests result information.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsUplinkTestResultGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsUplinkTestResultGet(params: {\r\n\r\n    /**\r\n     * Parameters for getting running tests result information.\r\n     */\r\n    testResult: { 'nrCellId': NrCellId };\r\n\r\n  }): Observable<{ 'ulTestModelResults': Array<UlTestModelResult>, 'ulTestModelParams': UlTestModelParams }> {\r\n\r\n    return this.testModelsUplinkTestResultGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'ulTestModelResults': Array<UlTestModelResult>, 'ulTestModelParams': UlTestModelParams }>) => r.body as { 'ulTestModelResults': Array<UlTestModelResult>, 'ulTestModelParams': UlTestModelParams })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformancePuschStartPost\r\n   */\r\n  static readonly TestModelsOperationsPerformancePuschStartPostPath = '/test-models/operations/performance/pusch/start';\r\n\r\n  /**\r\n   * Triggers start UL CCM performance test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformancePuschStartPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsPerformancePuschStartPost$Response(params: {\r\n  \r\n    /**\r\n     * Parameters for starting PUSCH performance tests\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'puschTestParams': PuschTestParams }\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformancePuschStartPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Triggers start UL CCM performance test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformancePuschStartPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsPerformancePuschStartPost(params: {\r\n  \r\n    /**\r\n     * Parameters for starting PUSCH performance tests\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'puschTestParams': PuschTestParams }\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsPerformancePuschStartPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformancePuschStartOperationIdGet\r\n   */\r\n  static readonly TestModelsOperationsPerformancePuschStartOperationIdGetPath = '/test-models/operations/performance/pusch/start/{operationId}';\r\n\r\n  /**\r\n   * Gets the UL CCM performance test status of the operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformancePuschStartOperationIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformancePuschStartOperationIdGet$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformancePuschStartOperationIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the UL CCM performance test status of the operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformancePuschStartOperationIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformancePuschStartOperationIdGet(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsPerformancePuschStartOperationIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformancePuschStartOperationIdDelete\r\n   */\r\n  static readonly TestModelsOperationsPerformancePuschStartOperationIdDeletePath = '/test-models/operations/performance/pusch/start/{operationId}';\r\n\r\n  /**\r\n   * Delete start test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformancePuschStartOperationIdDelete()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformancePuschStartOperationIdDelete$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformancePuschStartOperationIdDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete start test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformancePuschStartOperationIdDelete$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformancePuschStartOperationIdDelete(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.testModelsOperationsPerformancePuschStartOperationIdDelete$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformancePucchStartPost\r\n   */\r\n  static readonly TestModelsOperationsPerformancePucchStartPostPath = '/test-models/operations/performance/pucch/start';\r\n\r\n  /**\r\n   * Triggers start UL CCM performance test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformancePucchStartPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsPerformancePucchStartPost$Response(params: {\r\n  \r\n    /**\r\n     * Parameters for starting PUCCH performance tests\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'pucchTestParams': PucchTestParams }\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformancePucchStartPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Triggers start UL CCM performance test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformancePucchStartPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsPerformancePucchStartPost(params: {\r\n  \r\n    /**\r\n     * Parameters for starting PUCCH performance tests\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'pucchTestParams': PucchTestParams }\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsPerformancePucchStartPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformancePucchStartOperationIdGet\r\n   */\r\n  static readonly TestModelsOperationsPerformancePucchStartOperationIdGetPath = '/test-models/operations/performance/pucch/start/{operationId}';\r\n\r\n  /**\r\n   * Gets the UL CCM performance test status of the operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformancePucchStartOperationIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformancePucchStartOperationIdGet$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformancePucchStartOperationIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the UL CCM performance test status of the operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformancePucchStartOperationIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformancePucchStartOperationIdGet(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsPerformancePucchStartOperationIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformancePucchStartOperationIdDelete\r\n   */\r\n  static readonly TestModelsOperationsPerformancePucchStartOperationIdDeletePath = '/test-models/operations/performance/pucch/start/{operationId}';\r\n\r\n  /**\r\n   * Delete start test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformancePucchStartOperationIdDelete()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformancePucchStartOperationIdDelete$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformancePucchStartOperationIdDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete start test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformancePucchStartOperationIdDelete$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformancePucchStartOperationIdDelete(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.testModelsOperationsPerformancePucchStartOperationIdDelete$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformancePrachStartPost\r\n   */\r\n  static readonly TestModelsOperationsPerformancePrachStartPostPath = '/test-models/operations/performance/prach/start';\r\n\r\n  /**\r\n   * Triggers start UL CCM performance test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformancePrachStartPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsPerformancePrachStartPost$Response(params: {\r\n  \r\n    /**\r\n     * Parameters for starting PRACH performance tests\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'prachTestParams': PrachTestParams }\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformancePrachStartPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Triggers start UL CCM performance test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformancePrachStartPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsPerformancePrachStartPost(params: {\r\n  \r\n    /**\r\n     * Parameters for starting PRACH performance tests\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'prachTestParams': PrachTestParams }\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsPerformancePrachStartPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformancePrachStartOperationIdGet\r\n   */\r\n  static readonly TestModelsOperationsPerformancePrachStartOperationIdGetPath = '/test-models/operations/performance/prach/start/{operationId}';\r\n\r\n  /**\r\n   * Gets the UL CCM performance test status of the operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformancePrachStartOperationIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformancePrachStartOperationIdGet$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformancePrachStartOperationIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the UL CCM performance test status of the operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformancePrachStartOperationIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformancePrachStartOperationIdGet(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsPerformancePrachStartOperationIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformancePrachStartOperationIdDelete\r\n   */\r\n  static readonly TestModelsOperationsPerformancePrachStartOperationIdDeletePath = '/test-models/operations/performance/prach/start/{operationId}';\r\n\r\n  /**\r\n   * Delete start test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformancePrachStartOperationIdDelete()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformancePrachStartOperationIdDelete$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformancePrachStartOperationIdDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete start test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformancePrachStartOperationIdDelete$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformancePrachStartOperationIdDelete(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.testModelsOperationsPerformancePrachStartOperationIdDelete$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformanceStopPost\r\n   */\r\n  static readonly TestModelsOperationsPerformanceStopPostPath = '/test-models/operations/performance/stop';\r\n\r\n  /**\r\n   * Triggers stop UL CCM performance test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformanceStopPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsPerformanceStopPost$Response(params: {\r\n  \r\n    /**\r\n     * Parameters for stopping Performance tests\r\n     */\r\n    body: { 'nrCellId': NrCellId }\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformanceStopPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Triggers stop UL CCM performance test request for given cell ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformanceStopPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsPerformanceStopPost(params: {\r\n  \r\n    /**\r\n     * Parameters for stopping Performance tests\r\n     */\r\n    body: { 'nrCellId': NrCellId }\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsPerformanceStopPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformanceStopOperationIdGet\r\n   */\r\n  static readonly TestModelsOperationsPerformanceStopOperationIdGetPath = '/test-models/operations/performance/stop/{operationId}';\r\n\r\n  /**\r\n   * Gets the Status of the stopped operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformanceStopOperationIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformanceStopOperationIdGet$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformanceStopOperationIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the Status of the stopped operation ID.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformanceStopOperationIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformanceStopOperationIdGet(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsPerformanceStopOperationIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformanceStopOperationIdDelete\r\n   */\r\n  static readonly TestModelsOperationsPerformanceStopOperationIdDeletePath = '/test-models/operations/performance/stop/{operationId}';\r\n\r\n  /**\r\n   * Deletes stop test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformanceStopOperationIdDelete()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformanceStopOperationIdDelete$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformanceStopOperationIdDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deletes stop test operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformanceStopOperationIdDelete$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformanceStopOperationIdDelete(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.testModelsOperationsPerformanceStopOperationIdDelete$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsPerformanceTestPresetConfigsGet\r\n   */\r\n  static readonly TestModelsPerformanceTestPresetConfigsGetPath = '/test-models/performance/test-preset-configs';\r\n\r\n  /**\r\n   * Gets cells information for UL performance test.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsPerformanceTestPresetConfigsGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsPerformanceTestPresetConfigsGet$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<PerformancePresetConfig>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsPerformanceTestPresetConfigsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<PerformancePresetConfig>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets cells information for UL performance test.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsPerformanceTestPresetConfigsGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsPerformanceTestPresetConfigsGet(params?: {\r\n\r\n  }): Observable<Array<PerformancePresetConfig>> {\r\n\r\n    return this.testModelsPerformanceTestPresetConfigsGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<PerformancePresetConfig>>) => r.body as Array<PerformancePresetConfig>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformanceChangeBeamPost\r\n   */\r\n  static readonly TestModelsOperationsPerformanceChangeBeamPostPath = '/test-models/operations/performance/change-beam';\r\n\r\n  /**\r\n   * Triggers change beam operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformanceChangeBeamPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsPerformanceChangeBeamPost$Response(params: {\r\n  \r\n    /**\r\n     * Parameters for triggering change beam\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'beamPatternId': BeamPatternIdArray }\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformanceChangeBeamPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Triggers change beam operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformanceChangeBeamPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  testModelsOperationsPerformanceChangeBeamPost(params: {\r\n  \r\n    /**\r\n     * Parameters for triggering change beam\r\n     */\r\n    body: { 'nrCellId': NrCellId, 'beamPatternId': BeamPatternIdArray }\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsPerformanceChangeBeamPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformanceChangeBeamOperationIdGet\r\n   */\r\n  static readonly TestModelsOperationsPerformanceChangeBeamOperationIdGetPath = '/test-models/operations/performance/change-beam/{operationId}';\r\n\r\n  /**\r\n   * Gets the Status of the change beam operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformanceChangeBeamOperationIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformanceChangeBeamOperationIdGet$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<TestOperationStatus>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformanceChangeBeamOperationIdGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<TestOperationStatus>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the Status of the change beam operation.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformanceChangeBeamOperationIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformanceChangeBeamOperationIdGet(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<TestOperationStatus> {\r\n\r\n    return this.testModelsOperationsPerformanceChangeBeamOperationIdGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<TestOperationStatus>) => r.body as TestOperationStatus)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsOperationsPerformanceChangeBeamOperationIdDelete\r\n   */\r\n  static readonly TestModelsOperationsPerformanceChangeBeamOperationIdDeletePath = '/test-models/operations/performance/change-beam/{operationId}';\r\n\r\n  /**\r\n   * Deletes change beam operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsOperationsPerformanceChangeBeamOperationIdDelete()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformanceChangeBeamOperationIdDelete$Response(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsOperationsPerformanceChangeBeamOperationIdDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.path('operationId', params.operationId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deletes change beam operation task for given operationId.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsOperationsPerformanceChangeBeamOperationIdDelete$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsOperationsPerformanceChangeBeamOperationIdDelete(params: {\r\n    operationId: number;\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.testModelsOperationsPerformanceChangeBeamOperationIdDelete$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsPerformancePuschTestResultGet\r\n   */\r\n  static readonly TestModelsPerformancePuschTestResultGetPath = '/test-models/performance/pusch/test-result';\r\n\r\n  /**\r\n   * For getting running tests result information.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsPerformancePuschTestResultGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsPerformancePuschTestResultGet$Response(params: {\r\n\r\n    /**\r\n     * Parameters for getting running tests result information.\r\n     */\r\n    testResult: { 'nrCellId': NrCellId };\r\n\r\n  }): Observable<StrictHttpResponse<{ 'puschTestResults': Array<PuschTestResult>, 'puschTestParams': PuschTestParams }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsPerformancePuschTestResultGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('testResult', params.testResult, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'puschTestResults': Array<PuschTestResult>, 'puschTestParams': PuschTestParams }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * For getting running tests result information.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsPerformancePuschTestResultGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsPerformancePuschTestResultGet(params: {\r\n\r\n    /**\r\n     * Parameters for getting running tests result information.\r\n     */\r\n    testResult: { 'nrCellId': NrCellId };\r\n\r\n  }): Observable<{ 'puschTestResults': Array<PuschTestResult>, 'puschTestParams': PuschTestParams }> {\r\n\r\n    return this.testModelsPerformancePuschTestResultGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'puschTestResults': Array<PuschTestResult>, 'puschTestParams': PuschTestParams }>) => r.body as { 'puschTestResults': Array<PuschTestResult>, 'puschTestParams': PuschTestParams })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsPerformancePucchTestResultGet\r\n   */\r\n  static readonly TestModelsPerformancePucchTestResultGetPath = '/test-models/performance/pucch/test-result';\r\n\r\n  /**\r\n   * For getting running tests result information.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsPerformancePucchTestResultGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsPerformancePucchTestResultGet$Response(params: {\r\n\r\n    /**\r\n     * Parameters for getting running tests result information.\r\n     */\r\n    testResult: { 'nrCellId': NrCellId };\r\n\r\n  }): Observable<StrictHttpResponse<{ 'pucchTestResults': Array<PucchTestResult>, 'pucchTestParams': PucchTestParams }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsPerformancePucchTestResultGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('testResult', params.testResult, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'pucchTestResults': Array<PucchTestResult>, 'pucchTestParams': PucchTestParams }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * For getting running tests result information.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsPerformancePucchTestResultGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsPerformancePucchTestResultGet(params: {\r\n\r\n    /**\r\n     * Parameters for getting running tests result information.\r\n     */\r\n    testResult: { 'nrCellId': NrCellId };\r\n\r\n  }): Observable<{ 'pucchTestResults': Array<PucchTestResult>, 'pucchTestParams': PucchTestParams }> {\r\n\r\n    return this.testModelsPerformancePucchTestResultGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'pucchTestResults': Array<PucchTestResult>, 'pucchTestParams': PucchTestParams }>) => r.body as { 'pucchTestResults': Array<PucchTestResult>, 'pucchTestParams': PucchTestParams })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation testModelsPerformancePrachTestResultGet\r\n   */\r\n  static readonly TestModelsPerformancePrachTestResultGetPath = '/test-models/performance/prach/test-result';\r\n\r\n  /**\r\n   * For getting running tests result information.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `testModelsPerformancePrachTestResultGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsPerformancePrachTestResultGet$Response(params: {\r\n\r\n    /**\r\n     * Parameters for getting running tests result information.\r\n     */\r\n    testResult: { 'nrCellId': NrCellId };\r\n\r\n  }): Observable<StrictHttpResponse<{ 'prachTestResults': Array<PrachTestResult>, 'prachTestParams': PrachTestParams }>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, TestModelsService.TestModelsPerformancePrachTestResultGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('testResult', params.testResult, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<{ 'prachTestResults': Array<PrachTestResult>, 'prachTestParams': PrachTestParams }>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * For getting running tests result information.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `testModelsPerformancePrachTestResultGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  testModelsPerformancePrachTestResultGet(params: {\r\n\r\n    /**\r\n     * Parameters for getting running tests result information.\r\n     */\r\n    testResult: { 'nrCellId': NrCellId };\r\n\r\n  }): Observable<{ 'prachTestResults': Array<PrachTestResult>, 'prachTestParams': PrachTestParams }> {\r\n\r\n    return this.testModelsPerformancePrachTestResultGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<{ 'prachTestResults': Array<PrachTestResult>, 'prachTestParams': PrachTestParams }>) => r.body as { 'prachTestResults': Array<PrachTestResult>, 'prachTestParams': PrachTestParams })\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ActInternalTrace } from '../models/act-internal-trace';\nimport { UPlaneStreamConfiguration } from '../models/u-plane-stream-configuration';\nimport { UPlaneTraceInfo } from '../models/u-plane-trace-info';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TracingService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getTracesActivationStatus\n   */\n  static readonly GetTracesActivationStatusPath = '/traces/activation-status';\n\n  /**\n   * Check if activation status is on or off.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getTracesActivationStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTracesActivationStatus$Response(params?: {\n\n  }): Observable<StrictHttpResponse<ActInternalTrace>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TracingService.GetTracesActivationStatusPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ActInternalTrace>;\n      })\n    );\n  }\n\n  /**\n   * Check if activation status is on or off.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getTracesActivationStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTracesActivationStatus(params?: {\n\n  }): Observable<ActInternalTrace> {\n\n    return this.getTracesActivationStatus$Response(params).pipe(\n      map((r: StrictHttpResponse<ActInternalTrace>) => r.body as ActInternalTrace)\n    );\n  }\n\n  /**\n   * Path part for operation getAllUPlaneTraces\n   */\n  static readonly GetAllUPlaneTracesPath = '/traces/u-plane';\n\n  /**\n   * Retrieve all U-Plane active trace streams.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllUPlaneTraces()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllUPlaneTraces$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<UPlaneTraceInfo>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TracingService.GetAllUPlaneTracesPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<UPlaneTraceInfo>>;\n      })\n    );\n  }\n\n  /**\n   * Retrieve all U-Plane active trace streams.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getAllUPlaneTraces$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllUPlaneTraces(params?: {\n\n  }): Observable<Array<UPlaneTraceInfo>> {\n\n    return this.getAllUPlaneTraces$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<UPlaneTraceInfo>>) => r.body as Array<UPlaneTraceInfo>)\n    );\n  }\n\n  /**\n   * Path part for operation startUPlaneTrace\n   */\n  static readonly StartUPlaneTracePath = '/traces/u-plane';\n\n  /**\n   * Start a U-Plane trace stream.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `startUPlaneTrace()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  startUPlaneTrace$Response(params: {\n      body: UPlaneStreamConfiguration\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TracingService.StartUPlaneTracePath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Start a U-Plane trace stream.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `startUPlaneTrace$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  startUPlaneTrace(params: {\n      body: UPlaneStreamConfiguration\n  }): Observable<void> {\n\n    return this.startUPlaneTrace$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getUPlaneTraceById\n   */\n  static readonly GetUPlaneTraceByIdPath = '/traces/u-plane/{traceId}';\n\n  /**\n   * Get a U-Plane trace stream information by id.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getUPlaneTraceById()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUPlaneTraceById$Response(params: {\n\n    /**\n     * Trace stream unique identifier\n     */\n    traceId: string;\n\n  }): Observable<StrictHttpResponse<UPlaneTraceInfo>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TracingService.GetUPlaneTraceByIdPath, 'get');\n    if (params) {\n\n      rb.path('traceId', params.traceId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<UPlaneTraceInfo>;\n      })\n    );\n  }\n\n  /**\n   * Get a U-Plane trace stream information by id.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getUPlaneTraceById$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUPlaneTraceById(params: {\n\n    /**\n     * Trace stream unique identifier\n     */\n    traceId: string;\n\n  }): Observable<UPlaneTraceInfo> {\n\n    return this.getUPlaneTraceById$Response(params).pipe(\n      map((r: StrictHttpResponse<UPlaneTraceInfo>) => r.body as UPlaneTraceInfo)\n    );\n  }\n\n  /**\n   * Path part for operation stopUPlaneTraceById\n   */\n  static readonly StopUPlaneTraceByIdPath = '/traces/u-plane/{traceId}';\n\n  /**\n   * Stop a U-Plane trace stream by id.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `stopUPlaneTraceById()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  stopUPlaneTraceById$Response(params: {\n\n    /**\n     * Trace stream unique identifier\n     */\n    traceId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TracingService.StopUPlaneTraceByIdPath, 'delete');\n    if (params) {\n\n      rb.path('traceId', params.traceId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Stop a U-Plane trace stream by id.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `stopUPlaneTraceById$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  stopUPlaneTraceById(params: {\n\n    /**\n     * Trace stream unique identifier\n     */\n    traceId: string;\n\n  }): Observable<void> {\n\n    return this.stopUPlaneTraceById$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { NrbtsRInfo } from '../models/nrbts-r-info';\nimport { NrduRInfo } from '../models/nrdu-r-info';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TransportService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation transportUpdatePatch\n   */\n  static readonly TransportUpdatePatchPath = '/transport/update';\n\n  /**\n   * Information received from transport to be updated.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `transportUpdatePatch()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  transportUpdatePatch$Response(params: {\n\n    /**\n     * Name of className that needs update\n     */\n    className?: 'NRBTS_R' | 'NRDU_R';\n  \n    /**\n     * Update NRBTS_A or NRDU_A objects\n     */\n    body: NrbtsRInfo | NrduRInfo\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TransportService.TransportUpdatePatchPath, 'patch');\n    if (params) {\n\n      rb.query('className', params.className, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Information received from transport to be updated.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `transportUpdatePatch$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  transportUpdatePatch(params: {\n\n    /**\n     * Name of className that needs update\n     */\n    className?: 'NRBTS_R' | 'NRDU_R';\n  \n    /**\n     * Update NRBTS_A or NRDU_A objects\n     */\n    body: NrbtsRInfo | NrduRInfo\n  }): Observable<void> {\n\n    return this.transportUpdatePatch$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '/api/fm/v2';\n}\n\n/**\n * Parameters for `CuFmClientModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { FaultSnapshotTriggers } from '../models/fault-snapshot-triggers';\nimport { PostFault } from '../models/post-fault';\nimport { TogglingFault } from '../models/toggling-fault';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CuFmClientService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getFaultTogglingHistory\n   */\n  static readonly GetFaultTogglingHistoryPath = '/fault-toggling-history';\n\n  /**\n   * Get fault toggling history.\n   *\n   * History of toggling faults that have had a toggling alarm raised for them since last startup\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getFaultTogglingHistory()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getFaultTogglingHistory$Response(params?: {\n\n  }): Observable<StrictHttpResponse<{ 'activeFaults'?: Array<TogglingFault>, 'inactiveFaults'?: Array<TogglingFault>, 'numberOfActiveFaults'?: number, 'numberOfInactiveFaults'?: number }>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuFmClientService.GetFaultTogglingHistoryPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{ 'activeFaults'?: Array<TogglingFault>, 'inactiveFaults'?: Array<TogglingFault>, 'numberOfActiveFaults'?: number, 'numberOfInactiveFaults'?: number }>;\n      })\n    );\n  }\n\n  /**\n   * Get fault toggling history.\n   *\n   * History of toggling faults that have had a toggling alarm raised for them since last startup\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getFaultTogglingHistory$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getFaultTogglingHistory(params?: {\n\n  }): Observable<{ 'activeFaults'?: Array<TogglingFault>, 'inactiveFaults'?: Array<TogglingFault>, 'numberOfActiveFaults'?: number, 'numberOfInactiveFaults'?: number }> {\n\n    return this.getFaultTogglingHistory$Response(params).pipe(\n      map((r: StrictHttpResponse<{ 'activeFaults'?: Array<TogglingFault>, 'inactiveFaults'?: Array<TogglingFault>, 'numberOfActiveFaults'?: number, 'numberOfInactiveFaults'?: number }>) => r.body as { 'activeFaults'?: Array<TogglingFault>, 'inactiveFaults'?: Array<TogglingFault>, 'numberOfActiveFaults'?: number, 'numberOfInactiveFaults'?: number })\n    );\n  }\n\n  /**\n   * Path part for operation faultsPost\n   */\n  static readonly FaultsPostPath = '/faults';\n\n  /**\n   * Deliver HTTP fault request to FM thread.\n   *\n   * Message containing fault request details.\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `faultsPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  faultsPost$Response(params?: {\n  \n    /**\n     * json containing HTTP fault request definition.\n     */\n    body?: PostFault\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuFmClientService.FaultsPostPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Deliver HTTP fault request to FM thread.\n   *\n   * Message containing fault request details.\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `faultsPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  faultsPost(params?: {\n  \n    /**\n     * json containing HTTP fault request definition.\n     */\n    body?: PostFault\n  }): Observable<void> {\n\n    return this.faultsPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation faultsSnapshotTriggersPost\n   */\n  static readonly FaultsSnapshotTriggersPostPath = '/faults/snapshot-triggers';\n\n  /**\n   * Deliver a collection of fault ids and trigger types for automatic snapshot collection.\n   *\n   * Stores given faults for which snapshot collection is triggered\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `faultsSnapshotTriggersPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  faultsSnapshotTriggersPost$Response(params?: {\n  \n    /**\n     * JSON including an array with each element containing fault id and trigger type\n     */\n    body?: FaultSnapshotTriggers\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuFmClientService.FaultsSnapshotTriggersPostPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Deliver a collection of fault ids and trigger types for automatic snapshot collection.\n   *\n   * Stores given faults for which snapshot collection is triggered\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `faultsSnapshotTriggersPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  faultsSnapshotTriggersPost(params?: {\n  \n    /**\n     * JSON including an array with each element containing fault id and trigger type\n     */\n    body?: FaultSnapshotTriggers\n  }): Observable<void> {\n\n    return this.faultsSnapshotTriggersPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ActiveAlarm } from '../models/active-alarm';\nimport { ActiveAlarmCategoryGroup } from '../models/active-alarm-category-group';\nimport { ActiveFault } from '../models/active-fault';\nimport { AlarmCategory } from '../models/alarm-category';\nimport { AlarmSeverity } from '../models/alarm-severity';\nimport { AlarmingObject } from '../models/alarming-object';\nimport { AlarmsSummary } from '../models/alarms-summary';\nimport { Fault } from '../models/fault';\nimport { HistoricalAlarm } from '../models/historical-alarm';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FmService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getActiveAlarms\n   */\n  static readonly GetActiveAlarmsPath = '/alarms/active';\n\n  /**\n   * Get active alarms.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActiveAlarms()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveAlarms$Response(params?: {\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of alarms per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting criteria\n     */\n    sortedBy?: 'appearTime' | 'clearedTime' | 'severity' | 'faultId' | 'faultName' | 'alarmId' | 'alarmName' | 'faultSource';\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Filtering severity values\n     */\n    filterBySeverity?: Array<AlarmSeverity>;\n\n    /**\n     * Filtering by alarming objects\n     */\n    filterByAlarmingObject?: Array<AlarmingObject>;\n\n    /**\n     * Case insensitive text filter that can be used to filter alarms by the following fields: faultId, faultName, alarmId, alarmName, alarmingObject and severity\n     */\n    filterByText?: string;\n\n    /**\n     * Filter out active or historical alarms by impacted cells. Only one instance will be possible. The query will contain faulty, degraded, affected and cellIdentity fields if filter for impacted cell is desired.\n     */\n    filterByImpactedCells?: { 'faulty': boolean, 'degraded': boolean, 'affected': boolean, 'cellIdentity': string };\n\n  }): Observable<StrictHttpResponse<{ 'total'?: number, 'alarms'?: Array<ActiveAlarm> }>> {\n\n    const rb = new RequestBuilder(this.rootUrl, FmService.GetActiveAlarmsPath, 'get');\n    if (params) {\n\n      rb.query('pageNumber', params.pageNumber, {});\n      rb.query('itemsPerPage', params.itemsPerPage, {});\n      rb.query('sortedBy', params.sortedBy, {});\n      rb.query('sortOrder', params.sortOrder, {});\n      rb.query('filterBySeverity', params.filterBySeverity, {});\n      rb.query('filterByAlarmingObject', params.filterByAlarmingObject, {});\n      rb.query('filterByText', params.filterByText, {});\n      rb.query('filterByImpactedCells', params.filterByImpactedCells, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{ 'total'?: number, 'alarms'?: Array<ActiveAlarm> }>;\n      })\n    );\n  }\n\n  /**\n   * Get active alarms.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActiveAlarms$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveAlarms(params?: {\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of alarms per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting criteria\n     */\n    sortedBy?: 'appearTime' | 'clearedTime' | 'severity' | 'faultId' | 'faultName' | 'alarmId' | 'alarmName' | 'faultSource';\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Filtering severity values\n     */\n    filterBySeverity?: Array<AlarmSeverity>;\n\n    /**\n     * Filtering by alarming objects\n     */\n    filterByAlarmingObject?: Array<AlarmingObject>;\n\n    /**\n     * Case insensitive text filter that can be used to filter alarms by the following fields: faultId, faultName, alarmId, alarmName, alarmingObject and severity\n     */\n    filterByText?: string;\n\n    /**\n     * Filter out active or historical alarms by impacted cells. Only one instance will be possible. The query will contain faulty, degraded, affected and cellIdentity fields if filter for impacted cell is desired.\n     */\n    filterByImpactedCells?: { 'faulty': boolean, 'degraded': boolean, 'affected': boolean, 'cellIdentity': string };\n\n  }): Observable<{ 'total'?: number, 'alarms'?: Array<ActiveAlarm> }> {\n\n    return this.getActiveAlarms$Response(params).pipe(\n      map((r: StrictHttpResponse<{ 'total'?: number, 'alarms'?: Array<ActiveAlarm> }>) => r.body as { 'total'?: number, 'alarms'?: Array<ActiveAlarm> })\n    );\n  }\n\n  /**\n   * Path part for operation getActiveCategoryAlarms\n   */\n  static readonly GetActiveCategoryAlarmsPath = '/alarms/active/category';\n\n  /**\n   * Get active different category alarms.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActiveCategoryAlarms()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveCategoryAlarms$Response(params?: {\n\n    /**\n     * Filtering by alarm objects category\n     */\n    filterByCategory?: Array<AlarmCategory>;\n\n  }): Observable<StrictHttpResponse<Array<ActiveAlarmCategoryGroup>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, FmService.GetActiveCategoryAlarmsPath, 'get');\n    if (params) {\n\n      rb.query('filterByCategory', params.filterByCategory, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<ActiveAlarmCategoryGroup>>;\n      })\n    );\n  }\n\n  /**\n   * Get active different category alarms.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActiveCategoryAlarms$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveCategoryAlarms(params?: {\n\n    /**\n     * Filtering by alarm objects category\n     */\n    filterByCategory?: Array<AlarmCategory>;\n\n  }): Observable<Array<ActiveAlarmCategoryGroup>> {\n\n    return this.getActiveCategoryAlarms$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<ActiveAlarmCategoryGroup>>) => r.body as Array<ActiveAlarmCategoryGroup>)\n    );\n  }\n\n  /**\n   * Path part for operation getActiveAlarmsSummary\n   */\n  static readonly GetActiveAlarmsSummaryPath = '/alarms/active/summary';\n\n  /**\n   * Get active alarms summary.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActiveAlarmsSummary()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveAlarmsSummary$Response(params?: {\n\n  }): Observable<StrictHttpResponse<AlarmsSummary>> {\n\n    const rb = new RequestBuilder(this.rootUrl, FmService.GetActiveAlarmsSummaryPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<AlarmsSummary>;\n      })\n    );\n  }\n\n  /**\n   * Get active alarms summary.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActiveAlarmsSummary$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveAlarmsSummary(params?: {\n\n  }): Observable<AlarmsSummary> {\n\n    return this.getActiveAlarmsSummary$Response(params).pipe(\n      map((r: StrictHttpResponse<AlarmsSummary>) => r.body as AlarmsSummary)\n    );\n  }\n\n  /**\n   * Path part for operation getHistoricalAlarms\n   */\n  static readonly GetHistoricalAlarmsPath = '/alarms/historical';\n\n  /**\n   * Get historical alarms.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getHistoricalAlarms()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getHistoricalAlarms$Response(params?: {\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of alarms per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting criteria\n     */\n    sortedBy?: 'appearTime' | 'clearedTime' | 'severity' | 'faultId' | 'faultName' | 'alarmId' | 'alarmName' | 'faultSource';\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Filtering severity values\n     */\n    filterBySeverity?: Array<AlarmSeverity>;\n\n    /**\n     * Filtering by alarming objects\n     */\n    filterByAlarmingObject?: Array<AlarmingObject>;\n\n    /**\n     * Case insensitive text filter that can be used to filter alarms by the following fields: faultId, faultName, alarmId, alarmName, alarmingObject and severity\n     */\n    filterByText?: string;\n\n    /**\n     * Filter out active or historical alarms by impacted cells. Only one instance will be possible. The query will contain faulty, degraded, affected and cellIdentity fields if filter for impacted cell is desired.\n     */\n    filterByImpactedCells?: { 'faulty': boolean, 'degraded': boolean, 'affected': boolean, 'cellIdentity': string };\n\n  }): Observable<StrictHttpResponse<{ 'total'?: number, 'alarms'?: Array<HistoricalAlarm> }>> {\n\n    const rb = new RequestBuilder(this.rootUrl, FmService.GetHistoricalAlarmsPath, 'get');\n    if (params) {\n\n      rb.query('pageNumber', params.pageNumber, {});\n      rb.query('itemsPerPage', params.itemsPerPage, {});\n      rb.query('sortedBy', params.sortedBy, {});\n      rb.query('sortOrder', params.sortOrder, {});\n      rb.query('filterBySeverity', params.filterBySeverity, {});\n      rb.query('filterByAlarmingObject', params.filterByAlarmingObject, {});\n      rb.query('filterByText', params.filterByText, {});\n      rb.query('filterByImpactedCells', params.filterByImpactedCells, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{ 'total'?: number, 'alarms'?: Array<HistoricalAlarm> }>;\n      })\n    );\n  }\n\n  /**\n   * Get historical alarms.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getHistoricalAlarms$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getHistoricalAlarms(params?: {\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of alarms per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting criteria\n     */\n    sortedBy?: 'appearTime' | 'clearedTime' | 'severity' | 'faultId' | 'faultName' | 'alarmId' | 'alarmName' | 'faultSource';\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Filtering severity values\n     */\n    filterBySeverity?: Array<AlarmSeverity>;\n\n    /**\n     * Filtering by alarming objects\n     */\n    filterByAlarmingObject?: Array<AlarmingObject>;\n\n    /**\n     * Case insensitive text filter that can be used to filter alarms by the following fields: faultId, faultName, alarmId, alarmName, alarmingObject and severity\n     */\n    filterByText?: string;\n\n    /**\n     * Filter out active or historical alarms by impacted cells. Only one instance will be possible. The query will contain faulty, degraded, affected and cellIdentity fields if filter for impacted cell is desired.\n     */\n    filterByImpactedCells?: { 'faulty': boolean, 'degraded': boolean, 'affected': boolean, 'cellIdentity': string };\n\n  }): Observable<{ 'total'?: number, 'alarms'?: Array<HistoricalAlarm> }> {\n\n    return this.getHistoricalAlarms$Response(params).pipe(\n      map((r: StrictHttpResponse<{ 'total'?: number, 'alarms'?: Array<HistoricalAlarm> }>) => r.body as { 'total'?: number, 'alarms'?: Array<HistoricalAlarm> })\n    );\n  }\n\n  /**\n   * Path part for operation getHistoricalAlarmsSummary\n   */\n  static readonly GetHistoricalAlarmsSummaryPath = '/alarms/historical/summary';\n\n  /**\n   * Get historical alarms summary.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getHistoricalAlarmsSummary()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getHistoricalAlarmsSummary$Response(params?: {\n\n  }): Observable<StrictHttpResponse<AlarmsSummary>> {\n\n    const rb = new RequestBuilder(this.rootUrl, FmService.GetHistoricalAlarmsSummaryPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<AlarmsSummary>;\n      })\n    );\n  }\n\n  /**\n   * Get historical alarms summary.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getHistoricalAlarmsSummary$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getHistoricalAlarmsSummary(params?: {\n\n  }): Observable<AlarmsSummary> {\n\n    return this.getHistoricalAlarmsSummary$Response(params).pipe(\n      map((r: StrictHttpResponse<AlarmsSummary>) => r.body as AlarmsSummary)\n    );\n  }\n\n  /**\n   * Path part for operation getFault\n   */\n  static readonly GetFaultPath = '/faults/{faultId}';\n\n  /**\n   * Get fault.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getFault()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getFault$Response(params: {\n\n    /**\n     * Fault id\n     */\n    faultId: string;\n\n  }): Observable<StrictHttpResponse<Fault>> {\n\n    const rb = new RequestBuilder(this.rootUrl, FmService.GetFaultPath, 'get');\n    if (params) {\n\n      rb.path('faultId', params.faultId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Fault>;\n      })\n    );\n  }\n\n  /**\n   * Get fault.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getFault$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getFault(params: {\n\n    /**\n     * Fault id\n     */\n    faultId: string;\n\n  }): Observable<Fault> {\n\n    return this.getFault$Response(params).pipe(\n      map((r: StrictHttpResponse<Fault>) => r.body as Fault)\n    );\n  }\n\n  /**\n   * Path part for operation getActiveFault\n   */\n  static readonly GetActiveFaultPath = '/faults/active';\n\n  /**\n   * Get active faults.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActiveFault()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveFault$Response(params?: {\n\n    /**\n     * Filtering by fault source inputted for example, NRCEL\n     */\n    filterBySource?: string;\n\n  }): Observable<StrictHttpResponse<Array<ActiveFault>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, FmService.GetActiveFaultPath, 'get');\n    if (params) {\n\n      rb.query('filterBySource', params.filterBySource, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<ActiveFault>>;\n      })\n    );\n  }\n\n  /**\n   * Get active faults.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActiveFault$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveFault(params?: {\n\n    /**\n     * Filtering by fault source inputted for example, NRCEL\n     */\n    filterBySource?: string;\n\n  }): Observable<Array<ActiveFault>> {\n\n    return this.getActiveFault$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<ActiveFault>>) => r.body as Array<ActiveFault>)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ActiveAlarm } from '../models/active-alarm';\nimport { ActiveAlarmCategoryGroup } from '../models/active-alarm-category-group';\nimport { AlarmCategory } from '../models/alarm-category';\nimport { AlarmSeverity } from '../models/alarm-severity';\nimport { AlarmingObject } from '../models/alarming-object';\nimport { AlarmsSummary } from '../models/alarms-summary';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatusService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getActiveAlarms\n   */\n  static readonly GetActiveAlarmsPath = '/alarms/active';\n\n  /**\n   * Get active alarms.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActiveAlarms()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveAlarms$Response(params?: {\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of alarms per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting criteria\n     */\n    sortedBy?: 'appearTime' | 'clearedTime' | 'severity' | 'faultId' | 'faultName' | 'alarmId' | 'alarmName' | 'faultSource';\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Filtering severity values\n     */\n    filterBySeverity?: Array<AlarmSeverity>;\n\n    /**\n     * Filtering by alarming objects\n     */\n    filterByAlarmingObject?: Array<AlarmingObject>;\n\n    /**\n     * Case insensitive text filter that can be used to filter alarms by the following fields: faultId, faultName, alarmId, alarmName, alarmingObject and severity\n     */\n    filterByText?: string;\n\n    /**\n     * Filter out active or historical alarms by impacted cells. Only one instance will be possible. The query will contain faulty, degraded, affected and cellIdentity fields if filter for impacted cell is desired.\n     */\n    filterByImpactedCells?: { 'faulty': boolean, 'degraded': boolean, 'affected': boolean, 'cellIdentity': string };\n\n  }): Observable<StrictHttpResponse<{ 'total'?: number, 'alarms'?: Array<ActiveAlarm> }>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetActiveAlarmsPath, 'get');\n    if (params) {\n\n      rb.query('pageNumber', params.pageNumber, {});\n      rb.query('itemsPerPage', params.itemsPerPage, {});\n      rb.query('sortedBy', params.sortedBy, {});\n      rb.query('sortOrder', params.sortOrder, {});\n      rb.query('filterBySeverity', params.filterBySeverity, {});\n      rb.query('filterByAlarmingObject', params.filterByAlarmingObject, {});\n      rb.query('filterByText', params.filterByText, {});\n      rb.query('filterByImpactedCells', params.filterByImpactedCells, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{ 'total'?: number, 'alarms'?: Array<ActiveAlarm> }>;\n      })\n    );\n  }\n\n  /**\n   * Get active alarms.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActiveAlarms$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveAlarms(params?: {\n\n    /**\n     * Active page number\n     */\n    pageNumber?: number;\n\n    /**\n     * The number of alarms per page\n     */\n    itemsPerPage?: number;\n\n    /**\n     * Sorting criteria\n     */\n    sortedBy?: 'appearTime' | 'clearedTime' | 'severity' | 'faultId' | 'faultName' | 'alarmId' | 'alarmName' | 'faultSource';\n\n    /**\n     * Sorting order\n     */\n    sortOrder?: 'desc' | 'asc';\n\n    /**\n     * Filtering severity values\n     */\n    filterBySeverity?: Array<AlarmSeverity>;\n\n    /**\n     * Filtering by alarming objects\n     */\n    filterByAlarmingObject?: Array<AlarmingObject>;\n\n    /**\n     * Case insensitive text filter that can be used to filter alarms by the following fields: faultId, faultName, alarmId, alarmName, alarmingObject and severity\n     */\n    filterByText?: string;\n\n    /**\n     * Filter out active or historical alarms by impacted cells. Only one instance will be possible. The query will contain faulty, degraded, affected and cellIdentity fields if filter for impacted cell is desired.\n     */\n    filterByImpactedCells?: { 'faulty': boolean, 'degraded': boolean, 'affected': boolean, 'cellIdentity': string };\n\n  }): Observable<{ 'total'?: number, 'alarms'?: Array<ActiveAlarm> }> {\n\n    return this.getActiveAlarms$Response(params).pipe(\n      map((r: StrictHttpResponse<{ 'total'?: number, 'alarms'?: Array<ActiveAlarm> }>) => r.body as { 'total'?: number, 'alarms'?: Array<ActiveAlarm> })\n    );\n  }\n\n  /**\n   * Path part for operation getActiveCategoryAlarms\n   */\n  static readonly GetActiveCategoryAlarmsPath = '/alarms/active/category';\n\n  /**\n   * Get active different category alarms.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActiveCategoryAlarms()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveCategoryAlarms$Response(params?: {\n\n    /**\n     * Filtering by alarm objects category\n     */\n    filterByCategory?: Array<AlarmCategory>;\n\n  }): Observable<StrictHttpResponse<Array<ActiveAlarmCategoryGroup>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetActiveCategoryAlarmsPath, 'get');\n    if (params) {\n\n      rb.query('filterByCategory', params.filterByCategory, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<ActiveAlarmCategoryGroup>>;\n      })\n    );\n  }\n\n  /**\n   * Get active different category alarms.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActiveCategoryAlarms$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveCategoryAlarms(params?: {\n\n    /**\n     * Filtering by alarm objects category\n     */\n    filterByCategory?: Array<AlarmCategory>;\n\n  }): Observable<Array<ActiveAlarmCategoryGroup>> {\n\n    return this.getActiveCategoryAlarms$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<ActiveAlarmCategoryGroup>>) => r.body as Array<ActiveAlarmCategoryGroup>)\n    );\n  }\n\n  /**\n   * Path part for operation getActiveAlarmsSummary\n   */\n  static readonly GetActiveAlarmsSummaryPath = '/alarms/active/summary';\n\n  /**\n   * Get active alarms summary.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getActiveAlarmsSummary()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveAlarmsSummary$Response(params?: {\n\n  }): Observable<StrictHttpResponse<AlarmsSummary>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetActiveAlarmsSummaryPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<AlarmsSummary>;\n      })\n    );\n  }\n\n  /**\n   * Get active alarms summary.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getActiveAlarmsSummary$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getActiveAlarmsSummary(params?: {\n\n  }): Observable<AlarmsSummary> {\n\n    return this.getActiveAlarmsSummary$Response(params).pipe(\n      map((r: StrictHttpResponse<AlarmsSummary>) => r.body as AlarmsSummary)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '/api/agent/v1';\n}\n\n/**\n * Parameters for `CuOamAgentClientModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { CuOamAgentClientService } from './services/cu-oam-agent-client.service';\nimport { CuInternalService } from './services/cu-internal.service';\nimport { StatusService } from './services/status.service';\nimport { VduInternalService } from './services/vdu-internal.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    CuOamAgentClientService,\n    CuInternalService,\n    StatusService,\n    VduInternalService,\n    ApiConfiguration\n  ],\n})\nexport class CuOamAgentClientModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<CuOamAgentClientModule> {\n    return {\n      ngModule: CuOamAgentClientModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: CuOamAgentClientModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('CuOamAgentClientModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n","/* tslint:disable */\nexport enum ActivityMode {\n  Unknown = 'unknown',\n  Active = 'active',\n  Standby = 'standby'\n}\n","/* tslint:disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { GeoRedundancyVnfState } from '../models/geo-redundancy-vnf-state';\nimport { Heartbeat } from '../models/heartbeat';\nimport { InterfaceCu } from '../models/interface-cu';\nimport { Link } from '../models/link';\nimport { SyncStatus } from '../models/sync-status';\nimport { VmCu } from '../models/vm-cu';\nimport { CuExtendedVm } from '../models/cu-extended-vm';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CuInternalService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation vnfVnfIdVmCuGet\n   */\n  static readonly VnfVnfIdVmCuGetPath = '/vnf/{vnfId}/vm_cu';\n\n  /**\n   * Get vm_cu DNs.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `vnfVnfIdVmCuGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  vnfVnfIdVmCuGet$Response(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n\n  }): Observable<StrictHttpResponse<{ 'DNs'?: Array<string> }>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuInternalService.VnfVnfIdVmCuGetPath, 'get');\n    if (params) {\n\n      rb.path('vnfId', params.vnfId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{ 'DNs'?: Array<string> }>;\n      })\n    );\n  }\n\n  /**\n   * Get vm_cu DNs.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `vnfVnfIdVmCuGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  vnfVnfIdVmCuGet(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n\n  }): Observable<{ 'DNs'?: Array<string> }> {\n\n    return this.vnfVnfIdVmCuGet$Response(params).pipe(\n      map((r: StrictHttpResponse<{ 'DNs'?: Array<string> }>) => r.body as { 'DNs'?: Array<string> })\n    );\n  }\n\n  /**\n   * Path part for operation vnfVnfIdVmCuPost\n   */\n  static readonly VnfVnfIdVmCuPostPath = '/vnf/{vnfId}/vm_cu';\n\n  /**\n   * Create vm_cu instance.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `vnfVnfIdVmCuPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  vnfVnfIdVmCuPost$Response(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n  \n    /**\n     * json containing VM_CU information structure\n     */\n    body?: VmCu\n  }): Observable<StrictHttpResponse<{ 'link'?: Link }>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuInternalService.VnfVnfIdVmCuPostPath, 'post');\n    if (params) {\n\n      rb.path('vnfId', params.vnfId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{ 'link'?: Link }>;\n      })\n    );\n  }\n\n  /**\n   * Create vm_cu instance.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `vnfVnfIdVmCuPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  vnfVnfIdVmCuPost(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n  \n    /**\n     * json containing VM_CU information structure\n     */\n    body?: VmCu\n  }): Observable<{ 'link'?: Link }> {\n\n    return this.vnfVnfIdVmCuPost$Response(params).pipe(\n      map((r: StrictHttpResponse<{ 'link'?: Link }>) => r.body as { 'link'?: Link })\n    );\n  }\n\n  /**\n   * Path part for operation vnfVnfIdVmCuVmIdGet\n   */\n  static readonly VnfVnfIdVmCuVmIdGetPath = '/vnf/{vnfId}/vm_cu/{vmId}';\n\n  /**\n   * Fetch vm_cu instance.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `vnfVnfIdVmCuVmIdGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  vnfVnfIdVmCuVmIdGet$Response(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n\n    /**\n     * vm_cu instance Id\n     */\n    vmId: string;\n\n  }): Observable<StrictHttpResponse<VmCu>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuInternalService.VnfVnfIdVmCuVmIdGetPath, 'get');\n    if (params) {\n\n      rb.path('vnfId', params.vnfId, {});\n      rb.path('vmId', params.vmId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<VmCu>;\n      })\n    );\n  }\n\n  /**\n   * Fetch vm_cu instance.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `vnfVnfIdVmCuVmIdGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  vnfVnfIdVmCuVmIdGet(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n\n    /**\n     * vm_cu instance Id\n     */\n    vmId: string;\n\n  }): Observable<VmCu> {\n\n    return this.vnfVnfIdVmCuVmIdGet$Response(params).pipe(\n      map((r: StrictHttpResponse<VmCu>) => r.body as VmCu)\n    );\n  }\n\n  /**\n   * Path part for operation vnfVnfIdVmCuVmIdHeartbeatCuPost\n   */\n  static readonly VnfVnfIdVmCuVmIdHeartbeatCuPostPath = '/vnf/{vnfId}/vm_cu/{vmId}/heartbeat_cu';\n\n  /**\n   * Check if VM is still alive and kicking.\n   *\n   * Periodically, each OamAgent updates /vnf/1/vm_cu/x/heartbeat_cu/1. In this way OamAgent from OAM VM knows which VM is alive and kicking.\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `vnfVnfIdVmCuVmIdHeartbeatCuPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  vnfVnfIdVmCuVmIdHeartbeatCuPost$Response(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n\n    /**\n     * vm_cu instance Id\n     */\n    vmId: string;\n  \n    /**\n     * json containing bootid\n     */\n    body?: Heartbeat\n  }): Observable<StrictHttpResponse<Heartbeat>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuInternalService.VnfVnfIdVmCuVmIdHeartbeatCuPostPath, 'post');\n    if (params) {\n\n      rb.path('vnfId', params.vnfId, {});\n      rb.path('vmId', params.vmId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Heartbeat>;\n      })\n    );\n  }\n\n  /**\n   * Check if VM is still alive and kicking.\n   *\n   * Periodically, each OamAgent updates /vnf/1/vm_cu/x/heartbeat_cu/1. In this way OamAgent from OAM VM knows which VM is alive and kicking.\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `vnfVnfIdVmCuVmIdHeartbeatCuPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  vnfVnfIdVmCuVmIdHeartbeatCuPost(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n\n    /**\n     * vm_cu instance Id\n     */\n    vmId: string;\n  \n    /**\n     * json containing bootid\n     */\n    body?: Heartbeat\n  }): Observable<Heartbeat> {\n\n    return this.vnfVnfIdVmCuVmIdHeartbeatCuPost$Response(params).pipe(\n      map((r: StrictHttpResponse<Heartbeat>) => r.body as Heartbeat)\n    );\n  }\n\n  /**\n   * Path part for operation vnfVnfIdVmCuVmIdInterfaceCuGet\n   */\n  static readonly VnfVnfIdVmCuVmIdInterfaceCuGetPath = '/vnf/{vnfId}/vm_cu/{vmId}/interface_cu';\n\n  /**\n   * Get interface_cu DNs under specified vm_cu.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `vnfVnfIdVmCuVmIdInterfaceCuGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  vnfVnfIdVmCuVmIdInterfaceCuGet$Response(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n\n    /**\n     * vm_cu instance Id\n     */\n    vmId: string;\n\n  }): Observable<StrictHttpResponse<{ 'DNs'?: Array<string> }>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuInternalService.VnfVnfIdVmCuVmIdInterfaceCuGetPath, 'get');\n    if (params) {\n\n      rb.path('vnfId', params.vnfId, {});\n      rb.path('vmId', params.vmId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{ 'DNs'?: Array<string> }>;\n      })\n    );\n  }\n\n  /**\n   * Get interface_cu DNs under specified vm_cu.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `vnfVnfIdVmCuVmIdInterfaceCuGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  vnfVnfIdVmCuVmIdInterfaceCuGet(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n\n    /**\n     * vm_cu instance Id\n     */\n    vmId: string;\n\n  }): Observable<{ 'DNs'?: Array<string> }> {\n\n    return this.vnfVnfIdVmCuVmIdInterfaceCuGet$Response(params).pipe(\n      map((r: StrictHttpResponse<{ 'DNs'?: Array<string> }>) => r.body as { 'DNs'?: Array<string> })\n    );\n  }\n\n  /**\n   * Path part for operation vnfVnfIdVmCuVmIdInterfaceCuPost\n   */\n  static readonly VnfVnfIdVmCuVmIdInterfaceCuPostPath = '/vnf/{vnfId}/vm_cu/{vmId}/interface_cu';\n\n  /**\n   * Create interface_cu instance under specified vm_cu.\n   *\n   * Stores internal IPs used by OamAgent for syscom routes creation\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `vnfVnfIdVmCuVmIdInterfaceCuPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  vnfVnfIdVmCuVmIdInterfaceCuPost$Response(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n\n    /**\n     * vm_cu instance Id\n     */\n    vmId: string;\n  \n    /**\n     * json containing interface_cu configuration\n     */\n    body?: InterfaceCu\n  }): Observable<StrictHttpResponse<{ 'link'?: Link }>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuInternalService.VnfVnfIdVmCuVmIdInterfaceCuPostPath, 'post');\n    if (params) {\n\n      rb.path('vnfId', params.vnfId, {});\n      rb.path('vmId', params.vmId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{ 'link'?: Link }>;\n      })\n    );\n  }\n\n  /**\n   * Create interface_cu instance under specified vm_cu.\n   *\n   * Stores internal IPs used by OamAgent for syscom routes creation\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `vnfVnfIdVmCuVmIdInterfaceCuPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  vnfVnfIdVmCuVmIdInterfaceCuPost(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n\n    /**\n     * vm_cu instance Id\n     */\n    vmId: string;\n  \n    /**\n     * json containing interface_cu configuration\n     */\n    body?: InterfaceCu\n  }): Observable<{ 'link'?: Link }> {\n\n    return this.vnfVnfIdVmCuVmIdInterfaceCuPost$Response(params).pipe(\n      map((r: StrictHttpResponse<{ 'link'?: Link }>) => r.body as { 'link'?: Link })\n    );\n  }\n\n  /**\n   * Path part for operation vnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet\n   */\n  static readonly VnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGetPath = '/vnf/{vnfId}/vm_cu/{vmId}/interface_cu/{interfaceId}';\n\n  /**\n   * Fetch interface_cu instance under specified vm_cu.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `vnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  vnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet$Response(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n\n    /**\n     * vm_cu instance Id\n     */\n    vmId: string;\n\n    /**\n     * interface_cu instance id\n     */\n    interfaceId: string;\n\n  }): Observable<StrictHttpResponse<InterfaceCu>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuInternalService.VnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGetPath, 'get');\n    if (params) {\n\n      rb.path('vnfId', params.vnfId, {});\n      rb.path('vmId', params.vmId, {});\n      rb.path('interfaceId', params.interfaceId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<InterfaceCu>;\n      })\n    );\n  }\n\n  /**\n   * Fetch interface_cu instance under specified vm_cu.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `vnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  vnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet(params: {\n\n    /**\n     * VNF instance Id\n     */\n    vnfId: string;\n\n    /**\n     * vm_cu instance Id\n     */\n    vmId: string;\n\n    /**\n     * interface_cu instance id\n     */\n    interfaceId: string;\n\n  }): Observable<InterfaceCu> {\n\n    return this.vnfVnfIdVmCuVmIdInterfaceCuInterfaceIdGet$Response(params).pipe(\n      map((r: StrictHttpResponse<InterfaceCu>) => r.body as InterfaceCu)\n    );\n  }\n\n  /**\n   * Path part for operation cuVmsGet\n   */\n  static readonly CuVmsGetPath = '/cu/vms';\n\n  /**\n   * Get vms list.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `cuVmsGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cuVmsGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<CuExtendedVm>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuInternalService.CuVmsGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<CuExtendedVm>>;\n      })\n    );\n  }\n\n  /**\n   * Get vms list.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `cuVmsGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cuVmsGet(params?: {\n\n  }): Observable<Array<CuExtendedVm>> {\n\n    return this.cuVmsGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<CuExtendedVm>>) => r.body as Array<CuExtendedVm>)\n    );\n  }\n\n  /**\n   * Path part for operation getExtendedVm\n   */\n  static readonly GetExtendedVmPath = '/cu/vms/{vmId}';\n\n  /**\n   * Get VM attributes and interfaces.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getExtendedVm()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getExtendedVm$Response(params: {\n\n    /**\n     * VM instance id.\n     */\n    vmId: string;\n\n  }): Observable<StrictHttpResponse<CuExtendedVm>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuInternalService.GetExtendedVmPath, 'get');\n    if (params) {\n\n      rb.path('vmId', params.vmId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CuExtendedVm>;\n      })\n    );\n  }\n\n  /**\n   * Get VM attributes and interfaces.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getExtendedVm$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getExtendedVm(params: {\n\n    /**\n     * VM instance id.\n     */\n    vmId: string;\n\n  }): Observable<CuExtendedVm> {\n\n    return this.getExtendedVm$Response(params).pipe(\n      map((r: StrictHttpResponse<CuExtendedVm>) => r.body as CuExtendedVm)\n    );\n  }\n\n  /**\n   * Path part for operation syncStatusGet\n   */\n  static readonly SyncStatusGetPath = '/syncStatus';\n\n  /**\n   * Get VNF time synchronization status.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `syncStatusGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  syncStatusGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<SyncStatus>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuInternalService.SyncStatusGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SyncStatus>;\n      })\n    );\n  }\n\n  /**\n   * Get VNF time synchronization status.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `syncStatusGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  syncStatusGet(params?: {\n\n  }): Observable<SyncStatus> {\n\n    return this.syncStatusGet$Response(params).pipe(\n      map((r: StrictHttpResponse<SyncStatus>) => r.body as SyncStatus)\n    );\n  }\n\n  /**\n   * Path part for operation getGeoRedundancyVnfState\n   */\n  static readonly GetGeoRedundancyVnfStatePath = '/geoRedundancyVnfState';\n\n  /**\n   * Get geoRedundancyVnfState states.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getGeoRedundancyVnfState()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getGeoRedundancyVnfState$Response(params?: {\n\n  }): Observable<StrictHttpResponse<GeoRedundancyVnfState>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuInternalService.GetGeoRedundancyVnfStatePath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<GeoRedundancyVnfState>;\n      })\n    );\n  }\n\n  /**\n   * Get geoRedundancyVnfState states.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getGeoRedundancyVnfState$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getGeoRedundancyVnfState(params?: {\n\n  }): Observable<GeoRedundancyVnfState> {\n\n    return this.getGeoRedundancyVnfState$Response(params).pipe(\n      map((r: StrictHttpResponse<GeoRedundancyVnfState>) => r.body as GeoRedundancyVnfState)\n    );\n  }\n\n}\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { AutonomousRebootAllowed } from '../models/autonomous-reboot-allowed';\r\nimport { Reboot } from '../models/reboot';\r\nimport { Vm } from '../models/vm';\r\nimport { ManagedObject } from '@oam/cu-cm-api';\r\nimport { Link } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CuOamAgentClientService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getVms\r\n   */\r\n  static readonly GetVmsPath = '/vms';\r\n\r\n  /**\r\n   * Get VMs states.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getVms()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVms$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<Vm>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CuOamAgentClientService.GetVmsPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<Vm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get VMs states.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getVms$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVms(params?: {\r\n\r\n  }): Observable<Array<Vm>> {\r\n\r\n    return this.getVms$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<Vm>>) => r.body as Array<Vm>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getVm\r\n   */\r\n  static readonly GetVmPath = '/vms/{vmId}';\r\n\r\n  /**\r\n   * Get VM state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getVm()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVm$Response(params: {\r\n\r\n    /**\r\n     * VM instance id.\r\n     */\r\n    vmId: string;\r\n\r\n  }): Observable<StrictHttpResponse<Vm>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CuOamAgentClientService.GetVmPath, 'get');\r\n    if (params) {\r\n\r\n      rb.path('vmId', params.vmId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Vm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get VM state data.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getVm$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getVm(params: {\r\n\r\n    /**\r\n     * VM instance id.\r\n     */\r\n    vmId: string;\r\n\r\n  }): Observable<Vm> {\r\n\r\n    return this.getVm$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Vm>) => r.body as Vm)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getAutonomousRebootAllowed\r\n   */\r\n  static readonly GetAutonomousRebootAllowedPath = '/autonomousRebootAllowed';\r\n\r\n  /**\r\n   * Get autonomousRebootAllowed.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getAutonomousRebootAllowed()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAutonomousRebootAllowed$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<AutonomousRebootAllowed>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CuOamAgentClientService.GetAutonomousRebootAllowedPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<AutonomousRebootAllowed>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get autonomousRebootAllowed.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `getAutonomousRebootAllowed$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAutonomousRebootAllowed(params?: {\r\n\r\n  }): Observable<AutonomousRebootAllowed> {\r\n\r\n    return this.getAutonomousRebootAllowed$Response(params).pipe(\r\n      map((r: StrictHttpResponse<AutonomousRebootAllowed>) => r.body as AutonomousRebootAllowed)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation rebootPost\r\n   */\r\n  static readonly RebootPostPath = '/reboot';\r\n\r\n  /**\r\n   * Reboots VNF.\r\n   *\r\n   * Can only be used internal.\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `rebootPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  rebootPost$Response(params?: {\r\n\r\n    /**\r\n     * json containing reboot requester, reason and target\r\n     */\r\n    body?: Reboot\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CuOamAgentClientService.RebootPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Reboots VNF.\r\n   *\r\n   * Can only be used internal.\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `rebootPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  rebootPost(params?: {\r\n\r\n    /**\r\n     * json containing reboot requester, reason and target\r\n     */\r\n    body?: Reboot\r\n  }): Observable<void> {\r\n\r\n    return this.rebootPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation operationsActivationPost\r\n   */\r\n  static readonly OperationsActivationPostPath = '/operations/activation';\r\n\r\n  /**\r\n   * Activate operation.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivationRequest` - Notification send when **activation** is about to happen\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `operationsActivationPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  operationsActivationPost$Response(params?: {\r\n      body?: { 'id': string, 'isCompleted': boolean, 'links': Array<Link> }\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CuOamAgentClientService.OperationsActivationPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Activate operation.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivationRequest` - Notification send when **activation** is about to happen\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `operationsActivationPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  operationsActivationPost(params?: {\r\n      body?: { 'id': string, 'isCompleted': boolean, 'links': Array<Link> }\r\n  }): Observable<void> {\r\n\r\n    return this.operationsActivationPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation operationsRestartPost\r\n   */\r\n  static readonly OperationsRestartPostPath = '/operations/restart';\r\n\r\n  /**\r\n   * Restart operation.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `RestartRequest` - Notification send when **restart** is needed\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `operationsRestartPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  operationsRestartPost$Response(params?: {\r\n      body?: { 'restartNeeded'?: boolean, 'activationStatus': 'ok' | 'ongoing' | 'not_ok', 'planUpdateStatus'?: 'ok' | 'ongoing' | 'not_ok', 'links'?: Array<Link> }\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CuOamAgentClientService.OperationsRestartPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Restart operation.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `RestartRequest` - Notification send when **restart** is needed\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `operationsRestartPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  operationsRestartPost(params?: {\r\n      body?: { 'restartNeeded'?: boolean, 'activationStatus': 'ok' | 'ongoing' | 'not_ok', 'planUpdateStatus'?: 'ok' | 'ongoing' | 'not_ok', 'links'?: Array<Link> }\r\n  }): Observable<void> {\r\n\r\n    return this.operationsRestartPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation operationsCurrentPlanChangesPost\r\n   */\r\n  static readonly OperationsCurrentPlanChangesPostPath = '/operations/current-plan-changes';\r\n\r\n  /**\r\n   * Current plan changes notification.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ObjectChanges` - Notification send when **changes in current plan** are made on objects in classnames on which the **oamagent** subscribed through CM's CurrentPlanChange channel\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `operationsCurrentPlanChangesPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  operationsCurrentPlanChangesPost$Response(params?: {\r\n      body?: { 'removed'?: Array<string>, 'created'?: Array<{ 'className'?: string, 'distName'?: string, 'version'?: string, 'payload'?: string }>, 'updated'?: Array<ManagedObject> }\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, CuOamAgentClientService.OperationsCurrentPlanChangesPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Current plan changes notification.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ObjectChanges` - Notification send when **changes in current plan** are made on objects in classnames on which the **oamagent** subscribed through CM's CurrentPlanChange channel\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `operationsCurrentPlanChangesPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  operationsCurrentPlanChangesPost(params?: {\r\n      body?: { 'removed'?: Array<string>, 'created'?: Array<{ 'className'?: string, 'distName'?: string, 'version'?: string, 'payload'?: string }>, 'updated'?: Array<ManagedObject> }\r\n  }): Observable<void> {\r\n\r\n    return this.operationsCurrentPlanChangesPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { CuVnf } from '../models/cu-vnf';\nimport { Operation } from '../models/operation';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatusService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getCuVnf\n   */\n  static readonly GetCuVnfPath = '/georedundancy/cu-vnf';\n\n  /**\n   * Get gNB CU VNF data.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getCuVnf()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCuVnf$Response(params?: {\n\n  }): Observable<StrictHttpResponse<CuVnf>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCuVnfPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CuVnf>;\n      })\n    );\n  }\n\n  /**\n   * Get gNB CU VNF data.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getCuVnf$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCuVnf(params?: {\n\n  }): Observable<CuVnf> {\n\n    return this.getCuVnf$Response(params).pipe(\n      map((r: StrictHttpResponse<CuVnf>) => r.body as CuVnf)\n    );\n  }\n\n  /**\n   * Path part for operation activateCuVnf\n   */\n  static readonly ActivateCuVnfPath = '/georedundancy/cu-vnf/operations/activations';\n\n  /**\n   * Trigger activate operation to change gNB CU VNF from standby to active mode. If active gNB CU VNF currently exsists, it will be deactiveted beforehand.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `activateCuVnf()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  activateCuVnf$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Operation>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.ActivateCuVnfPath, 'post');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Operation>;\n      })\n    );\n  }\n\n  /**\n   * Trigger activate operation to change gNB CU VNF from standby to active mode. If active gNB CU VNF currently exsists, it will be deactiveted beforehand.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `activateCuVnf$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  activateCuVnf(params?: {\n\n  }): Observable<Operation> {\n\n    return this.activateCuVnf$Response(params).pipe(\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\n    );\n  }\n\n  /**\n   * Path part for operation forcefullyActivateCuVnf\n   */\n  static readonly ForcefullyActivateCuVnfPath = '/georedundancy/cu-vnf/operations/forced-activations';\n\n  /**\n   * Trigger activate operation to change gNB CU VNF from standby to active mode, no matter if currently exisitng active gNB-CU VNF was deactivated or not.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `forcefullyActivateCuVnf()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  forcefullyActivateCuVnf$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Operation>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.ForcefullyActivateCuVnfPath, 'post');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Operation>;\n      })\n    );\n  }\n\n  /**\n   * Trigger activate operation to change gNB CU VNF from standby to active mode, no matter if currently exisitng active gNB-CU VNF was deactivated or not.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `forcefullyActivateCuVnf$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  forcefullyActivateCuVnf(params?: {\n\n  }): Observable<Operation> {\n\n    return this.forcefullyActivateCuVnf$Response(params).pipe(\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\n    );\n  }\n\n  /**\n   * Path part for operation deactivateCuVnf\n   */\n  static readonly DeactivateCuVnfPath = '/georedundancy/cu-vnf/operations/deactivations';\n\n  /**\n   * Trigger deactivate operation to change gNB CU VNF from active to standby mode.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deactivateCuVnf()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deactivateCuVnf$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Operation>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeactivateCuVnfPath, 'post');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Operation>;\n      })\n    );\n  }\n\n  /**\n   * Trigger deactivate operation to change gNB CU VNF from active to standby mode.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deactivateCuVnf$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deactivateCuVnf(params?: {\n\n  }): Observable<Operation> {\n\n    return this.deactivateCuVnf$Response(params).pipe(\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\n    );\n  }\n\n  /**\n   * Path part for operation getCuVnfActivation\n   */\n  static readonly GetCuVnfActivationPath = '/georedundancy/cu-vnf/operations/activations/{operationId}';\n\n  /**\n   * Get gNB CU VNF activation operation.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getCuVnfActivation()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCuVnfActivation$Response(params: {\n\n    /**\n     * operation unique ID\n     */\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<Operation>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCuVnfActivationPath, 'get');\n    if (params) {\n\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Operation>;\n      })\n    );\n  }\n\n  /**\n   * Get gNB CU VNF activation operation.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getCuVnfActivation$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCuVnfActivation(params: {\n\n    /**\n     * operation unique ID\n     */\n    operationId: string;\n\n  }): Observable<Operation> {\n\n    return this.getCuVnfActivation$Response(params).pipe(\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\n    );\n  }\n\n  /**\n   * Path part for operation deleteCuVnfActivation\n   */\n  static readonly DeleteCuVnfActivationPath = '/georedundancy/cu-vnf/operations/activations/{operationId}';\n\n  /**\n   * Delete gNB CU VNF activation operation.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteCuVnfActivation()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteCuVnfActivation$Response(params: {\n\n    /**\n     * operation unique ID\n     */\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteCuVnfActivationPath, 'delete');\n    if (params) {\n\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete gNB CU VNF activation operation.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteCuVnfActivation$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteCuVnfActivation(params: {\n\n    /**\n     * operation unique ID\n     */\n    operationId: string;\n\n  }): Observable<void> {\n\n    return this.deleteCuVnfActivation$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getCuVnfForcedActivation\n   */\n  static readonly GetCuVnfForcedActivationPath = '/georedundancy/cu-vnf/operations/forced-activations/{operationId}';\n\n  /**\n   * Get gNB CU VNF forced activation operation.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getCuVnfForcedActivation()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCuVnfForcedActivation$Response(params: {\n\n    /**\n     * operation unique ID\n     */\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<Operation>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCuVnfForcedActivationPath, 'get');\n    if (params) {\n\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Operation>;\n      })\n    );\n  }\n\n  /**\n   * Get gNB CU VNF forced activation operation.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getCuVnfForcedActivation$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCuVnfForcedActivation(params: {\n\n    /**\n     * operation unique ID\n     */\n    operationId: string;\n\n  }): Observable<Operation> {\n\n    return this.getCuVnfForcedActivation$Response(params).pipe(\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\n    );\n  }\n\n  /**\n   * Path part for operation deleteCuVnfForcedActivation\n   */\n  static readonly DeleteCuVnfForcedActivationPath = '/georedundancy/cu-vnf/operations/forced-activations/{operationId}';\n\n  /**\n   * Delete gNB CU VNF forced activation operation.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteCuVnfForcedActivation()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteCuVnfForcedActivation$Response(params: {\n\n    /**\n     * operation unique ID\n     */\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteCuVnfForcedActivationPath, 'delete');\n    if (params) {\n\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete gNB CU VNF forced activation operation.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteCuVnfForcedActivation$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteCuVnfForcedActivation(params: {\n\n    /**\n     * operation unique ID\n     */\n    operationId: string;\n\n  }): Observable<void> {\n\n    return this.deleteCuVnfForcedActivation$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getCuVnfDeactivation\n   */\n  static readonly GetCuVnfDeactivationPath = '/georedundancy/cu-vnf/operations/deactivations/{operationId}';\n\n  /**\n   * Get gNB CU VNF deactivation operation.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getCuVnfDeactivation()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCuVnfDeactivation$Response(params: {\n\n    /**\n     * operation unique ID\n     */\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<Operation>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.GetCuVnfDeactivationPath, 'get');\n    if (params) {\n\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Operation>;\n      })\n    );\n  }\n\n  /**\n   * Get gNB CU VNF deactivation operation.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getCuVnfDeactivation$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCuVnfDeactivation(params: {\n\n    /**\n     * operation unique ID\n     */\n    operationId: string;\n\n  }): Observable<Operation> {\n\n    return this.getCuVnfDeactivation$Response(params).pipe(\n      map((r: StrictHttpResponse<Operation>) => r.body as Operation)\n    );\n  }\n\n  /**\n   * Path part for operation deleteCuVnfDeactivation\n   */\n  static readonly DeleteCuVnfDeactivationPath = '/georedundancy/cu-vnf/operations/deactivations/{operationId}';\n\n  /**\n   * Delete gNB CU VNF deactivation operation.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteCuVnfDeactivation()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteCuVnfDeactivation$Response(params: {\n\n    /**\n     * operation unique ID\n     */\n    operationId: string;\n\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.DeleteCuVnfDeactivationPath, 'delete');\n    if (params) {\n\n      rb.path('operationId', params.operationId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Delete gNB CU VNF deactivation operation.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteCuVnfDeactivation$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteCuVnfDeactivation(params: {\n\n    /**\n     * operation unique ID\n     */\n    operationId: string;\n\n  }): Observable<void> {\n\n    return this.deleteCuVnfDeactivation$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Heartbeat } from '../models/heartbeat';\nimport { Interface } from '../models/interface';\nimport { Link } from '../models/link';\nimport { Container } from '../models/container';\nimport { VduExtendedContainer } from '../models/vdu-extended-container';\nimport { VduExtendedPod } from '../models/vdu-extended-pod';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class VduInternalService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation containerGet\n   */\n  static readonly ContainerGetPath = '/container';\n\n  /**\n   * Get containers DNs.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `containerGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  containerGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<{ 'DNs'?: Array<string> }>> {\n\n    const rb = new RequestBuilder(this.rootUrl, VduInternalService.ContainerGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{ 'DNs'?: Array<string> }>;\n      })\n    );\n  }\n\n  /**\n   * Get containers DNs.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `containerGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  containerGet(params?: {\n\n  }): Observable<{ 'DNs'?: Array<string> }> {\n\n    return this.containerGet$Response(params).pipe(\n      map((r: StrictHttpResponse<{ 'DNs'?: Array<string> }>) => r.body as { 'DNs'?: Array<string> })\n    );\n  }\n\n  /**\n   * Path part for operation containerPost\n   */\n  static readonly ContainerPostPath = '/container';\n\n  /**\n   * Create container instance.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `containerPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  containerPost$Response(params?: {\n  \n    /**\n     * json containing container information structure\n     */\n    body?: Container\n  }): Observable<StrictHttpResponse<{ 'link'?: Link }>> {\n\n    const rb = new RequestBuilder(this.rootUrl, VduInternalService.ContainerPostPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{ 'link'?: Link }>;\n      })\n    );\n  }\n\n  /**\n   * Create container instance.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `containerPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  containerPost(params?: {\n  \n    /**\n     * json containing container information structure\n     */\n    body?: Container\n  }): Observable<{ 'link'?: Link }> {\n\n    return this.containerPost$Response(params).pipe(\n      map((r: StrictHttpResponse<{ 'link'?: Link }>) => r.body as { 'link'?: Link })\n    );\n  }\n\n  /**\n   * Path part for operation containerContainerIdGet\n   */\n  static readonly ContainerContainerIdGetPath = '/container/{containerId}';\n\n  /**\n   * Fetch container instance.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `containerContainerIdGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  containerContainerIdGet$Response(params: {\n\n    /**\n     * container instance Id\n     */\n    containerId: string;\n\n  }): Observable<StrictHttpResponse<Container>> {\n\n    const rb = new RequestBuilder(this.rootUrl, VduInternalService.ContainerContainerIdGetPath, 'get');\n    if (params) {\n\n      rb.path('containerId', params.containerId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Container>;\n      })\n    );\n  }\n\n  /**\n   * Fetch container instance.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `containerContainerIdGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  containerContainerIdGet(params: {\n\n    /**\n     * container instance Id\n     */\n    containerId: string;\n\n  }): Observable<Container> {\n\n    return this.containerContainerIdGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Container>) => r.body as Container)\n    );\n  }\n\n  /**\n   * Path part for operation containerContainerIdHeartbeatPost\n   */\n  static readonly ContainerContainerIdHeartbeatPostPath = '/container/{containerId}/heartbeat';\n\n  /**\n   * Anounce a container is still alive and kicking.\n   *\n   * Periodically, each OamAgent updates /container/x/heartbeat/1. In this way OamAgent from OAM container knows which container is alive and kicking.\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `containerContainerIdHeartbeatPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  containerContainerIdHeartbeatPost$Response(params: {\n\n    /**\n     * container instance Id\n     */\n    containerId: string;\n  \n    /**\n     * json containing bootid\n     */\n    body?: Heartbeat\n  }): Observable<StrictHttpResponse<Heartbeat>> {\n\n    const rb = new RequestBuilder(this.rootUrl, VduInternalService.ContainerContainerIdHeartbeatPostPath, 'post');\n    if (params) {\n\n      rb.path('containerId', params.containerId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Heartbeat>;\n      })\n    );\n  }\n\n  /**\n   * Anounce a container is still alive and kicking.\n   *\n   * Periodically, each OamAgent updates /container/x/heartbeat/1. In this way OamAgent from OAM container knows which container is alive and kicking.\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `containerContainerIdHeartbeatPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  containerContainerIdHeartbeatPost(params: {\n\n    /**\n     * container instance Id\n     */\n    containerId: string;\n  \n    /**\n     * json containing bootid\n     */\n    body?: Heartbeat\n  }): Observable<Heartbeat> {\n\n    return this.containerContainerIdHeartbeatPost$Response(params).pipe(\n      map((r: StrictHttpResponse<Heartbeat>) => r.body as Heartbeat)\n    );\n  }\n\n  /**\n   * Path part for operation containerContainerIdInterfaceGet\n   */\n  static readonly ContainerContainerIdInterfaceGetPath = '/container/{containerId}/interface';\n\n  /**\n   * Get interface DNs under specified container.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `containerContainerIdInterfaceGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  containerContainerIdInterfaceGet$Response(params: {\n\n    /**\n     * container instance Id\n     */\n    containerId: string;\n\n  }): Observable<StrictHttpResponse<{ 'DNs'?: Array<string> }>> {\n\n    const rb = new RequestBuilder(this.rootUrl, VduInternalService.ContainerContainerIdInterfaceGetPath, 'get');\n    if (params) {\n\n      rb.path('containerId', params.containerId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{ 'DNs'?: Array<string> }>;\n      })\n    );\n  }\n\n  /**\n   * Get interface DNs under specified container.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `containerContainerIdInterfaceGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  containerContainerIdInterfaceGet(params: {\n\n    /**\n     * container instance Id\n     */\n    containerId: string;\n\n  }): Observable<{ 'DNs'?: Array<string> }> {\n\n    return this.containerContainerIdInterfaceGet$Response(params).pipe(\n      map((r: StrictHttpResponse<{ 'DNs'?: Array<string> }>) => r.body as { 'DNs'?: Array<string> })\n    );\n  }\n\n  /**\n   * Path part for operation containerContainerIdInterfacePost\n   */\n  static readonly ContainerContainerIdInterfacePostPath = '/container/{containerId}/interface';\n\n  /**\n   * Create interface instance under specified container.\n   *\n   * Stores internal IPs used by OamAgent for syscom routes creation\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `containerContainerIdInterfacePost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  containerContainerIdInterfacePost$Response(params: {\n\n    /**\n     * container instance Id\n     */\n    containerId: string;\n  \n    /**\n     * json containing interface configuration\n     */\n    body?: Interface\n  }): Observable<StrictHttpResponse<{ 'link'?: Link }>> {\n\n    const rb = new RequestBuilder(this.rootUrl, VduInternalService.ContainerContainerIdInterfacePostPath, 'post');\n    if (params) {\n\n      rb.path('containerId', params.containerId, {});\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{ 'link'?: Link }>;\n      })\n    );\n  }\n\n  /**\n   * Create interface instance under specified container.\n   *\n   * Stores internal IPs used by OamAgent for syscom routes creation\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `containerContainerIdInterfacePost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  containerContainerIdInterfacePost(params: {\n\n    /**\n     * container instance Id\n     */\n    containerId: string;\n  \n    /**\n     * json containing interface configuration\n     */\n    body?: Interface\n  }): Observable<{ 'link'?: Link }> {\n\n    return this.containerContainerIdInterfacePost$Response(params).pipe(\n      map((r: StrictHttpResponse<{ 'link'?: Link }>) => r.body as { 'link'?: Link })\n    );\n  }\n\n  /**\n   * Path part for operation containerContainerIdInterfaceInterfaceIdGet\n   */\n  static readonly ContainerContainerIdInterfaceInterfaceIdGetPath = '/container/{containerId}/interface/{interfaceId}';\n\n  /**\n   * Fetch interface instance under specified container.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `containerContainerIdInterfaceInterfaceIdGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  containerContainerIdInterfaceInterfaceIdGet$Response(params: {\n\n    /**\n     * container instance Id\n     */\n    containerId: string;\n\n    /**\n     * interface instance id\n     */\n    interfaceId: string;\n\n  }): Observable<StrictHttpResponse<Interface>> {\n\n    const rb = new RequestBuilder(this.rootUrl, VduInternalService.ContainerContainerIdInterfaceInterfaceIdGetPath, 'get');\n    if (params) {\n\n      rb.path('containerId', params.containerId, {});\n      rb.path('interfaceId', params.interfaceId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Interface>;\n      })\n    );\n  }\n\n  /**\n   * Fetch interface instance under specified container.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `containerContainerIdInterfaceInterfaceIdGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  containerContainerIdInterfaceInterfaceIdGet(params: {\n\n    /**\n     * container instance Id\n     */\n    containerId: string;\n\n    /**\n     * interface instance id\n     */\n    interfaceId: string;\n\n  }): Observable<Interface> {\n\n    return this.containerContainerIdInterfaceInterfaceIdGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Interface>) => r.body as Interface)\n    );\n  }\n\n  /**\n   * Path part for operation vduContainersGet\n   */\n  static readonly VduContainersGetPath = '/vdu/containers';\n\n  /**\n   * Get containers list.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `vduContainersGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  vduContainersGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<VduExtendedContainer>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, VduInternalService.VduContainersGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<VduExtendedContainer>>;\n      })\n    );\n  }\n\n  /**\n   * Get containers list.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `vduContainersGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  vduContainersGet(params?: {\n\n  }): Observable<Array<VduExtendedContainer>> {\n\n    return this.vduContainersGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<VduExtendedContainer>>) => r.body as Array<VduExtendedContainer>)\n    );\n  }\n\n  /**\n   * Path part for operation getExtendedContainer\n   */\n  static readonly GetExtendedContainerPath = '/vdu/containers/{containerId}';\n\n  /**\n   * Get containers attributes and interfaces.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getExtendedContainer()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getExtendedContainer$Response(params: {\n\n    /**\n     * Container instance id.\n     */\n    containerId: string;\n\n  }): Observable<StrictHttpResponse<VduExtendedContainer>> {\n\n    const rb = new RequestBuilder(this.rootUrl, VduInternalService.GetExtendedContainerPath, 'get');\n    if (params) {\n\n      rb.path('containerId', params.containerId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<VduExtendedContainer>;\n      })\n    );\n  }\n\n  /**\n   * Get containers attributes and interfaces.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getExtendedContainer$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getExtendedContainer(params: {\n\n    /**\n     * Container instance id.\n     */\n    containerId: string;\n\n  }): Observable<VduExtendedContainer> {\n\n    return this.getExtendedContainer$Response(params).pipe(\n      map((r: StrictHttpResponse<VduExtendedContainer>) => r.body as VduExtendedContainer)\n    );\n  }\n\n  /**\n   * Path part for operation vduPodsGet\n   */\n  static readonly VduPodsGetPath = '/vdu/pods';\n\n  /**\n   * Get PODs list.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `vduPodsGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  vduPodsGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<VduExtendedPod>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, VduInternalService.VduPodsGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<VduExtendedPod>>;\n      })\n    );\n  }\n\n  /**\n   * Get PODs list.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `vduPodsGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  vduPodsGet(params?: {\n\n  }): Observable<Array<VduExtendedPod>> {\n\n    return this.vduPodsGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<VduExtendedPod>>) => r.body as Array<VduExtendedPod>)\n    );\n  }\n\n  /**\n   * Path part for operation getExtendedPod\n   */\n  static readonly GetExtendedPodPath = '/vdu/pods/{podId}';\n\n  /**\n   * Get POD attributes and interfaces.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getExtendedPod()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getExtendedPod$Response(params: {\n\n    /**\n     * POD instance id.\n     */\n    podId: string;\n\n  }): Observable<StrictHttpResponse<VduExtendedPod>> {\n\n    const rb = new RequestBuilder(this.rootUrl, VduInternalService.GetExtendedPodPath, 'get');\n    if (params) {\n\n      rb.path('podId', params.podId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<VduExtendedPod>;\n      })\n    );\n  }\n\n  /**\n   * Get POD attributes and interfaces.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getExtendedPod$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getExtendedPod(params: {\n\n    /**\n     * POD instance id.\n     */\n    podId: string;\n\n  }): Observable<VduExtendedPod> {\n\n    return this.getExtendedPod$Response(params).pipe(\n      map((r: StrictHttpResponse<VduExtendedPod>) => r.body as VduExtendedPod)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '/api/pm/v2';\n}\n\n/**\n * Parameters for `CuPmv2ClientModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { CounterInfo } from '../models/counter-info';\nimport { DimensionDistname } from '../models/dimension-distname';\nimport { Measurement } from '../models/measurement';\nimport { MultiValidation } from '../models/multi-validation';\nimport { MultiValue } from '../models/multi-value';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CuPmv2ClientService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getMeasurements\n   */\n  static readonly GetMeasurementsPath = '/measurements';\n\n  /**\n   * Retrieves all the measurements current on BTS.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getMeasurements()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getMeasurements$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<Measurement>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuPmv2ClientService.GetMeasurementsPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Measurement>>;\n      })\n    );\n  }\n\n  /**\n   * Retrieves all the measurements current on BTS.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getMeasurements$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getMeasurements(params?: {\n\n  }): Observable<Array<Measurement>> {\n\n    return this.getMeasurements$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<Measurement>>) => r.body as Array<Measurement>)\n    );\n  }\n\n  /**\n   * Path part for operation getCounterInfo\n   */\n  static readonly GetCounterInfoPath = '/counters/{counterId}/info';\n\n  /**\n   * Retrieves counter information.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getCounterInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCounterInfo$Response(params: {\n\n    /**\n     * Counter id\n     */\n    counterId: string;\n\n  }): Observable<StrictHttpResponse<CounterInfo>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuPmv2ClientService.GetCounterInfoPath, 'get');\n    if (params) {\n\n      rb.path('counterId', params.counterId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CounterInfo>;\n      })\n    );\n  }\n\n  /**\n   * Retrieves counter information.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getCounterInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCounterInfo(params: {\n\n    /**\n     * Counter id\n     */\n    counterId: string;\n\n  }): Observable<CounterInfo> {\n\n    return this.getCounterInfo$Response(params).pipe(\n      map((r: StrictHttpResponse<CounterInfo>) => r.body as CounterInfo)\n    );\n  }\n\n  /**\n   * Path part for operation getCounterObjects\n   */\n  static readonly GetCounterObjectsPath = '/counters/{counterId}/objects';\n\n  /**\n   * Retrieves list of distanames for objects on which counter has values.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getCounterObjects()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCounterObjects$Response(params: {\n\n    /**\n     * Counter id\n     */\n    counterId: string;\n\n  }): Observable<StrictHttpResponse<Array<DimensionDistname>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuPmv2ClientService.GetCounterObjectsPath, 'get');\n    if (params) {\n\n      rb.path('counterId', params.counterId, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<DimensionDistname>>;\n      })\n    );\n  }\n\n  /**\n   * Retrieves list of distanames for objects on which counter has values.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getCounterObjects$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCounterObjects(params: {\n\n    /**\n     * Counter id\n     */\n    counterId: string;\n\n  }): Observable<Array<DimensionDistname>> {\n\n    return this.getCounterObjects$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<DimensionDistname>>) => r.body as Array<DimensionDistname>)\n    );\n  }\n\n  /**\n   * Path part for operation getCounterMultipleValues\n   */\n  static readonly GetCounterMultipleValuesPath = '/counters/values';\n\n  /**\n   * Retrieves values for multiple different counters (every 5 sec).\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getCounterMultipleValues()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCounterMultipleValues$Response(params: {\n\n    /**\n     * String that contains counterId and dimensionDistName separated with a colon. Strings are percent-encoded.\n     */\n    counter: Array<string>;\n\n    /**\n     * The lower limit of the period of values you want to see. Timestamp is in BTS local time and in percent-encoded ISO 8601 format\n     */\n    startTimeLowerLimit?: string;\n\n    /**\n     * The upper limit of the period of values you want to see. Timestamp is in BTS local time and in percent-encoded ISO 8601 format\n     */\n    startTimeUpperLimit?: string;\n\n    /**\n     * Latest percent-encoded start time of the previously fetched counter data. Server will use the tag to check if there is new counter data available.\n     */\n    'If-None-Match'?: string;\n\n  }): Observable<StrictHttpResponse<MultiValue>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuPmv2ClientService.GetCounterMultipleValuesPath, 'get');\n    if (params) {\n\n      rb.query('counter', params.counter, {});\n      rb.query('startTimeLowerLimit', params.startTimeLowerLimit, {});\n      rb.query('startTimeUpperLimit', params.startTimeUpperLimit, {});\n      rb.header('If-None-Match', params['If-None-Match'], {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<MultiValue>;\n      })\n    );\n  }\n\n  /**\n   * Retrieves values for multiple different counters (every 5 sec).\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getCounterMultipleValues$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCounterMultipleValues(params: {\n\n    /**\n     * String that contains counterId and dimensionDistName separated with a colon. Strings are percent-encoded.\n     */\n    counter: Array<string>;\n\n    /**\n     * The lower limit of the period of values you want to see. Timestamp is in BTS local time and in percent-encoded ISO 8601 format\n     */\n    startTimeLowerLimit?: string;\n\n    /**\n     * The upper limit of the period of values you want to see. Timestamp is in BTS local time and in percent-encoded ISO 8601 format\n     */\n    startTimeUpperLimit?: string;\n\n    /**\n     * Latest percent-encoded start time of the previously fetched counter data. Server will use the tag to check if there is new counter data available.\n     */\n    'If-None-Match'?: string;\n\n  }): Observable<MultiValue> {\n\n    return this.getCounterMultipleValues$Response(params).pipe(\n      map((r: StrictHttpResponse<MultiValue>) => r.body as MultiValue)\n    );\n  }\n\n  /**\n   * Path part for operation getValidCounters\n   */\n  static readonly GetValidCountersPath = '/counters/validation';\n\n  /**\n   * Retrieves validation result for counters.\n   *\n   * A counter:dimensionDistName pair is valid when counter is registered and enabled for the dimensionDistName\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getValidCounters()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getValidCounters$Response(params: {\n\n    /**\n     * String that contains counterId and dimensionDistName separated with a colon. Strings are percent-encoded.\n     */\n    counter: Array<string>;\n\n  }): Observable<StrictHttpResponse<MultiValidation>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CuPmv2ClientService.GetValidCountersPath, 'get');\n    if (params) {\n\n      rb.query('counter', params.counter, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<MultiValidation>;\n      })\n    );\n  }\n\n  /**\n   * Retrieves validation result for counters.\n   *\n   * A counter:dimensionDistName pair is valid when counter is registered and enabled for the dimensionDistName\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getValidCounters$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getValidCounters(params: {\n\n    /**\n     * String that contains counterId and dimensionDistName separated with a colon. Strings are percent-encoded.\n     */\n    counter: Array<string>;\n\n  }): Observable<MultiValidation> {\n\n    return this.getValidCounters$Response(params).pipe(\n      map((r: StrictHttpResponse<MultiValidation>) => r.body as MultiValidation)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '/api/trs/v1';\n}\n\n/**\n * Parameters for `CuTrsApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { OperationStatus } from '../models/operation-status';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsyncOperationsService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation operationsIdGet\n   */\n  static readonly OperationsIdGetPath = '/operations/{id}';\n\n  /**\n   * Get operation status by id.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `operationsIdGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operationsIdGet$Response(params: {\n\n    /**\n     * Resource id\n     */\n    id: string;\n\n  }): Observable<StrictHttpResponse<OperationStatus>> {\n\n    const rb = new RequestBuilder(this.rootUrl, AsyncOperationsService.OperationsIdGetPath, 'get');\n    if (params) {\n\n      rb.path('id', params.id, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<OperationStatus>;\n      })\n    );\n  }\n\n  /**\n   * Get operation status by id.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `operationsIdGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operationsIdGet(params: {\n\n    /**\n     * Resource id\n     */\n    id: string;\n\n  }): Observable<OperationStatus> {\n\n    return this.operationsIdGet$Response(params).pipe(\n      map((r: StrictHttpResponse<OperationStatus>) => r.body as OperationStatus)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Certificate } from '../models/certificate';\nimport { CertificateFile } from '../models/certificate-file';\nimport { CmpServerConfigurationState } from '../models/cmp-server-configuration-state';\nimport { CmpSettings } from '../models/cmp-settings';\nimport { Crl } from '../models/crl';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CertMgtService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation operatorCertificatesIdGet\n   */\n  static readonly OperatorCertificatesIdGetPath = '/operator/certificates/{id}';\n\n  /**\n   * Get operator certificate by id.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `operatorCertificatesIdGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operatorCertificatesIdGet$Response(params: {\n\n    /**\n     * Resource id\n     */\n    id: string;\n\n  }): Observable<StrictHttpResponse<Certificate>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.OperatorCertificatesIdGetPath, 'get');\n    if (params) {\n\n      rb.path('id', params.id, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Certificate>;\n      })\n    );\n  }\n\n  /**\n   * Get operator certificate by id.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `operatorCertificatesIdGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operatorCertificatesIdGet(params: {\n\n    /**\n     * Resource id\n     */\n    id: string;\n\n  }): Observable<Certificate> {\n\n    return this.operatorCertificatesIdGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Certificate>) => r.body as Certificate)\n    );\n  }\n\n  /**\n   * Path part for operation operatorCertificatesIdDelete\n   */\n  static readonly OperatorCertificatesIdDeletePath = '/operator/certificates/{id}';\n\n  /**\n   * Delete operator certificate by id.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `operatorCertificatesIdDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operatorCertificatesIdDelete$Response(params: {\n\n    /**\n     * Resource id\n     */\n    id: string;\n\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.OperatorCertificatesIdDeletePath, 'delete');\n    if (params) {\n\n      rb.path('id', params.id, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * Delete operator certificate by id.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `operatorCertificatesIdDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operatorCertificatesIdDelete(params: {\n\n    /**\n     * Resource id\n     */\n    id: string;\n\n  }): Observable<string> {\n\n    return this.operatorCertificatesIdDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation operatorCertificatesGet\n   */\n  static readonly OperatorCertificatesGetPath = '/operator/certificates';\n\n  /**\n   * Get operator certificate list.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `operatorCertificatesGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operatorCertificatesGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<Certificate>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.OperatorCertificatesGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Certificate>>;\n      })\n    );\n  }\n\n  /**\n   * Get operator certificate list.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `operatorCertificatesGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operatorCertificatesGet(params?: {\n\n  }): Observable<Array<Certificate>> {\n\n    return this.operatorCertificatesGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<Certificate>>) => r.body as Array<Certificate>)\n    );\n  }\n\n  /**\n   * Path part for operation operatorCertificatesPost\n   */\n  static readonly OperatorCertificatesPostPath = '/operator/certificates';\n\n  /**\n   * Install operator certificate.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `operatorCertificatesPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  operatorCertificatesPost$Response(params?: {\n      body?: CertificateFile\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.OperatorCertificatesPostPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * Install operator certificate.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `operatorCertificatesPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  operatorCertificatesPost(params?: {\n      body?: CertificateFile\n  }): Observable<string> {\n\n    return this.operatorCertificatesPost$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation operatorCertificatesDelete\n   */\n  static readonly OperatorCertificatesDeletePath = '/operator/certificates';\n\n  /**\n   * Delete all operator certificates.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `operatorCertificatesDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operatorCertificatesDelete$Response(params?: {\n\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.OperatorCertificatesDeletePath, 'delete');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * Delete all operator certificates.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `operatorCertificatesDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operatorCertificatesDelete(params?: {\n\n  }): Observable<string> {\n\n    return this.operatorCertificatesDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation operatorCsrGet\n   */\n  static readonly OperatorCsrGetPath = '/operator/csr';\n\n  /**\n   * Retrieve NE CSR file.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `operatorCsrGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operatorCsrGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Blob>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.OperatorCsrGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Blob>;\n      })\n    );\n  }\n\n  /**\n   * Retrieve NE CSR file.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `operatorCsrGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operatorCsrGet(params?: {\n\n  }): Observable<Blob> {\n\n    return this.operatorCsrGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Blob>) => r.body as Blob)\n    );\n  }\n\n  /**\n   * Path part for operation operatorCsrPost\n   */\n  static readonly OperatorCsrPostPath = '/operator/csr';\n\n  /**\n   * Generate CSR for NE.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `operatorCsrPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operatorCsrPost$Response(params?: {\n\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.OperatorCsrPostPath, 'post');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * Generate CSR for NE.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `operatorCsrPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  operatorCsrPost(params?: {\n\n  }): Observable<string> {\n\n    return this.operatorCsrPost$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation cmpServerGet\n   */\n  static readonly CmpServerGetPath = '/cmp/server';\n\n  /**\n   * Get CMP server configuration status.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `cmpServerGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cmpServerGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<CmpServerConfigurationState>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.CmpServerGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CmpServerConfigurationState>;\n      })\n    );\n  }\n\n  /**\n   * Get CMP server configuration status.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `cmpServerGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cmpServerGet(params?: {\n\n  }): Observable<CmpServerConfigurationState> {\n\n    return this.cmpServerGet$Response(params).pipe(\n      map((r: StrictHttpResponse<CmpServerConfigurationState>) => r.body as CmpServerConfigurationState)\n    );\n  }\n\n  /**\n   * Path part for operation cmpServerStatusGet\n   */\n  static readonly CmpServerStatusGetPath = '/cmp/server/status';\n\n  /**\n   * Get cmp state machine status.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `cmpServerStatusGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cmpServerStatusGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<{ 'status': string }>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.CmpServerStatusGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{ 'status': string }>;\n      })\n    );\n  }\n\n  /**\n   * Get cmp state machine status.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `cmpServerStatusGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cmpServerStatusGet(params?: {\n\n  }): Observable<{ 'status': string }> {\n\n    return this.cmpServerStatusGet$Response(params).pipe(\n      map((r: StrictHttpResponse<{ 'status': string }>) => r.body as { 'status': string })\n    );\n  }\n\n  /**\n   * Path part for operation cmpServerSettingsPut\n   */\n  static readonly CmpServerSettingsPutPath = '/cmp/server/settings';\n\n  /**\n   * Update CMP server settings.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `cmpServerSettingsPut()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  cmpServerSettingsPut$Response(params: {\n  \n    /**\n     * CMP server settings\n     */\n    body: CmpSettings\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.CmpServerSettingsPutPath, 'put');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * Update CMP server settings.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `cmpServerSettingsPut$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  cmpServerSettingsPut(params: {\n  \n    /**\n     * CMP server settings\n     */\n    body: CmpSettings\n  }): Observable<string> {\n\n    return this.cmpServerSettingsPut$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation cmpServerKeyPost\n   */\n  static readonly CmpServerKeyPostPath = '/cmp/server/key';\n\n  /**\n   * Trigger CMP server key update.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `cmpServerKeyPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cmpServerKeyPost$Response(params?: {\n\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.CmpServerKeyPostPath, 'post');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * Trigger CMP server key update.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `cmpServerKeyPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cmpServerKeyPost(params?: {\n\n  }): Observable<string> {\n\n    return this.cmpServerKeyPost$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation cmpCertificateInitializationPost\n   */\n  static readonly CmpCertificateInitializationPostPath = '/cmp/certificate-initialization';\n\n  /**\n   * Trigger certificate initialization.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `cmpCertificateInitializationPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cmpCertificateInitializationPost$Response(params?: {\n\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.CmpCertificateInitializationPostPath, 'post');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * Trigger certificate initialization.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `cmpCertificateInitializationPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cmpCertificateInitializationPost(params?: {\n\n  }): Observable<string> {\n\n    return this.cmpCertificateInitializationPost$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation crlGet\n   */\n  static readonly CrlGetPath = '/crl';\n\n  /**\n   * Get CRL information.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `crlGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  crlGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Crl>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.CrlGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Crl>;\n      })\n    );\n  }\n\n  /**\n   * Get CRL information.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `crlGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  crlGet(params?: {\n\n  }): Observable<Crl> {\n\n    return this.crlGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Crl>) => r.body as Crl)\n    );\n  }\n\n  /**\n   * Path part for operation crlPost\n   */\n  static readonly CrlPostPath = '/crl';\n\n  /**\n   * Trigger CRL information update.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `crlPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  crlPost$Response(params?: {\n\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CertMgtService.CrlPostPath, 'post');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * Trigger CRL information update.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `crlPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  crlPost(params?: {\n\n  }): Observable<string> {\n\n    return this.crlPost$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ExternalInterface } from '../models/external-interface';\nimport { PingTestSetup } from '../models/ping-test-setup';\nimport { PingTestStatus } from '../models/ping-test-status';\nimport { PmtuDiscoverySetup } from '../models/pmtu-discovery-setup';\nimport { PmtuDiscoveryStatus } from '../models/pmtu-discovery-status';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DiagnosticService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation interfacesExternalGet\n   */\n  static readonly InterfacesExternalGetPath = '/interfaces/external';\n\n  /**\n   * Get list of external interfaces.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `interfacesExternalGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  interfacesExternalGet$Response(params?: {\n\n  }): Observable<StrictHttpResponse<Array<ExternalInterface>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, DiagnosticService.InterfacesExternalGetPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<ExternalInterface>>;\n      })\n    );\n  }\n\n  /**\n   * Get list of external interfaces.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `interfacesExternalGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  interfacesExternalGet(params?: {\n\n  }): Observable<Array<ExternalInterface>> {\n\n    return this.interfacesExternalGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<ExternalInterface>>) => r.body as Array<ExternalInterface>)\n    );\n  }\n\n  /**\n   * Path part for operation getListOfExternalEntities\n   */\n  static readonly GetListOfExternalEntitiesPath = '/interfaces/external-entities/{id}';\n\n  /**\n   * Get list of external entities.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getListOfExternalEntities()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getListOfExternalEntities$Response(params: {\n\n    /**\n     * Resource id\n     */\n    id: string;\n\n  }): Observable<StrictHttpResponse<Array<ExternalInterface>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, DiagnosticService.GetListOfExternalEntitiesPath, 'get');\n    if (params) {\n\n      rb.path('id', params.id, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<ExternalInterface>>;\n      })\n    );\n  }\n\n  /**\n   * Get list of external entities.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getListOfExternalEntities$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getListOfExternalEntities(params: {\n\n    /**\n     * Resource id\n     */\n    id: string;\n\n  }): Observable<Array<ExternalInterface>> {\n\n    return this.getListOfExternalEntities$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<ExternalInterface>>) => r.body as Array<ExternalInterface>)\n    );\n  }\n\n  /**\n   * Path part for operation getIpConnectivityTestStatus\n   */\n  static readonly GetIpConnectivityTestStatusPath = '/test/ip-connectivity/{id}';\n\n  /**\n   * Get IP connectivity test status.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getIpConnectivityTestStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getIpConnectivityTestStatus$Response(params: {\n\n    /**\n     * Resource id\n     */\n    id: string;\n\n  }): Observable<StrictHttpResponse<PingTestStatus>> {\n\n    const rb = new RequestBuilder(this.rootUrl, DiagnosticService.GetIpConnectivityTestStatusPath, 'get');\n    if (params) {\n\n      rb.path('id', params.id, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<PingTestStatus>;\n      })\n    );\n  }\n\n  /**\n   * Get IP connectivity test status.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getIpConnectivityTestStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getIpConnectivityTestStatus(params: {\n\n    /**\n     * Resource id\n     */\n    id: string;\n\n  }): Observable<PingTestStatus> {\n\n    return this.getIpConnectivityTestStatus$Response(params).pipe(\n      map((r: StrictHttpResponse<PingTestStatus>) => r.body as PingTestStatus)\n    );\n  }\n\n  /**\n   * Path part for operation startIpConnectivityTest\n   */\n  static readonly StartIpConnectivityTestPath = '/test/ip-connectivity';\n\n  /**\n   * Test IP connectivity to given address.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `startIpConnectivityTest()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  startIpConnectivityTest$Response(params?: {\n      body?: PingTestSetup\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, DiagnosticService.StartIpConnectivityTestPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * Test IP connectivity to given address.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `startIpConnectivityTest$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  startIpConnectivityTest(params?: {\n      body?: PingTestSetup\n  }): Observable<string> {\n\n    return this.startIpConnectivityTest$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation getPmtuDiscoveryStatus\n   */\n  static readonly GetPmtuDiscoveryStatusPath = '/test/pmtu-discovery/{id}';\n\n  /**\n   * Get PMTU discovery operation status.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getPmtuDiscoveryStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPmtuDiscoveryStatus$Response(params: {\n\n    /**\n     * Resource id\n     */\n    id: string;\n\n  }): Observable<StrictHttpResponse<PmtuDiscoveryStatus>> {\n\n    const rb = new RequestBuilder(this.rootUrl, DiagnosticService.GetPmtuDiscoveryStatusPath, 'get');\n    if (params) {\n\n      rb.path('id', params.id, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<PmtuDiscoveryStatus>;\n      })\n    );\n  }\n\n  /**\n   * Get PMTU discovery operation status.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getPmtuDiscoveryStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getPmtuDiscoveryStatus(params: {\n\n    /**\n     * Resource id\n     */\n    id: string;\n\n  }): Observable<PmtuDiscoveryStatus> {\n\n    return this.getPmtuDiscoveryStatus$Response(params).pipe(\n      map((r: StrictHttpResponse<PmtuDiscoveryStatus>) => r.body as PmtuDiscoveryStatus)\n    );\n  }\n\n  /**\n   * Path part for operation startPmtuDiscovery\n   */\n  static readonly StartPmtuDiscoveryPath = '/test/pmtu-discovery';\n\n  /**\n   * Run PMTU discovery to given address.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `startPmtuDiscovery()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  startPmtuDiscovery$Response(params?: {\n      body?: PmtuDiscoverySetup\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, DiagnosticService.StartPmtuDiscoveryPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * Run PMTU discovery to given address.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `startPmtuDiscovery$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  startPmtuDiscovery(params?: {\n      body?: PmtuDiscoverySetup\n  }): Observable<string> {\n\n    return this.startPmtuDiscovery$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n}\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { Link } from '../models/link';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotificationsService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation notifyActivation\r\n   */\r\n  static readonly NotifyActivationPath = '/api/activation';\r\n\r\n  /**\r\n   * Activation operation notification.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivateOperation` - Notification send when ActivateOperation is about to happen\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `notifyActivation()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyActivation$Response(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'id': string, 'isCompleted': boolean, 'links': Array<Link> }\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, NotificationsService.NotifyActivationPath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Channel-ID', params['X-OAM-Channel-ID'], {});\r\n      rb.header('X-OAM-Resource-URI', params['X-OAM-Resource-URI'], {});\r\n      rb.header('X-OAM-Resource-State', params['X-OAM-Resource-State'], {});\r\n      rb.header('X-OAM-Message-Number', params['X-OAM-Message-Number'], {});\r\n      rb.header('X-OAM-Client-Label', params['X-OAM-Client-Label'], {});\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Activation operation notification.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivateOperation` - Notification send when ActivateOperation is about to happen\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `notifyActivation$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyActivation(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'id': string, 'isCompleted': boolean, 'links': Array<{ 'rel'?: string, 'href': string }> }\r\n  }): Observable<void> {\r\n\r\n    return this.notifyActivation$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation notifyImpactDeduction\r\n   */\r\n  static readonly NotifyImpactDeductionPath = '/api/activation-impact-deductions';\r\n\r\n  /**\r\n   * Activation Impact Deduction Notification.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivationImpactDeduction` - Notification sent when Impact Deduction is about to happen\r\n   * To perform plan impact analysis including 'Conditional BTS restart', 'BTS restart needed'\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `notifyImpactDeduction()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyImpactDeduction$Response(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'removed'?: Array<string>, 'created'?: Array<{ 'className'?: string, 'distName'?: string, 'version'?: string, 'payload'?: string }>, 'updated'?: Array<string> }\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, NotificationsService.NotifyImpactDeductionPath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Channel-ID', params['X-OAM-Channel-ID'], {});\r\n      rb.header('X-OAM-Resource-URI', params['X-OAM-Resource-URI'], {});\r\n      rb.header('X-OAM-Resource-State', params['X-OAM-Resource-State'], {});\r\n      rb.header('X-OAM-Message-Number', params['X-OAM-Message-Number'], {});\r\n      rb.header('X-OAM-Client-Label', params['X-OAM-Client-Label'], {});\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Activation Impact Deduction Notification.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivationImpactDeduction` - Notification sent when Impact Deduction is about to happen\r\n   * To perform plan impact analysis including 'Conditional BTS restart', 'BTS restart needed'\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `notifyImpactDeduction$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyImpactDeduction(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'removed'?: Array<string>, 'created'?: Array<{ 'className'?: string, 'distName'?: string, 'version'?: string, 'payload'?: string }>, 'updated'?: Array<string> }\r\n  }): Observable<void> {\r\n\r\n    return this.notifyImpactDeduction$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation notifyCurrentPlanChange\r\n   */\r\n  static readonly NotifyCurrentPlanChangePath = '/api/current-plan';\r\n\r\n  /**\r\n   * Notify Current Plan Change.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `CurrentPlanChange` - Notification send when Current Plan was modified\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `notifyCurrentPlanChange()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyCurrentPlanChange$Response(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'removed'?: Array<string>, 'created'?: Array<{ 'className'?: string, 'distName'?: string, 'version'?: string, 'payload'?: string }>, 'updated'?: Array<string> }\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, NotificationsService.NotifyCurrentPlanChangePath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Channel-ID', params['X-OAM-Channel-ID'], {});\r\n      rb.header('X-OAM-Resource-URI', params['X-OAM-Resource-URI'], {});\r\n      rb.header('X-OAM-Resource-State', params['X-OAM-Resource-State'], {});\r\n      rb.header('X-OAM-Message-Number', params['X-OAM-Message-Number'], {});\r\n      rb.header('X-OAM-Client-Label', params['X-OAM-Client-Label'], {});\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Notify Current Plan Change.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `CurrentPlanChange` - Notification send when Current Plan was modified\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `notifyCurrentPlanChange$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyCurrentPlanChange(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'removed'?: Array<string>, 'created'?: Array<{ 'className'?: string, 'distName'?: string, 'version'?: string, 'payload'?: string }>, 'updated'?: Array<string> }\r\n  }): Observable<void> {\r\n\r\n    return this.notifyCurrentPlanChange$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation notifyActivationResponceCollection\r\n   */\r\n  static readonly NotifyActivationResponceCollectionPath = '/api/activation-response-collection';\r\n\r\n  /**\r\n   * Notify Activation Response  Collection.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivationResultsCollection` - Notification send when ActivationResultsCollection  is happen\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `notifyActivationResponceCollection()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyActivationResponceCollection$Response(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'restartNeeded'?: boolean, 'activationStatus': 'ok' | 'ongoing' | 'not_ok', 'planUpdateStatus'?: 'ok' | 'ongoing' | 'not_ok', 'links'?: Array<string> }\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, NotificationsService.NotifyActivationResponceCollectionPath, 'post');\r\n    if (params) {\r\n\r\n      rb.header('X-OAM-Channel-ID', params['X-OAM-Channel-ID'], {});\r\n      rb.header('X-OAM-Resource-URI', params['X-OAM-Resource-URI'], {});\r\n      rb.header('X-OAM-Resource-State', params['X-OAM-Resource-State'], {});\r\n      rb.header('X-OAM-Message-Number', params['X-OAM-Message-Number'], {});\r\n      rb.header('X-OAM-Client-Label', params['X-OAM-Client-Label'], {});\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Notify Activation Response  Collection.\r\n   *\r\n   * consumer - **internal** `OAM-CM`\r\n   * - `ActivationResultsCollection` - Notification send when ActivationResultsCollection  is happen\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `notifyActivationResponceCollection$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  notifyActivationResponceCollection(params: {\r\n    'X-OAM-Channel-ID': string;\r\n    'X-OAM-Resource-URI': string;\r\n    'X-OAM-Resource-State': 'initial-sync' | 'delta-sync';\r\n    'X-OAM-Message-Number': string;\r\n    'X-OAM-Client-Label'?: string;\r\n      body?: { 'restartNeeded'?: boolean, 'activationStatus': 'ok' | 'ongoing' | 'not_ok', 'planUpdateStatus'?: 'ok' | 'ongoing' | 'not_ok', 'links'?: Array<string> }\r\n  }): Observable<void> {\r\n\r\n    return this.notifyActivationResponceCollection$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { IkePolicies } from '../models/ike-policies';\r\nimport { PolicyOrderNumbers } from '../models/policy-order-numbers';\r\nimport { PreSharedKey } from '../models/pre-shared-key';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SecurityService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation securityPresharedkeyPost\r\n   */\r\n  static readonly SecurityPresharedkeyPostPath = '/security/presharedkey';\r\n\r\n  /**\r\n   * PSK configuration.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `securityPresharedkeyPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  securityPresharedkeyPost$Response(params?: {\r\n      body?: PreSharedKey\r\n  }): Observable<StrictHttpResponse<string>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SecurityService.SecurityPresharedkeyPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<string>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * PSK configuration.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `securityPresharedkeyPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  securityPresharedkeyPost(params?: {\r\n      body?: PreSharedKey\r\n  }): Observable<string> {\r\n\r\n    return this.securityPresharedkeyPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<string>) => r.body as string)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation securityEntityPoliciesGet\r\n   */\r\n  static readonly SecurityEntityPoliciesGetPath = '/security/entity-policies';\r\n\r\n  /**\r\n   * Get ipsec policy order numbers.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `securityEntityPoliciesGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  securityEntityPoliciesGet$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<PolicyOrderNumbers>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SecurityService.SecurityEntityPoliciesGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<PolicyOrderNumbers>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get ipsec policy order numbers.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `securityEntityPoliciesGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  securityEntityPoliciesGet(params?: {\r\n\r\n  }): Observable<Array<PolicyOrderNumbers>> {\r\n\r\n    return this.securityEntityPoliciesGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<PolicyOrderNumbers>>) => r.body as Array<PolicyOrderNumbers>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation securityIkePoliciesGet\r\n   */\r\n  static readonly SecurityIkePoliciesGetPath = '/security/ike-policies';\r\n\r\n  /**\r\n   * get ike policies by id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `securityIkePoliciesGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  securityIkePoliciesGet$Response(params: {\r\n\r\n    /**\r\n     * ipsec policy order number\r\n     */\r\n    policyId: string;\r\n\r\n    /**\r\n     * pod hostname\r\n     */\r\n    tnlHostName: string;\r\n\r\n  }): Observable<StrictHttpResponse<IkePolicies>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, SecurityService.SecurityIkePoliciesGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('policyId', params.policyId, {});\r\n      rb.query('tnlHostName', params.tnlHostName, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<IkePolicies>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * get ike policies by id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `securityIkePoliciesGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  securityIkePoliciesGet(params: {\r\n\r\n    /**\r\n     * ipsec policy order number\r\n     */\r\n    policyId: string;\r\n\r\n    /**\r\n     * pod hostname\r\n     */\r\n    tnlHostName: string;\r\n\r\n  }): Observable<IkePolicies> {\r\n\r\n    return this.securityIkePoliciesGet$Response(params).pipe(\r\n      map((r: StrictHttpResponse<IkePolicies>) => r.body as IkePolicies)\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatusService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation operationsRestartAboutToHappenPost\n   */\n  static readonly OperationsRestartAboutToHappenPostPath = '/operations/restart-about-to-happen';\n\n  /**\n   * Requests permission for restart.\n   *\n   * Announces other services that a restart is about to happen and waits for response.\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `operationsRestartAboutToHappenPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  operationsRestartAboutToHappenPost$Response(params?: {\n  \n    /**\n     * json containing reboot reason\n     */\n    body?: { 'reason': 'CM reboot request' | 'Manual reboot' | 'Recovery action', 'target': 'cluster' }\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, StatusService.OperationsRestartAboutToHappenPostPath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * Requests permission for restart.\n   *\n   * Announces other services that a restart is about to happen and waits for response.\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `operationsRestartAboutToHappenPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  operationsRestartAboutToHappenPost(params?: {\n  \n    /**\n     * json containing reboot reason\n     */\n    body?: { 'reason': 'CM reboot request' | 'Manual reboot' | 'Recovery action', 'target': 'cluster' }\n  }): Observable<void> {\n\n    return this.operationsRestartAboutToHappenPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { CPlaneTracingStaticRouteConfiguration } from '../models/c-plane-tracing-static-route-configuration';\nimport { PutTraceCommonConfiguration } from '../models/put-trace-common-configuration';\nimport { TraceCommonConfiguration } from '../models/trace-common-configuration';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TraceConfigurationService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getTraceCommonConfiguration\n   */\n  static readonly GetTraceCommonConfigurationPath = '/traces/common-configuration';\n\n  /**\n   * Get common configuration parameters for tracing.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getTraceCommonConfiguration()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTraceCommonConfiguration$Response(params?: {\n\n  }): Observable<StrictHttpResponse<TraceCommonConfiguration>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TraceConfigurationService.GetTraceCommonConfigurationPath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<TraceCommonConfiguration>;\n      })\n    );\n  }\n\n  /**\n   * Get common configuration parameters for tracing.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getTraceCommonConfiguration$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getTraceCommonConfiguration(params?: {\n\n  }): Observable<TraceCommonConfiguration> {\n\n    return this.getTraceCommonConfiguration$Response(params).pipe(\n      map((r: StrictHttpResponse<TraceCommonConfiguration>) => r.body as TraceCommonConfiguration)\n    );\n  }\n\n  /**\n   * Path part for operation updateTraceCommonConfiguration\n   */\n  static readonly UpdateTraceCommonConfigurationPath = '/traces/common-configuration';\n\n  /**\n   * Update common configuration parameters for tracing.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updateTraceCommonConfiguration()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateTraceCommonConfiguration$Response(params: {\n      body: PutTraceCommonConfiguration\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TraceConfigurationService.UpdateTraceCommonConfigurationPath, 'put');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * Update common configuration parameters for tracing.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `updateTraceCommonConfiguration$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateTraceCommonConfiguration(params: {\n      body: PutTraceCommonConfiguration\n  }): Observable<string> {\n\n    return this.updateTraceCommonConfiguration$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation getCPlaneTracingStaticRoute\n   */\n  static readonly GetCPlaneTracingStaticRoutePath = '/traces/c-plane/static-route';\n\n  /**\n   * Get static route configuration for C-Plane tracing server.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getCPlaneTracingStaticRoute()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCPlaneTracingStaticRoute$Response(params?: {\n\n  }): Observable<StrictHttpResponse<CPlaneTracingStaticRouteConfiguration>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TraceConfigurationService.GetCPlaneTracingStaticRoutePath, 'get');\n    if (params) {\n\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CPlaneTracingStaticRouteConfiguration>;\n      })\n    );\n  }\n\n  /**\n   * Get static route configuration for C-Plane tracing server.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getCPlaneTracingStaticRoute$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getCPlaneTracingStaticRoute(params?: {\n\n  }): Observable<CPlaneTracingStaticRouteConfiguration> {\n\n    return this.getCPlaneTracingStaticRoute$Response(params).pipe(\n      map((r: StrictHttpResponse<CPlaneTracingStaticRouteConfiguration>) => r.body as CPlaneTracingStaticRouteConfiguration)\n    );\n  }\n\n  /**\n   * Path part for operation updateCPlaneTracingStaticRoute\n   */\n  static readonly UpdateCPlaneTracingStaticRoutePath = '/traces/c-plane/static-route';\n\n  /**\n   * Update static route configuration for C-Plane tracing server.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updateCPlaneTracingStaticRoute()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateCPlaneTracingStaticRoute$Response(params: {\n      body: CPlaneTracingStaticRouteConfiguration\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, TraceConfigurationService.UpdateCPlaneTracingStaticRoutePath, 'post');\n    if (params) {\n\n\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * Update static route configuration for C-Plane tracing server.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `updateCPlaneTracingStaticRoute$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateCPlaneTracingStaticRoute(params: {\n      body: CPlaneTracingStaticRouteConfiguration\n  }): Observable<string> {\n\n    return this.updateCPlaneTracingStaticRoute$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n}\n","/* tslint:disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Interface } from '../models/interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class VduInterfacesService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation interfaceGet\n   */\n  static readonly InterfaceGetPath = '/interface';\n\n  /**\n   * Get interface data.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `interfaceGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  interfaceGet$Response(params: {\n\n    /**\n     * interface name.\n     */\n    type: 'mplane' | 'cuplane';\n\n  }): Observable<StrictHttpResponse<Interface>> {\n\n    const rb = new RequestBuilder(this.rootUrl, VduInterfacesService.InterfaceGetPath, 'get');\n    if (params) {\n\n      rb.query('type', params.type, {});\n\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Interface>;\n      })\n    );\n  }\n\n  /**\n   * Get interface data.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `interfaceGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  interfaceGet(params: {\n\n    /**\n     * interface name.\n     */\n    type: 'mplane' | 'cuplane';\n\n  }): Observable<Interface> {\n\n    return this.interfaceGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Interface>) => r.body as Interface)\n    );\n  }\n\n}\n","export class LoginMessages {\r\n    static chromeVersionText = 'Google Chrome versions newer than version ... ' +\r\n        'are not verified at WebEM release date. Some functionalities might not be fully supported.' +\r\n        'Please use one of the supported browser versions: 71,72,73';\r\n    static copyrightText = '2021 Nokia. All rights reserved';\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\n\r\nexport enum LoginActionsTypes {\r\n    LOGIN = '[Auth] Login user',\r\n    LOGIN_SUCCESSFUL = '[User] [Auth] Login successful',\r\n    TOKEN_SUCCESSFUL = '[User] [Auth] Token renewal successful',\r\n    RESET_OPERATION_STATUS = '[Auth] Reset operation status',\r\n    LOGIN_FAILED = '[User] [Auth] Login failed',\r\n    REMOVE_LAST_SESSION = '[User] [Auth] Remove last session after token renewal',\r\n    REMOVE_LAST_SESSION_SUCCESFULL = '[User] [Auth] Remove last session after token renewal succesfull',\r\n    LOGIN_IN_PROGRESS = '[Auth] Login in progress',\r\n    LOGIN_INITIAL_VALUES = '[User] [Auth] Reset to inital values',\r\n    LOGIN_STARTED = '[Auth] Start login process',\r\n    START_SSO_LOGIN = '[Auth] Start Sso login',\r\n    LOGIN_LATER = '[Auth] Login later',\r\n    SESSION_UNINTENTIONALLY_TERMINATED = '[Auth] Session unintentionally terminated'\r\n}\r\n\r\nexport const login = createAction(\r\n    LoginActionsTypes.LOGIN,\r\n    props<{ payload: {username: string, password: string, readOnlyChecked: boolean}}>()\r\n);\r\n\r\nexport const loginSuccessful = createAction(\r\n    LoginActionsTypes.LOGIN_SUCCESSFUL\r\n);\r\n\r\nexport const tokenRenewalSuccessful = createAction(\r\n    LoginActionsTypes.TOKEN_SUCCESSFUL,\r\n    props<{shouldStartOperation?: boolean}>()\r\n);\r\n\r\nexport const removeLastSession = createAction(\r\n    LoginActionsTypes.REMOVE_LAST_SESSION\r\n);\r\nexport const removeLastSessionSuccessfull = createAction(\r\n    LoginActionsTypes.REMOVE_LAST_SESSION_SUCCESFULL\r\n);\r\n\r\nexport const resetOperationStatus = createAction(\r\n    LoginActionsTypes.RESET_OPERATION_STATUS\r\n);\r\n\r\nexport const loginFailed = createAction(\r\n    LoginActionsTypes.LOGIN_FAILED,\r\n    props<{ payload: string}>()\r\n);\r\n\r\nexport const loginInProgress = createAction(\r\n    LoginActionsTypes.LOGIN_IN_PROGRESS\r\n);\r\n\r\nexport const setLoginInitialValues = createAction(\r\n    LoginActionsTypes.LOGIN_INITIAL_VALUES\r\n);\r\n\r\nexport const loginStarted = createAction(\r\n    LoginActionsTypes.LOGIN_STARTED,\r\n    props<{ payload: {username: string, password: string, readOnlyChecked?: boolean}}>()\r\n);\r\n\r\nexport const ssoLoginStarted = createAction(\r\n    LoginActionsTypes.START_SSO_LOGIN,\r\n    props<{ payload: string}>()\r\n);\r\n\r\nexport const loginLater = createAction(\r\n    LoginActionsTypes.LOGIN_LATER,\r\n    props<{ message: string, enforcedLogoutDelay: number, username: string, password: string, readOnlyChecked?: boolean}>()\r\n);\r\n\r\nexport const sessionUnintentionallyTerminated = createAction(\r\n    LoginActionsTypes.SESSION_UNINTENTIONALLY_TERMINATED\r\n);\r\n","import { createAction, props } from '@ngrx/store';\r\n\r\nexport enum LogoutActionsTypes {\r\n    LOGOUT = '[User] [Auth] Logout user',\r\n    LOGOUT_FAILED = '[Auth] Logout failed',\r\n    LOGOUT_SUCCESSFUL = '[Auth] Logout successful',\r\n    LOGOUT_IN_PROGRESS = '[Auth] Logout in progress'\r\n}\r\n\r\nexport const logout = createAction(LogoutActionsTypes.LOGOUT);\r\nexport const logoutSuccessful = createAction(LogoutActionsTypes.LOGOUT_SUCCESSFUL);\r\nexport const logoutInProgress = createAction(LogoutActionsTypes.LOGOUT_IN_PROGRESS);\r\nexport const logoutFailed = createAction(\r\n    LogoutActionsTypes.LOGOUT_FAILED,\r\n    props<{ payload: string }>()\r\n);\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { TokenInfo } from '@oam/cu-api-gw-api';\r\n\r\nexport enum TokenInfoActionsTypes {\r\n    SubscribeTokenInfoWatch = '[Token Info] Subscribe token info watch',\r\n    UnsubscribeTokenInfoWatch = '[Token Info] Unsubscribe token info watch',\r\n    SubscribeTokenInfoWatchError = '[Token Info] Unsubscribe token info watch error',\r\n    TokenInfoRequest = '[Token Info] token info request',\r\n    SetTokenInfo = '[Token Info] Set token info',\r\n    SetTokenInfoInitialValues = '[Token Info] Set token info to initial values',\r\n    POST_TOKEN_INFO = '[Token Info] Post token info',\r\n    UnsubscribeUserOperationWatch = '[Token Info] Unsubscribe User Operation Watch',\r\n    SubscribeUserOperationWatch = '[Token Info] Subscribe User Operation Watch',\r\n    ExpiredPollingErrorAction = '[Token Info] Expired polling error',\r\n    RenewOperationalAction = '[Token Info] Renew Operation Action',\r\n}\r\n\r\nexport const subscribeTokenInfoWatch = createAction(\r\n    TokenInfoActionsTypes.SubscribeTokenInfoWatch\r\n);\r\n\r\nexport const unsubscribeTokenInfoWatch = createAction(\r\n    TokenInfoActionsTypes.UnsubscribeTokenInfoWatch\r\n);\r\n\r\nexport const subscribeTokenInfoWatchError = createAction(\r\n    TokenInfoActionsTypes.SubscribeTokenInfoWatchError, props<{ error: HttpErrorResponse }>()\r\n);\r\n\r\nexport const tokenInfoRequest = createAction(\r\n    TokenInfoActionsTypes.TokenInfoRequest\r\n);\r\n\r\nexport const setTokenInfo = createAction(\r\n    TokenInfoActionsTypes.SetTokenInfo,\r\n    props<{tokenInfo: TokenInfo}>()\r\n);\r\n\r\nexport const setTokenInfoInitialValues = createAction(\r\n    TokenInfoActionsTypes.SetTokenInfoInitialValues\r\n);\r\n\r\nexport const PostTokenInfo = createAction(\r\n    TokenInfoActionsTypes.POST_TOKEN_INFO\r\n);\r\n\r\nexport const UnsubscribeUserOperationWatch = createAction(TokenInfoActionsTypes.UnsubscribeUserOperationWatch);\r\nexport const ExpiredPollingErrorAction = createAction(\r\n    TokenInfoActionsTypes.ExpiredPollingErrorAction,\r\n    props<{ error?: HttpErrorResponse, message?: string, name?: string }>());\r\nexport const RenewOperationedAction = createAction(TokenInfoActionsTypes.RenewOperationalAction, props<{ OperationTimestamp: boolean}>());\r\nexport const SubscribeUserOperationWatch = createAction(TokenInfoActionsTypes.SubscribeUserOperationWatch);\r\n","import { Action, createFeatureSelector, createReducer, createSelector, on } from '@ngrx/store';\r\nimport {\r\n    login,\r\n    loginFailed,\r\n    loginInProgress,\r\n    loginSuccessful,\r\n    resetOperationStatus,\r\n    setLoginInitialValues,\r\n    tokenRenewalSuccessful,\r\n    loginLater, sessionUnintentionallyTerminated\r\n} from '../actions/login.actions';\r\nimport { OperationStatus } from '@oam/core/lib/models/operation.interface';\r\n\r\nexport const featureKey = 'login';\r\n\r\nexport const initialState: OperationStatus = {\r\n    inProgress: false,\r\n    successful: false,\r\n    failed: false,\r\n    failedReason: '',\r\n    tryLater: false\r\n};\r\n\r\nconst loginReducer = createReducer(\r\n    initialState,\r\n    on(loginInProgress, (state) => {\r\n        return { ...state, inProgress: true };\r\n    }),\r\n    on(loginFailed, (state, { payload: failedReason }) => {\r\n        return { ...state, failed: true, inProgress: false, tryLater: false, failedReason };\r\n    }),\r\n    on(loginSuccessful, (state) => {\r\n        return { ...state, failed: false, failedReason: '', successful: true, inProgress: false, tryLater: false };\r\n    }),\r\n    on(tokenRenewalSuccessful, (state, { shouldStartOperation }) => {\r\n        return {\r\n            ...state,\r\n            tokenRenewalSuccessful: {\r\n                status: true,\r\n                shouldStartOperationAfterTokenRenewal: shouldStartOperation\r\n            },\r\n            inProgress: false,\r\n            failed: false,\r\n            failedReason: ''\r\n        };\r\n    }),\r\n    on(resetOperationStatus, (state) => {\r\n        return {\r\n            ...state, tokenRenewalSuccessful: {\r\n                status: false\r\n            },\r\n            inProgress: false\r\n        };\r\n    }),\r\n    on(setLoginInitialValues, (state) => {\r\n        return { ...state, successful: false, inProgress: false, failed: false, failedReason: '', tryLater: false };\r\n    }),\r\n    on(sessionUnintentionallyTerminated, (state) => {\r\n        return { ...state, successful: false, inProgress: false, failed: true, tryLater: false };\r\n    }),\r\n    on(loginLater, (state, { message: failedReason }) => {\r\n        return { ...state, tryLater: true, failedReason};\r\n    })\r\n);\r\n\r\nexport function reducer(state: OperationStatus | undefined, action: Action) {\r\n    return loginReducer(state, action);\r\n}\r\n\r\nexport const getLoginStatus = createFeatureSelector<OperationStatus>(featureKey);\r\nexport const selectLoginInProgress = createSelector(getLoginStatus, status => status.inProgress);\r\nexport const selectTokenRenewalSuccessful = createSelector(getLoginStatus, status => status.tokenRenewalSuccessful);\r\n\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport { setTokenInfo, setTokenInfoInitialValues } from '../actions/token-info.actions';\r\nimport { TokenInfo } from '@oam/cu-api-gw-api';\r\n\r\nexport const tokenInfoFeatureKey = 'tokenInfoGet';\r\n\r\nexport const initialState: TokenInfo = {\r\n    Role: '',\r\n    EnforceLogout: false,\r\n    EnforceLogoutDelay: 0,\r\n    Expires: '',\r\n    FailedLoginAttempts: '',\r\n    LastFailedLogin: '',\r\n    LastLogin: '',\r\n    PasswordExpirationDate: '',\r\n    ReadOnlyMode: false,\r\n    Type: '',\r\n    User: ''\r\n};\r\n\r\nexport const tokenInfoReducer = createReducer(\r\n    initialState,\r\n    on(setTokenInfo, (state, {tokenInfo}) => ({ ...state, ...tokenInfo })),\r\n    on(setTokenInfoInitialValues, () => initialState),\r\n);\r\n\r\nexport function reducer(state: TokenInfo | undefined, action: Action) {\r\n    return tokenInfoReducer(state, action);\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { ViewType } from '@oam/status-shared/lib/generic-view/core/model/view-toggle-input.interface';\r\nimport { CellsSortType } from '@oam/status-shared/lib/cells/core/models/cells-sort-type';\r\nimport { FilterState } from '@oam/status-shared/lib/generic-view/core/model/value-filter-input.interface';\r\nimport { VisibleCuCellWidgetParameters } from '@oam/cu-ui';\r\n\r\nenum ActionTypes {\r\n    SetView = '[User] [Cells Status] Set view',\r\n    SelectCell = '[User] [Cells Status] Select cell',\r\n    setDisplayConfiguration = '[User] [Cells Status] Set visible cell parameters',\r\n    ChangeSortType = '[User] [Cells Status] Change sort type',\r\n    ChangeFilter = '[User] [Cells Status] Change filter',\r\n    RestoreView = '[User] [Cells Status] Restore view',\r\n    ExportToCsv = '[User] [Cells Status] Export to csv',\r\n    SetFreeSearchText = '[User] [Cells Status] Set free search text',\r\n}\r\n\r\ntype Payload<T> = { payload: T };\r\n\r\nexport const setView = createAction(ActionTypes.SetView, props<Payload<ViewType>>());\r\nexport const selectCell = createAction(ActionTypes.SelectCell, props<Payload<number | null>>());\r\nexport const setDisplayConfiguration = createAction(ActionTypes.setDisplayConfiguration, props<Payload<VisibleCuCellWidgetParameters>>());\r\nexport const changeSortType = createAction(ActionTypes.ChangeSortType, props<Payload<CellsSortType>>());\r\nexport const changeFilter = createAction(ActionTypes.ChangeFilter, props<Payload<FilterState>>());\r\nexport const restoreView = createAction(ActionTypes.RestoreView);\r\nexport const exportToCsv = createAction(ActionTypes.ExportToCsv);\r\nexport const setFreeSearchText = createAction(ActionTypes.SetFreeSearchText, props<Payload<string>>());\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport { GenericState } from '@oam/status-shared/lib/toolbar/core/model/generic-state';\r\nimport { ViewType } from '@oam/status-shared/lib/generic-view/core/model/view-toggle-input.interface';\r\nimport { CellsSortType } from '@oam/status-shared/lib/cells/core/models/cells-sort-type';\r\nimport { CellsFilterType } from '@oam/status-shared/lib/cells/core/models/cells-filter-type';\r\nimport { CellsFilterState } from '@oam/status-shared/lib/cells/core/models/cells-filter-state';\r\nimport { VisibleCuCellWidgetParameters } from '@oam/cu-ui';\r\nimport * as cellsStatusActions from '../actions/cells-status.actions';\r\nimport { NullableOperationalState, AdministrativeState } from '@oam/cu-asm-api/models';\r\nimport { isNil } from 'lodash';\r\n\r\nexport const featureKey = 'cellsStatus';\r\nconst EMPTY_SELECTION_ID = -1;\r\n\r\nexport interface CellsStatusState extends GenericState {\r\n    displayConfiguration: VisibleCuCellWidgetParameters;\r\n    sortType: CellsSortType;\r\n    filterState: CellsFilterState;\r\n}\r\n\r\nexport const initialState: CellsStatusState = {\r\n    viewType: ViewType.TILE,\r\n    freeSearchText: '',\r\n    selectedId: EMPTY_SELECTION_ID,\r\n    sortType: CellsSortType.BY_NR_CELL_ID,\r\n    filterState: {\r\n        [CellsFilterType.BY_NRCELL_ID]: '',\r\n        [CellsFilterType.BY_CELL_NAME]: '',\r\n        [CellsFilterType.BY_SERVING_DU_ID]: '',\r\n        [CellsFilterType.BY_OPERATIONAL_STATE]: [],\r\n        [CellsFilterType.BY_ADMINISTRATIVE_STATE]: [],\r\n    },\r\n    displayConfiguration: {\r\n        nrCellIdentity: true,\r\n        physicalLayerCellID: true,\r\n        cellName: true,\r\n        type: true,\r\n        nrarfcn: true,\r\n        cellGroupId: true,\r\n        duName: true,\r\n        actions: true,\r\n        technology: true,\r\n    },\r\n};\r\n\r\nconst cellsStatusReducer = createReducer(\r\n    initialState,\r\n    on(cellsStatusActions.setView, (state, { payload: viewType }) => ({ ...state, viewType })),\r\n    on(cellsStatusActions.selectCell, (state, { payload: selectedId }) => ({\r\n        ...state,\r\n        selectedId: isNil(selectedId) ? EMPTY_SELECTION_ID : selectedId })),\r\n    on(cellsStatusActions.setDisplayConfiguration, (state, { payload: displayConfiguration }) => ({ ...state, displayConfiguration })),\r\n    on(cellsStatusActions.changeSortType, (state, { payload: sortType }) => ({ ...state, sortType })),\r\n    on(cellsStatusActions.setFreeSearchText, (state, { payload: freeSearchText }) => ({ ...state, freeSearchText })),\r\n    on(cellsStatusActions.changeFilter, (state, { payload: filter }) => ({\r\n            ...state,\r\n            filterState: {\r\n                ...state.filterState,\r\n                ...filter\r\n            }\r\n    })),\r\n    on(cellsStatusActions.restoreView, state => ({ ...initialState, viewType: state.viewType, selectedId: state.selectedId })),\r\n);\r\n\r\nexport function reducer(state: CellsStatusState | undefined, action: Action) {\r\n    return cellsStatusReducer(state, action);\r\n}\r\n","import { createAction } from '@ngrx/store';\r\n\r\nenum CommissioningActionTypes {\r\n    startCommissioning = '[EFFECT] commissioning in progress',\r\n    stopCommissioning = '[EFFECT] commissioning finished'\r\n}\r\n\r\nexport const startCommissioning = createAction(CommissioningActionTypes.startCommissioning);\r\nexport const stopCommissioning = createAction(CommissioningActionTypes.stopCommissioning);\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport {\r\n    startCommissioning,\r\n    stopCommissioning\r\n} from '../actions/commissioning-flag.actions';\r\n\r\nexport const commissioningFlagFeatureKey = 'commissioningFlag';\r\n\r\nexport interface FlagState {\r\n    isCommissioningInProgress: boolean\r\n}\r\n\r\nexport const initialState: FlagState = {\r\n    isCommissioningInProgress: false\r\n};\r\n\r\nconst onStartCommissioning = on(startCommissioning, (state: FlagState) => ({ ...state, isCommissioningInProgress: true }));\r\nconst onStopCommissioning = on(stopCommissioning, (state: FlagState) => ({ ...state, isCommissioningInProgress: false }));\r\n\r\nconst commissioningFlagReducer = createReducer(initialState, onStartCommissioning, onStopCommissioning);\r\n\r\nexport function reducer(state: FlagState, action: Action) {\r\n    return commissioningFlagReducer(state, action);\r\n}\r\n\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport {\r\n    commissioningFlagFeatureKey,\r\n    FlagState\r\n} from '../reducers/commissioning-flag.reducer';\r\n\r\nexport const selectCommissioningFlagStatusState = createFeatureSelector<FlagState>(commissioningFlagFeatureKey);\r\n\r\nexport const selectCommissioningFlagStatus = createSelector(\r\n    selectCommissioningFlagStatusState, (state: FlagState) => state.isCommissioningInProgress\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { MenuItemMap } from '@oam/core/lib/models/menuu-item-map.type';\r\n\r\nexport class ErrorsTabConfig {\r\n    routes: MenuItemMap;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ErrorsTabConfigService {\r\n    private readonly routes: MenuItemMap;\r\n\r\n    constructor(config: ErrorsTabConfig) {\r\n        this.routes = config.routes;\r\n    }\r\n\r\n    get availableRoutes(): MenuItemMap {\r\n        return this.routes;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { PlanApiEndpointsService, PlanApiUpdateParametersEndpointsService, GetRelationErrorService } from './core/services';\r\n\r\n@NgModule({\r\n    providers: [\r\n        PlanApiEndpointsService,\r\n        GetRelationErrorService,\r\n        PlanApiUpdateParametersEndpointsService\r\n    ]\r\n})\r\nexport class ConfigurationSharedServicesModule {\r\n\r\n}\r\n","import {  createAction, props } from '@ngrx/store';\r\nimport { PlansInfo } from '../model';\r\n\r\nexport enum PlansInfoActionTypes {\r\n    UpdateStagedPlans = '[PlansInfo] Update staged plans',\r\n    StagedPlansFetchSuccess = '[PlansInfo] Staged plans fetched',\r\n    StagedPlansFetchError = '[PlansInfo] Staged plans fetching failed',\r\n    UpdateDeltaPlans = '[PlansInfo] Update delta plans',\r\n    DeltaPlansFetchSuccess = '[PlansInfo] Delta plans fetched',\r\n    DeltaPlansFetchError = '[PlansInfo] Delta plans fetching failed',\r\n    UpdateInactivePlans = '[PlansInfo] Update inactive plans',\r\n    InactivePlansFetchSuccess = '[PlansInfo] Inactive plans fetched',\r\n    InactivePlansFetchError = '[PlansInfo] Inactive plans fetching failed',\r\n    UpdateActivePlans = '[PlansInfo] Update active plans',\r\n    ActivePlansFetchSuccess = '[PlansInfo] Active plans fetched',\r\n    ActivePlansFetchError = '[PlansInfo] Active plans fetching failed',\r\n    AllPlansInfoRequested = '[PlansInfo] All plans info requested',\r\n    SubscribePlansInfoError = '[PlansInfo] Subscribe plans info error',\r\n    SubscribePlansInfoChange = '[User] [PlansInfo] Subscribe plans info change',\r\n    UnsubscribePlansInfoChange = '[User] [PlansInfo] Unsubscribe plans info change',\r\n}\r\n\r\nexport const stagedPlansFetchError = createAction(\r\n    PlansInfoActionTypes.StagedPlansFetchError\r\n);\r\n\r\nexport const deltaPlansFetchError = createAction(\r\n    PlansInfoActionTypes.DeltaPlansFetchError\r\n);\r\n\r\nexport const inactivePlansFetchError = createAction(\r\n    PlansInfoActionTypes.InactivePlansFetchError\r\n);\r\n\r\nexport const activePlansFetchError = createAction(\r\n    PlansInfoActionTypes.ActivePlansFetchError\r\n);\r\n\r\nexport const stagedPlansFetchSuccess = createAction(\r\n    PlansInfoActionTypes.StagedPlansFetchSuccess,\r\n    props<{ plans: PlansInfo[] }>()\r\n);\r\n\r\nexport const deltaPlansFetchSuccess = createAction(\r\n    PlansInfoActionTypes.DeltaPlansFetchSuccess,\r\n    props<{ plans: PlansInfo[] }>()\r\n);\r\n\r\nexport const inactivePlansFetchSuccess = createAction(\r\n    PlansInfoActionTypes.InactivePlansFetchSuccess,\r\n    props<{ plans: PlansInfo[] }>()\r\n);\r\n\r\nexport const activePlansFetchSuccess = createAction(\r\n    PlansInfoActionTypes.ActivePlansFetchSuccess,\r\n    props<{ plans: PlansInfo[] }>()\r\n);\r\n\r\nexport const updateStagedPlans = createAction(\r\n    PlansInfoActionTypes.UpdateStagedPlans,\r\n    props<{ plans: PlansInfo[] }>()\r\n);\r\n\r\nexport const updateDeltaPlans = createAction(\r\n    PlansInfoActionTypes.UpdateDeltaPlans,\r\n    props<{ plans: PlansInfo[] }>()\r\n);\r\n\r\nexport const updateInactivePlans = createAction(\r\n    PlansInfoActionTypes.UpdateInactivePlans,\r\n    props<{ plans: PlansInfo[] }>()\r\n);\r\n\r\nexport const updateActivePlans = createAction(\r\n    PlansInfoActionTypes.UpdateActivePlans,\r\n    props<{ plans: PlansInfo[] }>()\r\n);\r\n\r\nexport const loadAllPlansInfoFromServer = createAction(\r\n    PlansInfoActionTypes.AllPlansInfoRequested\r\n);\r\n\r\nexport const subscribeOnPlansInfoChanges = createAction(\r\n    PlansInfoActionTypes.SubscribePlansInfoChange\r\n);\r\n\r\nexport const unsubscribeFromPlansInfoChanges = createAction(\r\n    PlansInfoActionTypes.UnsubscribePlansInfoChange\r\n);\r\n\r\nexport const subscribePlansInfoError = createAction(\r\n    PlansInfoActionTypes.SubscribePlansInfoError,\r\n    props<{error: any}>()\r\n);\r\n\r\n","export const EMPTY_SIMPLE_LIST_ELEMENT_VALUE = '';\r\nexport const NO_CHILD_DEFINED = 'NO_CHILD_DEFINED';\r\nexport const DEFAULT_CHANGE_TO_PLAN_CONFIGURATION_MESSAGE = 'In order to perform actions on selected plan, change it to planned configuration';\r\nexport const FORBIDDEN_CHANGE_TO_PLAN_CONFIGURATION_MESSAGE = `In order to perform your changes, please delete current delta plan\r\nand create a new delta plan by button \"Delete plan \" and \"Create Delta Plan`;\r\nexport const MAXIMUM_NUMBER_OF_PLANS_ALREADY_CREATED = 'Maximum number of plans already created';\r\n","export enum NIDD_DEFINITION {\r\n    VALUES = 'VALUES',\r\n    VALIDATION_PASSED = 'VALIDATION_PASSED',\r\n    SHOULD_BE_BOOLEAN = 'SHOULD_BE_BOOLEAN',\r\n    INCORRECT_ENUM = 'INCORRECT_ENUM',\r\n    INCORRECT_STEP = 'INCORRECT_STEP',\r\n    MISSING_NIDD_DEFINITION = 'MISSING_NIDD_DEFINITION',\r\n    INVALID_DISTNAME_FORMAT = 'INVALID_DISTNAME_FORMAT',\r\n    MISSING_NIDD_DEFINITION_CLASS = 'MISSING_NIDD_DEFINITION_CLASS',\r\n    VALUE_IS_OUT_OF_RANGE = 'VALUE_IS_OUT_OF_RANGE',\r\n    VALUE_IS_TOO_SHORT = 'VALUE_IS_TOO_SHORT',\r\n    VALUE_IS_TO_TOO_LONG = 'VALUE_IS_TO_TOO_LONG',\r\n    PARAMETER_IS_REQUIRED = 'PARAMETER_IS_REQUIRED',\r\n    MISSING_REQUIRED_VALUE_IN_LIST = 'MISSING_REQUIRED_VALUE_IN_LIST',\r\n    NOT_ENOUGH_OBJECTS = 'NOT_ENOUGH_OBJECTS',\r\n    LIST_IS_EMPTY = 'LIST_IS_EMPTY',\r\n    IS_OUT_OF_RANGE = 'IS_OUT_OF_RANGE',\r\n    IS_NOT_ARRAY = 'IS_NOT_ARRAY',\r\n    INCORRECT_PATTERN = 'INCORRECT_PATTERN',\r\n    INCORRECT_REGEX = 'INCORRECT_REGEX',\r\n    DUPLICATED_DISTNAME = 'DUPLICATED_DISTNAME',\r\n    MANAGED_OBJECT_WITH_DIST_NAME = 'MANAGED_OBJECT_WITH_DIST_NAME',\r\n    MANAGED_OBJECT_WITH_CLASS_NAME = 'MANAGED_OBJECT_WITH_CLASS_NAME',\r\n    SHOULD_BE_PARENT = 'SHOULD_BE_PARENT',\r\n    NOT_EXIST = 'NOT_EXIST',\r\n    CLASS_NAME = 'CLASS_NAME',\r\n    DIST_NAME = 'DIST_NAME',\r\n    ERROR = 'ERROR',\r\n    PARAMETER = 'PARAMETER',\r\n    NOT_MATCH_NIDD_CLASS = 'NOT_MATCH_NIDD_CLASS',\r\n    MANAGED_OBJECTS_REMOVED = 'MANAGED_OBJECTS_REMOVED',\r\n    MANAGED_OBJECT_MAX_OCCURRS_EXCEEDED_BY = 'MANAGED_OBJECT_MAX_OCCURRS_EXCEEDED_BY',\r\n    MANAGED_OBJECT_IS_NOT_ROOT = 'MANAGED_OBJECT_IS_NOT_ROOT',\r\n    CAN_NOT_BE_CHILD = 'CAN_NOT_BE_CHILD',\r\n    DEFINED_IN_NIDD_AS_LIST = 'DEFINED_IN_NIDD_AS_LIST',\r\n    DEFINED_IN_NIDD_AS_SIMPLE_PARAMETER = 'DEFINED_IN_NIDD_AS_SIMPLE_PARAMETER',\r\n    SHOULD_BE_SIMPLE_LIST = 'SHOULD_BE_SIMPLE_LIST',\r\n    SHOULD_BE_COMPLEX_LIST = 'SHOULD_BE_COMPLEX_LIST',\r\n    INVALID_BITMASK = 'INVALID_BITMASK',\r\n    SHOULD_BE_NUMBER = 'SHOULD_BE_NUMBER',\r\n    DEGREES_NOT_WITHIN_THE_RANGE = 'DEGREES_NOT_WITHIN_THE_RANGE',\r\n    MINUTES_NOT_WITHIN_THE_RANGE = 'MINUTES_NOT_WITHIN_THE_RANGE',\r\n    SECONDS_NOT_WITHIN_THE_RANGE = 'SECONDS_NOT_WITHIN_THE_RANGE',\r\n    WRONG_ADAPTATION_ID = 'WRONG_ADAPTATION_ID',\r\n    CAN_BE_ONLY_SET_BY_SYSTEM = 'CAN_BE_ONLY_SET_BY_SYSTEM',\r\n    SCF_IS_EMPTY = 'SCF_IS_EMPTY',\r\n    IMPOSSIBLE_TO_MERGE_ROOT = 'IMPOSSIBLE_TO_MERGE_ROOT',\r\n    NO_PARENT = 'NO_PARENT',\r\n    OBJECT_ALREADY_EXISTS = 'OBJECT_ALREADY_EXISTS',\r\n    PARAMETER_ALREADY_EXISTS = 'PARAMETER_ALREADY_EXISTS',\r\n    OBJECT_RESTRICTED_WEBEM_INTERFACE = 'OBJECT_xRESTRICTED_WEBEM_INTERFACE',\r\n    PARAMETER_RESTRICTED_WEBEM_INTERFACE = 'PARAMETER_RESTRICTED_WEBEM_INTERFACE',\r\n    PARAMETER_IS_INSTANCE_ID = 'PARAMETER_IS_INSTANCE_ID',\r\n    DUPLICATE_INSTANCE_ID = 'DUPLICATE_INSTANCE_ID',\r\n    INCONSISTENT_VALUE = 'INCONSISTENT_VALUE',\r\n    STRING_PARAMETER_CANNOT_BE_EMPTY = 'STRING_PARAMETER_CANNOT_BE_EMPTY',\r\n    NUMBER_PARAMETER_CANNOT_BE_EMPTY = 'NUMBER_PARAMETER_CANNOT_BE_EMPTY',\r\n    MANDATORY_PARAMETER_SHOULD_HAVE_AT_LEAST_ONE_CHILD_SET = 'MANDATORY_PARAMETER_SHOULD_HAVE_AT_LEAST_ONE_CHILD_SET',\r\n    PARAMETER_FOR_FUTURE_FEATURE = 'PARAMETER_FOR_FUTURE_FEATURE',\r\n    PARAMETER_DEFINITION_ERROR_DESCRIPTION = 'PARAMETER_DEFINITION_ERROR_DESCRIPTION'\r\n}\r\n","export enum ValidationMessages {\r\n    VALUE_IS_OUT_OF_RANGE = 'Given value is out of range. Supported range is ',\r\n    PARAMETER_IS_REQUIRED = 'Missing mandatory parameter value',\r\n    INCORRECT_STEP = 'Given value has wrong step. Supported step is',\r\n    INCORRECT_ENUM = 'Given value is not supported',\r\n    VALUE_IS_TO_TOO_LONG = 'Given value is too long. The maximum length of the value is',\r\n    VALUE_IS_TOO_SHORT = 'Given value is too short. The minimum length of the value is',\r\n    INCORRECT_PATTERN = 'Given value does not follow the validation pattern',\r\n    INCORRECT_REGEX = 'Given value does not follow the validation regex',\r\n    SHOULD_BE_NUMBER = 'Given value is not a number'\r\n}\r\n","import { NIDD_DEFINITION } from '@oam/configuration-shared/lib/core/model/definition-error-enum';\r\nimport { ValidationMessages } from '@oam/configuration-shared/lib/core/model/definition-validation-messages.enum';\r\n\r\n\r\nexport class DefinitionsError {\r\n    constructor(private readonly errorType?: string | null, private readonly additionalValue?: string | null) {\r\n    }\r\n\r\n    getErrorType(): string | null | undefined {\r\n        return this.errorType;\r\n    }\r\n\r\n    getError(): string {\r\n        switch (this.errorType) {\r\n            case NIDD_DEFINITION.VALUE_IS_OUT_OF_RANGE:\r\n                return `${ValidationMessages.VALUE_IS_OUT_OF_RANGE}${this.additionalValue}`;\r\n            case NIDD_DEFINITION.PARAMETER_IS_REQUIRED:\r\n                return ValidationMessages.PARAMETER_IS_REQUIRED;\r\n            case NIDD_DEFINITION.INCORRECT_STEP:\r\n                return `${ValidationMessages.INCORRECT_STEP}${this.additionalValue}`;\r\n            case NIDD_DEFINITION.INCORRECT_ENUM:\r\n                return ValidationMessages.INCORRECT_ENUM;\r\n            case NIDD_DEFINITION.VALUE_IS_TO_TOO_LONG:\r\n                return `${ValidationMessages.VALUE_IS_TO_TOO_LONG}${this.additionalValue}`;\r\n            case NIDD_DEFINITION.VALUE_IS_TOO_SHORT:\r\n                return `${ValidationMessages.VALUE_IS_TOO_SHORT}${this.additionalValue}`;\r\n            case NIDD_DEFINITION.INCORRECT_PATTERN:\r\n                return ValidationMessages.INCORRECT_PATTERN;\r\n            case NIDD_DEFINITION.INCORRECT_REGEX:\r\n                return ValidationMessages.INCORRECT_REGEX;\r\n            case NIDD_DEFINITION.SHOULD_BE_NUMBER:\r\n                return ValidationMessages.SHOULD_BE_NUMBER;\r\n            case NIDD_DEFINITION.PARAMETER_DEFINITION_ERROR_DESCRIPTION:\r\n                return `${this.additionalValue}`;\r\n            default:\r\n                return  '';\r\n        }\r\n    }\r\n\r\n    getErrorAdditional(): string | null | undefined {\r\n        return this.additionalValue;\r\n    }\r\n}\r\n\r\n","export enum DeltaPlanConflictState {\r\n    NoConflict = 'noConflict',\r\n    Conflict = 'conflict'\r\n}\r\n","export class NotSupportedPlanCreationOption extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        Object.setPrototypeOf(this, NotSupportedPlanCreationOption.prototype);\r\n    }\r\n}\r\n","import { PlanOrigin } from './plan-origin';\r\n\r\nexport class NotSupportedPlanOriginError {\r\n    constructor(private readonly planOrigin: PlanOrigin) {}\r\n\r\n    getMessage(): string {\r\n        return `Not supported plan origin: ${this.planOrigin}`;\r\n    }\r\n}\r\n","export const LOADED_PLANS_LIMITS = {\r\n    STAGED: 3,\r\n    DELTA: 1\r\n};\r\n","enum RowTypes {\r\n    SIMPLE = 'simple',\r\n    COMPLEX = 'complex',\r\n    ENUMERATION_LIST = 'enumerationList',\r\n    SIMPLE_LIST = 'simpleList',\r\n    SIMPLE_LIST_ELEMENT = 'simpleListElement',\r\n    STRUCTURE = 'structure'\r\n}\r\n\r\nexport { RowTypes };\r\n","export enum PlanActivationStatus {\r\n    Pending,\r\n    Ongoing,\r\n    Failed,\r\n    Interrupted,\r\n    Success\r\n}\r\n","export const PlanActivationStages = {\r\n    planDownload: 1,\r\n    planValidate: 2,\r\n    planActivate: 3\r\n};\r\n","import {\r\n    ButtonModel,\r\n    ButtonTheme,\r\n    ButtonThickness\r\n} from '@oam/cu-ui';\r\n\r\nexport const LoadingButton = {\r\n    title: '',\r\n    icon: 'mdi mdi-loading mdi-spin',\r\n    theme: ButtonTheme.Default,\r\n    thickness: ButtonThickness.Thin\r\n} as ButtonModel;\r\n\r\nexport const SetDefaultButton = {\r\n    title: 'Set default value',\r\n    icon: 'mdi mdi-cog-counterclockwise',\r\n    theme: ButtonTheme.Default,\r\n    thickness: ButtonThickness.Thin\r\n} as ButtonModel;\r\n\r\nexport const SetDefaultLoadingButton = {\r\n    ...LoadingButton,\r\n    title: 'Set default value ongoing',\r\n} as ButtonModel;\r\n\r\nexport const SetDefaultForParameterWithoutDefaultValueButton = {\r\n    ...SetDefaultButton,\r\n    title: 'Set default value not applicable for parameter without default value defined',\r\n} as ButtonModel;\r\n\r\nexport const SetDefaultAlreadyAppliedButton = {\r\n    ...SetDefaultButton,\r\n    title: 'Default value already applied',\r\n} as ButtonModel;\r\n\r\nexport const RevertButton = {\r\n    title: 'Revert parameter',\r\n    icon: 'mdi mdi-replay',\r\n    theme: ButtonTheme.Default,\r\n    thickness: ButtonThickness.Thin\r\n} as ButtonModel;\r\n\r\nexport const RevertLoadingButton = {\r\n    ...LoadingButton,\r\n    title: 'Revert parameter ongoing',\r\n} as ButtonModel;\r\n\r\nexport const RevertNewButton = {\r\n    ...RevertButton,\r\n    title: 'Revert parameter option not available for parameter in newly created object',\r\n} as ButtonModel;\r\n\r\nexport const RevertUnchangedButton = {\r\n    ...RevertButton,\r\n    title: 'Revert parameter option not available for unmodified parameter',\r\n} as ButtonModel;\r\n\r\nexport const DeleteButton = {\r\n    title: 'Remove parameter',\r\n    icon: 'mdi mdi-delete-forever',\r\n    theme: ButtonTheme.Default,\r\n    thickness: ButtonThickness.Thin\r\n} as ButtonModel;\r\n\r\nexport const DeleteLoadingButton = {\r\n    ...LoadingButton,\r\n    title: 'Remove parameter ongoing',\r\n} as ButtonModel;\r\n\r\nexport const DeleteMandatoryParameterButton = {\r\n    ...DeleteButton,\r\n    title: 'Remove parameter option not applicable for mandatory parameter',\r\n} as ButtonModel;\r\n\r\nexport const AddButton = {\r\n    icon: 'mdi mdi-plus',\r\n    theme: ButtonTheme.Default,\r\n    thickness: ButtonThickness.Thin\r\n} as ButtonModel;\r\n\r\nexport const AddStructureElementButton = {\r\n    ...AddButton,\r\n    title: 'Add structure'\r\n} as ButtonModel;\r\n\r\nexport const AddEmptyStructureLimitButton = {\r\n    ...AddButton,\r\n    title: 'Empty structure already created'\r\n} as ButtonModel;\r\n\r\nexport const AddSimpleListElementButton = {\r\n    ...AddButton,\r\n    title: 'Add simple list element'\r\n} as ButtonModel;\r\n\r\nexport const AddMaxElementsInStructureButton = {\r\n    ...AddButton,\r\n    title: 'Maximum number of structure elements already created',\r\n} as ButtonModel;\r\n\r\nexport const AddEmptyElementsInListButton = {\r\n    ...AddButton,\r\n    title: 'Empty list element already created',\r\n} as ButtonModel;\r\n\r\nexport const AddMaxElementsInListButton = {\r\n    ...AddButton,\r\n    title: 'Maximum number of list elements already created',\r\n} as ButtonModel;\r\n\r\nexport const NotAllowedAddStructureButton = {\r\n    ...AddButton,\r\n    title: 'Add structure option not available in parameter search/parameter errors/parameter relation errors view',\r\n} as ButtonModel;\r\n\r\nexport const NotAllowedAddListElementsButton = {\r\n    ...AddButton,\r\n    title: 'Add list item option not available in parameter search/parameter errors/parameter relation errors view',\r\n} as ButtonModel;\r\n\r\nexport const AddElementLoadingButton = {\r\n    ...LoadingButton,\r\n    title: 'Add structure ongoing',\r\n} as ButtonModel;\r\n\r\nexport const AddObjectButton = {\r\n    title: 'Add object',\r\n    icon: 'mdi mdi-plus',\r\n    theme: ButtonTheme.Default,\r\n    thickness: ButtonThickness.Thin\r\n} as ButtonModel;\r\n\r\nexport const AddObjectLoadingButton = {\r\n    ...LoadingButton,\r\n    title: 'Add object ongoing',\r\n} as ButtonModel;\r\n\r\nexport const RemoveElementButton = {\r\n    title: 'Remove structure',\r\n    icon: 'mdi mdi-minus',\r\n    theme: ButtonTheme.Default,\r\n    thickness: ButtonThickness.Thin\r\n} as ButtonModel;\r\n\r\nexport const RemoveElementLoadingButton = {\r\n    ...LoadingButton,\r\n    title: 'Remove structure ongoing',\r\n} as ButtonModel;\r\n\r\nexport const NotAllowedRemoveStructureButton = {\r\n    ...RemoveElementButton,\r\n    title: 'Remove structure option not available in parameter search/parameter errors/parameter relation errors view',\r\n} as ButtonModel;\r\n\r\nexport const NotAllowedRemoveListItemButton = {\r\n    ...RemoveElementButton,\r\n    title: 'Remove list option not available in parameter search/parameter errors/parameter relation errors view',\r\n} as ButtonModel;\r\n\r\nexport const  GoToButton = {\r\n    title: 'Go to parameter editor',\r\n    icon: 'mdi mdi-login-variant',\r\n    theme: ButtonTheme.Default,\r\n    thickness: ButtonThickness.Thin\r\n} as ButtonModel;\r\n\r\nexport const ChangeToPlannedConfigurationButton = {\r\n    label: 'Change to Planned Configuration',\r\n    title: '',\r\n    theme: ButtonTheme.Accent,\r\n} as ButtonModel;\r\n\r\nexport const ChangeToPlannedConfigurationLoadingButton = {\r\n    ...LoadingButton,\r\n    theme: ButtonTheme.Accent,\r\n    title: '',\r\n    thickness: ButtonThickness.Default\r\n} as ButtonModel;\r\n\r\nexport const CopyAllValidParametersLoadingButton = {\r\n    ...LoadingButton,\r\n    theme: ButtonTheme.Accent,\r\n    thickness: ButtonThickness.Default\r\n} as ButtonModel;\r\n\r\nexport const OkButton = {\r\n    label: 'OK',\r\n    theme: ButtonTheme.Accent\r\n} as ButtonModel;\r\n\r\nexport const  CancelButton = {\r\n    label: 'Cancel'\r\n} as ButtonModel;\r\n","\r\nexport enum RowState {\r\n    Unchanged = 'unchanged',\r\n    Deleted = 'deleted',\r\n    Changed = 'changed',\r\n    NotExisting = 'notExisting'\r\n}\r\n","export const InstanceIdValidationMessages = {\r\n    required: 'There is no provided ID',\r\n    min: 'The provided ID is too small',\r\n    max: 'The provided ID is too big',\r\n    pattern: 'The provided ID has incorrect format',\r\n    excludedWords: 'The provided ID is taken already'\r\n};\r\n","export enum PlanCreationOption {\r\n    EMPTY = 'empty',\r\n    COPY_STAGED = 'copyFromStage',\r\n    COPY_DELTA = 'copyFromDelta',\r\n    COPY_ACTIVE= 'copyFromActive',\r\n    EDIT = 'edit'\r\n}\r\n","enum PlanOrigin {\r\n    ACTIVE = 'active',\r\n    INACTIVE = 'inactive',\r\n    DELTA = 'delta',\r\n    STAGE = 'stage'\r\n}\r\n\r\nexport { PlanOrigin };\r\n","import { DeltaPlanInfoResponse, PlanInfoResponse } from '@oam/cu-asm-api/models';\r\nimport { PlanOrigin } from './index';\r\nexport interface PlansInfo extends PlanInfoResponse {\r\n  from: PlanOrigin\r\n}\r\n\r\nexport interface DeltaPlansInfo extends DeltaPlanInfoResponse {\r\n  from: PlanOrigin\r\n}\r\n\r\nexport type AllPlansInfo = PlansInfo | DeltaPlansInfo;\r\n\r\nexport function isDeltaPlan(plan: AllPlansInfo): plan is DeltaPlansInfo {\r\n    return  plan.from === PlanOrigin.DELTA;\r\n}\r\n","export enum SortOrder {\r\n    Ascending = 'asc',\r\n    Descending = 'desc'\r\n}\r\n","export enum ValidatePlanSortBy {\r\n    ClassName = 'className',\r\n    ParameterFullName = 'parameterFullName',\r\n    ParameterAbbreviation = 'parameterAbbreviation',\r\n    ParentDistName = 'parentDistName'\r\n}\r\n","import { PlansInfo } from '../model';\r\nimport { Action, createReducer, on } from '@ngrx/store';\r\nimport * as PlanInfoActions from '../actions/plans-info.actions';\r\n\r\nexport type PlansInfoState = {\r\n    stagedPlans: PlansInfo[],\r\n    deltaPlans: PlansInfo[],\r\n    inactivePlans: PlansInfo[],\r\n    activePlans: PlansInfo[],\r\n};\r\n\r\nexport const plansInfoInitialState: PlansInfoState = {\r\n    stagedPlans: [],\r\n    deltaPlans: [],\r\n    inactivePlans: [],\r\n    activePlans: [],\r\n};\r\n\r\nconst plansInfoReducer = createReducer(\r\n    plansInfoInitialState,\r\n    on(PlanInfoActions.updateStagedPlans, (state, {plans}) => ({ ...state, stagedPlans: [...plans] })),\r\n    on(PlanInfoActions.updateDeltaPlans, (state, {plans}) => ({ ...state, deltaPlans: [...plans] })),\r\n    on(PlanInfoActions.updateInactivePlans, (state, {plans}) => ({ ...state, inactivePlans: [...plans] })),\r\n    on(PlanInfoActions.updateActivePlans, (state, {plans}) => ({ ...state, activePlans: [...plans] })),\r\n);\r\n\r\nexport function reducer(state: PlansInfoState, action: Action) {\r\n    return plansInfoReducer(state, action);\r\n}\r\n\r\nexport const planBasicInfoFeatureKey = 'plans';\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { PlansInfoState, planBasicInfoFeatureKey } from '../reducers/plans-info.reducer';\r\nimport { PlanOrigin, PlansInfo, LOADED_PLANS_LIMITS } from '../model';\r\nimport { DeltaPlansInfo } from '@oam/configuration-shared/lib/core/model/plans-info';\r\nimport { DeltaPlanConflictState } from '@oam/configuration-shared/lib/core/model/delta-plan-conflict-state';\r\n\r\nexport const selectPlansInfoState = createFeatureSelector<PlansInfoState>(planBasicInfoFeatureKey);\r\n\r\nexport const selectAllPlansInfo = createSelector(\r\n    selectPlansInfoState,\r\n    state => {\r\n        return [\r\n            ... state.activePlans,\r\n            ... state.deltaPlans,\r\n            ... state.inactivePlans,\r\n            ... state.stagedPlans,\r\n        ];\r\n    }\r\n);\r\n\r\nexport const selectPlansInfoByOrigin = (originList: PlanOrigin[]) => createSelector(\r\n    selectAllPlansInfo,\r\n    (plans: PlansInfo[]) => plans ? plans.filter((plan) => originList.includes(plan.from)) : []\r\n);\r\n\r\nexport const selectStagedPlans = createSelector(\r\n    selectAllPlansInfo,\r\n    (plans: PlansInfo[]) => plans.filter((plan) => plan.from === PlanOrigin.STAGE)\r\n);\r\n\r\nexport const selectPlanById = (planId: string) => createSelector(\r\n    selectAllPlansInfo,\r\n    (plans: PlansInfo[]) => {\r\n        return plans.find(plan => plan.planId === planId);\r\n    }\r\n);\r\n\r\n\r\nexport const selectStagedPlansCount = createSelector(\r\n    selectStagedPlans,\r\n    (plans: PlansInfo[]): number => plans.length\r\n);\r\n\r\nexport const selectStagedPlansLimitExceeded = createSelector(\r\n    selectStagedPlans,\r\n    (plans: PlansInfo[]): boolean => plans.length >= LOADED_PLANS_LIMITS.STAGED\r\n);\r\n\r\n\r\nexport const selectDeltaPlans = createSelector(\r\n    selectAllPlansInfo,\r\n    (plans: PlansInfo[]) => plans.filter((plan) => plan.from === PlanOrigin.DELTA)\r\n);\r\n\r\nexport const selectCurrentPlan = createSelector(\r\n    selectAllPlansInfo,\r\n    (plans: PlansInfo[]) => plans.find((plan) => plan.from === PlanOrigin.ACTIVE)\r\n);\r\n\r\nexport const selectedOutdatedDeltaPlans = createSelector(\r\n    selectDeltaPlans,\r\n    (plans: DeltaPlansInfo[]): DeltaPlansInfo[] => plans.filter(plan =>\r\n        plan.deltaState === DeltaPlanConflictState.Conflict)\r\n);\r\n\r\nexport const selectDeltaPlansCount = createSelector(\r\n    selectDeltaPlans,\r\n    (plans: PlansInfo[]): number => plans.length\r\n);\r\n\r\nexport const selectDeltaPlansLimitExceeded = createSelector(\r\n    selectDeltaPlans,\r\n    (plans: PlansInfo[]): boolean => plans.length >= LOADED_PLANS_LIMITS.DELTA\r\n);\r\n\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { selectAllPlansInfo } from '../selectors/plans-info-selector';\r\nimport { SelectedPlanState } from '../reducers/selected-plan.reducer';\r\nimport { PlanOrigin, PlansInfo } from '../model';\r\nimport { AllPlansInfo, isDeltaPlan } from '@oam/configuration-shared/lib/core/model/plans-info';\r\nimport { DeltaPlanConflictState } from '@oam/configuration-shared/lib/core/model/delta-plan-conflict-state';\r\n\r\nexport const selectSelectedPlanState = createFeatureSelector<SelectedPlanState>('selectedPlan');\r\n\r\nexport const selectSelectedPlanId = createSelector(\r\n    selectSelectedPlanState,\r\n    (state: SelectedPlanState) => {\r\n        return state.planId;\r\n    }\r\n);\r\n\r\nexport const selectSelectedPlanOrigin = createSelector(\r\n    selectSelectedPlanState,\r\n    (state: SelectedPlanState) => state.planOrigin\r\n);\r\n\r\nexport const selectSelectedPlanRequestInfo = createSelector(\r\n    selectSelectedPlanId,\r\n    selectSelectedPlanOrigin,\r\n    (planId: string, planOrigin: PlanOrigin) => {\r\n        return { planId, planOrigin };\r\n    }\r\n);\r\n\r\nexport const selectSelectedPlan = createSelector(\r\n    selectSelectedPlanId,\r\n    selectAllPlansInfo,\r\n    (planId, plans) => {\r\n        return plans.find(plan => plan.planId === planId);\r\n    }\r\n);\r\n\r\nexport const selectSelectedDeltaPlanIsOutdated = createSelector(\r\n    selectSelectedPlan,\r\n    (selectedPlan: AllPlansInfo | undefined) => {\r\n        if (selectedPlan && isDeltaPlan(selectedPlan)) {\r\n            return selectedPlan.deltaState === DeltaPlanConflictState.Conflict;\r\n        }\r\n\r\n        return false;\r\n    }\r\n);\r\n\r\nexport const selectIsSelectedPlanActive = createSelector(\r\n    selectSelectedPlan,\r\n    (plan: PlansInfo | undefined) => {\r\n        return plan ? plan.from === PlanOrigin.ACTIVE : false;\r\n    }\r\n);\r\n\r\nexport const selectIsSelectedPlanStaged = createSelector(\r\n    selectSelectedPlan,\r\n    (plan: PlansInfo | undefined) => {\r\n        return plan ? plan.from === PlanOrigin.STAGE : false;\r\n    }\r\n);\r\n","import { PlanUploadOptions } from '@oam/cu-asm-api/models/plan-upload-options';\r\nimport { UploadRequest } from '@oam/cu-cm-api/models/upload-request';\r\nimport { ConfigurationSaveVariant } from '@oam/core/lib/models';\r\n\r\nexport function getAsmUploadRequestBody(saveVariant: ConfigurationSaveVariant): PlanUploadOptions {\r\n    return {\r\n        deltaChangeOnly: saveVariant === ConfigurationSaveVariant.DeltaConfigurationOnly\r\n    };\r\n}\r\n\r\nexport function getCmUploadRequestBody(saveVariant: ConfigurationSaveVariant): UploadRequest {\r\n    return {\r\n        includeRuntimeData: saveVariant === ConfigurationSaveVariant.FullRuntimeConfiguration\r\n    };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { PeService } from '@oam/cu-asm-api/services';\r\nimport { PlanOrigin } from '../model/plan-origin';\r\nimport { CmService } from '@oam/cu-cm-api/services';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport {\r\n    ActionStatePlanInformation,\r\n    ActivationAdditionalData,\r\n    DeleteManagedObjectActionRequestEndpoint,\r\n    DeleteManagedObjectRequestEndpoint,\r\n    GlobalSearchInformation,\r\n    NotSupportedPlanCreationOption,\r\n    NotSupportedPlanOriginError,\r\n    PlanDeletionInformation,\r\n    PlansInfo\r\n} from '../model';\r\nimport {\r\n    FileDownloadGeneratePlanResponse,\r\n    GeneratePlanResponse,\r\n    ManagedObjectCopySources,\r\n    ManagedObjectData,\r\n    Operation,\r\n    SearchParameterResponse, ValidationActionResponse,\r\n    ValidationErrorType\r\n} from '@oam/cu-asm-api/models';\r\nimport { UploadActionResponse } from '@oam/cu-asm-api/models/upload-action-response';\r\nimport { ClientType } from '@oam/cu-cm-api/models/client-type';\r\nimport {\r\n    mapActivationResultsCmResponseToAsm,\r\n    mapCmResponseToAsmUploadActionResponse,\r\n    mapStartActivationCmResponseToAsm\r\n} from '@oam/core/lib/functions/api-mappings';\r\n\r\nimport {\r\n    AddManagedObjectActionRequestEndpoint,\r\n    AddManagedObjectRequestEndpoint\r\n} from '../model/add-managed-object-endpoints';\r\nimport { PlanCreationOption } from '../model/plan-creation-option';\r\nimport { PlanBase } from '@oam/configuration-shared/lib/core/model/plan-request-base';\r\nimport { PaginationObject } from '@oam/configuration-shared/lib/core/model/pagination-object';\r\nimport { SortObject } from '@oam/configuration-shared/lib/core/model/sort-object';\r\nimport {\r\n    FixErrorsActionRequestEndpoint,\r\n    FixErrorsRequestEndpoint\r\n} from '@oam/configuration-shared/lib/core/model/fix-errors-endpoints';\r\nimport { ReceivePlanRequest } from '@oam/configuration-shared/lib/core/model/receive-plan-request';\r\nimport {\r\n    CopyManagedObjectActionRequestEndpoint,\r\n    CopyManagedObjectRequestEndpoint\r\n} from '@oam/configuration-shared/lib/core/model/copy-managed-object-endpoints';\r\nimport { getAsmUploadRequestBody, getCmUploadRequestBody } from '../functions/receive-plan';\r\nimport { ManagedObjectCopySourcesRequest } from '../model/managed-object-copy-sources-request';\r\nimport { OperationResponse } from '@oam/cu-cm-api';\r\n\r\nconst INVALID_PLAN_ORIGIN = 'Invalid PlanOrigin in validate plan operator';\r\ntype PlanTreeUpdateInformation = PlanBase & { revision?: string };\r\n\r\n@Injectable()\r\nexport class PlanApiEndpointsService {\r\n    constructor(private readonly peService: PeService, private readonly cmService: CmService) {\r\n    }\r\n\r\n    getDeleteManagedObjectRequestEndpoint(planOrigin: PlanOrigin): DeleteManagedObjectRequestEndpoint | Observable<never> {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return request => this.peService.deleteManagedObject(request);\r\n            case PlanOrigin.DELTA:\r\n                return request => this.peService.deleteManagedObjectOfDeltaPlan(request);\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(planOrigin));\r\n        }\r\n    }\r\n\r\n    getDeleteManagedObjectActionRequestEndpoint(planOrigin: PlanOrigin, planId: string):\r\n        DeleteManagedObjectActionRequestEndpoint | Observable<never> {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return request => this.peService.getDeleteManagedObjectAction({\r\n                    planId,\r\n                    actionId: request.actionId\r\n                });\r\n            case PlanOrigin.DELTA:\r\n                return request => this.peService.getDeleteManagedObjectOfDeltaPlanAction({\r\n                    planId,\r\n                    actionId: request.actionId\r\n                });\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(planOrigin));\r\n        }\r\n    }\r\n\r\n    getDeleteActionOfDeleteManagedObjectEndpoint(planOrigin: PlanOrigin, planId: string, actionId: string): Observable<void | never> {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService.deleteActionOfDeleteManagedObject({\r\n                    planId, actionId\r\n                });\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.deleteActionOfDeleteManagedObjectOfDeltaPlan({\r\n                    planId, actionId\r\n                });\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(planOrigin));\r\n        }\r\n    }\r\n\r\n    deletePlan({ planId, planOrigin }: PlanDeletionInformation): Observable<void | never> {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService.deleteStagedPlan({ planId });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.deleteDeltaPlan({ planId });\r\n\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(planOrigin));\r\n        }\r\n    }\r\n\r\n    receivePlanFile({ planId, from, saveVariant }: ReceivePlanRequest): () => Observable<UploadActionResponse | OperationResponse> {\r\n        switch (from) {\r\n            case PlanOrigin.STAGE:\r\n                return () => this.peService.generatePlanFileForUploading({ planId, body: getAsmUploadRequestBody(saveVariant) });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return () => this.peService.generateDeltaPlanFileForUploading({ planId, body: getAsmUploadRequestBody(saveVariant) });\r\n\r\n            case PlanOrigin.ACTIVE:\r\n                return () => this.cmService.startUpload({ xOamClientType: ClientType.Em, body: getCmUploadRequestBody(saveVariant) })\r\n                    .pipe(map(mapCmResponseToAsmUploadActionResponse));\r\n        }\r\n\r\n        return () => of<UploadActionResponse>();\r\n    }\r\n\r\n    getReceivePlanFileAction({ planId, from }: PlanBase): (params: any) =>\r\n        Observable<UploadActionResponse | OperationResponse> {\r\n        switch (from) {\r\n            case PlanOrigin.STAGE:\r\n                return ({ actionId }: any) => this.peService.getActionStateOfUploadingPlanFile({ actionId, planId });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return ({ actionId }: any) => this.peService.getActionStateOfUploadingDeltaPlanFile({\r\n                    actionId,\r\n                    planId\r\n                });\r\n\r\n            case PlanOrigin.ACTIVE:\r\n                return ({ actionId }) => this.cmService.getUpload({ operationId: actionId })\r\n                    .pipe(map(mapCmResponseToAsmUploadActionResponse));\r\n        }\r\n\r\n        return () => of<UploadActionResponse>();\r\n    }\r\n\r\n    deleteReceivePlanFileAction({ actionId, planId, from }: ActionStatePlanInformation): Observable<void> {\r\n        switch (from) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService.deleteActionStateOfUploadingPlanFile({ actionId, planId });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.deleteActionStateOfUploadingDeltaPlanFile({ actionId, planId });\r\n\r\n            case PlanOrigin.ACTIVE:\r\n                return this.cmService.deleteUpload({ operationId: actionId });\r\n        }\r\n\r\n        return of<void>();\r\n    }\r\n\r\n    uploadReceivePlanFile({ actionId, fileName, from }:\r\n                              { actionId: string, fileName: string, from: PlanOrigin }): Observable<Blob> {\r\n        switch (from) {\r\n            case PlanOrigin.STAGE:\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.uploadFile({ fileName });\r\n\r\n            case PlanOrigin.ACTIVE:\r\n                return this.cmService.getUploadFile({ operationId: actionId });\r\n        }\r\n\r\n        return of<Blob>();\r\n    }\r\n\r\n    getTreeOfPlan({ planId, from, revision }: PlanTreeUpdateInformation) {\r\n        switch (from) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService.getTreeOfStagedPlan({ planId, oldRevision: revision });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.getTreeOfDeltaPlan({ planId, oldRevision: revision });\r\n\r\n            case PlanOrigin.ACTIVE:\r\n                return this.peService.getTreeOfCurrentPlan({ oldRevision: revision });\r\n        }\r\n\r\n        return throwError(new NotSupportedPlanOriginError(from));\r\n    }\r\n\r\n    isNotSupportedPlanOriginError(error: any): boolean {\r\n        return error instanceof NotSupportedPlanOriginError;\r\n    }\r\n\r\n    getManagedObject({ moUuid, planId, fromOrigin }: any): Observable<ManagedObjectData | void> {\r\n        switch (fromOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService.getManagedObjectOfStagedPlan({ moUuid, planId });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.getManagedObjectOfDeltaPlan({ moUuid, planId });\r\n\r\n            case PlanOrigin.ACTIVE:\r\n                return this.peService.getManagedObjectOfCurrentPlan({ moUuid });\r\n        }\r\n\r\n        return of<void>();\r\n    }\r\n\r\n    sendPlanFile(option: PlanOrigin): (request: any) => Observable<FileDownloadGeneratePlanResponse> {\r\n        if (option === PlanOrigin.STAGE) {\r\n            return (request: any) => this.peService.generatePlanByDownloadScfFile(request);\r\n        }\r\n\r\n        return () => of<FileDownloadGeneratePlanResponse>();\r\n    }\r\n\r\n    getSendPlanFileAction(option: PlanOrigin): (request: any) => Observable<FileDownloadGeneratePlanResponse> {\r\n        if (option === PlanOrigin.STAGE) {\r\n            return (request: any) => this.peService.getActionStateOfGeneratingPlanByScf(request);\r\n        }\r\n\r\n        return () => of<FileDownloadGeneratePlanResponse>();\r\n    }\r\n\r\n    deleteSendPlanFileAction(option: PlanOrigin): (request: any) => Observable<void> {\r\n        if (option === PlanOrigin.STAGE) {\r\n            return (request: any) => this.peService.deleteActionStateOfGeneratingPlanByScf(request);\r\n        }\r\n\r\n        return () => of<void>();\r\n    }\r\n\r\n    searchInPlan({ planId, fromOrigin, pageNumber, itemsPerPage, sortOrder, sortedBy, filterByName }: GlobalSearchInformation): Observable<SearchParameterResponse> {\r\n        if (!!planId && !!fromOrigin) {\r\n            const searchParametersProps = {\r\n                planId,\r\n                fromOrigin,\r\n                pageNumber,\r\n                itemsPerPage,\r\n                sortOrder,\r\n                sortedBy,\r\n                filterByName\r\n            };\r\n            switch (fromOrigin) {\r\n                case PlanOrigin.STAGE:\r\n                    return this.peService.searchParametersOfStagedPlan(searchParametersProps);\r\n\r\n                case PlanOrigin.DELTA:\r\n                    return this.peService.searchParametersOfDeltaPlan(searchParametersProps);\r\n            }\r\n        }\r\n        if (fromOrigin === PlanOrigin.ACTIVE) {\r\n            return this.peService.searchParametersOfCurrentPlan(\r\n                { pageNumber, itemsPerPage, sortOrder, sortedBy, filterByName }\r\n            );\r\n        }\r\n\r\n        return of<SearchParameterResponse>();\r\n    }\r\n\r\n    getCreatePlanRequestEndpoint(option: PlanCreationOption): (request: any) => Observable<GeneratePlanResponse> {\r\n        switch (option) {\r\n            case PlanCreationOption.EMPTY:\r\n                return (request: any) => this.peService.generateNewPlan(request);\r\n            case PlanCreationOption.COPY_ACTIVE:\r\n                return (request: any) => this.peService.generatePlanByCopyCurrentPlan(request);\r\n            case PlanCreationOption.COPY_STAGED:\r\n                return (request: any) => this.peService.generatePlanByCopyStagedPlan(request);\r\n            case PlanCreationOption.COPY_DELTA:\r\n                return (request: any) => this.peService.generatePlanByCopyDeltaPlan(request);\r\n            case PlanCreationOption.EDIT:\r\n                return (request: any) => this.peService.generateDeltaPlan(request);\r\n            default:\r\n                throw new NotSupportedPlanCreationOption(\r\n                    `Not supported plan creation option: ${option} in plan request endpoint`\r\n                );\r\n        }\r\n    }\r\n\r\n    getCreatePlanPollingEndpoint(option: PlanCreationOption): (request: any) => Observable<GeneratePlanResponse> {\r\n        switch (option) {\r\n            case PlanCreationOption.EMPTY:\r\n                return (request: any) => this.peService.getActionStateOfGeneratingNewPlan(request);\r\n            case PlanCreationOption.COPY_ACTIVE:\r\n                return (request: any) => this.peService.getActionStateOfCopyingCurrentPlan(request);\r\n            case PlanCreationOption.COPY_STAGED:\r\n                return (request: any) => this.peService.getActionStateOfCopyingStagedPlan(request);\r\n            case PlanCreationOption.COPY_DELTA:\r\n                return (request: any) => this.peService.getActionStateOfCopyingDeltaPlan(request);\r\n            case PlanCreationOption.EDIT:\r\n                return (request: any) => this.peService.getActionStateOfGeneratingDeltaPlan(request);\r\n            default:\r\n                throw new NotSupportedPlanCreationOption(\r\n                    `Not supported plan creation option: ${option} in plan polling endpoint`\r\n                );\r\n        }\r\n    }\r\n\r\n    getCreatePlanDeleteEndpoint(option: PlanCreationOption): (request: any) => Observable<void> {\r\n        switch (option) {\r\n            case PlanCreationOption.EMPTY:\r\n                return (request: any) => this.peService.deleteActionStateOfGeneratingNewPlan(request);\r\n            case PlanCreationOption.COPY_ACTIVE:\r\n                return (request: any) => this.peService.deleteActionStateOfCopyingCurrentPlan(request);\r\n            case PlanCreationOption.COPY_STAGED:\r\n                return (request: any) => this.peService.deleteActionStateOfCopyingStagedPlan(request);\r\n            case PlanCreationOption.COPY_DELTA:\r\n                return (request: any) => this.peService.deleteActionStateOfCopyingDeltaPlan(request);\r\n            case PlanCreationOption.EDIT:\r\n                return (request: any) => this.peService.deleteActionStateOfGeneratingDeltaPlan(request);\r\n            default:\r\n                throw new NotSupportedPlanCreationOption(\r\n                    `Not supported plan creation option: ${option} in plan delete endpoint`\r\n                );\r\n        }\r\n    }\r\n\r\n    createActivatePlanEndpoint(plan: PlansInfo, autoLockCells: boolean, forceReset: boolean): () => Observable<Operation> {\r\n        switch (plan.from) {\r\n            case PlanOrigin.STAGE:\r\n                return () => this.peService.activateStagedPlan({ planId: plan.planId });\r\n\r\n            case PlanOrigin.INACTIVE:\r\n                return () => this.cmService.startActivation({ planId: plan.planId, xOamClientType: ClientType.Em })\r\n                    .pipe(map(mapStartActivationCmResponseToAsm));\r\n\r\n            case PlanOrigin.DELTA:\r\n                return () => this.peService.activateDeltaPlan({\r\n                    planId: plan.planId,\r\n                    body: { autoLockCells, forceReset }\r\n                });\r\n        }\r\n        throw Error('Invalid PlanOrigin in createActivatePlanEndpoint');\r\n    }\r\n\r\n    createDeployPlanEndpoint({ from, planId }: PlanBase): () => Observable<Operation> {\r\n        switch (from) {\r\n            case PlanOrigin.STAGE:\r\n                return () => this.peService.preActivateOperationForStagedPlan({ planId });\r\n            case PlanOrigin.DELTA:\r\n                return () => this.peService.preActivateOperationForDeltaPlan({ planId });\r\n        }\r\n\r\n        throw Error('Invalid PlanOrigin in createDeployPollingEndpoint');\r\n    }\r\n\r\n    createDeployPollingEndpoint({ from, planId }: PlanBase): (params: any) => Observable<Operation> {\r\n        switch (from) {\r\n            case PlanOrigin.STAGE:\r\n                return ({ actionId }: any) =>\r\n                    this.peService.getPreActivateOperationForStagedPlan({ operationId: actionId, planId });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return ({ actionId }: any) => this.peService.getPreActivateOperationForDeltaPlan({\r\n                    operationId: actionId,\r\n                    planId\r\n                });\r\n        }\r\n\r\n        throw Error('Invalid PlanOrigin in createDeployPollingEndpoint');\r\n    }\r\n\r\n    createActivatePollingEndpoint({ from, planId }: PlanBase):\r\n        (params: any) => Observable<Operation> {\r\n        switch (from) {\r\n            case PlanOrigin.STAGE:\r\n                return ({ actionId }: any) =>\r\n                    this.peService.getOperationStateOfActivatingStagedPlan({ operationId: actionId, planId });\r\n\r\n            case PlanOrigin.INACTIVE:\r\n                return ({ actionId }: any) =>\r\n                    this.cmService.getActivation({ operationId: actionId, planId })\r\n                        .pipe(\r\n                            mergeMap((result) => {\r\n                                return mapActivationResultsCmResponseToAsm(this.cmService, result, planId, actionId);\r\n                            })\r\n                        );\r\n\r\n            case PlanOrigin.DELTA:\r\n                return ({ actionId }: any) =>\r\n                    this.peService.getOperationStateOfActivatingDeltaPlan({ operationId: actionId, planId });\r\n        }\r\n        throw Error('Invalid PlanOrigin in createActivatePollingEndpoint');\r\n    }\r\n\r\n    deleteDeployOperation(response: Operation, additionalData: ActivationAdditionalData) {\r\n        switch (additionalData.fromOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService.deletePreActivateOperationForStagedPlan({\r\n                    planId: additionalData.planId,\r\n                    operationId: response.id\r\n                });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.deletePreActivateOperationForDeltaPlan({\r\n                    planId: additionalData.planId,\r\n                    operationId: response.id\r\n                });\r\n\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(additionalData.fromOrigin));\r\n        }\r\n    }\r\n\r\n    deleteActivationOperation(response: Operation, additionalData: ActivationAdditionalData) {\r\n        const fromOrigin = additionalData.fromOrigin;\r\n        const planId = additionalData.planId;\r\n        const operationId = response.id;\r\n\r\n        switch (fromOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService.deleteOperationStateOfActivatingStagedPlan({ planId, operationId });\r\n\r\n            case PlanOrigin.INACTIVE:\r\n                return this.cmService.deleteActivation({ planId, operationId });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.deleteOperationStateOfActivatingDeltaPlan({ planId, operationId });\r\n\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(fromOrigin));\r\n        }\r\n    }\r\n\r\n    getPossibleManagedObjectsToCopy(request: ManagedObjectCopySourcesRequest): Observable<ManagedObjectCopySources[]> {\r\n        const { targetPlan, sourcePlan, moUuid, childNiddId } = request;\r\n\r\n        switch (targetPlan.from) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService.getPossibleManagedObjectsToCopyForStagedPlan({\r\n                    targetPlanId: targetPlan.planId,\r\n                    sourcePlanId: sourcePlan.planId,\r\n                    moUuid,\r\n                    childNiddId\r\n                });\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.getPossibleManagedObjectsToCopyForDeltaPlans({\r\n                    targetPlanId: targetPlan.planId,\r\n                    sourcePlanId: sourcePlan.planId,\r\n                    moUuid,\r\n                    childNiddId\r\n                });\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(targetPlan.from));\r\n        }\r\n    }\r\n\r\n    getCopyManagedObjectRequestEndpoint(\r\n        planOrigin: PlanOrigin\r\n    ): CopyManagedObjectRequestEndpoint | Observable<never> {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return request => this.peService.copyManagedObjectsIntoStagedPlan(request);\r\n            case PlanOrigin.DELTA:\r\n                return request => this.peService.copyManagedObjectsIntoDeltaPlan(request);\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(planOrigin));\r\n        }\r\n    }\r\n\r\n    getCopyManagedObjectActionRequestEndpoint(\r\n        planOrigin: PlanOrigin,\r\n        planId: string\r\n    ): CopyManagedObjectActionRequestEndpoint | Observable<never> {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return request => this.peService.getCopyManagedObjectsIntoStagedPlanAction({\r\n                    planId,\r\n                    actionId: request.actionId\r\n                });\r\n            case PlanOrigin.DELTA:\r\n                return request => this.peService.getCopyManagedObjectsIntoDeltaPlanAction({\r\n                    planId,\r\n                    actionId: request.actionId\r\n                });\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(planOrigin));\r\n        }\r\n    }\r\n\r\n    deleteCopyManagedObjectAction(\r\n        planOrigin: PlanOrigin,\r\n        planId: string,\r\n        actionId: string\r\n    ): Observable<void | never> {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService.deleteActionOfCopyManagedObjectsIntoStagedPlan({\r\n                    planId, actionId\r\n                });\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.deleteActionOfCopyManagedObjectsIntoDeltaPlan({\r\n                    planId, actionId\r\n                });\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(planOrigin));\r\n        }\r\n    }\r\n\r\n    getAddManagedObjectRequestEndpoint(\r\n        planOrigin: PlanOrigin\r\n    ): AddManagedObjectRequestEndpoint | Observable<never> {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return request => this.peService.createManagedObject(request);\r\n            case PlanOrigin.DELTA:\r\n                return request => this.peService.createManagedObjectOfDeltaPlan(request);\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(planOrigin));\r\n        }\r\n    }\r\n\r\n    getAddManagedObjectActionRequestEndpoint(\r\n        planOrigin: PlanOrigin,\r\n        planId: string\r\n    ): AddManagedObjectActionRequestEndpoint | Observable<never> {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return request => this.peService.getCreateManagedObjectAction({\r\n                    planId,\r\n                    actionId: request.actionId\r\n                });\r\n            case PlanOrigin.DELTA:\r\n                return request => this.peService.getCreateManagedObjectOfDeltaPlanAction({\r\n                    planId,\r\n                    actionId: request.actionId\r\n                });\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(planOrigin));\r\n        }\r\n    }\r\n\r\n    deleteAddManagedObjectAction(\r\n        planOrigin: PlanOrigin,\r\n        planId: string,\r\n        actionId: string\r\n    ): Observable<void | never> {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService.deleteCreateManagedObjectAction({\r\n                    planId, actionId\r\n                });\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.deleteCreateManagedObjectInDeltaPlanAction({\r\n                    planId, actionId\r\n                });\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(planOrigin));\r\n        }\r\n    }\r\n\r\n    createValidationPlanEndPoint(planBase: PlanBase): (params: any) => Observable<ValidationActionResponse> {\r\n        const fromOrigin = planBase.from;\r\n        switch (fromOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return () => this.peService.validateStagedPlan({ planId: planBase.planId });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return () => this.peService.validateDeltaPlan({ planId: planBase.planId });\r\n\r\n        }\r\n\r\n        throw Error(INVALID_PLAN_ORIGIN);\r\n    }\r\n\r\n    createValidationPlanPollingEndPoint(planBase: PlanBase) {\r\n        const fromOrigin = planBase.from;\r\n        switch (fromOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return ({ actionId }: any) => {\r\n                    return this.peService.getValidateStagedPlanAction({ actionId, planId: planBase.planId });\r\n                };\r\n\r\n            case PlanOrigin.DELTA:\r\n                return ({ actionId }: any) => {\r\n                    return this.peService.getValidateDeltaPlanAction({ actionId, planId: planBase.planId });\r\n                };\r\n        }\r\n\r\n        throw Error(INVALID_PLAN_ORIGIN);\r\n    }\r\n\r\n    createDownloadValidationPlanErrorEndPoint(plansInfo: PlanBase | undefined, validationId: string, additionalData: {\r\n        pagination: PaginationObject, sort: SortObject, validationErrorType: ValidationErrorType\r\n    }) {\r\n        const fromOrigin = (plansInfo as PlanBase).from;\r\n\r\n        switch (fromOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService\r\n                    .getValidationResultOfStagedPlan({\r\n                        validationId,\r\n                        planId: (plansInfo as PlanBase).planId,\r\n                        filterByErrorType: [additionalData.validationErrorType],\r\n                        pageNumber: additionalData.pagination.pageNumber,\r\n                        itemsPerPage: additionalData.pagination.itemsPerPage,\r\n                        sortedBy: additionalData.sort.sortBy,\r\n                        sortOrder: additionalData.sort.sortOrder\r\n                    });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return this.peService\r\n                    .getValidationResultOfDeltaPlan({\r\n                        validationId,\r\n                        planId: (plansInfo as PlanBase).planId,\r\n                        filterByErrorType: [additionalData.validationErrorType],\r\n                        pageNumber: additionalData.pagination.pageNumber,\r\n                        itemsPerPage: additionalData.pagination.itemsPerPage,\r\n                        sortedBy: additionalData.sort.sortBy,\r\n                        sortOrder: additionalData.sort.sortOrder\r\n                    });\r\n\r\n        }\r\n\r\n        throw Error(INVALID_PLAN_ORIGIN);\r\n    }\r\n\r\n    createDownloadLatestValidationEndpoint(plansInfo: PlanBase | undefined, additionalData: {\r\n        pagination: PaginationObject, sort: SortObject, validationErrorType: ValidationErrorType\r\n    }) {\r\n        const fromOrigin = (plansInfo as PlanBase).from;\r\n        switch (fromOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService\r\n                    .getLatestValidationResultOfStagedPlan({\r\n                        planId: (plansInfo as PlanBase).planId,\r\n                        filterByErrorType: [additionalData.validationErrorType],\r\n                        pageNumber: additionalData.pagination.pageNumber,\r\n                        itemsPerPage: additionalData.pagination.itemsPerPage,\r\n                        sortedBy: additionalData.sort.sortBy,\r\n                        sortOrder: additionalData.sort.sortOrder\r\n                    });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return this.peService\r\n                    .getLatestValidationResultOfDeltaPlan({\r\n                        planId: (plansInfo as PlanBase).planId,\r\n                        filterByErrorType: [additionalData.validationErrorType],\r\n                        pageNumber: additionalData.pagination.pageNumber,\r\n                        itemsPerPage: additionalData.pagination.itemsPerPage,\r\n                        sortedBy: additionalData.sort.sortBy,\r\n                        sortOrder: additionalData.sort.sortOrder\r\n                    });\r\n\r\n        }\r\n\r\n        throw Error(INVALID_PLAN_ORIGIN);\r\n    }\r\n\r\n    getRelationErrorsDetailsObject(plansInfo: PlansInfo, errorIndex: string) {\r\n        switch (plansInfo.from) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService.getRelationErrorRelevantObjectListOfStagedPlan({\r\n                    errorIndex,\r\n                    planId: plansInfo.planId\r\n                });\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.getRelationErrorRelevantObjectListOfDeltaPlan({\r\n                    errorIndex,\r\n                    planId: plansInfo.planId\r\n                });\r\n            default:\r\n                throw Error('Invalid PlanOrigin in getRelationErrorsDetailsObject');\r\n        }\r\n    }\r\n\r\n    fixErrors(planOrigin: PlanOrigin, planId: string): FixErrorsRequestEndpoint {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return request => this.peService.fixStagedPlan({\r\n                    body: {\r\n                        addMissingObjects: request.body.addMissingObjects,\r\n                        fixMandatoryParameters: request.body.fixMandatoryParameters\r\n                    },\r\n                    planId\r\n                });\r\n            case PlanOrigin.DELTA:\r\n                return request => this.peService.fixDeltaPlan({\r\n                    body: {\r\n                        addMissingObjects: request.body.addMissingObjects,\r\n                        fixMandatoryParameters: request.body.fixMandatoryParameters\r\n                    },\r\n                    planId\r\n                });\r\n            default:\r\n                throw Error('Fixing errors not possible');\r\n        }\r\n    }\r\n\r\n    getFixedErrors(planOrigin: PlanOrigin, planId: string): FixErrorsActionRequestEndpoint {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return request => this.peService.getFixStagedPlanAction({\r\n                    actionId: request.actionId,\r\n                    planId\r\n                });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return request => this.peService.getFixDeltaPlanAction({\r\n                    actionId: request.actionId,\r\n                    planId\r\n                });\r\n            default:\r\n                throw Error('Fixing errors not possible');\r\n        }\r\n    }\r\n\r\n    deleteFixErrorsAction({ actionId, planId, from }: ActionStatePlanInformation): Observable<void> {\r\n        switch (from) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService.deleteActionOfFixStagedPlan({ actionId, planId });\r\n\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.deleteActionOfFixDeltaPlan({ actionId, planId });\r\n        }\r\n\r\n        return of<void>();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { PeService } from '@oam/cu-asm-api/services';\r\nimport { NotSupportedPlanOriginError } from '../../../lib/core/model';\r\nimport {\r\n    UpdateParametersActionRequestEndpoint,\r\n    UpdateParametersRequestEndpoint\r\n} from '@oam/configuration-shared/lib/core/model/update-parameters-endpoints';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport {\r\n    AddStructuresActionRequestEndpoint,\r\n    AddStructuresRequestEndpoint,\r\n    RemoveStructuresActionRequestEndpoint,\r\n    RemoveStructuresRequestEndpoint,\r\n    RevertStructuresActionRequestEndpoint,\r\n    RevertStructuresRequestEndpoint\r\n} from '@oam/configuration-shared/lib/core/model/update-structures-endpoints';\r\nimport { PlanOrigin } from '@oam/configuration-shared/lib/core/model';\r\n\r\n@Injectable()\r\nexport class PlanApiUpdateParametersEndpointsService {\r\n    constructor(private readonly peService: PeService) {\r\n    }\r\n\r\n    getUpdateParametersRequestEndpoint(planOrigin: PlanOrigin): UpdateParametersRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersRequestEndpoint(planOrigin);\r\n    }\r\n\r\n    getUpdateParametersActionRequestEndpoint(planId: string, planOrigin: PlanOrigin): UpdateParametersActionRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersActionRequestEndpoint(planId, planOrigin);\r\n    }\r\n\r\n    deleteUpdateParameterAction(planId: string, actionId: string, planOrigin: PlanOrigin): Observable<void> {\r\n        return this.getDefaultDeleteUpdateParameterAction(planId, actionId, planOrigin);\r\n    }\r\n\r\n    getAddSimpleListElementRequestEndpoint(planOrigin: PlanOrigin): AddStructuresRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersRequestEndpoint(planOrigin);\r\n    }\r\n\r\n    getAddSimpleListElementActionRequestEndpoint(\r\n        planId: string, planOrigin: PlanOrigin): AddStructuresActionRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersActionRequestEndpoint(planId, planOrigin);\r\n    }\r\n\r\n    deleteAddSimpleListElementAction(planId: string, actionId: string, planOrigin: PlanOrigin): Observable<void> {\r\n        return this.getDefaultDeleteUpdateParameterAction(planId, actionId, planOrigin);\r\n    }\r\n\r\n    getRemoveSimpleListElementRequestEndpoint(planOrigin: PlanOrigin): RemoveStructuresRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersRequestEndpoint(planOrigin);\r\n    }\r\n\r\n    getRemoveSimpleListElementActionRequestEndpoint(planId: string, planOrigin: PlanOrigin): RemoveStructuresActionRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersActionRequestEndpoint(planId, planOrigin);\r\n    }\r\n\r\n    getRevertSimpleListElementRequestEndpoint(planOrigin: PlanOrigin): RevertStructuresRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersRequestEndpoint(planOrigin);\r\n    }\r\n\r\n    getRevertSimpleListElementActionRequestEndpoint(planId: string, planOrigin: PlanOrigin): RevertStructuresActionRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersActionRequestEndpoint(planId, planOrigin);\r\n    }\r\n\r\n    deleteRevertSimpleListElementAction(planId: string, actionId: string, planOrigin: PlanOrigin): Observable<void> {\r\n        return this.getDefaultDeleteUpdateParameterAction(planId, actionId, planOrigin);\r\n    }\r\n\r\n    deleteRemoveSimpleListElementAction(planId: string, actionId: string, planOrigin: PlanOrigin): Observable<void> {\r\n        return this.getDefaultDeleteUpdateParameterAction(planId, actionId, planOrigin);\r\n    }\r\n\r\n    getAddStructureRequestEndpoint(planOrigin: PlanOrigin): AddStructuresRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersRequestEndpoint(planOrigin);\r\n    }\r\n\r\n    getAddStructuresActionRequestEndpoint(\r\n        planId: string, planOrigin: PlanOrigin): AddStructuresActionRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersActionRequestEndpoint(planId, planOrigin);\r\n    }\r\n\r\n    deleteAddStructureAction(planId: string, actionId: string, planOrigin: PlanOrigin): Observable<void> {\r\n        return this.getDefaultDeleteUpdateParameterAction(planId, actionId, planOrigin);\r\n    }\r\n\r\n    getRemoveStructureRequestEndpoint(planOrigin: PlanOrigin): RemoveStructuresRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersRequestEndpoint(planOrigin);\r\n    }\r\n\r\n    getRemoveStructureActionRequestEndpoint(planId: string, planOrigin: PlanOrigin): RemoveStructuresActionRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersActionRequestEndpoint(planId, planOrigin);\r\n    }\r\n\r\n    deleteRemoveStructureAction(planId: string, actionId: string, planOrigin: PlanOrigin): Observable<void> {\r\n        return this.getDefaultDeleteUpdateParameterAction(planId, actionId, planOrigin);\r\n    }\r\n\r\n    getRevertStructureRequestEndpoint(planOrigin: PlanOrigin): RemoveStructuresRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersRequestEndpoint(planOrigin);\r\n    }\r\n\r\n    getRevertStructureActionRequestEndpoint(planId: string, planOrigin: PlanOrigin): RemoveStructuresActionRequestEndpoint | Observable<never> {\r\n        return this.getDefaultUpdateParametersActionRequestEndpoint(planId, planOrigin);\r\n    }\r\n\r\n    deleteRevertStructureAction(planId: string, actionId: string, planOrigin: PlanOrigin): Observable<void> {\r\n        return this.getDefaultDeleteUpdateParameterAction(planId, actionId, planOrigin);\r\n    }\r\n\r\n    private getDefaultUpdateParametersRequestEndpoint(planOrigin: PlanOrigin): UpdateParametersRequestEndpoint | Observable<never> {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return request => this.peService.updateParameters(request);\r\n            case PlanOrigin.DELTA:\r\n                return request => this.peService.updateParametersOfDeltaPlan(request);\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(planOrigin));\r\n        }\r\n    }\r\n\r\n    private getDefaultUpdateParametersActionRequestEndpoint(planId: string, planOrigin: PlanOrigin): UpdateParametersActionRequestEndpoint | Observable<never> {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return request => this.peService.getUpdateParametersAction({\r\n                    planId,\r\n                    actionId: request.actionId\r\n                });\r\n            case PlanOrigin.DELTA:\r\n                return request => this.peService.getUpdateParametersOfDeltaPlanAction({\r\n                    planId,\r\n                    actionId: request.actionId\r\n                });\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(planOrigin));\r\n        }\r\n    }\r\n\r\n    private getDefaultDeleteUpdateParameterAction(planId: string, actionId: string, planOrigin: PlanOrigin): Observable<void> {\r\n        switch (planOrigin) {\r\n            case PlanOrigin.STAGE:\r\n                return this.peService.deleteUpdateParametersAction({ planId, actionId });\r\n            case PlanOrigin.DELTA:\r\n                return this.peService.deleteUpdateParametersOfDeltaPlanAction({ planId, actionId });\r\n            default:\r\n                return throwError(new NotSupportedPlanOriginError(planOrigin));\r\n        }\r\n    }\r\n}\r\n","import { ManagedObjectData, ParameterRelationError, ParameterRelationErrorDetail } from '@oam/cu-asm-api';\r\nimport { combineLatest, forkJoin, Subject } from 'rxjs';\r\nimport { selectSelectedPlan } from '@oam/configuration-shared/lib/core/selectors/selected-plan.selectors';\r\nimport { distinctUntilChanged, filter, map, shareReplay, switchMap, takeUntil } from 'rxjs/operators';\r\nimport { flattenDeep, get } from 'lodash';\r\nimport { PlanOrigin, PlansInfo } from '@oam/configuration-shared/lib/core/model';\r\nimport { Injectable } from '@angular/core';\r\nimport { PlanApiEndpointsService } from '@oam/configuration-shared/lib/core/services/plan-api-endpoints.service';\r\nimport { Selector, Store } from '@ngrx/store';\r\n\r\n\r\n@Injectable()\r\nexport class GetRelationErrorService {\r\n    constructor(public readonly store: Store, public readonly planApiEndpointsService: PlanApiEndpointsService) {\r\n\r\n    }\r\n\r\n    public getRelationErrorObservable(managedObjectSelector: Selector<ManagedObjectData, unknown>, destroy: Subject<void>) {\r\n        return combineLatest([\r\n            this.store.select(managedObjectSelector),\r\n            this.store.select(selectSelectedPlan)\r\n        ]).pipe(\r\n            takeUntil(destroy),\r\n            filter(([selectedMo, plan]) => {\r\n                const planOrigin = get(plan, 'from');\r\n\r\n                return !!get(selectedMo, 'relationErrors.length') &&\r\n                    (planOrigin === PlanOrigin.DELTA || planOrigin === PlanOrigin.STAGE);\r\n            }),\r\n            distinctUntilChanged((previous, current) => {\r\n                const [previousMo, previousPlan] = previous as [ManagedObjectData, PlansInfo];\r\n                const [currentMo, currentPlan] = current as [ManagedObjectData, PlansInfo];\r\n\r\n                return previousPlan.planId === currentPlan.planId &&\r\n                    previousPlan.revision === currentPlan.revision &&\r\n                    previousMo.moUuid === currentMo.moUuid &&\r\n                    previousMo.revision === currentMo.revision;\r\n            }),\r\n            switchMap(([selectedMo, planInfo]: [ManagedObjectData, PlansInfo]) =>\r\n                forkJoin((selectedMo.relationErrors as ParameterRelationError[]).map(({ errorIndex }) =>\r\n                    this.planApiEndpointsService.getRelationErrorsDetailsObject(planInfo, errorIndex)))\r\n                    .pipe(\r\n                        filter((relationErrorsList: ParameterRelationErrorDetail[][] | undefined) => !!relationErrorsList),\r\n                        map((relationErrorsList: ParameterRelationErrorDetail[][]) => {\r\n                                return flattenDeep(relationErrorsList)\r\n                                    .filter(relationErrorDetails => relationErrorDetails.parentMoUuid === selectedMo.moUuid);\r\n                            }\r\n                        )\r\n                    )\r\n            ),\r\n            shareReplay()\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { Role, RoleAccessService } from '@oam/role-access-core';\r\nimport { ChildOperationRoles } from '@oam/configuration-shared/lib/models/child-operation-roles';\r\nimport {\r\n    DEFAULT_CHANGE_TO_PLAN_CONFIGURATION_MESSAGE,\r\n    FORBIDDEN_CHANGE_TO_PLAN_CONFIGURATION_MESSAGE,\r\n    NO_CHILD_DEFINED\r\n} from '@oam/configuration-shared/lib/core/constants/configuration-shared.constants';\r\nimport { VnfcSharedService } from '@oam/vnfc-shared/lib/vnfc-store/services/vnfc-shared.service';\r\nimport { find, includes, some } from 'lodash';\r\nimport { RoleAccessForbiddenFlagEnum } from '@oam/core/lib/models/role-access/role-access-forbidden-flag.enmu';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RoleAccessPeService {\r\n\r\n    constructor(private roleAccessService: RoleAccessService, private vnfcSharedService: VnfcSharedService) {\r\n    }\r\n\r\n    public isParameterEditableForCurrentRole(secAdmOnly: boolean | undefined): boolean {\r\n        if (this.vnfcSharedService.isVmcu()) return true;\r\n        if (this.roleAccessService.readOnlyMode || this.roleAccessService.currentRole === Role.READ_ONLY_USER) return false;\r\n        if (this.roleAccessService.currentRole === Role.SYSTEM_USER) return true;\r\n\r\n        return secAdmOnly ? this.roleAccessService.currentRole === Role.SEC_USER : this.roleAccessService.currentRole === Role.APP_USER;\r\n    }\r\n\r\n    public isMoEditableForCurrentRole(operationRoles: string[]) {\r\n        if (this.vnfcSharedService.isVmcu()) return true;\r\n        if (this.roleAccessService.readOnlyMode || this.roleAccessService.currentRole === Role.READ_ONLY_USER) return false;\r\n        if (this.roleAccessService.currentRole === Role.SYSTEM_USER) return true;\r\n\r\n        return includes(operationRoles, this.roleAccessService.currentRole);\r\n    }\r\n\r\n    public isAnyChildMoEditableForCurrentRole(childMoOperationRoles: ChildOperationRoles[]) {\r\n        if (this.vnfcSharedService.isVmcu()) return true;\r\n        if (this.roleAccessService.readOnlyMode || this.roleAccessService.currentRole === Role.READ_ONLY_USER) return false;\r\n        if (this.roleAccessService.currentRole === Role.SYSTEM_USER) return true;\r\n        // we should keep origin button status if one have no child definition in NIDD\r\n        if (this.isNoChildDefined(childMoOperationRoles)) return true;\r\n\r\n        return some(childMoOperationRoles, (mo) => {\r\n            return includes(mo.operationRoles, this.roleAccessService.currentRole);\r\n        });\r\n    }\r\n\r\n    private isNoChildDefined(childMoOperationRoles: ChildOperationRoles[]): boolean {\r\n        return !!find(childMoOperationRoles, (operationRoles) => {\r\n            return operationRoles.moName === NO_CHILD_DEFINED;\r\n        });\r\n    }\r\n\r\n    public isChangeToPlanedConfigurationAllowedForCurrentRole(): boolean {\r\n        return !this.roleAccessService.isForbiddenForCurrentRole(RoleAccessForbiddenFlagEnum.CHANGE_TO_PLANNED_CONFIGURATION);\r\n    }\r\n\r\n    public getChangeToPlanedConfigurationMessageForCurrentRole(): string {\r\n        return this.isChangeToPlanedConfigurationAllowedForCurrentRole()? DEFAULT_CHANGE_TO_PLAN_CONFIGURATION_MESSAGE : FORBIDDEN_CHANGE_TO_PLAN_CONFIGURATION_MESSAGE;\r\n    }\r\n}\r\n","import { Injectable, Inject, NgZone } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AdjustUiDropdownService {\r\n    constructor(@Inject(DOCUMENT) private readonly document: Document,\r\n                private readonly ngZone: NgZone) {}\r\n\r\n    public adjustDropDown() {\r\n        const documentElem = this.document.documentElement;\r\n        if (documentElem.scrollHeight <= documentElem.clientHeight) {\r\n            documentElem.style.overflow = 'hidden';\r\n            this.ngZone.runOutsideAngular(() => {\r\n                setTimeout(() => {\r\n                    documentElem.style.overflow = 'auto';\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { ErrorMessageDetails } from '@oam/core/lib/models/app-settings.model';\r\n\r\nenum AppSettingsActionTypes {\r\n    ImportUiSettings = '[User] [AppSettings] Import UI Settings from file',\r\n    ImportUiSettingsFile = '[AppSettings] Import UI Settings file',\r\n    ImportUiSettingsFileSuccess = '[AppSettings] Import UI Settings file success',\r\n    ImportUiSettingsFileError = '[AppSettings] Import UI Settings file error',\r\n\r\n    ExportUiSettings = '[User] [AppSettings] Export UI Setting',\r\n    ExportUiSettingsFile = '[AppSettings] Export UI Settings file',\r\n    ExportUiSettingsFileSuccess = '[AppSettings] Export UI Settings file success',\r\n    ExportUiSettingsFileError = '[AppSettings] Export UI Settings file error',\r\n\r\n    RestoreDefaultUiSettings = '[User] [AppSettings] Restore Default UI Setting',\r\n    RestoreDefaultUiSettingsSuccess = '[User] [AppSettings] Restore Default UI Setting success',\r\n\r\n    RestoreDefaultUiSettingsError = '[User] [AppSettings] Restore Default UI Setting error',\r\n    RestoreDefaultUiSettingsValues = '[User] [AppSettings] Restore Default UI Setting values',\r\n\r\n    UiRefresh = '[User] [AppSettings] UI Refresh',\r\n    CleanUiSettingsCache = '[User] [AppSettings] Clean UI Settings Cache'\r\n}\r\n\r\nexport const importUiSettings = createAction(AppSettingsActionTypes.ImportUiSettings, props<{ file: File }>());\r\nexport const exportUiSettings = createAction(AppSettingsActionTypes.ExportUiSettings);\r\nexport const restoreDefaultUiSettings = createAction(AppSettingsActionTypes.RestoreDefaultUiSettings);\r\nexport const restoreDefaultUiSettingsSuccess = createAction(AppSettingsActionTypes.RestoreDefaultUiSettingsSuccess);\r\nexport const restoreDefaultUiSettingsError = createAction(AppSettingsActionTypes.RestoreDefaultUiSettingsError);\r\nexport const restoreDefaultUiSettingsValues = createAction(AppSettingsActionTypes.RestoreDefaultUiSettingsValues);\r\nexport const importUiSettingsFile = createAction(\r\n    AppSettingsActionTypes.ImportUiSettingsFile,\r\n    props<{file: File}>());\r\nexport const importUiSettingsFileSuccess = createAction(AppSettingsActionTypes.ImportUiSettingsFileSuccess);\r\nexport const importUiSettingsFileError = createAction(\r\n    AppSettingsActionTypes.ImportUiSettingsFileError,\r\n    props<{errorMessageDetails: ErrorMessageDetails}>());\r\n\r\nexport const exportUiSettingsFile = createAction(AppSettingsActionTypes.ExportUiSettingsFile);\r\nexport const exportUiSettingsFileSuccess = createAction(AppSettingsActionTypes.ExportUiSettingsFileSuccess);\r\nexport const exportUiSettingsFileError = createAction(\r\n    AppSettingsActionTypes.ExportUiSettingsFileError,\r\n    props<{errorMessageDetails: ErrorMessageDetails}>());\r\n\r\nexport const uiRefresh = createAction(AppSettingsActionTypes.UiRefresh);\r\nexport const cleanUiSettingsCache = createAction(AppSettingsActionTypes.CleanUiSettingsCache, props<{ payload: boolean}>());\r\n\r\n","import { Action } from '@ngrx/store';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nexport enum HelpActionTypes {\r\n  GetHelp = '[User] [Help] Get help',\r\n  DownloadHelp = '[Help] Download help',\r\n  DownloadHelpError = '[Help] Download help error',\r\n  DownloadHelpSuccess = '[Help] Download help success',\r\n  HelpSaveError = '[Help] Save help error'\r\n}\r\n\r\nexport class GetHelp implements Action {\r\n    constructor(public payload: { filePath: string, fileName: string }) {}\r\n\r\n    readonly type = HelpActionTypes.GetHelp;\r\n}\r\n\r\nexport class DownloadHelp implements Action {\r\n    constructor(public payload: { filePath: string, fileName: string }) {}\r\n\r\n    readonly type = HelpActionTypes.DownloadHelp;\r\n}\r\n\r\nexport class DownloadHelpError implements Action {\r\n    constructor(public payload: { error: HttpErrorResponse }) {}\r\n\r\n    readonly type = HelpActionTypes.DownloadHelpError;\r\n}\r\n\r\nexport class DownloadHelpSuccess implements Action {\r\n    constructor(public payload: { blob: Blob, fileName: string }) {}\r\n\r\n    readonly type = HelpActionTypes.DownloadHelpSuccess;\r\n}\r\n\r\nexport class HelpSaveError implements Action {\r\n    constructor(public payload: { error: Error }) {}\r\n\r\n    readonly type = HelpActionTypes.HelpSaveError;\r\n}\r\n\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nexport enum RouterActionTypes {\r\n    REDIRECT = '[User] [Router] REDIRECT',\r\n    FORCE_REDIRECT = '[User] [Router] FORCE REDIRECT WITHOUT CHECKING SPLIT VIEW MODE',\r\n    REDIRECT_WITH_DATA = '[User] [Router] REDIRECT WITH DATA'\r\n}\r\n\r\nexport const forceRedirect = createAction(\r\n    RouterActionTypes.FORCE_REDIRECT,\r\n    props<{ routerLink: RouterLink, redirectUrl?: string }>()\r\n);\r\n\r\nexport const redirect = createAction(\r\n    RouterActionTypes.REDIRECT,\r\n    props<{ routerLink: RouterLink | string, activatedRoute: ActivatedRoute, data?: {}, redirectUrl?: string }>()\r\n);\r\n\r\n","import { createAction, props } from '@ngrx/store';\r\n\r\nexport enum StatusFilterActionTypes {\r\n    setVisibleDuById = '[User] [Status Filter] Set DU id filter',\r\n    resetFilters = '[User] [Cell Status Filter] Reset Cell status filters',\r\n}\r\n\r\nexport const setVisibleDuByIdAction =\r\n    createAction(StatusFilterActionTypes.setVisibleDuById, props<{ payload: string }>());\r\n\r\nexport const resetCellsViewFiltersAction =\r\n    createAction(StatusFilterActionTypes.resetFilters);\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { ToastMessage } from './toast-message';\r\nimport { ToastIdTypes } from '../models/toast';\r\nimport { Notification } from '../models/notification.type';\r\n\r\nexport enum ToastMessageActionTypes {\r\n    addNotification = '[Effect] addNotification',\r\n    addNotificationId = '[Effect] addNotificationId',\r\n    addSimpleNotification = '[Effect] addSimpleNotification',\r\n    RemoveNotification = '[Effect] RemoveNotification',\r\n    RemoveAllNotifications = '[Effect] RemoveAllNotifications',\r\n    RemoveNotificationFromStore = '[Effect] RemoveNotificationFromStore',\r\n    addNotificationToHistory= '[Reducer] addNotificationToHistory'\r\n}\r\n\r\nexport const addNotification =\r\n    createAction(ToastMessageActionTypes.addNotification, props<{payload: ToastMessage}>());\r\n\r\nexport const addNotificationId =\r\n    createAction(ToastMessageActionTypes.addNotificationId, props<{payload: {toastType: ToastIdTypes, toastId: number}}>());\r\n\r\nexport const addSimpleNotification =\r\n    createAction(ToastMessageActionTypes.addSimpleNotification, props<{payload: ToastMessage}>());\r\n\r\nexport const removeNotification =\r\n    createAction(ToastMessageActionTypes.RemoveNotification, props<{payload: ToastIdTypes}>());\r\n\r\nexport const removeAllNotifications =\r\n    createAction(ToastMessageActionTypes.RemoveAllNotifications);\r\n\r\nexport const removeNotificationFromStore =\r\n    createAction(ToastMessageActionTypes.RemoveNotificationFromStore, props<{payload: ToastIdTypes}>());\r\n\r\nexport const addNotificationToHistory =\r\n    createAction(ToastMessageActionTypes.addNotificationToHistory, props<{notification: Notification}>());\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { Token, UserInformation } from '@oam/core/lib/store/user-state';\r\nimport { LocalUserPropertie } from '@oam/cu-asm-api';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { LoginResponse, TokenInfo } from '@oam/cu-api-gw-api';\r\n\r\nenum UserActionTypes {\r\n    UPDATE_USER = '[User] Update user',\r\n    REMOVE_USER = '[User] Remove user',\r\n    UPDATE_USER_INFORMATION = '[User] Update user information',\r\n    UPDATE_DOWNGRADED_PRIVILEGES_DIALOG_POPUP_FLAG = '[User] update downgraded privileges dialog popup flag',\r\n    REMOVE_FROM_USER_INFORMATION = '[User] Remove from user information',\r\n    SET_TOKEN = '[User] Set a new token',\r\n    SET_LAST_SESSION_TOKEN = 'Set last session token',\r\n    CLEAR_TOKENS = '[User] Clear tokens',\r\n    REMOVE_TOKEN = '[User] Remove token',\r\n    RENEW_TOKEN = '[Auth]Renew token',\r\n    DISPLAY_PASSWORD_EXPIRATION_WARNING = '[User] Display password expiration warning',\r\n    CLEAR_PASSWORD_EXPIRATION_WARNING = '[User] Clear password expiration warning',\r\n    SET_USERNAME_FOR_PASSWORD_EXPIRED = '[User] Set username for password expiration',\r\n    LOGIN_RELATED_ERROR = '[User] Login related error',\r\n    UPDATE_LOGIN_RESPONSE = '[User] Update Login Response',\r\n    SET_CURRENT_ACCOUNT_ACTIVATE_STATUS = '[Local Account] Set account activate status'\r\n}\r\n\r\nexport const updateUser = createAction(\r\n    UserActionTypes.UPDATE_USER,\r\n    props<{ payload: UserInformation }>()\r\n);\r\n\r\nexport const setToken = createAction(\r\n    UserActionTypes.SET_TOKEN,\r\n    props<{ payload: Token }>()\r\n);\r\n\r\nexport const setLastSessionToken = createAction(\r\n    UserActionTypes.SET_LAST_SESSION_TOKEN,\r\n    props<{ authToken: string | null }>()\r\n);\r\n\r\nexport const updateDowngradedPrivilegesDialogPopupFlag = createAction(\r\n    UserActionTypes.UPDATE_DOWNGRADED_PRIVILEGES_DIALOG_POPUP_FLAG,\r\n    props<{ payload: boolean }>()\r\n);\r\n\r\nexport const updateUserInformation = createAction(\r\n    UserActionTypes.UPDATE_USER_INFORMATION,\r\n    props<{ payload: UserInformation }>()\r\n);\r\n\r\nexport const updateLoginResponse = createAction(\r\n    UserActionTypes.UPDATE_LOGIN_RESPONSE,\r\n    props<{ payload: {response: LoginResponse | TokenInfo, username: string} }>()\r\n);\r\n\r\nexport const removeFromUserInformation = createAction(\r\n    UserActionTypes.REMOVE_FROM_USER_INFORMATION,\r\n    props<{ payload: string }>()\r\n);\r\n\r\nexport const removeUser = createAction(UserActionTypes.REMOVE_USER);\r\nexport const clearTokens = createAction(UserActionTypes.CLEAR_TOKENS);\r\nexport const removeToken = createAction(UserActionTypes.REMOVE_TOKEN, props<{ payload: string }>());\r\nexport const renewSessionToken = createAction(UserActionTypes.RENEW_TOKEN,\r\n    props<{username: string, password: string, shouldStartOperation: boolean}>()\r\n);\r\nexport const displayPasswordExpirationWarning = createAction(UserActionTypes.DISPLAY_PASSWORD_EXPIRATION_WARNING);\r\nexport const clearPasswordExpirationWarning = createAction(UserActionTypes.CLEAR_PASSWORD_EXPIRATION_WARNING);\r\n\r\nexport const handleLoginRelatedError = createAction(UserActionTypes.LOGIN_RELATED_ERROR,\r\n    props<{error: HttpErrorResponse, username: string, password: string, readOnlyChecked?: boolean}>()\r\n);\r\nexport const setUsernameForPasswordExpired = createAction(\r\n    UserActionTypes.SET_USERNAME_FOR_PASSWORD_EXPIRED,\r\n    props<{ payload: string }>()\r\n);\r\nexport const setCurrentAccountActivatedStatus = createAction(\r\n    UserActionTypes.SET_CURRENT_ACCOUNT_ACTIVATE_STATUS,\r\n    props<{ payload: LocalUserPropertie[] }>()\r\n);\r\n\r\n","import { format } from 'date-fns';\r\nimport { DateTimeFormats } from '../models';\r\n\r\n/* eslint-disable webem/no-direct-date-use */\r\nexport class DateTime extends Date {\r\n    constructor(dateTime?: number | string) {\r\n        super(dateTime || new Date());\r\n    }\r\n\r\n    static get currentDate(): string {\r\n        return format(new Date(), DateTimeFormats.Date);\r\n    }\r\n\r\n    static get currentTime(): string {\r\n        return format(new Date(), DateTimeFormats.Time);\r\n    }\r\n\r\n    static get currentDateTime(): string {\r\n        return format(new Date(), DateTimeFormats.DateTime);\r\n    }\r\n\r\n    static fromData(year: number, month: number, date = 0, hours = 0, minutes = 0, seconds = 0, ms = 0): DateTime {\r\n        return new DateTime(new Date(year, month, date, hours, minutes, seconds, ms).toString());\r\n    }\r\n\r\n    static toFormat(date: Date, dateTimeFormat: DateTimeFormats): string {\r\n        return format(date, dateTimeFormat);\r\n    }\r\n\r\n    static convertSecondToHourMinuteSecond(seconds: number): String {\r\n        const h = Math.floor(seconds / 3600);\r\n        const m = Math.floor((seconds / 60 % 60));\r\n        const s = Math.floor((seconds % 60));\r\n\r\n        const hour = h === 0 ? '' : `${h} ${ h > 1 ? 'hours ' : 'hour '}`;\r\n        const min = m === 0 ? '' : `${m} ${ m > 1 ? 'minutes ' : 'minute '}`;\r\n        const sec = s === 0 ? '' : `${s} ${ s > 1 ? 'seconds ' : 'second '}`;\r\n\r\n        return `${hour}${min}${sec}`.trim();\r\n    }\r\n\r\n    toFormattedDate(): string {\r\n        return DateTime.toFormat(this, DateTimeFormats.Date);\r\n    }\r\n\r\n    toFormattedTime(): string {\r\n        return DateTime.toFormat(this, DateTimeFormats.Time);\r\n    }\r\n\r\n    toFormattedDateTime(timezone = false): string {\r\n        return DateTime.toFormat(this, timezone ? DateTimeFormats.DateTime : DateTimeFormats.DateTimeNoTimezone);\r\n    }\r\n\r\n    toFormattedDateTimeWithTSeparator(): string {\r\n        return DateTime.toFormat(this,  DateTimeFormats.DateTimeWithTSeparator);\r\n    }\r\n\r\n    toFormattedFileDateTime(): string {\r\n        return DateTime.toFormat(this, DateTimeFormats.FileDateTime);\r\n    }\r\n\r\n    toFormattedChartDateTime(): string {\r\n        return DateTime.toFormat(this, DateTimeFormats.ChartDateTime);\r\n    }\r\n}\r\n","export enum AppTypes {\r\n    CU = 'CU',\r\n    VDU = 'VDU'\r\n}\r\n","export enum AvailableFeatureFlagsEnum {\r\n    WIP_ALD_STATUS = 'WIP_ALD_STATUS',\r\n    WIP_ALD_SW_UPDATE = 'WIP_ALD_SW_UPDATE',\r\n    WIP_ALD_SW_EDITOR = 'WIP_ALD_SW_EDITOR',\r\n    WIP_CB007433_WEIGHT_FACTOR_TAB = 'WIP_CB007433_WEIGHT_FACTOR_TAB',\r\n    PRODUCT_SPECIFIC_CATEGORY_ALARM = 'PRODUCT_SPECIFIC_CATEGORY_ALARM',\r\n    WIP_CB007962_TOKENINFO = 'WIP_CB007962_TOKENINFO',\r\n    PRODUCT_SNAPSHOT_TRANSFER = 'PRODUCT_SNAPSHOT_TRANSFER',\r\n    WIP_CB007120_TEST_MODEL_DL = 'WIP_CB007120_TEST_MODEL_DL'\r\n}\r\n","import { ModuleWithProviders } from '@angular/core';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { AppTypes } from './app-types.enum';\r\n\r\nexport abstract class Environment {\r\n    production: boolean;\r\n    enablePayloadInLogs: boolean;\r\n    version: string;\r\n    instrumentation: ModuleWithProviders<StoreDevtoolsModule> | [];\r\n    appMetadata: {\r\n        type: AppTypes\r\n    };\r\n}\r\n","import { OperationResponse as CmOperationResponse, OperationResult } from '@oam/cu-cm-api/models';\r\nimport {\r\n    Operation,\r\n    UploadActionResponse as AsmUploadActionResponse\r\n} from '@oam/cu-asm-api/models';\r\nimport { ResponseStatus, SerializedActionResponse } from '@oam/core/lib/services/model';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { CmService } from '@oam/cu-cm-api/services';\r\n\r\nexport function mapActivationResponse(result: Operation): SerializedActionResponse {\r\n    return {\r\n        actionId: result.id,\r\n        status: result.status as ResponseStatus,\r\n        errorMessage: result.errorMessage\r\n    };\r\n}\r\n\r\nexport function mapStartActivationCmResponseToAsm(result: CmOperationResponse): Operation {\r\n    if (!result.isCompleted) {\r\n        return {\r\n            id: result.id,\r\n            status: 'ongoing',\r\n            links: result.links\r\n        } as Operation;\r\n    }\r\n\r\n    return {\r\n        id: result.id,\r\n        status: 'success',\r\n        links: result.links\r\n    } as Operation;\r\n}\r\n\r\nexport function mapActivationResultsCmResponseToAsm(cmService: CmService, result: CmOperationResponse, planId: string, operationId: string): Observable<Operation> {\r\n    if (!result.isCompleted) {\r\n        return of({\r\n            id: result.id,\r\n            status: 'ongoing',\r\n            links: result.links\r\n        } as Operation);\r\n    }\r\n\r\n    return cmService.getActivationResult({ planId, operationId }).pipe(\r\n        map((activationResult: OperationResult) => {\r\n            return {\r\n                id: operationId,\r\n                status: activationResult.status === 'not_ok' ? 'failure' : 'success',\r\n                errorMessage: activationResult.result\r\n            } as Operation;\r\n        }),\r\n        catchError(error => of({id: operationId, status: error.status, errorMessage: error.statusText}))\r\n    );\r\n}\r\n\r\nexport function mapCmResponseToAsmUploadActionResponse(result: CmOperationResponse): AsmUploadActionResponse {\r\n    if (!result.isCompleted) {\r\n        return {\r\n            actionId: result.id,\r\n            status: ResponseStatus.Ongoing,\r\n            links: result.links\r\n        } as AsmUploadActionResponse;\r\n    }\r\n\r\n    return {\r\n        actionId: result.id,\r\n        status: ResponseStatus.Success,\r\n        links: result.links\r\n    } as AsmUploadActionResponse;\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { SchedulerLike } from 'rxjs/internal/types';\r\nimport { NgZone } from '@angular/core';\r\n\r\nclass EnterZoneScheduler implements SchedulerLike {\r\n    constructor(private readonly zone: NgZone, private readonly scheduler: SchedulerLike) {\r\n    }\r\n\r\n    schedule(...args: any[]): Subscription {\r\n        const [work, delay, state] = args;\r\n\r\n        return this.zone.run(() => this.scheduler.schedule(work, delay, state));\r\n    }\r\n\r\n    now(): number {\r\n        return this.scheduler.now();\r\n    }\r\n}\r\n\r\nexport function enterZone(zone: NgZone, scheduler: SchedulerLike): SchedulerLike {\r\n    return new EnterZoneScheduler(zone, scheduler);\r\n}\r\n","import { ConfigurationSaveVariant } from '../models';\r\nimport { DateTime } from '../classes/date-time';\r\nimport { sanitizeWithUnderScore } from '@oam/core/lib/utils/shared-utils';\r\nimport { EMPTY_PLACEHOLDER } from '@oam/shared/lib/modules/webem-common/core/pipes/nullable-value.pipe';\r\n\r\ntype PlanOrigin = 'active' | 'inactive' | 'delta' | 'stage' | 'dashboard';\r\nconst EMPTY_PLACEHOLDER_ASCII = '-';\r\nconst exp = new RegExp(EMPTY_PLACEHOLDER, 'g');\r\n\r\nexport function generatePlanFileName(saveVariant: ConfigurationSaveVariant, planOrigin: PlanOrigin, planName = '', modelState: any) {\r\n    let outputFileName = '';\r\n    const mrbtsId = modelState.mrbtsId;\r\n    const btsName = modelState.btsName;\r\n    const sanitizeBtsName = sanitizeWithUnderScore(btsName);\r\n    const dateTime = new DateTime().toFormattedFileDateTime();\r\n\r\n    switch (planOrigin) {\r\n        case 'dashboard':\r\n            outputFileName = `Configuration_scf_MRBTS-${mrbtsId}_${sanitizeBtsName}_${dateTime}`;\r\n            break;\r\n        case 'stage':\r\n            outputFileName =  `Plan_configuration_scf_MRBTS-${mrbtsId}_${sanitizeBtsName}_${dateTime}`;\r\n            break;\r\n        case 'active':\r\n            outputFileName = saveVariant === ConfigurationSaveVariant.ConfigurationOnly\r\n                ? `Actual_configuration_scf_MRBTS-${mrbtsId}_${sanitizeBtsName}_${dateTime}`\r\n                : `Full_actual_configuration_scf_MRBTS-${mrbtsId}_${sanitizeBtsName}_${dateTime}`;\r\n            break;\r\n        case 'delta':\r\n            outputFileName = `Delta_configuration_scf_MRBTS-${mrbtsId}_${sanitizeBtsName}_${dateTime}`;\r\n            break;\r\n        default:\r\n            outputFileName = `SCF_${planName}_${dateTime}`;\r\n    }\r\n\r\n    // Replacing non-ascii empty placeholder since backend is incompatible with SCF file contains non-ascii character\r\n    return outputFileName.replace(exp, EMPTY_PLACEHOLDER_ASCII);\r\n}\r\n","import { AlarmSeverities } from '@oam/cu-ui/lib/alarm-severity-icon/model/alarm-severities.definition';\r\nimport { RaisedAlarm } from '@oam/cu-ui/lib/raised-alarms/model/raised-alarm';\r\nimport { Alarm } from '@oam/cu-asm-api/models';\r\n\r\nexport function toRaisedAlarm({ alarmId, alarmName, severity, faultId, faultName }: Alarm): RaisedAlarm {\r\n    return {\r\n        alarmId: `${alarmId}`,\r\n        alarmName,\r\n        severity: severity as AlarmSeverities,\r\n        faultId: `${faultId}`,\r\n        faultName\r\n    } as RaisedAlarm;\r\n}\r\n","export enum AlarmSeverities {\r\n    critical = 'critical',\r\n    major = 'major',\r\n    minor = 'minor',\r\n    warning = 'warning',\r\n    indeterminate = 'indeterminate',\r\n}\r\n","import { Alarm } from '@oam/cu-asm-api/models';\r\nimport { AlarmSeverities } from '@oam/cu-ui/lib/alarm-severity-icon/model/alarm-severities.definition';\r\n\r\ntype AggregatedSeverities = {\r\n    [k: string]: string\r\n};\r\n\r\nexport function findHighestSeverity(alarms: Alarm[]): AlarmSeverities | undefined {\r\n    const severities = alarms.reduce((aggregatedSeverities: AggregatedSeverities, alarm: Alarm) => {\r\n        aggregatedSeverities[alarm.severity] = alarm.severity;\r\n\r\n        return aggregatedSeverities;\r\n    }, {} as AggregatedSeverities);\r\n\r\n    return [\r\n        AlarmSeverities.critical,\r\n        AlarmSeverities.major,\r\n        AlarmSeverities.minor,\r\n        AlarmSeverities.warning\r\n    ].find((type: AlarmSeverities) => !!severities[type]) || undefined;\r\n}\r\n","import { ngxCsv } from 'ngx-csv';\r\n\r\nexport function exportToCsv(data: string[][] | Object, filename: string, headers?: string[]): ngxCsv {\r\n    return headers ?\r\n        new ngxCsv(data, filename, { headers }) :\r\n        new ngxCsv(data, filename);\r\n}\r\n","import { StatusInfo } from '../models';\r\nimport { DateTime } from '../classes/date-time';\r\n\r\nexport function getFilenameSuffix(statusInfo: StatusInfo): string {\r\n    return `_MRBTS-${statusInfo.mrbtsId}_${statusInfo.btsName}_${new DateTime().toFormattedFileDateTime()}`;\r\n}\r\n","import { Alarm } from '@oam/cu-asm-api/models/alarm';\r\n\r\nexport function mapAlarms(alarms: Alarm[] | null): string {\r\n    if (!alarms) return '';\r\n\r\n    return alarms.reduce((acc, cur, index) => {\r\n        const row = `[${cur.severity}] #${cur.alarmId} ${cur.alarmName} (#${cur.faultId} ${cur.faultName})`;\r\n\r\n        return index !== alarms.length - 1 ?\r\n            `${acc}${row}\\n` :\r\n            `${acc}${row}`;\r\n    }, '') || '';\r\n}\r\n","import { VDu } from '@oam/cu-asm-api/models';\r\nimport { DateTime } from '../classes/date-time';\r\n\r\nexport function getVduFilenameSuffix(vdu: VDu): string {\r\n    return `_MRBTS-${vdu.id}_${vdu.name}_${new DateTime().toFormattedFileDateTime()}`;\r\n}\r\n","import { ChannelMapping } from '@oam/cu-asm-api/models';\r\n\r\nexport function mapRmodsIds (channels: ChannelMapping[]): string {\r\n    const rmodsIds = channels.map((channel) => channel.rmodRId);\r\n    const uniqueRmods = [...new Set(rmodsIds)];\r\n\r\n    return uniqueRmods.reduce((acc, cur, index) => {\r\n        const row = `[RMOD_R-${cur}]`;\r\n\r\n        return index !== uniqueRmods.length - 1 ?\r\n            `${acc}${row}\\n` :\r\n            `${acc}${row}`;\r\n    }, '') || 'none';\r\n}\r\n","import { IsDefined } from 'class-validator';\r\n\r\nexport class LayoutBase {\r\n    @IsDefined()\r\n    y: number;\r\n    @IsDefined()\r\n    x: number;\r\n    @IsDefined()\r\n    wXl: number;\r\n    @IsDefined()\r\n    hXl: number;\r\n    @IsDefined()\r\n    yXl: number;\r\n    @IsDefined()\r\n    xXl: number;\r\n\r\n    constructor(layout: any) {\r\n        const propertyNames = Object.getOwnPropertyNames(layout);\r\n        propertyNames.forEach((key) => {\r\n            this[key] = layout[key];\r\n        });\r\n    }\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { SchedulerLike } from 'rxjs/internal/types';\r\nimport { NgZone } from '@angular/core';\r\n\r\nclass LeaveZoneScheduler implements SchedulerLike {\r\n    constructor(private readonly zone: NgZone, private readonly scheduler: SchedulerLike) {\r\n    }\r\n\r\n    schedule(...args: any[]): Subscription {\r\n        const [work, delay, state] = args;\r\n\r\n        return this.zone.runOutsideAngular(() => this.scheduler.schedule(work, delay, state));\r\n    }\r\n\r\n    now(): number {\r\n        return this.scheduler.now();\r\n    }\r\n}\r\n\r\nexport function leaveZone(zone: NgZone, scheduler: SchedulerLike): SchedulerLike {\r\n    return new LeaveZoneScheduler(zone, scheduler);\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map, take, filter } from 'rxjs/operators';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { clearTokens, removeUser } from '@oam/core/lib/actions/user.actions';\r\nimport { forceRedirect } from '@oam/core/lib/actions/router.actions';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { VnfcSharedService } from '@oam/vnfc-shared/lib/vnfc-store/services/vnfc-shared.service';\r\nimport { setConnectionStatus } from '@oam/server-connection-checker/lib/core/actions/server-connection.actions';\r\nimport {\r\n    loginFailed,\r\n    sessionUnintentionallyTerminated\r\n} from '@oam/auth/lib/auth/core/actions/login.actions';\r\nimport {\r\n    pmServerDown,\r\n    pmServerAvailable,\r\n    subscribeToPmServiceState\r\n} from '@oam/pm-v2/lib/core/actions/counters-pm-service.actions';\r\nimport { addNotification } from '@oam/core/lib/actions/toast-message.actions';\r\nimport { selectUserRole } from '@oam/core/lib/user/core/reducers/user-reducer';\r\nimport { ROLE_NAME_MAPPING } from '@oam/shared/lib/constants/role-access-constants';\r\nimport { selectPmServerDown } from '@oam/pm-v2/lib/core/selectors/counters.selectors';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n\r\n    static readonly CONNECTION_ERR_CODES = [0, 502, 503, 504];\r\n    static readonly PM_SERVICE_DOWN_ERR_CODES = [500, 503];\r\n\r\n    isConnectionStable = true;\r\n\r\n    isPmServerDown: boolean;\r\n\r\n    currentRole: string;\r\n\r\n    constructor(private readonly store: Store, private readonly vnfcSharedService: VnfcSharedService) {\r\n        this.store.pipe(select(selectUserRole)).subscribe((role: string) => {\r\n            this.currentRole = role;\r\n        });\r\n    }\r\n\r\n    static isConnectionError(error: any): boolean {\r\n        return ErrorInterceptor.CONNECTION_ERR_CODES.includes(error.status);\r\n    }\r\n\r\n    static isPmServiceDownError(error: any): boolean {\r\n        return ErrorInterceptor.PM_SERVICE_DOWN_ERR_CODES.includes(error.status);\r\n    }\r\n\r\n    intercept(request: HttpRequest<string>, next: HttpHandler): Observable<HttpEvent<string>> {\r\n        return next.handle(request).pipe(\r\n            map((event) => {\r\n                if (event instanceof HttpResponse && !this.isConnectionStable) {\r\n                    this.store.dispatch(setConnectionStatus({ isConnected: true }));\r\n                    this.isConnectionStable = true;\r\n                }\r\n\r\n                return event;\r\n            }),\r\n            catchError((err) => {\r\n                if (err.status === 401 && request.url !== '/api/sec/v1/login') {\r\n                    this.store.dispatch(clearTokens());\r\n                    this.store.dispatch(removeUser());\r\n                    this.store.dispatch(sessionUnintentionallyTerminated());\r\n                    this.store.dispatch(forceRedirect({routerLink: RouterLink.login}));\r\n                    if(err.error.additionalStatus && err.error.additionalStatus === 106) {\r\n                        this.store.dispatch(loginFailed({ payload: `${ROLE_NAME_MAPPING[this.currentRole] ? ROLE_NAME_MAPPING[this.currentRole] : 'Role'} is deactivated` }));\r\n                    }\r\n                }\r\n\r\n                if (err.status === 405) {\r\n                     this.store.dispatch(addNotification({payload: {\r\n                             severity: 'error',\r\n                             summary: 'Operation Failed',\r\n                             detail: 'No access permission'\r\n                         }}));\r\n                }\r\n\r\n                if (ErrorInterceptor.isConnectionError(err) && this.isConnectionStable && !request.url.includes('/api/pm/v2/')) {\r\n                    this.store.dispatch(setConnectionStatus({ isConnected: false }));\r\n                    this.isConnectionStable = false;\r\n                    this.store.dispatch(pmServerAvailable());\r\n                }\r\n\r\n                if (ErrorInterceptor.isPmServiceDownError(err) && this.isConnectionStable && request.url.includes('/api/pm/v2/')) {\r\n                    this.store.pipe(\r\n                        select(selectPmServerDown),\r\n                        filter(() => this.vnfcSharedService.isVcu()),\r\n                        take(1)\r\n                    ).subscribe((isPmServerDown: boolean) => {\r\n                        if (!isPmServerDown) {\r\n                            this.store.dispatch(pmServerDown());\r\n                            this.store.dispatch(subscribeToPmServiceState());\r\n                        }\r\n                    });\r\n                }\r\n\r\n                return throwError(err);\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { KILOBYTE_DECIMAL } from '@oam/shared/lib/core/models/math-constants';\r\n\r\nexport enum ErrorMessageDetails {\r\n    ERROR_DOWNLOAD_FILE= 'Error while downloading file',\r\n    UNKNOWN_ERROR = 'Unknown error',\r\n    WRONG_FILE = 'Wrong file schema or content corrupted'\r\n}\r\n\r\nexport enum AppSettingsLabels {\r\n    MODAL_TYPE_ERROR = 'error',\r\n    MODAL_TYPE_SUCCESS = 'success',\r\n    MODAL_IMPORT_SUMMARY = 'Import settings',\r\n    MODAL_IMPORT_SUCCESS_DETAIL = 'Import settings success',\r\n}\r\n\r\nexport const APP_SETTINGS_FILE_EXTENSION = '.wnls';\r\nexport const MAX_FILE_SIZE_FOR_SETTINGS_IN_KB = 200;\r\nexport const MAX_FILE_SIZE_FOR_SETTINGS = MAX_FILE_SIZE_FOR_SETTINGS_IN_KB * KILOBYTE_DECIMAL;\r\n","export enum ConfigurationSaveVariant {\r\n    ConfigurationOnly = 'Save SCF - configuration only',\r\n    DeltaConfigurationOnly = 'Save delta SCF - delta configuration only',\r\n    FullRuntimeConfiguration = 'Save full runtime configuration'\r\n}\r\n","export enum DateTimeFormats {\r\n    Date = 'YYYY-MM-DD',\r\n    Time = 'HH:mm:ss [UTC]Z',\r\n    DateTime = 'YYYY-MM-DD HH:mm:ss [UTC]Z',\r\n    DateTimeWithTSeparator = 'YYYY-MM-DDTHH:mm:ssZ',\r\n    DateTimeNoTimezone = 'YYYY-MM-DD HH:mm:ss',\r\n    DateTimeWithTimezone = 'YYYY-MM-DD HH:mm:ss [GMT]Z',\r\n    FileDateTime = 'YYYYMMDD-HHmm',\r\n    ChartDateTime = 'MM-DD HH:mm'\r\n}\r\n","export enum RoleAccessForbiddenFlagEnum {\r\n    LOCK_UNLOCK = 'LOCK_UNLOCK',\r\n    VCU_RESET_SITE = 'VCU_RESET_SITE',\r\n    VDU_RESET_SITE = 'VDU_RESET_SITE',\r\n    VDU_RESET_RADIO = 'VDU_RESET_RADIO',\r\n    VDU_RESET_ALD = 'VDU_RESET_ALD',\r\n    VDU_RETU_CALIBRATE = 'VDU_RETU_CALIBRATE',\r\n    VDU_RETU_LOAD_CONFIGURATION_FILE = 'VDU_RETU_LOAD_CONFIGURATION_FILE',\r\n    VDU_SET_RETU_ANGLES = 'VDU_SET_RETU_ANGLES',\r\n    VDU_RAEU_UPLOAD_WEIGHT_FACTOR_FILE = 'VDU_RAEU_UPLOAD_WEIGHT_FACTOR_FILE',\r\n    VDU_RAEU_RESTORE_FACTORY_DEFAULT = 'VDU_RAEU_RESTORE_FACTORY_DEFAULT',\r\n    VDU_RAEU_GET_WEIGHT_FACTORS = 'VDU_RAEU_GET_WEIGHT_FACTORS',\r\n    DIAGNOSTIC_USER_PLANE_TRACES = 'DIAGNOSTIC_USER_PLANE_TRACES',\r\n    DIAGNOSTIC_SNAPSHOT = 'DIAGNOSTIC_SNAPSHOT',\r\n    DIAGNOSTIC_CONTROL_PLANE_TRACES = 'DIAGNOSTIC_CONTROL_PLANE_TRACES',\r\n    DIAGNOSTIC_IP_SECURITY_ASSOCIATIONS = 'DIAGNOSTIC_IP_SECURITY_ASSOCIATIONS',\r\n    DIAGNOSTIC_IP_CONNECTIVITY = 'DIAGNOSTIC_IP_CONNECTIVITY',\r\n    DIAGNOSTIC_PMTU_DISCOVERY = 'DIAGNOSTIC_PMTU_DISCOVERY',\r\n    DIAGNOSTIC_SFP_MONITORING = 'DIAGNOSTIC_SFP_MONITORING',\r\n    CERTIFICATE_REVOCATION = 'CERTIFICATE_REVOCATION',\r\n    CERTIFICATE_OPERATOR = 'CERTIFICATE_OPERATOR',\r\n    CERTIFICATE_AUTOMATIC = 'CERTIFICATE_AUTOMATIC',\r\n    IPSEC_PSK_CONFIGURATION = 'IPSEC_PSK_CONFIGURATION',\r\n    SERVICE_USERS = 'SERVICE_USERS',\r\n    STAGE_PLAN = 'stage',\r\n    ACTIVE_CONFIGURATIONS = 'ACTIVE_CONFIGURATIONS',\r\n    INACTIVE_CONFIGURATIONS = 'INACTIVE_CONFIGURATIONS',\r\n    PLANNED_CONFIGURATIONS = 'PLANNED_CONFIGURATIONS',\r\n    DELTA_CONFIGURATIONS = 'DELTA_CONFIGURATIONS',\r\n    VALIDATE_PLAN = 'VALIDATE_PLAN',\r\n    ACTIVATE_PLAN = 'ACTIVATE_PLAN',\r\n    DOWNLOAD_PLAN_WITHOUT_ACTIVATION = 'DOWNLOAD_PLAN_WITHOUT_ACTIVATION',\r\n    FIX_PLAN_ERRORS = 'FIX_PLAN_ERRORS',\r\n    DELETE_PLAN = 'DELETE_PLAN',\r\n    CREATE_PLAN = 'CREATE_PLAN',\r\n    CREATE_DELTA_PLAN = 'CREATE_DELTA_PLAN',\r\n    LOAD_SCF = 'LOAD_SCF',\r\n    CHANGE_TO_PLANNED_CONFIGURATION = 'CHANGE_TO_PLANNED_CONFIGURATION',\r\n    DIAGNOSTIC_TEST_MODEL = 'DIAGNOSTIC_TEST_MODEL',\r\n    BLOCK_UNBLOCK = 'BLOCK_UNBLOCK'\r\n}\r\n","import { Action, createFeatureSelector, createReducer, createSelector, on } from '@ngrx/store';\r\nimport { uiRefresh, cleanUiSettingsCache } from '@oam/core/lib/actions/app-settings.actions';\r\n\r\nexport const appSettingsFeatureKey = 'appSettings';\r\nexport interface AppSettingsState {\r\n    refreshCount: number,\r\n    shouldNotifyUISettingGotRestored: boolean\r\n}\r\nexport const initialState: AppSettingsState = {\r\n    refreshCount: 0,\r\n    shouldNotifyUISettingGotRestored: false\r\n};\r\n\r\nconst onRefreshUi = on(uiRefresh, (state: AppSettingsState) => {\r\n    return {\r\n        ...state,\r\n        refreshCount: state.refreshCount + 1\r\n    };\r\n});\r\n\r\nconst onCleanUiSettingsCache = on(cleanUiSettingsCache, (state: AppSettingsState, action) => {\r\n    return {\r\n        ...state,\r\n        shouldNotifyUISettingGotRestored: action.payload\r\n    };\r\n});\r\n\r\nconst appSettingsReducer = createReducer(\r\n    initialState,\r\n    onRefreshUi,\r\n    onCleanUiSettingsCache\r\n);\r\n\r\nexport function reducer(state: AppSettingsState, action: Action) {\r\n    return appSettingsReducer(state, action);\r\n}\r\n\r\nexport const selectAppSettingsState = createFeatureSelector<AppSettingsState>(appSettingsFeatureKey);\r\nexport const selectAppSettingsRefresh = createSelector(selectAppSettingsState, (state: AppSettingsState) => state.refreshCount);\r\nexport const selectHasCleanUiSettingsState = createSelector(selectAppSettingsState, (state: AppSettingsState) => state.shouldNotifyUISettingGotRestored);\r\n","import { createReducer, on, Action, createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { Cloud } from '@oam/shared/lib/core/models/cloud.type';\r\nimport { setCloudAction } from '@oam/shared/lib/core/actions/cloud.actions';\r\n\r\nexport const featureKey = 'cloud';\r\n\r\nexport interface CloudState {\r\n    cloud: Cloud;\r\n}\r\n\r\nexport const initialState: CloudState = {\r\n    cloud: {\r\n        cloudName: '',\r\n        cloudId: ''\r\n    }\r\n};\r\n\r\nconst cloudReducer = createReducer(initialState,\r\n    on(setCloudAction, (state, { payload: cloud }) => ({ ...state, cloud })),\r\n);\r\n\r\n\r\nexport function reducer(state: CloudState, action: Action) {\r\n    return cloudReducer(state, action);\r\n}\r\n\r\nexport const selectCloudState = createFeatureSelector<CloudState>(featureKey);\r\nexport const selectCloud = createSelector(selectCloudState, (state: CloudState) => state.cloud);\r\n","import { omit } from 'lodash';\r\nimport { on, createReducer, Action } from '@ngrx/store';\r\nimport {\r\n    addNotificationId,\r\n    removeNotificationFromStore,\r\n    addNotificationToHistory\r\n} from '../actions/toast-message.actions';\r\nimport { ToastMessageState } from '../models/toast-message-state.type';\r\n\r\nexport const featureKey = 'toastMessage';\r\n\r\nexport const initialState: ToastMessageState = {\r\n    toastIds: {},\r\n    notifications: []\r\n};\r\n\r\nconst onRemoveNotificationFromStore = on(removeNotificationFromStore, (state: ToastMessageState, { payload }) => {\r\n    const newToastIds = omit(state.toastIds, payload);\r\n\r\n    return {\r\n        ...state,\r\n        toastIds: {\r\n            ...newToastIds\r\n        }\r\n    };\r\n});\r\n\r\nconst onAddNotificationId = on(addNotificationId, (state: ToastMessageState, { payload }) => {\r\n    return {\r\n        ...state,\r\n        toastIds: {\r\n            ...state.toastIds,\r\n            [payload.toastType]: payload.toastId\r\n        }\r\n    };\r\n});\r\n\r\nconst onAddNotificationToHistory = on(addNotificationToHistory, (state: ToastMessageState, { notification }) => {\r\n    return {\r\n        ...state,\r\n        notifications: [...state.notifications, notification]\r\n    };\r\n});\r\n\r\nconst toastMessageReducer = createReducer(\r\n    initialState,\r\n    onRemoveNotificationFromStore,\r\n    onAddNotificationId,\r\n    onAddNotificationToHistory\r\n);\r\n\r\nexport function reducer(state: ToastMessageState | undefined, action: Action) {\r\n    return toastMessageReducer(state, action);\r\n}\r\n\r\n","import { createReducer, on, Action, createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { clearPasswordExpirationWarning, displayPasswordExpirationWarning } from '../actions/user.actions';\r\n\r\nexport const featureKey = 'passwordAging';\r\n\r\nexport interface PasswordAgingState {\r\n    isPasswordAgingPresent: boolean;\r\n}\r\n\r\nexport const initialState: PasswordAgingState = {\r\n    isPasswordAgingPresent: false\r\n};\r\n\r\nconst passwordExpirationReducer = createReducer(\r\n    initialState,\r\n    on(displayPasswordExpirationWarning, (state) => ({\r\n        ...state, isPasswordAgingPresent: true\r\n    })),\r\n    on(clearPasswordExpirationWarning, (state) => ({\r\n        ...state, isPasswordAgingPresent: false\r\n    }))\r\n);\r\n\r\nexport function reducer(state: PasswordAgingState, action: Action) {\r\n    return passwordExpirationReducer(state, action);\r\n}\r\n\r\nexport const getPasswordAgingState = createFeatureSelector<PasswordAgingState>(featureKey);\r\nexport const getIsPasswordAgingPresent = createSelector(getPasswordAgingState, (state) => state.isPasswordAgingPresent);\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { RouterReducerState } from '@ngrx/router-store';\r\nimport { RouterStateUrl } from '@oam/core/lib/models/router-state-url';\r\n\r\nexport type RouterState = RouterReducerState<RouterStateUrl>;\r\n\r\nexport const ROUTER_STATE = 'router';\r\n\r\nconst selectRouterState = createFeatureSelector<RouterState>(ROUTER_STATE);\r\n\r\nexport const selectUrl = createSelector(selectRouterState, (routerState): (string | undefined) => {\r\n    return routerState?.state?.url;\r\n});\r\n\r\nexport const selectUrlWithoutParams = createSelector(selectRouterState, (routerState) => {\r\n    let url = routerState.state.url;\r\n    Object.values(routerState.state.params).forEach(param => {\r\n        url = url.replace(param, '');\r\n    });\r\n\r\n    return url.substring(url.length - 1, url.length) === '/' ? url.slice(0, -1) : url;\r\n});\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { ToastMessageState } from '../models/toast-message-state.type';\r\nimport { featureKey } from '../reducers/toast-message.reducer';\r\n\r\nexport const selectToastMessageState = createFeatureSelector<ToastMessageState>(featureKey);\r\nexport const selectToastIds = createSelector(selectToastMessageState, (state: ToastMessageState) => state.toastIds);\r\nexport const selectNotifications = createSelector(selectToastMessageState, (state: ToastMessageState) => state.notifications);\r\n","import { Omit } from 'lodash';\r\n\r\nexport type ModifyType<T, R> = Omit<T, keyof R> & R;\r\n\r\nexport type UiConfig = any;\r\n\r\nexport interface UiModelSettingsType {\r\n    name: string,\r\n    layoutConfig: UiConfig\r\n}\r\n\r\nexport const uiKeyPrefix = 'wnls_';\r\n","export const schema = {\r\n    $schema: 'http://json-schema.org/schema#',\r\n    type: 'array',\r\n    maxItems: 20,\r\n    items: [\r\n    {\r\n        type: 'object',\r\n        properties: {\r\n            name: { type: 'string' },\r\n            layoutConfig: { type: ['array', 'object'] }\r\n            },\r\n        required: ['name', 'layoutConfig']\r\n    }]\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { NGXLogger } from 'ngx-logger';\r\nimport { UiConfig, uiKeyPrefix, UiModelSettingsType } from '@oam/core/lib/services/model/';\r\nimport { schema } from './model/appSettingsSchema';\r\nimport Ajv from 'ajv';\r\nimport { APP_SETTINGS_FILE_EXTENSION } from '@oam/core/lib/models/app-settings.model';\r\n\r\nexport const REGISTRY_KEY = 'wnls-settings-registry';\r\n\r\nexport type Registry = Set<string>;\r\n\r\nexport type ParseResult = {\r\n    content: object[];\r\n    isValid: boolean;\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class AppSettingsService {\r\n    constructor(private readonly logger: NGXLogger) {\r\n    }\r\n\r\n    private static addPrefix(keyName: string): string {\r\n        return `${uiKeyPrefix}${keyName}`;\r\n    }\r\n\r\n    generateUiSettingsFile(): string {\r\n        const registry = Array.from(this.loadRegistry());\r\n\r\n        const entries = registry.map((elem: string): UiModelSettingsType => ({\r\n            name: elem,\r\n            layoutConfig: JSON.parse(localStorage.getItem(elem) as string)\r\n        }));\r\n\r\n        const content = JSON.stringify(entries);\r\n\r\n        return btoa(encodeURIComponent(content));\r\n    }\r\n\r\n    downloadUiSettingsFile(): Observable<Blob> {\r\n        const blob = new Blob(\r\n            [this.generateUiSettingsFile()],\r\n            { type: 'text/plain' });\r\n\r\n        return of(blob);\r\n    }\r\n\r\n    restoreDefaultUiSettings() {\r\n        const registry = this.loadRegistry();\r\n        registry.forEach(item => {\r\n            localStorage.removeItem(item);\r\n        });\r\n        this.saveRegistry(new Set());\r\n    }\r\n\r\n    importUiSettings(content: object[]): void {\r\n        if (!content.length) {\r\n            this.restoreDefaultUiSettings();\r\n        }\r\n\r\n        content.forEach((elem: { name: string; layoutConfig: UiConfig; }) => {\r\n            const key = elem.name.substring(uiKeyPrefix.length);\r\n            this.saveUiSettings(key, elem.layoutConfig);\r\n        });\r\n    }\r\n\r\n    validateJsonSchema(data: object): any {\r\n        const ajv = new Ajv();\r\n        const validation =  ajv.addSchema(schema, 'appSettingsSchema').validate('appSettingsSchema', data);\r\n\r\n        if (!validation) this.logger.log(ajv.errorsText());\r\n\r\n        return validation;\r\n    }\r\n\r\n    readFile(file: File): Observable<object> {\r\n        return new Observable((obs: any) => {\r\n            const isExtensionValid = file.name.endsWith(APP_SETTINGS_FILE_EXTENSION);\r\n            if (!(file instanceof File && isExtensionValid)) {\r\n                obs.error(`Invalid file extension: ${file.name} (expected ${APP_SETTINGS_FILE_EXTENSION})`);\r\n            }\r\n\r\n            const reader = new FileReader();\r\n            reader.readAsText(file);\r\n            reader.onerror = err => obs.error(err);\r\n            reader.onabort = err => obs.error(err);\r\n            reader.onload = () => {\r\n                try {\r\n                    const parsedContent = JSON.parse(decodeURIComponent(atob(reader.result as string)));\r\n                    obs.next(parsedContent);\r\n                } catch (e) {\r\n                    obs.error(e);\r\n                }\r\n            };\r\n            reader.onloadend = () => obs.complete();\r\n        });\r\n    }\r\n\r\n    validate(fileContent: Observable<object>): Observable<ParseResult> {\r\n        return fileContent.pipe(map((content: object[]) => {\r\n            const isValid = (): boolean => {\r\n                return this.validateJsonSchema(content);\r\n            };\r\n\r\n            return {\r\n                content,\r\n                isValid: isValid()\r\n            };\r\n        }));\r\n    }\r\n\r\n    readAndValidate(file: File): Observable<ParseResult> {\r\n        return this.validate(this.readFile(file));\r\n    }\r\n\r\n    loadRegistry(): Registry {\r\n        let registry: string[] = [];\r\n        const registryEntry = localStorage.getItem(REGISTRY_KEY);\r\n\r\n        if (registryEntry) {\r\n            registry = JSON.parse(registryEntry);\r\n        }\r\n\r\n        if (!Array.isArray(registry)) {\r\n            registry = [];\r\n        }\r\n\r\n        return new Set(registry);\r\n    }\r\n\r\n    saveRegistry(registry: Registry) {\r\n        localStorage.setItem(REGISTRY_KEY, JSON.stringify(Array.from(registry)));\r\n    }\r\n\r\n    addKeyToRegistry(key: string) {\r\n        const currentRegistry = this.loadRegistry();\r\n        currentRegistry.add(key);\r\n        this.saveRegistry(currentRegistry);\r\n    }\r\n\r\n    removeKeyFromRegistry(key: string) {\r\n        const currentRegistry = this.loadRegistry();\r\n        currentRegistry.delete(key);\r\n        this.saveRegistry(currentRegistry);\r\n    }\r\n\r\n    saveUiSettings(keyName: string, uiSettings: UiConfig): void {\r\n        if (keyName) {\r\n            localStorage.setItem(AppSettingsService.addPrefix(keyName), JSON.stringify(uiSettings));\r\n            this.addKeyToRegistry(AppSettingsService.addPrefix(keyName));\r\n        }\r\n    }\r\n\r\n    deleteItemFromLocalStorageByKey(keyName: string): void {\r\n        const storageKeyName = AppSettingsService.addPrefix(keyName);\r\n\r\n        localStorage.removeItem(storageKeyName);\r\n        this.removeKeyFromRegistry(storageKeyName);\r\n    }\r\n\r\n    getUiSettings(keyName: string, defaultUi: UiConfig): UiConfig {\r\n        const item = localStorage.getItem(AppSettingsService.addPrefix(keyName)) as string;\r\n\r\n        if (!item) {\r\n            return defaultUi;\r\n        }\r\n\r\n        return JSON.parse(item);\r\n    }\r\n}\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { CloudState, featureKey } from '../reducers/cloud.reducer';\r\n\r\nexport const selectCloudState = createFeatureSelector<CloudState>(featureKey);\r\nexport const selectCloud = createSelector(selectCloudState, (state: CloudState) => state.cloud);\r\n","import { Injectable } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { take } from 'rxjs/operators';\r\nimport { Cloud } from '@oam/shared/lib/core/models/cloud.type';\r\nimport { selectCloud } from '../selectors/cloud.selectors';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class CloudInfoService {\r\n    cloudName: string;\r\n    cloudId: string;\r\n\r\n    constructor(private readonly store: Store) { }\r\n\r\n    public getCloudName(): string {\r\n        this.store\r\n            .pipe(\r\n                select(selectCloud),\r\n                take(1)\r\n            ).subscribe((data: Cloud) => {\r\n                this.cloudName = data.cloudName as string;\r\n            });\r\n\r\n        return this.cloudName;\r\n    }\r\n\r\n    public getCloudId(): string {\r\n        this.store\r\n            .pipe(\r\n                select(selectCloud),\r\n                take(1)\r\n            ).subscribe((data: Cloud) => {\r\n                this.cloudId = data.cloudId as string;\r\n            });\r\n\r\n        return this.cloudId;\r\n    }\r\n}\r\n","\r\nexport const INDEXED_DB_ENV: any = {\r\n    DB_NAME: 'CONSOLE_LOG_DB',\r\n    DB_VERSION: 1,\r\n    DB_STORE_NAME: 'consoleLogs',\r\n    DB_STORE_SCHEMA: `++id,\r\n                        session,\r\n                        level,\r\n                        timestamp,\r\n                        fileName,\r\n                        lineNumber,\r\n                        message,\r\n                        additional`,\r\n    DB_STORE_MIN_THRESHOLD: 5000,\r\n    DB_STORE_MAX_THRESHOLD: 10000\r\n};\r\n","import Dexie from 'dexie';\r\nimport { Injectable } from '@angular/core';\r\nimport { NGXLogInterface } from 'ngx-logger';\r\nimport { INDEXED_DB_ENV } from '../config';\r\nimport { isNumber } from 'lodash';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class ConsoleLogsDatabaseService extends Dexie {\r\n    private readonly session: number;\r\n    private readonly dbSchema: { [key: string]: string | null };\r\n\r\n    constructor() {\r\n        super(INDEXED_DB_ENV.DB_NAME);\r\n        this.dbSchema = {};\r\n        this.session = Date.now();\r\n        this.createStore();\r\n    }\r\n\r\n    async clearStore(): Promise<void> {\r\n        this.openDbConnection();\r\n        await this.table(INDEXED_DB_ENV.DB_STORE_NAME)\r\n            .clear();\r\n    }\r\n\r\n    async addLog(newLog: ConsoleLogInterface): Promise<void> {\r\n        this.openDbConnection();\r\n        if (await this.isStoreLimitExceeded()) {\r\n            await this.deleteOldLogs();\r\n        }\r\n        newLog.session = this.session;\r\n        await this.table(INDEXED_DB_ENV.DB_STORE_NAME)\r\n            .add(newLog);\r\n    }\r\n\r\n    async getBlobLogs(): Promise<BlobLogs> {\r\n        const allLogs = await this.getAllLogs().then((logs) => logs);\r\n\r\n        return {\r\n            name: 'BROWSER_LOGS.json',\r\n            blob: new Blob([JSON.stringify(allLogs, null, 2)], { type: 'blob' })\r\n        };\r\n    }\r\n\r\n    private async getAllLogs(): Promise<Array<ConsoleLogInterface>> {\r\n        this.openDbConnection();\r\n\r\n        return this.table(INDEXED_DB_ENV.DB_STORE_NAME)\r\n            .toArray()\r\n            .then( logs => logs)\r\n            .catch(error => {\r\n                Error(error);\r\n\r\n                return [];\r\n            });\r\n    }\r\n\r\n    private async deleteOldLogs(): Promise<void> {\r\n        const latestLogId = await this.getLatestLog().then((element) => element.id);\r\n\r\n        await this.table(INDEXED_DB_ENV.DB_STORE_NAME)\r\n            .where('id')\r\n            .belowOrEqual(latestLogId - INDEXED_DB_ENV.DB_STORE_MIN_THRESHOLD)\r\n            .delete();\r\n    }\r\n\r\n    private getLatestLog(): Dexie.Promise<any | undefined> {\r\n        return this.table(INDEXED_DB_ENV.DB_STORE_NAME)\r\n            .orderBy('id')\r\n            .last();\r\n    }\r\n\r\n    private getCount(): Dexie.Promise<number> {\r\n        return this.table(INDEXED_DB_ENV.DB_STORE_NAME)\r\n            .count();\r\n    }\r\n\r\n    private async isStoreLimitExceeded(): Promise<boolean> {\r\n        const totalLogsNumber = await this.getCount().then(num => num);\r\n\r\n        return (isNumber(totalLogsNumber) && totalLogsNumber > INDEXED_DB_ENV.DB_STORE_MAX_THRESHOLD);\r\n    }\r\n\r\n    private openDbConnection(): void {\r\n        if (!this.isOpen()) {\r\n            this.open()\r\n                .catch(err => {\r\n                    console.error(`Open failed: ${err.stack}`);\r\n                    this.createStore();\r\n                });\r\n        }\r\n    }\r\n\r\n    private createStore(): void {\r\n        this.dbSchema[INDEXED_DB_ENV.DB_STORE_NAME] = INDEXED_DB_ENV.DB_STORE_SCHEMA;\r\n        this.version(INDEXED_DB_ENV.DB_VERSION)\r\n            .stores(this.dbSchema);\r\n    }\r\n}\r\n\r\ninterface ConsoleLogInterface extends NGXLogInterface {\r\n    session?: number,\r\n    id?: number\r\n}\r\n\r\ninterface BlobLogs {\r\n    name: string,\r\n    blob: any\r\n}\r\n","import moment from 'moment';\r\nimport { Injectable } from '@angular/core';\r\nimport { DateTime } from '../classes/date-time';\r\nimport { DateTimeFormats } from '@oam/core/lib/models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DatetimeService {\r\n    constructor() {\r\n    }\r\n\r\n    public static getCurrentUnixTimestamp(): number {\r\n        return new DateTime().getTime();\r\n    }\r\n\r\n    public getTimestampFromISOTime(isoTime = ''): number {\r\n        const formatISOTime = this.formatFromISO2GMTTime(isoTime);\r\n\r\n        return (formatISOTime !== 'Invalid date') ? Date.parse(isoTime) : NaN;\r\n    }\r\n\r\n    public getFormattedDateTime(Timestamp = '', timezone = false): string {\r\n        if (/^[0-9]*$/.test(Timestamp)) {\r\n            return new DateTime(parseInt(Timestamp, 10)).toFormattedDateTime(timezone);\r\n        }\r\n\r\n        return new DateTime(Timestamp).toFormattedDateTime(timezone);\r\n    }\r\n\r\n    public formatFromISO8601(timestamp = '', shouldRemoveTimezone = false): string {\r\n        if (shouldRemoveTimezone) {\r\n            return new DateTime(timestamp.substring(0, timestamp.length - 6)).toFormattedDateTime(false);\r\n        }\r\n\r\n        return new DateTime(timestamp).toFormattedDateTime(false);\r\n    }\r\n\r\n    public formatFromISO2GMTTime(timestamp = ''): string {\r\n        const m = moment(timestamp).utcOffset(timestamp);\r\n\r\n        return m.format(DateTimeFormats.DateTimeWithTimezone);\r\n    }\r\n}\r\n","import { addNotification } from '@oam/core/lib/actions/toast-message.actions';\r\nimport {\r\n    SIZE_LIMIT\r\n} from '@oam/cu-ui';\r\nimport { Store } from '@ngrx/store';\r\nimport { Injectable } from '@angular/core';\r\nimport { importUiSettings } from '@oam/core/lib/actions/app-settings.actions';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DroppedItemService {\r\n\r\n    constructor(private readonly store: Store) {}\r\n\r\n    handleItem(item: File | Error): void {\r\n\r\n        switch (item.constructor) {\r\n            case File:\r\n                this.store.dispatch(importUiSettings({ file: item as File}));\r\n                break;\r\n            case Error:\r\n                this.notifyError((item as Error).message);\r\n        }\r\n    }\r\n\r\n    notifyError(message: string): void {\r\n        let errorSummary: string;\r\n        let errorDetails = '';\r\n        if (message.includes(SIZE_LIMIT)) {\r\n            errorSummary = 'File size too large';\r\n            errorDetails = message;\r\n        } else {\r\n            errorSummary = message;\r\n        }\r\n\r\n        this.store.dispatch(addNotification({\r\n            payload: {\r\n                detail: errorDetails,\r\n                severity: 'error',\r\n                summary: errorSummary\r\n            }\r\n        }));\r\n    }\r\n}\r\n","export enum AlarmType {\r\n    HISTORICAL_ALARMS = 'historicalAlarms',\r\n    CURRENT_ALARMS = 'currentAlarms',\r\n    FAULT_TOGGLING_HISTORY = 'FaultTogglingHistory'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HistoricalAlarm } from '@oam/cu-fm-api/models';\r\nimport { ngxCsv } from 'ngx-csv/ngx-csv';\r\nimport { DatetimeService } from './datetime.service';\r\nimport { CloudInfoService } from './cloud-info.service';\r\nimport { DateTime } from '../classes/date-time';\r\nimport { FaultTogglingRowModel } from '@oam/cu-ui/lib/fault-toggling-table/model';\r\nimport { sanitizeWithUnderScore } from '@oam/core/lib/utils/shared-utils';\r\nimport { AlarmType } from './AlarmType';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ExportService {\r\n    constructor(private readonly datetimeService: DatetimeService,\r\n                private readonly cloudInfoService: CloudInfoService) {\r\n    }\r\n\r\n    public exportAlarmsAsCsv(data: any, modelState: any, isHistoricalAlarms = false): ngxCsv {\r\n        let headers = ['Severity', 'Appeared time', 'Alarm ID', 'Alarm name',\r\n                       'Fault ID', 'Fault name', 'Alarming object'];\r\n        if (isHistoricalAlarms) {\r\n            headers = ['Severity', 'Appeared time', 'Cleared time', 'Alarm ID', 'Alarm name',\r\n                       'Fault ID', 'Fault name', 'Alarming object'];\r\n        }\r\n\r\n        const name = isHistoricalAlarms ? AlarmType.HISTORICAL_ALARMS : AlarmType.CURRENT_ALARMS;\r\n        const filename = this.getExportFilenameForAlarms(name, modelState);\r\n        const alarms = data.map((alarm: HistoricalAlarm) => {\r\n            const response = {};\r\n            response['severity'] = alarm.severity || '';\r\n            response['appearTime'] = this.datetimeService.formatFromISO8601(alarm.appearTime, true);\r\n            if (isHistoricalAlarms) response['clearedTime'] = this.datetimeService.formatFromISO8601(alarm.clearedTime, true);\r\n            response['alarmId'] = alarm.alarmId || alarm.alarmId === 0 ? alarm.alarmId : '';\r\n            response['alarmName'] = alarm.alarmName || '';\r\n            response['faultId'] = alarm.faultId || '';\r\n            response['faultName'] = alarm.faultName || '';\r\n            response['alarmingObject'] = alarm.alarmingObject || '';\r\n\r\n            return response;\r\n        });\r\n\r\n        return new ngxCsv(alarms, filename, {headers});\r\n    }\r\n\r\n    public exportFaultTogglingHistoryCsv(data: FaultTogglingRowModel[], modelState: any): ngxCsv {\r\n        const headers = ['State', 'Appeared', 'Fault ID', 'Fault Name',\r\n                         'Fault Source', 'Node ID', 'Last 10 s', 'Last minute', 'Last hour', 'Last day', 'All'];\r\n\r\n        const name = AlarmType.FAULT_TOGGLING_HISTORY;\r\n        const filename = this.getExportFilenameForAlarms(name, modelState);\r\n        const alarms = data.map((fault: FaultTogglingRowModel) => {\r\n            const response = {};\r\n            response['state'] = fault.state;\r\n            response['appearTime'] = fault.togglingAlarmRaiseTime || '';\r\n            response['faultId'] = fault.faultId || '';\r\n            response['faultName'] = fault.faultName || '';\r\n            response['faultSource'] = fault.faultSource || '';\r\n            response['nodeId'] = fault.nodeId || '';\r\n            response['togglingAlarmsLast10seconds'] = fault.togglingAlarmsLast10seconds || '';\r\n            response['togglingAlarmsLastMinute'] = fault.togglingAlarmsLastMinute || '';\r\n            response['togglingAlarmsLastHour'] = fault.togglingAlarmsLastHour || '';\r\n            response['togglingAlarmsLastDay'] = fault.togglingAlarmsLastDay || '';\r\n            response['togglingAlarmsSinceStartup'] = fault.togglingAlarmsSinceStartup || '';\r\n\r\n            return response;\r\n        });\r\n\r\n        return new ngxCsv(alarms, filename, {headers});\r\n    }\r\n\r\n    public getExportFilenameWithExtension(name: string, fileFormat: string) {\r\n        return `${this.getExportFilename(name)}.${fileFormat}`;\r\n    }\r\n\r\n    public getExportFilenameForAlarms(name: AlarmType, modelState: any) {\r\n        const mrbtsId = modelState.mrbtsId;\r\n        const btsName = modelState.btsName;\r\n        const sanitizeBtsName = sanitizeWithUnderScore(btsName);\r\n        const currentDateTime = new DateTime().toFormattedFileDateTime();\r\n\r\n        return `MRBTS-${mrbtsId}_${sanitizeBtsName}_${name}_${currentDateTime}`;\r\n    }\r\n\r\n    public getExportFilenameForPmView(modelState: any) {\r\n        const mrbtsId = modelState.mrbtsId;\r\n        const btsName = modelState.btsName;\r\n        const sanitizeBtsName = sanitizeWithUnderScore(btsName);\r\n        const currentDateTime = new DateTime().toFormattedFileDateTime();\r\n\r\n        return `PM_MRBTS-${mrbtsId}_${sanitizeBtsName}_${currentDateTime}`;\r\n    }\r\n\r\n    public getExportFilename(name: string) {\r\n        const cloudName = this.cloudInfoService.getCloudName();\r\n        const cloudId = this.cloudInfoService.getCloudId();\r\n        const currentDateTime = new DateTime().toFormattedFileDateTime();\r\n\r\n        return `${cloudName}_${cloudId}_${name}_${currentDateTime}`;\r\n    }\r\n}\r\n","export enum ResponseStatus {\r\n    Ongoing = 'ongoing',\r\n    Success = 'success',\r\n    Failure = 'failure'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router, UrlTree } from '@angular/router';\r\nimport { SPLIT_VIEW_LOCATION } from '@oam/split-view';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class OutletUrlPathService {\r\n    private curUrlTree: UrlTree;\r\n\r\n    constructor(private readonly router: Router) {}\r\n\r\n    getOutletWebemRoutePath(url: string, viewLocation: SPLIT_VIEW_LOCATION): string | undefined {\r\n        this.curUrlTree  = this.router.parseUrl(url);\r\n        if (this.curUrlTree.root.children.primary.children[viewLocation]) {\r\n            return this.getSegmentsOutletPath(viewLocation);\r\n        }\r\n    }\r\n\r\n    private getSegmentsOutletPath(view: SPLIT_VIEW_LOCATION): string {\r\n        return this.curUrlTree.root.children.primary.children[view].segments\r\n            .map((outlet) => outlet.path).join('/');\r\n    }\r\n}\r\n","import { get } from 'lodash';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { asyncScheduler, concat, Observable, of, SchedulerLike, Subject, throwError, timer } from 'rxjs';\r\nimport { catchError, concatMap, distinctUntilChanged, observeOn, switchMap, takeUntil, filter, timeout } from 'rxjs/operators';\r\nimport { leaveZone } from '../functions/leave-zone-scheduler';\r\nimport { enterZone } from '../functions/enter-zone-scheduler';\r\nimport { ActionResponse, PollingConfig, ResponseStatus, SerializedActionResponse } from './model';\r\nimport { ActionCreator } from '@ngrx/store';\r\nimport {\r\n    clearActionProgress,\r\n    setActionProgress\r\n} from '@oam/cu-ui/lib/action-progress/core/actions/action-progress.actions';\r\nimport { TypedAction } from '@ngrx/store/src/models';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nconst defaultIsActionDistinctPredicate = (previous: ActionResponse, current: ActionResponse) => {\r\n    return !!previous && !!current && previous.status === current.status;\r\n};\r\n\r\nconst defaultActionResponseSerializer = (response: ActionResponse): SerializedActionResponse => {\r\n    return {\r\n        actionId: response.actionId,\r\n        status: response.status as ResponseStatus,\r\n        errorMessage: response.errorMessage\r\n    };\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PollingService {\r\n    public POLLING_PERIOD_MS = 5000;\r\n\r\n    // set to 10s because seems the connection in E2E test is not able to response in 5s which causes E2E test failure\r\n    public REQUEST_TIMEOUT_MS = 10000;\r\n\r\n    constructor(private readonly ngZone: NgZone) {\r\n    }\r\n\r\n    public getTimer(scheduler: SchedulerLike, dueTime = 0, pollingPeriod= this.POLLING_PERIOD_MS): Observable<number> {\r\n        return timer(dueTime, pollingPeriod, leaveZone(this.ngZone, scheduler))\r\n            .pipe(\r\n                observeOn(enterZone(this.ngZone, scheduler))\r\n            );\r\n    }\r\n\r\n    public executeAction<D, B, R>(\r\n        pollingConfig: PollingConfig<D, B, R>\r\n    ): Observable<ActionCreator<any, any>> {\r\n        const serializer = pollingConfig.endpointResponseSerializer || defaultActionResponseSerializer;\r\n        const spinAfterSuccess: boolean = get(pollingConfig, 'actionProgress.spinAfterSuccess', false);\r\n        const clearActionProgressArray = this.getActionArray(\r\n            pollingConfig.actionProgress && clearActionProgress(pollingConfig.actionProgress)\r\n        );\r\n\r\n        const response$ = pollingConfig.requestEndpoint(pollingConfig.requestParams).pipe(\r\n            switchMap((response) => {\r\n                const serializedResponse = serializer(response as any);\r\n\r\n                switch (serializedResponse.status) {\r\n                    case ResponseStatus.Ongoing:\r\n                        return this.pollForActionSuccess(\r\n                            serializedResponse.actionId,\r\n                            pollingConfig\r\n                        );\r\n                    case ResponseStatus.Success: {\r\n                        const successActionObservable = pollingConfig.onActionSuccess && pollingConfig.onActionSuccess({\r\n                            response,\r\n                            additionalData: pollingConfig.additionalData\r\n                        });\r\n\r\n                        return [\r\n                            ...this.getActionArray(successActionObservable),\r\n                            ...(spinAfterSuccess ? [] : clearActionProgressArray)\r\n                        ];\r\n                    }\r\n                    case ResponseStatus.Failure: {\r\n                        const failureActionObservable = pollingConfig.onActionFailure({\r\n                            response,\r\n                            additionalData: pollingConfig.additionalData\r\n                        });\r\n\r\n                        return [\r\n                            ...this.getActionArray(failureActionObservable),\r\n                            ...clearActionProgressArray\r\n                        ];\r\n                    }\r\n                    default:\r\n                        return throwError(\r\n                            {\r\n                                message: `The response object: ${JSON.stringify(response)} does not have status property ` +\r\n                                    'or the status property does not match one of the following: [ongoing, success, failure]'\r\n                            });\r\n                }\r\n            }),\r\n            catchError((err) => {\r\n                const errorActionObservable = pollingConfig.onActionError({\r\n                    error: err,\r\n                    additionalData: pollingConfig.additionalData\r\n                });\r\n\r\n                return [\r\n                    ...this.getActionArray(errorActionObservable),\r\n                    ...clearActionProgressArray\r\n                ];\r\n            })\r\n        );\r\n\r\n        return pollingConfig.actionProgress\r\n            ? concat(of(setActionProgress(pollingConfig.actionProgress)), response$)\r\n            : response$;\r\n    }\r\n\r\n    private pollForActionSuccess<D, B, R>(\r\n        actionId: string,\r\n        config: PollingConfig<D, B, R>\r\n    ): Observable<any> {\r\n        const stopPolling$: Subject<void> = new Subject();\r\n        const serializer = config.endpointResponseSerializer || defaultActionResponseSerializer;\r\n        const actionDistinctPredicate = config.isActionDistinctPredicate || defaultIsActionDistinctPredicate;\r\n        const spinAfterSuccess: boolean = get(config, 'actionProgress.spinAfterSuccess', false);\r\n        const clearActionProgressArray = this.getActionArray(\r\n            config.actionProgress && clearActionProgress(config.actionProgress)\r\n        );\r\n\r\n        return this.getTimer(asyncScheduler).pipe(\r\n            takeUntil(stopPolling$),\r\n            concatMap(() => config.pollingEndpoint({ actionId }).pipe(\r\n                timeout(this.REQUEST_TIMEOUT_MS),\r\n                catchError(err => {\r\n                    if (this.shouldExitPolling(config, err)) {\r\n                        return throwError(err);\r\n                    }\r\n\r\n                    const ongoingStatus = {\r\n                        status: ResponseStatus.Ongoing\r\n                    };\r\n\r\n                    return of(ongoingStatus);\r\n                })\r\n            )),\r\n            distinctUntilChanged(actionDistinctPredicate),\r\n            filter(() => !stopPolling$.isStopped),\r\n            concatMap((response) => {\r\n                const serializedResponse = serializer(response);\r\n\r\n                if (serializedResponse.status === ResponseStatus.Ongoing) {\r\n                    const onGoingAction = config.onActionOngoing\r\n                        && config.onActionOngoing({ response, additionalData: config.additionalData });\r\n\r\n                    return [\r\n                        ...this.getActionArray(onGoingAction)\r\n                    ];\r\n                }\r\n                stopPolling$.next();\r\n                stopPolling$.complete();\r\n\r\n                const successOrFailureAction = serializedResponse.status === ResponseStatus.Success\r\n                    ? config.onActionSuccess && config.onActionSuccess({\r\n                        response,\r\n                        additionalData: config.additionalData\r\n                      })\r\n                    : config.onActionFailure({ response, additionalData: config.additionalData });\r\n\r\n                return [\r\n                    ...this.getActionArray(successOrFailureAction),\r\n                    ...(spinAfterSuccess ? [] : clearActionProgressArray)\r\n                ];\r\n            }),\r\n            catchError(err => {\r\n                if (!stopPolling$.isStopped) {\r\n                    return of(config.onActionError({ error: err, additionalData: config.additionalData }));\r\n                }\r\n\r\n                return of();\r\n            })\r\n        );\r\n    }\r\n\r\n    private getActionArray(action: TypedAction<any> | undefined): TypedAction<any>[] {\r\n        return action ? [action] : [];\r\n    }\r\n\r\n    private shouldExitPolling<D, B, R>(config: PollingConfig<D, B, R>, error: HttpErrorResponse): boolean {\r\n        return !config.pollUnlessHttpErrorCode\r\n            || config.pollUnlessHttpErrorCode\r\n            && config.pollUnlessHttpErrorCode.indexOf(error.status) >= 0;\r\n    }\r\n}\r\n","import { DateTime, DatetimeService } from '@oam/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { selectUserTokenExpirationTime } from '@oam/core/lib/user/core/reducers/user-reducer';\r\nimport { Injectable } from '@angular/core';\r\nimport { differenceInSeconds } from 'date-fns';\r\n\r\nconst ONE_MINUTE = 60;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TokenExpirationTimeService {\r\n    constructor(private readonly store: Store,\r\n                private readonly datetimeService: DatetimeService) {\r\n        this.calculateRemainingTokenExpirationTime();\r\n    }\r\n\r\n    private tokenExpirationTime: number;\r\n    public _expirationTime?: string;\r\n\r\n    calculateRemainingTokenExpirationTime(): void {\r\n        this.store.pipe(select(selectUserTokenExpirationTime))\r\n            .subscribe((expirationTime) => {\r\n                this._expirationTime = expirationTime;\r\n                this.calculateRemainingTime();\r\n            });\r\n    }\r\n\r\n    isRemainingTimeLessThan40Minutes(): boolean {\r\n        return this.tokenExpirationTime < 40;\r\n    }\r\n\r\n    calculateRemainingTime(): void {\r\n        const currentTime = DateTime.currentDateTime;\r\n        let expires = '';\r\n        if(this._expirationTime?.includes('UTC')) {\r\n            expires = this._expirationTime;\r\n        } else {\r\n            expires = this.formatLoginInfoDate(this._expirationTime);\r\n        }\r\n        this.tokenExpirationTime = Math.round(differenceInSeconds(expires, currentTime) / ONE_MINUTE);\r\n    }\r\n\r\n    getTokenExpirationTime(): number {\r\n        return this.tokenExpirationTime;\r\n    }\r\n\r\n    private formatLoginInfoDate(lastLogin: string | undefined): string {\r\n        if (!lastLogin) return '';\r\n\r\n        lastLogin = lastLogin.replace(/\\s[A-Z]+(?=\\s[0-9]+$)/, '');\r\n\r\n        return this.datetimeService.getFormattedDateTime(lastLogin, false);\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AlarmKeys } from './model';\r\n\r\n\r\ntype ParameterNameMapper = {\r\n    [k in AlarmKeys]: string\r\n};\r\n\r\nconst parameterNames = {\r\n    severity: 'Severity',\r\n    faultName: 'Fault name',\r\n    faultId: 'Fault ID',\r\n    appearTime: 'Appeared',\r\n    alarmingObject: 'Alarming object',\r\n    eventTypeName: 'Event type',\r\n    probableCauseName: 'Cause name',\r\n    lastUpdatedTime: 'Last updated',\r\n    alarmId: 'Alarm ID',\r\n    faultyCells: 'Number of faulty cells',\r\n    degradedCells: 'Number of degraded cells',\r\n    affectedCells: 'Number of affected cells',\r\n    clearedTime: 'Cleared time',\r\n    alarmName: 'Alarm name',\r\n    additionalInfo: 'Additional information'\r\n} as unknown as ParameterNameMapper;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UiAlarmParametersMapperService {\r\n    constructor() {\r\n    }\r\n\r\n    getUiName(abbreviationName: AlarmKeys): string | undefined {\r\n        return parameterNames[abbreviationName];\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FaultKeys } from './model';\r\n\r\ntype ParameterNameMapper = {\r\n    [k in FaultKeys]: string\r\n};\r\nconst parameterNames = {\r\n    faultName: 'Fault name',\r\n    meaning: 'Meaning',\r\n    instruction: 'Instruction'\r\n} as ParameterNameMapper;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UiFaultParametersMapperService {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    getUiName(abbreviationName: FaultKeys): string | undefined {\r\n        return parameterNames[abbreviationName];\r\n    }\r\n}\r\n","import { select, Store } from '@ngrx/store';\r\nimport { selectInformation } from '@oam/core/lib/user/core/reducers/user-reducer';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserInformationService {\r\n    information: any;\r\n\r\n    constructor(private readonly store: Store) {\r\n        this.store.pipe(select(selectInformation))\r\n            .subscribe((information) => {\r\n                this.information = information;\r\n            });\r\n    }\r\n\r\n    getRoleAndReadOnlyMode() {\r\n        const { role, readOnlyMode } = this.information;\r\n\r\n        return { role, readOnlyMode };\r\n    };\r\n\r\n    getRole() {\r\n        return this.information.role;\r\n    };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NGXLogger } from 'ngx-logger';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserOperationService {\r\n    private userOperation: boolean;\r\n    private eventType: string | undefined;\r\n    constructor(private readonly logger: NGXLogger) {\r\n        this.userOperation = true;\r\n    }\r\n\r\n    setFlag(operation: boolean, eventType?: string) {\r\n        this.userOperation = operation;\r\n        this.eventType = eventType;\r\n    }\r\n\r\n    getFlag() {\r\n        if (this.eventType) {\r\n            this.logger.log(`[UserOperation] User operated: ${this.eventType}`);\r\n        }\r\n\r\n        return this.userOperation;\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Cu, VDu } from '@oam/cu-asm-api';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class WebemStateService {\r\n    private _webemState: Cu | VDu;\r\n\r\n    getWebemState() {\r\n        return this._webemState;\r\n    }\r\n\r\n    setWebemState(_webemState: Cu | VDu) {\r\n        this._webemState = _webemState;\r\n    }\r\n}\r\n","import { EntityState } from '@ngrx/entity';\r\nimport { LoginResponse, TokenInfo } from '@oam/cu-api-gw-api';\r\nimport { LocalUserPropertie } from '@oam/cu-asm-api';\r\n\r\nexport interface UserState {\r\n    information: UserInformation;\r\n    shouldDowngradedPrivilegesDialogPopup?: boolean;\r\n    tokens: EntityState<Token>;\r\n    lastSessionToken?: string | null;\r\n    response: LoginResponse | TokenInfo,\r\n    username: string,\r\n    accountActiveStatus?: LocalUserPropertie[]\r\n}\r\n\r\nexport interface UserInformation {\r\n    passwordExpirationDate?: string;\r\n    username: string;\r\n    expires?: string;\r\n    failedLoginAttempts?: string;\r\n    lastFailedLogin?: string;\r\n    lastLogin?: string;\r\n    passwordAboutToExpireMessage?: string;\r\n    readOnlyMode: boolean,\r\n    role: string\r\n}\r\n\r\nexport interface Token {\r\n    type: string;\r\n    value: string;\r\n    username?: string;\r\n}\r\n\r\nexport enum TokenType  {\r\n    PASSWORD_CHANGE = 'temporaryPasswordChange',\r\n    BEARER = 'Bearer'\r\n}\r\n","import { Token, UserState } from '@oam/core/lib/store/user-state';\r\nimport { Action, createFeatureSelector, createReducer, createSelector, on } from '@ngrx/store';\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nimport {\r\n    clearTokens,\r\n    removeFromUserInformation, removeToken, setLastSessionToken,\r\n    setToken, setUsernameForPasswordExpired,\r\n    updateUserInformation,\r\n    updateDowngradedPrivilegesDialogPopupFlag, updateLoginResponse,\r\n    setCurrentAccountActivatedStatus\r\n} from '@oam/core/lib/actions/user.actions';\r\n\r\nexport const featureKey = 'user';\r\n\r\nexport const tokenAdapter: EntityAdapter<Token> = createEntityAdapter<Token>({\r\n    selectId: (token: Token) => token.type\r\n});\r\n\r\nexport const initialPlansState: EntityState<Token> = tokenAdapter.getInitialState();\r\n\r\nexport const initialState: UserState = {\r\n    information: {\r\n        username: '',\r\n        expires: '',\r\n        failedLoginAttempts: '',\r\n        lastFailedLogin: '',\r\n        lastLogin: '',\r\n        passwordExpirationDate: '',\r\n        readOnlyMode: false,\r\n        role: ''\r\n    },\r\n    shouldDowngradedPrivilegesDialogPopup: false,\r\n    tokens: initialPlansState,\r\n    response: {\r\n        Expires: '',\r\n        FailedLoginAttempts: '',\r\n        LastFailedLogin: '',\r\n        LastLogin: '',\r\n        PasswordExpirationDate: '',\r\n        ReadOnlyMode: false,\r\n        Role: '',\r\n        Token: '',\r\n        Type: ''\r\n    },\r\n    username: '',\r\n    accountActiveStatus: []\r\n};\r\n\r\nconst userReducer = createReducer(\r\n    initialState,\r\n    on(updateUserInformation, (state, action) => ({\r\n        ...state,\r\n        information: {\r\n            ...state.information,\r\n            ...action.payload\r\n        }\r\n    })),\r\n    on(updateLoginResponse, (state, action) => ({\r\n        ...state,\r\n        ...action.payload\r\n    })),\r\n    on(updateDowngradedPrivilegesDialogPopupFlag, (state, action) => ({\r\n        ...state,\r\n        shouldDowngradedPrivilegesDialogPopup: action.payload\r\n    })),\r\n    on(removeFromUserInformation, (state, action) => {\r\n        const updatedUserInfo = { ...state.information };\r\n        delete updatedUserInfo[action.payload];\r\n\r\n        return {\r\n            ...state,\r\n            information: updatedUserInfo\r\n        };\r\n    }),\r\n    on(setToken, (state, action) => ({\r\n        ...state,\r\n        tokens: tokenAdapter.addOne(action.payload, state.tokens)\r\n    })),\r\n    on(setLastSessionToken, (state, action) => ({\r\n        ...state,\r\n        lastSessionToken: action.authToken\r\n    })),\r\n    on(clearTokens, state => ({\r\n        ...state,\r\n        tokens: tokenAdapter.removeAll(state.tokens)\r\n    })),\r\n    on(removeToken, (state, action) => ({\r\n        ...state,\r\n        tokens: tokenAdapter.removeOne(action.payload, state.tokens)\r\n    })),\r\n    on(setUsernameForPasswordExpired, (state, action) => ({\r\n        ...state,\r\n        information: {\r\n            ...state.information,\r\n            username: action.payload\r\n        }\r\n    })),\r\n    on(setCurrentAccountActivatedStatus, (state, action) => ({\r\n        ...state,\r\n        accountActiveStatus: action.payload\r\n    }))\r\n);\r\n\r\nexport function reducer(state: UserState, action: Action) {\r\n    return userReducer(state, action);\r\n}\r\n\r\nexport const getUser = createFeatureSelector<UserState>(featureKey);\r\nconst { selectAll } = tokenAdapter.getSelectors();\r\nexport const selectTokens = createSelector(getUser, (state) => state.tokens);\r\nexport const selectDowngradedPrivilegesDialogPopupFlag = createSelector(getUser, (state) => state.shouldDowngradedPrivilegesDialogPopup);\r\nexport const selectInformation = createSelector(getUser, (state) => state.information);\r\nexport const selectUsername = createSelector(selectInformation, (state) => state.username);\r\nexport const selectUserTokenExpirationTime = createSelector(selectInformation, (state) => state.expires);\r\nexport const selectLastSessionToken = createSelector(getUser, (state) => state.lastSessionToken);\r\nexport const selectRoleAndReadOnlyMode = createSelector(\r\n    selectInformation,\r\n    ({ role, readOnlyMode }) => {\r\n        return {role, readOnlyMode};\r\n});\r\nexport const selectCurrentAccountActivatedStatus = createSelector(getUser, (state) => state.accountActiveStatus);\r\nexport const selectAllTokens = createSelector(selectTokens, selectAll);\r\nexport const selectUserRole = createSelector(selectInformation, (state) => state.role);\r\nexport const selectLonginResponse = createSelector(getUser, ({ response, username }) => {\r\n    return { response, username };\r\n});\r\n","import { isArray, isEmpty, isNil } from 'lodash';\r\nimport { EMPTY_PLACEHOLDER } from '@oam/shared/lib/modules/webem-common/core/pipes/nullable-value.pipe';\r\nimport sanitize from 'sanitize-filename';\r\nimport { loginFailed } from '@oam/auth/lib/auth/core/actions/login.actions';\r\n\r\nexport function getValueIfAvailable<T>(value: T): string {\r\n    if (isNil(value) || isEmpty(`${value}`)) return EMPTY_PLACEHOLDER;\r\n\r\n    return isArray(value) ?  value.join(', ') : `${value}`;\r\n}\r\n\r\n\r\nexport function sanitizeWithUnderScore(input: string): string {\r\n    const sanitizeName = sanitize(input, {replacement: '_'});\r\n\r\n    return sanitizeName;\r\n}\r\n\r\nexport function derToPemConverter(arrayBuffer: ArrayBuffer): any {\r\n    const LF = '\\n';\r\n    const PEM_VALID = {\r\n        BEGIN: '-----BEGIN CERTIFICATE-----',\r\n        END: '-----END CERTIFICATE-----'\r\n    };\r\n    let pemBuffer;\r\n    if (!isEmpty(arrayBuffer) || arrayBuffer.byteLength > 0) {\r\n        pemBuffer = [PEM_VALID.BEGIN, `${getBase64Buffer(arrayBuffer)}`, PEM_VALID.END].join(LF);\r\n    }\r\n\r\n    return pemBuffer;\r\n\r\n    function getBase64Buffer(arrBuffer: ArrayBuffer) {\r\n        const MAX_LINE = 64;\r\n        const outputBuffer = [];\r\n        let base64Buffer = btoa(String.fromCharCode(...new Uint8Array(arrBuffer)));\r\n        while (base64Buffer.length > MAX_LINE) {\r\n            outputBuffer.push(`${base64Buffer.substr(0, MAX_LINE)}${LF}`);\r\n            base64Buffer = base64Buffer.substr(MAX_LINE);\r\n        }\r\n        outputBuffer.push(base64Buffer);\r\n\r\n        return outputBuffer.join('');\r\n    }\r\n}\r\n","import { UiModelSettingsType, ModifyType } from '@oam/core/lib/services/model';\r\nimport { DashboardUiSettingsModel } from '@oam/dashboard/lib/core/models/dashboard-ui-settings-model';\r\nimport { IsEnum, IsDefined } from 'class-validator';\r\nimport { LayoutBase } from '@oam/core/lib/functions/layout-base';\r\nimport { Match } from '@oam/shared/lib/decorators/match.decorator';\r\n\r\nexport enum CuTypeEnum {\r\n    DusStatusSummary = 'dus-status-summary',\r\n    CellsStatusSummary = 'cells-status-summary',\r\n    X2StatusSummary = 'x2-status-summary',\r\n    XnStatusSummary = 'xn-status-summary',\r\n    NgStatusSummary = 'ng-status-summary',\r\n    NetworkSlicing = 'network-slicing',\r\n    Statistics = 'statistics',\r\n    Alarms = 'alarms',\r\n    Operations = 'operations',\r\n    VnfcStatus = 'vnfc-status',\r\n    Counters1 = 'counters1',\r\n    Counters2 = 'counters2',\r\n    Counters3 = 'counters3',\r\n    Counters4 = 'counters4'\r\n}\r\n\r\nexport const dashboardUiSettingsDefault: ModifyType<UiModelSettingsType, { layoutConfig: DashboardUiSettingsModel[] }> = {\r\n    name: 'dashboard',\r\n    layoutConfig: [\r\n        { w: 4, h: 2, y: 0, x: 0, wXl: 4, hXl: 2, yXl: 0, xXl: 0, type: CuTypeEnum.DusStatusSummary },\r\n        { w: 4, h: 2, y: 0, x: 4, wXl: 4, hXl: 2, yXl: 0, xXl: 4, type: CuTypeEnum.CellsStatusSummary },\r\n        { w: 4, h: 2, y: 0, x: 8, wXl: 4, hXl: 2, yXl: 0, xXl: 8, type: CuTypeEnum.X2StatusSummary },\r\n        { w: 4, h: 2, y: 0, x: 12, wXl: 4, hXl: 2, yXl: 0, xXl: 12, type: CuTypeEnum.Statistics },\r\n\r\n        { w: 6, h: 2, y: 2, x: 0, wXl: 6, hXl: 2, yXl: 2, xXl: 0, type: CuTypeEnum.XnStatusSummary },\r\n        { w: 5, h: 2, y: 2, x: 6, wXl: 5, hXl: 2, yXl: 2, xXl: 6, type: CuTypeEnum.NgStatusSummary },\r\n        { w: 5, h: 2, y: 2, x: 11, wXl: 5, hXl: 2, yXl: 2, xXl: 11, type: CuTypeEnum.NetworkSlicing },\r\n\r\n        { w: 4, h: 3, y: 4, x: 0, wXl: 4, hXl: 3, yXl: 4, xXl: 0, type: CuTypeEnum.Operations },\r\n        { w: 7, h: 3, y: 4, x: 4, wXl: 7, hXl: 3, yXl: 4, xXl: 4, type: CuTypeEnum.Alarms },\r\n        { w: 5, h: 3, y: 4, x: 11, wXl: 5, hXl: 3, yXl: 4, xXl: 11, type: CuTypeEnum.VnfcStatus },\r\n\r\n        { w: 4, h: 3, y: 7, x: 0, wXl: 4, hXl: 5, yXl: 7, xXl: 0, type: CuTypeEnum.Counters1 },\r\n        { w: 4, h: 3, y: 7, x: 4, wXl: 4, hXl: 5, yXl: 7, xXl: 4, type: CuTypeEnum.Counters2 },\r\n        { w: 4, h: 3, y: 7, x: 8, wXl: 4, hXl: 5, yXl: 7, xXl: 8, type: CuTypeEnum.Counters3 },\r\n        { w: 4, h: 3, y: 7, x: 12, wXl: 4, hXl: 5, yXl: 7, xXl: 12, type: CuTypeEnum.Counters4 },\r\n    ]\r\n};\r\n\r\nexport const dashboardUiSettingsVmCU: ModifyType<UiModelSettingsType, { layoutConfig: DashboardUiSettingsModel[] }> = {\r\n    name: 'dashboard',\r\n    layoutConfig: [\r\n        { w: 4, h: 2, y: 0, x: 0, wXl: 4, hXl: 2, yXl: 0, xXl: 0, type: CuTypeEnum.DusStatusSummary },\r\n        { w: 4, h: 2, y: 0, x: 4, wXl: 4, hXl: 2, yXl: 0, xXl: 4, type: CuTypeEnum.CellsStatusSummary },\r\n        { w: 4, h: 2, y: 0, x: 8, wXl: 4, hXl: 2, yXl: 0, xXl: 8, type: CuTypeEnum.X2StatusSummary },\r\n        { w: 4, h: 2, y: 0, x: 12, wXl: 4, hXl: 2, yXl: 0, xXl: 12, type: CuTypeEnum.Statistics },\r\n\r\n        { w: 8, h: 3, y: 2, x: 2, wXl: 8, hXl: 3, yXl: 2, xXl: 2, type: CuTypeEnum.Alarms },\r\n        { w: 2, h: 3, y: 2, x: 0, wXl: 2, hXl: 3, yXl: 2, xXl: 0, type: CuTypeEnum.Operations },\r\n        { w: 6, h: 3, y: 2, x: 10, wXl: 6, hXl: 3, yXl: 2, xXl: 10, type: CuTypeEnum.VnfcStatus },\r\n\r\n        { w: 4, h: 3, y: 5, x: 0, wXl: 4, hXl: 5, yXl: 5, xXl: 0, type: CuTypeEnum.Counters1 },\r\n        { w: 4, h: 3, y: 5, x: 4, wXl: 4, hXl: 5, yXl: 5, xXl: 4, type: CuTypeEnum.Counters2 },\r\n        { w: 4, h: 3, y: 5, x: 8, wXl: 4, hXl: 5, yXl: 5, xXl: 8, type: CuTypeEnum.Counters3 },\r\n        { w: 4, h: 3, y: 5, x: 12, wXl: 4, hXl: 5, yXl: 5, xXl: 12, type: CuTypeEnum.Counters4 },\r\n    ]\r\n};\r\n\r\nexport class CuLayout extends LayoutBase{\r\n    @IsEnum(CuTypeEnum)\r\n    @IsDefined()\r\n    type: CuTypeEnum;\r\n\r\n    @Match('w', dashboardUiSettingsDefault.layoutConfig)\r\n    @IsDefined()\r\n    w: number;\r\n\r\n    @Match('h', dashboardUiSettingsDefault.layoutConfig)\r\n    @IsDefined()\r\n    h: number;\r\n\r\n    constructor(layout: any) {\r\n        super(layout);\r\n    }\r\n}\r\n\r\nexport class VmCuLayout extends LayoutBase{\r\n    @IsEnum(CuTypeEnum)\r\n    @IsDefined()\r\n    type: CuTypeEnum;\r\n\r\n    @Match('w', dashboardUiSettingsVmCU.layoutConfig)\r\n    @IsDefined()\r\n    w: number;\r\n\r\n    @Match('h', dashboardUiSettingsVmCU.layoutConfig)\r\n    @IsDefined()\r\n    h: number;\r\n\r\n    constructor(layout: any) {\r\n        super(layout);\r\n    }\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Cu } from '@oam/cu-asm-api/models';\r\n\r\nenum CuActionTypes {\r\n    UnsubscribeCuWatch = '[Cu Status] UnsubscribeCuWatch',\r\n    SubscribeCuWatch = '[Cu Status] SubscribeCuWatch',\r\n    SubscribeCuError = '[Cu Status] SubscribeCuError',\r\n    CuRequest = '[Cu Status] CuRequest',\r\n    SetCu = '[Cu Status] SetCu',\r\n}\r\n\r\nexport const subscribeCuWatch = createAction(CuActionTypes.SubscribeCuWatch);\r\nexport const unsubscribeCuWatch = createAction(CuActionTypes.UnsubscribeCuWatch);\r\nexport const subscribeCuError = createAction(CuActionTypes.SubscribeCuError, props<{ error: HttpErrorResponse }>());\r\nexport const cuRequest = createAction(CuActionTypes.CuRequest);\r\nexport const setCu = createAction(CuActionTypes.SetCu, props<{ payload: Cu }>());\r\n","import { Action, createFeatureSelector, createReducer, createSelector, on, select } from '@ngrx/store';\r\nimport * as CuActions from '../actions/cu.actions';\r\nimport { Cu, NgLinkStatus, NullableOperationalState } from '@oam/cu-asm-api/models';\r\nimport { pipe } from 'rxjs';\r\nimport { skip } from 'rxjs/operators';\r\nimport { EMPTY_PLACEHOLDER } from '@oam/shared/lib/modules/webem-common/core/pipes/nullable-value.pipe';\r\n\r\nexport const featureKey = 'Cu';\r\n\r\nexport interface CuState {\r\n    cu: Cu\r\n}\r\n\r\nexport const initialState: CuState = {\r\n    cu: {\r\n        amfs: [{\r\n            name: EMPTY_PLACEHOLDER,\r\n            ipAddress: EMPTY_PLACEHOLDER,\r\n            ngLinkStatus: NgLinkStatus.Inactive\r\n        }],\r\n        btsName: EMPTY_PLACEHOLDER,\r\n        id: EMPTY_PLACEHOLDER,\r\n        ipAddresses: {\r\n            vnfIpAddress: EMPTY_PLACEHOLDER,\r\n            mPlaneIpAddress: {},\r\n            f1Interface: {\r\n                cPlaneIpAddress: [{}],\r\n                uPlaneIpAddress: [{}]\r\n            },\r\n            ngInterface: {\r\n                cPlaneIpAddress: [{}],\r\n                uPlaneIpAddress: [{}]\r\n            },\r\n            x2Interface: {\r\n                cPlaneIpAddress: [{}],\r\n                uPlaneIpAddress: [{}]\r\n            },\r\n            xnInterface: {\r\n                cPlaneIpAddress: [{}],\r\n                uPlaneIpAddress: [{}]\r\n            }\r\n        },\r\n        mcc: -1,\r\n        mnc: -1,\r\n        mncLength: -1,\r\n        mrbtsId: EMPTY_PLACEHOLDER,\r\n        name: EMPTY_PLACEHOLDER,\r\n        numberOfAlarms: -1,\r\n        operationalState: NullableOperationalState.Disabled,\r\n        serverIpAddressPrimary: EMPTY_PLACEHOLDER,\r\n        serverIpAddressSecondary: EMPTY_PLACEHOLDER,\r\n        softwareVersion: EMPTY_PLACEHOLDER,\r\n        timeZone: null,\r\n        readyForCommissioning: undefined,\r\n        type: 'SA'\r\n    }\r\n};\r\n\r\nconst cuReducer = createReducer(\r\n    initialState,\r\n    on(CuActions.setCu, (state, { payload: cu }) => ({ ...state, cu })),\r\n);\r\n\r\nexport function reducer(state: CuState | undefined, action: Action) {\r\n    return cuReducer(state, action);\r\n}\r\n\r\nexport const selectCuState = createFeatureSelector<CuState>(featureKey);\r\nexport const selectCu = createSelector(selectCuState, (state: CuState) => state.cu);\r\nexport const selectRecentCu = pipe(\r\n    select(selectCu),\r\n    skip(1)\r\n);\r\n\r\nexport const selectCuStatusInfo = createSelector(\r\n    selectCuState,\r\n    (state: CuState) => {\r\n        return {\r\n            mrbtsId: state.cu.mrbtsId,\r\n            btsName: state.cu.btsName,\r\n            operationalState: state.cu.operationalState,\r\n            softwareVersion: state.cu.softwareVersion,\r\n            timeZone: state.cu.timeZone\r\n\r\n    };\r\n});\r\n\r\nexport const selectReadyForCommission = createSelector(\r\n    selectCuState,\r\n    (state: CuState) => {\r\n        return state?.cu?.readyForCommissioning;\r\n    }\r\n);\r\n\r\nexport const selectCuAlarmsNumber = createSelector(\r\n    selectCuState,\r\n    (state: CuState) => {\r\n        return {\r\n            numberOfAlarms: state.cu.numberOfAlarms\r\n        };\r\n    });\r\n","export enum WebemRoutesPaths {\r\n    dashboard = 'dashboard',\r\n    cuStatus = 'status/cu-properties',\r\n    dusStatus = 'status/dus',\r\n    vnfcStatus = 'status/vnfc',\r\n    x2Status = 'status/x2',\r\n    xnLinksStatus = 'status/xn-links',\r\n    networkSlicing = 'status/network-slicing',\r\n    cellsStatus = 'status/cells',\r\n    cellsMapping = 'status/mapping',\r\n    ngLinkStatus = 'status/ng',\r\n    parameterEditor = 'parameter-editor',\r\n    ipsecPskConfiguration = 'ipsec-psk-configuration',\r\n    errors = 'errors',\r\n    errorsMissingMandatoryObjects = 'errors/missing-mandatory-objects',\r\n    errorsParameterErrors = 'errors/parameter-errors',\r\n    errorsObjectsQuantityErrors = 'errors/objects-quantity-errors',\r\n    errorsGlobalRelationErrors = 'errors/global-relation-errors',\r\n    errorsParameterRelationErrors = 'errors/parameter-relation-errors',\r\n    relationErrors = 'relation-errors',\r\n    parameterSearch = 'parameter-search',\r\n    compareObjects = 'compare-objects',\r\n    alarmActive = 'alarm/active',\r\n    alarmHistorical = 'alarm/historical',\r\n    performance = 'performance',\r\n    certificateOperator = 'certificate/operator',\r\n    certificateAutomatic = 'certificate/automatic',\r\n    certificateCrl = 'certificate/crl',\r\n    uamLocalUserAccount = 'uam/local-user-account',\r\n    uamServiceAccountManagement = 'uam/service-account-management',\r\n    uamSessions = 'uam/sessions',\r\n    diagnosticUplane = 'diagnostic/uplane',\r\n    diagnosticCplane = 'diagnostic/cplane',\r\n    diagnosticSnapshot = 'diagnostic/snapshot',\r\n    ipsecAssociations = 'diagnostic/ip-security-association',\r\n    ipConnectivity = 'diagnostic/diagnostic-ip-connectivity',\r\n    pmtuDiscovery = 'diagnostic/diagnostic-pmtu-discovery',\r\n    login = 'login',\r\n    ssologin = 'ssologin',\r\n    passwordExpired = 'password-expired',\r\n    uiSettings = 'app-settings/layout',\r\n    passwordSettings= 'app-settings/password',\r\n    splitView = 'split-view',\r\n    pageNotFound = 'page-not-found',\r\n    faultToggling = 'alarm/fault-toggling'\r\n}\r\n","<button pButton *ngIf=\"detailPanelButton\"\r\n        type=\"button\"\r\n        id=\"open-detail-panel-button\"\r\n        [title]=\"detailPanelButton && detailPanelButton.title\"\r\n        class=\"details-panel-toggle-button ui-button-accent\"\r\n        [ngClass]=\"{'close-details-panel-button': detailsPanelVisible,'open-details-panel-button': !detailsPanelVisible}\"\r\n        (click)=\"toggleDetailPanelVisibility()\"\r\n        [label]=\"detailPanelButton && detailPanelButton.label\"\r\n        [icon]=\"detailPanelButton && detailPanelButton.icon\">\r\n</button>\r\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { delay, filter, map, mergeMap } from 'rxjs/operators';\r\nimport { OutletUrlPathService } from '@oam/core/lib/services/outlet-url-path.service';\r\nimport { ButtonEvent } from '@oam/cu-ui';\r\nimport { isDetailPanelVisible } from '@oam/details-panel/lib/core/selectors/detail-panel.selectors';\r\nimport {\r\n    setDetailsPanelResizingFlag,\r\n    toggleDetailsPanelVisibility\r\n} from '@oam/details-panel/lib/core/actions/detail-panel.actions';\r\nimport { SPLIT_VIEW_LOCATION } from '@oam/details-panel/lib/core/model/split-view-location.type';\r\n\r\nexport interface DetailsPanelButton {\r\n    icon: string;\r\n    label: string;\r\n    title: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'webem-details-panel-toggle-button',\r\n    templateUrl: './details-panel-toggle-button.component.html',\r\n    styleUrls: ['./details-panel-toggle-button.component.scss']\r\n})\r\nexport class DetailsPanelToggleButtonComponent implements OnInit, OnDestroy {\r\n    currentRoute: string;\r\n    topView?: string;\r\n    bottomView?: string;\r\n    detailPanelButton: DetailsPanelButton;\r\n    private readonly panelAnimationDelay = 140;\r\n    private buttonModelSub: Subscription;\r\n    private routerEventsSub: Subscription;\r\n    detailsPanelVisible: boolean;\r\n\r\n    @Input()\r\n    isOnSplitView = false;\r\n\r\n    @Output()\r\n    buttonClicked = new EventEmitter<ButtonEvent>();\r\n\r\n    constructor(private readonly store: Store,\r\n                private readonly router: Router,\r\n                private readonly actRoute: ActivatedRoute,\r\n                private readonly cd: ChangeDetectorRef,\r\n                private readonly outletService: OutletUrlPathService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isOnSplitView) {\r\n            this.subscribeToSplitViewDetailsPanelVisibilityChanges();\r\n            this.subscribeToNavigationEndRouterEvent();\r\n        } else {\r\n            this.subscribeToDetailsPanelVisibilityChanges();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.buttonModelSub.unsubscribe();\r\n        if (this.routerEventsSub) this.routerEventsSub.unsubscribe();\r\n        this.cd.detach();\r\n    }\r\n\r\n    toggleDetailPanelVisibility(): void {\r\n        this.buttonClicked.emit();\r\n\r\n        if (this.isOnSplitView) {\r\n            const splitViewRouterOutlet = this.actRoute.snapshot.outlet;\r\n\r\n            this.currentRoute = this.router.url;\r\n            this.topView = this.outletService.getOutletWebemRoutePath(this.currentRoute, SPLIT_VIEW_LOCATION.TOP);\r\n            this.bottomView = this.outletService.getOutletWebemRoutePath(this.currentRoute, SPLIT_VIEW_LOCATION.BOTTOM);\r\n\r\n            this.store.dispatch(toggleDetailsPanelVisibility(\r\n                { url: splitViewRouterOutlet === 'topView' ? this.topView : this.bottomView })\r\n            );\r\n        } else {\r\n            this.store.dispatch(toggleDetailsPanelVisibility({ url: this.router.url }));\r\n            this.store.dispatch(setDetailsPanelResizingFlag({ payload: true }));\r\n        }\r\n    }\r\n\r\n    private subscribeToDetailsPanelVisibilityChanges(): void {\r\n        this.buttonModelSub = this.store.pipe(\r\n            select(isDetailPanelVisible, { url: this.router.url }),\r\n            map(this.getButtonModel)\r\n        ).subscribe((buttonModel) => {\r\n            this.detailPanelButton = buttonModel;\r\n            this.cd.detectChanges();\r\n        });\r\n    }\r\n\r\n    private subscribeToSplitViewDetailsPanelVisibilityChanges(): void {\r\n        const splitViewRouterOutlet = this.actRoute.snapshot.outlet;\r\n\r\n        this.currentRoute = this.router.url;\r\n        this.topView = this.outletService.getOutletWebemRoutePath(this.currentRoute, SPLIT_VIEW_LOCATION.TOP);\r\n        this.bottomView = this.outletService.getOutletWebemRoutePath(this.currentRoute, SPLIT_VIEW_LOCATION.BOTTOM);\r\n\r\n        this.buttonModelSub = this.store.pipe(\r\n            select(isDetailPanelVisible, {\r\n                outlet: splitViewRouterOutlet,\r\n                topView: this.topView,\r\n                bottomView: this.bottomView\r\n            }),\r\n            delay(this.panelAnimationDelay),\r\n            map(this.getButtonModel)\r\n        ).subscribe((buttonModel) => {\r\n            this.detailPanelButton = buttonModel;\r\n            this.cd.detectChanges();\r\n        });\r\n    }\r\n\r\n    private subscribeToNavigationEndRouterEvent(): void {\r\n        this.routerEventsSub = this.router.events.pipe(\r\n            filter(event => event instanceof NavigationEnd),\r\n            mergeMap(() => {\r\n                const splitViewRouterOutlet = this.actRoute.snapshot.outlet;\r\n\r\n                this.currentRoute = this.router.url;\r\n                this.topView = this.outletService.getOutletWebemRoutePath(this.currentRoute, SPLIT_VIEW_LOCATION.TOP);\r\n                this.bottomView = this.outletService.getOutletWebemRoutePath(this.currentRoute, SPLIT_VIEW_LOCATION.BOTTOM);\r\n\r\n                return this.store.pipe(\r\n                    select(isDetailPanelVisible, {\r\n                        outlet: splitViewRouterOutlet,\r\n                        topView: this.topView,\r\n                        bottomView: this.bottomView\r\n                    }),\r\n                    delay(this.panelAnimationDelay),\r\n                    map(this.getButtonModel)\r\n                );\r\n            })\r\n        ).subscribe((buttonModel) => {\r\n            this.detailPanelButton = buttonModel;\r\n            this.cd.detectChanges();\r\n        });\r\n    }\r\n\r\n    private getButtonModel = (visible: boolean): DetailsPanelButton => {\r\n        this.detailsPanelVisible = visible;\r\n\r\n        return visible ? {\r\n            title: 'Close details panel',\r\n            label: ' ',\r\n            icon: 'mdi mdi-chevron-right'\r\n        } : {\r\n            title: 'Open details panel',\r\n            label: ' ',\r\n            icon: 'mdi mdi-format-list-bulleted',\r\n        };\r\n    };\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\n\r\nenum ActionTypes {\r\n    ToggleDetailsPanelVisibility = '[Details Panel] Toggle details panel visibility',\r\n    Resizing = '[Details Panel] Resizing panel'\r\n}\r\n\r\nexport const toggleDetailsPanelVisibility = createAction(\r\n    ActionTypes.ToggleDetailsPanelVisibility, props<{ url?: string }>()\r\n);\r\nexport const setDetailsPanelResizingFlag = createAction(\r\n    ActionTypes.Resizing, props<{ payload: boolean}>()\r\n);\r\n","export enum SPLIT_VIEW_LOCATION {\r\n    TOP = 'topView',\r\n    BOTTOM = 'bottomView',\r\n    NONE = 'none'\r\n}\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport { convertUrlIntoKey } from '../utils/detail-panel.utils';\r\nimport { toggleDetailsPanelVisibility, setDetailsPanelResizingFlag } from '../actions/detail-panel.actions';\r\n\r\nexport const DETAILS_PANEL = 'DetailsPanel';\r\n\r\nexport interface DetailsPanelState {\r\n    [key: string]: boolean;\r\n    isBeingResized: boolean;\r\n}\r\n\r\nexport const initialState: DetailsPanelState = {\r\n    isBeingResized: false\r\n};\r\n\r\nconst detailPanelReducer = createReducer(\r\n    initialState,\r\n    on(toggleDetailsPanelVisibility, (state, { url }) => {\r\n        const stateKey = convertUrlIntoKey(url);\r\n\r\n        return { ...state, [stateKey]: !state[stateKey] };\r\n    }),\r\n    on(setDetailsPanelResizingFlag, (state, { payload: isBeingResized }) => {\r\n        return { ...state, isBeingResized };\r\n    }),\r\n);\r\n\r\nexport function reducer(state: DetailsPanelState | undefined, action: Action) {\r\n    return detailPanelReducer(state, action);\r\n}\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { Data, Params } from '@angular/router';\r\nimport { RouterReducerState } from '@ngrx/router-store';\r\n\r\n\r\nexport interface MergedRoute {\r\n    url: string;\r\n    queryParams: Params;\r\n    params: Params;\r\n    data: Data;\r\n}\r\n\r\nexport const routerStateConfig = {\r\n    stateKey: 'router'\r\n};\r\n\r\nexport type MergedRouteReducerState = RouterReducerState<MergedRoute>;\r\nexport const getRouterReducerState = createFeatureSelector<MergedRouteReducerState>(routerStateConfig.stateKey);\r\n\r\nexport const getMergedRoute = createSelector(getRouterReducerState, (routerReducerState): MergedRoute | undefined => {\r\n    if (routerReducerState) return routerReducerState.state;\r\n\r\n    return;\r\n});\r\n\r\n","import { createFeatureSelector, createSelector, select } from '@ngrx/store';\r\nimport { getMergedRoute, MergedRoute } from '@oam/core/lib/selectors/routing.selectors';\r\nimport { filter, mapTo, scan } from 'rxjs/operators';\r\nimport { pipe } from 'rxjs';\r\nimport { DETAILS_PANEL, DetailsPanelState } from '@oam/details-panel/lib/core/reducers/detail-panel.reducer';\r\nimport { convertUrlIntoKey } from '@oam/details-panel/lib/core/utils/detail-panel.utils';\r\nimport { DetailPanelSplitViewData } from '@oam/details-panel/lib/core/model/detail-panel-split-view-data.interface';\r\n\r\nconst detailPanelState = createFeatureSelector<DetailsPanelState>(DETAILS_PANEL);\r\nconst splitViewOutlets = ['topView', 'bottomView'];\r\n\r\nexport const isDetailPanelVisible = createSelector(\r\n    detailPanelState,\r\n    getMergedRoute,\r\n    (state: DetailsPanelState, mergeRoute: MergedRoute, props?: DetailPanelSplitViewData) => {\r\n        if (mergeRoute && mergeRoute.url && splitViewOutlets.some(route => mergeRoute.url.includes(route))) {\r\n            const outlet = props && props.outlet ? props.outlet : undefined;\r\n            const topView = props && props.topView ? props.topView : undefined;\r\n            const bottomView = props && props.bottomView ? props.bottomView : undefined;\r\n\r\n            return state[convertUrlIntoKey(outlet === 'topView' ? topView : bottomView)];\r\n        }\r\n\r\n        if (mergeRoute && mergeRoute.url) return !!state[convertUrlIntoKey(mergeRoute.url)];\r\n\r\n        return false;\r\n    }\r\n);\r\nexport const isDetailsPanelBeingResized = createSelector(detailPanelState, state => state.isBeingResized);\r\nexport const detailsPanelFinishedResizing = pipe(\r\n    select(isDetailsPanelBeingResized),\r\n    scan<boolean, [boolean, boolean]>((acc, isBeingResized) => [acc[1], isBeingResized], [false, false]),\r\n    filter(([wasResizing, isResizing]) => wasResizing && !isResizing),\r\n    mapTo(true)\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { DetailsPanelConfig } from '@oam/details-panel/lib/core/model/details-panel-config';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DetailsPanelConfigService {\r\n    config: DetailsPanelConfig;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    getUrlsWithDetailsPanel() {\r\n        return this.config.urlsWithDetailPanel;\r\n    }\r\n\r\n\r\n}\r\n","import { camelCase } from 'lodash';\r\nimport { EMPTY_PLACEHOLDER } from '@oam/shared/lib/modules/webem-common/core/pipes/nullable-value.pipe';\r\n\r\nexport function convertUrlIntoKey(url: string | undefined): string {\r\n    return camelCase(url);\r\n}\r\n\r\nexport function filterTreeObject(filterPhrase: string, data: any) {\r\n    const value = !data.value && data.value!== 0 ? EMPTY_PLACEHOLDER : data.value;\r\n    const fullName = data.fullName || '';\r\n    const name = data.name || '';\r\n\r\n    return filterString(filterPhrase, value) || filterString(filterPhrase, name) || filterString(filterPhrase, fullName);\r\n}\r\n\r\nexport function filterString(filterPhrase: string, treeObject: string) {\r\n    treeObject = treeObject.toString().toLowerCase();\r\n    filterPhrase = filterPhrase.toString().toLowerCase();\r\n\r\n    const treeObjectLng = treeObject.length;\r\n    const filterPhraseLng = filterPhrase.length;\r\n\r\n    if (filterPhraseLng > treeObjectLng) {\r\n        return false;\r\n    }\r\n    if (filterPhraseLng === treeObjectLng) {\r\n        return filterPhrase === treeObject;\r\n    }\r\n\r\n    return treeObject.includes(filterPhrase);\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ChooseObjectMenuComponent } from './components/choose-object-menu/choose-object-menu.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\nimport { SelectButtonModule } from 'primeng/selectbutton';\r\nimport { WebemButtonModule } from '../button/button.module';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ChooseObjectMenuComponent\r\n    ],\r\n    exports: [\r\n        ChooseObjectMenuComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        SelectButtonModule,\r\n        ButtonModule,\r\n        FormsModule,\r\n        WebemButtonModule,\r\n        TooltipModule\r\n    ]\r\n})\r\nexport class ChooseObjectMenuModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport * as fromDetailsPanel from './core/reducers/detail-panel.reducer';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { DetailsPanelComponent } from './components/details-panel/details-panel.component';\r\nimport { DetailsPanelToggleButtonComponent } from './components/details-panel-toggle-button/details-panel-toggle-button.component';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { TabViewModule } from 'primeng/tabview';\r\nimport { ParametersTreeModule } from 'libs/ui-webem/src/lib/parameters-tree/parameters-tree.module';\r\nimport { ChooseObjectMenuModule } from 'libs/ui-webem/src/lib/choose-object-menu/choose-object-menu.module';\r\nimport { FilterInputModule } from 'libs/ui-webem/src/lib/filter-input/filter-input.module';\r\nimport { ParametersContentDirective } from '@oam/details-panel/lib/directives/parameters-content.directive';\r\nimport { OverviewContentDirective } from '@oam/details-panel/lib/directives/overview-content.directive';\r\nimport { SeparateContentDirective } from '@oam/details-panel/lib/directives/separate-content.directive';\r\nimport { StatusTabbedPanelComponent } from '@oam/details-panel/lib/components/status-tabbed-panel/status-tabbed-panel.component';\r\nimport { WeightFactorDetailTabContentDirective } from './directives/weight-factor-detail-tab-content.directive';\r\nimport {NgFeatureFlagModule} from '@oam/ng-feature-flag';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        DetailsPanelComponent,\r\n        DetailsPanelToggleButtonComponent,\r\n        StatusTabbedPanelComponent,\r\n        ParametersContentDirective,\r\n        OverviewContentDirective,\r\n        SeparateContentDirective,\r\n        WeightFactorDetailTabContentDirective\r\n    ],\r\n    exports: [\r\n        DetailsPanelComponent,\r\n        DetailsPanelToggleButtonComponent,\r\n        StatusTabbedPanelComponent,\r\n        ParametersContentDirective,\r\n        OverviewContentDirective,\r\n        SeparateContentDirective,\r\n        ParametersTreeModule,\r\n        ChooseObjectMenuModule,\r\n        WeightFactorDetailTabContentDirective,\r\n        FilterInputModule\r\n    ],\r\n    imports: [\r\n        NgFeatureFlagModule,\r\n        CommonModule,\r\n        ButtonModule,\r\n        StoreModule.forFeature(fromDetailsPanel.DETAILS_PANEL, fromDetailsPanel.reducer),\r\n        TabViewModule,\r\n        ParametersTreeModule,\r\n        ChooseObjectMenuModule,\r\n        FilterInputModule\r\n    ]\r\n})\r\nexport class DetailsPanelModule {\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nexport class DiagnosticContentMenuConfig {\r\n    splitTracingTabs: boolean;\r\n}\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DiagnosticContentMenuConfigService {\r\n    splitTracingTabs: boolean;\r\n\r\n    constructor(config: DiagnosticContentMenuConfig) {\r\n        if (config) this.splitTracingTabs = config.splitTracingTabs;\r\n    }\r\n\r\n    get getMenuConfig() {\r\n        return this.splitTracingTabs;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { DiagnosticContentMenuConfigService } from './diagnostic-content-menu-config.service';\r\nimport { VnfcSharedService } from '@oam/vnfc-shared/lib/vnfc-store/services/vnfc-shared.service';\r\nimport { NavigationService } from '@oam/navigation/lib/navigation/service/navigation.service';\r\nimport { NavigationSubmenuDirective } from '@oam/cu-ui/lib/submenu/components/submenu/navigation-submenu.directive';\r\n\r\n@Component({\r\n    selector: 'oam-shared-diagnostic-content-menu',\r\n    templateUrl: './diagnostic-content-menu.component.html'\r\n})\r\nexport class DiagnosticContentMenuComponent extends NavigationSubmenuDirective implements OnInit {\r\n\r\n    constructor(private readonly diagnosticContentMenuConfigService: DiagnosticContentMenuConfigService,\r\n                private readonly vnfcSharedService: VnfcSharedService, navigationService: NavigationService) {\r\n        super(navigationService);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setMenuItemsMap([\r\n            RouterLink.snapshot,\r\n            ...this.getShouldShowEntries(),\r\n            RouterLink.ipConnectivity,\r\n            RouterLink.pmtuDiscovery,\r\n            RouterLink.ipsecAssociations\r\n        ]);\r\n    }\r\n\r\n    private getShouldShowEntries() {\r\n        if (this.diagnosticContentMenuConfigService.getMenuConfig) {\r\n            return this.vnfcSharedService.isVcu() ? [RouterLink.uplane] : [RouterLink.uplane, RouterLink.cplane];\r\n        } else {\r\n            return [RouterLink.tracing, RouterLink.cplane, RouterLink.sfpMonitoring];\r\n        }\r\n    }\r\n}\r\n","<ui-webem-submenu [menuItemsMap]=\"menuItemsMap\"></ui-webem-submenu>\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { RunningTestModels } from '@oam/cu-cp-config-api';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nenum RunningTestModelsActionTypes {\r\n    StartRunningTestModelsPolling = '[Effect] Start Running Test Models Polling',\r\n    RunningTestModelsRequest = '[Effect] Running Test Models Request',\r\n    StopRunningTestModelsPolling = '[Effect] Stop Running Test Models Polling',\r\n    UpdateRunningTestModels = '[Effect] Update Running Test Models',\r\n    RunningTestModelsRequestError = '[Effect] Running Test Models Request Error',\r\n    ClearTestModels = '[Test Model] Clear Test Models'\r\n}\r\n\r\nexport const startRunningTestModelsPolling = createAction(RunningTestModelsActionTypes.StartRunningTestModelsPolling);\r\nexport const runningTestModelsRequest = createAction(RunningTestModelsActionTypes.RunningTestModelsRequest);\r\nexport const stopRunningTestModelsPolling = createAction(RunningTestModelsActionTypes.StopRunningTestModelsPolling);\r\nexport const updateRunningTestModels = createAction(RunningTestModelsActionTypes.UpdateRunningTestModels, props<{ payload: RunningTestModels }>());\r\nexport const runningTestModelsRequestError = createAction(RunningTestModelsActionTypes.RunningTestModelsRequestError, props<{ error: HttpErrorResponse }>());\r\nexport const clearTestModels = createAction(RunningTestModelsActionTypes.ClearTestModels);\r\n","/* tslint:disable */\nexport enum VDuOperationalState {\n  Initializing = 'initializing',\n  Commissioned = 'commissioned',\n  Configured = 'configured',\n  IntegratedToRan = 'integrated to RAN',\n  OnAir = 'onAir',\n  Test = 'test',\n  NotCommissioned = 'notCommissioned'\n}\n","import { Injectable } from '@angular/core';\r\nimport { LayoutsConfigService } from '@oam/layouts/lib/layouts-config.service';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { VDuOperationalState } from '@oam/cu-asm-api';\r\nimport { ModelState } from '@oam/navigation/lib/navigation/core/models/status-bar-info.interface';\r\nimport { clearTestModels } from '@oam/diagnostic-shared/lib/core/actions/running-test-models.actions';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { EMPTY_STRING } from '@oam/shared/lib/constants/common-charactors';\r\nimport { isEmpty, isEqual, isNil } from 'lodash';\r\nimport { UlTestModelResult } from '@oam/cu-cp-config-api';\r\n\r\nexport interface CumulativeResult {\r\n    receivedBits: number,\r\n    unreceivedBits: number,\r\n    defectiveBits: number,\r\n    receivedBlocks: number,\r\n    unreceivedBlocks: number,\r\n    defectiveBlocks: number\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class DiagnosticTestmodelService {\r\n\r\n    public modelState: ModelState;\r\n    private testModelOperations = {\r\n        dlOperationID: 0\r\n    };\r\n    private dlTestModelOperationResultMsgs = {};\r\n\r\n    constructor(private readonly layoutsConfigService: LayoutsConfigService,\r\n                private readonly store: Store) {\r\n        this.store.pipe(\r\n            select(this.layoutsConfigService.getStatusBarModel.selectModelState),\r\n            distinctUntilChanged(isEqual)\r\n        ).subscribe((modelState) => {\r\n            this.modelState = modelState;\r\n            if (!this.isTDSState()) this.store.dispatch(clearTestModels());\r\n        });\r\n    }\r\n\r\n    public isTDSState(): boolean {\r\n        return this.modelState.operationalState === VDuOperationalState.Test;\r\n    }\r\n\r\n    public getOperationId(testType: string): number {\r\n        return this.testModelOperations[testType];\r\n    }\r\n\r\n    public setOperationId(testType: string, value: number): void {\r\n        this.testModelOperations[testType] = value;\r\n    }\r\n\r\n    public getOperationResultMsgByOperationID(operationID: number): string {\r\n        return this.dlTestModelOperationResultMsgs[operationID] || EMPTY_STRING;\r\n    }\r\n\r\n    public setOperationResultMsgByOperationID(operationID: number, value: string): void {\r\n        this.dlTestModelOperationResultMsgs[operationID] = value;\r\n    }\r\n\r\n    public getCumulativeResult(ulTestModelResult: Array<UlTestModelResult> | undefined) {\r\n        if (!isNil(ulTestModelResult) && !isEmpty(ulTestModelResult)) {\r\n            return ulTestModelResult.reduce((cumulativeResult: CumulativeResult, currentValue: any) => {\r\n                cumulativeResult.receivedBits += currentValue.receivedBits;\r\n                cumulativeResult.unreceivedBits += currentValue.unreceivedBits;\r\n                cumulativeResult.receivedBlocks += currentValue.receivedBlocks;\r\n                cumulativeResult.unreceivedBlocks += currentValue.unreceivedBlocks;\r\n                cumulativeResult.defectiveBits += currentValue.defectiveBits;\r\n                cumulativeResult.defectiveBlocks += currentValue.defectiveBlocks;\r\n\r\n                return cumulativeResult;\r\n            }, {\r\n                receivedBits: 0,\r\n                unreceivedBits: 0,\r\n                defectiveBits: 0,\r\n                receivedBlocks: 0,\r\n                unreceivedBlocks: 0,\r\n                defectiveBlocks: 0\r\n            });\r\n        }\r\n\r\n        return {};\r\n    }\r\n}\r\n","const SEPARATOR = '/';\r\nconst WHITE_SPACE = ' ';\r\nconst COLUMN_BORDER = '  ';\r\nconst CRLF = '\\r\\n';\r\nconst TWOLINE = `${CRLF}${CRLF}`;\r\nconst TABLE_SEPARATOR = '-';\r\nconst UNDERSCORE = '_';\r\nconst HEADER_FOOTER_FENCE = '=';\r\nconst EMPTY_STRING = '';\r\n\r\nexport {\r\n    SEPARATOR,\r\n    WHITE_SPACE,\r\n    COLUMN_BORDER,\r\n    CRLF,\r\n    TWOLINE,\r\n    TABLE_SEPARATOR,\r\n    UNDERSCORE,\r\n    HEADER_FOOTER_FENCE,\r\n    EMPTY_STRING\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { TestModelsService } from '@oam/cu-cp-config-api/services';\r\nimport { PollingService } from '@oam/core/lib/services';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, filter, map, mergeMap, takeUntil } from 'rxjs/operators';\r\nimport { asyncScheduler, of } from 'rxjs';\r\nimport {\r\n    runningTestModelsRequest, runningTestModelsRequestError,\r\n    startRunningTestModelsPolling, stopRunningTestModelsPolling, updateRunningTestModels\r\n} from '@oam/diagnostic-shared/lib/core/actions/running-test-models.actions';\r\nimport { DiagnosticTestmodelService } from '@oam/diagnostic-shared/lib/services/diagnostic-testmodel.service';\r\n\r\n@Injectable()\r\nexport class RunningTestModelsEffects {\r\n    constructor(\r\n        private readonly pollingService: PollingService,\r\n        private readonly actions$: Actions,\r\n        private readonly testModelsService: TestModelsService,\r\n        private readonly diagnosticTestmodelService: DiagnosticTestmodelService\r\n    ) {\r\n    }\r\n\r\n    startRunningTestModelsPolling$ = createEffect(() => ({ scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(startRunningTestModelsPolling),\r\n            mergeMap(() => this.pollingService.getTimer(scheduler).pipe(\r\n                takeUntil(this.stopRunningTestModelsPolling$),\r\n                map(() => runningTestModelsRequest())\r\n            ))\r\n        )\r\n    );\r\n\r\n    stopRunningTestModelsPolling$ = createEffect(() =>\r\n            this.actions$.pipe(\r\n                ofType(stopRunningTestModelsPolling)\r\n            ),\r\n        { dispatch: false }\r\n    );\r\n\r\n    runningTestModelsRequest$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(runningTestModelsRequest),\r\n            filter(() => this.diagnosticTestmodelService.isTDSState()),\r\n            mergeMap(() => this.testModelsService.testModelsRunningTestModelsGet().pipe(\r\n                mergeMap(runningTestModels => ([\r\n                    updateRunningTestModels({ payload: runningTestModels })\r\n                ])),\r\n                catchError(err => of(runningTestModelsRequestError(err)))\r\n            ))\r\n        )\r\n    );\r\n}\r\n","import { Action, createFeatureSelector, createReducer, createSelector, on } from '@ngrx/store';\r\nimport { RunningTestModels, RunningTestModel } from '@oam/cu-cp-config-api';\r\nimport {\r\n    clearTestModels,\r\n    updateRunningTestModels\r\n} from '@oam/diagnostic-shared/lib/core/actions/running-test-models.actions';\r\nimport { unionWith, isEmpty, isEqual } from 'lodash';\r\nimport { logoutSuccessful } from '@oam/auth/lib/auth/core/actions/logout.actions';\r\n\r\nexport const featureKey = 'RunningTestModels';\r\n\r\nexport interface RunningTestModelsState {\r\n    runningTestModels: RunningTestModels,\r\n    testModels: Array<RunningAndStopTestModel>\r\n}\r\n\r\nexport interface RunningAndStopTestModel extends RunningTestModel {\r\n    isStopped?: boolean\r\n}\r\n\r\nexport const initialState: RunningTestModelsState = {\r\n    runningTestModels: [],\r\n    testModels: []\r\n};\r\n\r\nfunction updateTestModels(state: RunningTestModelsState, runningTestModels: RunningTestModels) {\r\n    if (isEmpty(state.testModels)) return runningTestModels;\r\n    if (isEqual(state.runningTestModels, runningTestModels)) return state.testModels;\r\n\r\n    const testModels = state.testModels.map(testModel => {\r\n        if (!testModel.isStopped && !runningTestModels.find(item => isEqualTestModel(testModel, item))) {\r\n\r\n            return {...testModel, isStopped: true};\r\n        }\r\n\r\n        return testModel;\r\n    });\r\n\r\n    return unionWith(testModels, runningTestModels, isRunningEqualTestModel);\r\n}\r\n\r\nfunction isRunningEqualTestModel(testModel: RunningAndStopTestModel, newTestModel: RunningAndStopTestModel) {\r\n    return !testModel.isStopped && !newTestModel.isStopped && isEqualTestModel(testModel, newTestModel);\r\n}\r\n\r\nfunction isEqualTestModel(testModel: RunningAndStopTestModel, newTestModel: RunningAndStopTestModel) {\r\n    return testModel.nrCellId === newTestModel.nrCellId && testModel.testType === newTestModel.testType;\r\n}\r\n\r\nconst runningTestModelsReducer = createReducer(\r\n    initialState,\r\n    on(updateRunningTestModels, (state, { payload: runningTestModels }) => {\r\n        return {\r\n            runningTestModels,\r\n            testModels: updateTestModels(state, runningTestModels)\r\n        };\r\n    }),\r\n    on(logoutSuccessful, () => initialState),\r\n    on(clearTestModels, () => initialState)\r\n);\r\n\r\nexport function reducer(state: RunningTestModelsState | undefined, action: Action) {\r\n    return runningTestModelsReducer(state, action);\r\n}\r\n\r\nexport const diagnosticTestModelsStore = createFeatureSelector<RunningTestModelsState>(featureKey);\r\nexport const getRunningTestModelsState = createSelector(diagnosticTestModelsStore,\r\n    (state) => state.testModels);\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DiagnosticContentMenuComponent } from './components/diagnostic-content-menu/diagnostic-content-menu.component';\r\nimport { DetailsSectionModule, SubmenuModule, NoSelectedMessageModule, WebemButtonModule } from '@oam/cu-ui';\r\nimport { TestmodelContentMenuComponent } from './components/testmodel-content-menu/testmodel-content-menu.component';\r\nimport { RunningTestModelsEffects } from '@oam/diagnostic-shared/lib/core/effects/running-test-models.effects';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport * as fromRunningTestModelsReducer from '@oam/diagnostic-shared/lib/core/reducers/running-test-models.reducer';\r\nimport { TestmodelPanelDisableMessageComponent } from './components/testmodel-panel-disable-message/testmodel-panel-disable-message.component';\r\nimport { TestModelDetailsComponent } from './components/test-model-details/test-model-details.component';\r\nimport { DiagnosticTestTableComponent } from '@oam/diagnostic-shared/lib/components/diagnostic-test-table/diagnostic-test-table.component';\r\nimport { DetailsPanelModule } from '@oam/details-panel';\r\nimport { TableModule } from 'primeng/table';\r\nimport { WebemCommonModule } from '@oam/shared/lib/modules/webem-common';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        SubmenuModule,\r\n        StoreModule.forFeature(fromRunningTestModelsReducer.featureKey, fromRunningTestModelsReducer.reducer),\r\n        EffectsModule.forFeature([\r\n            RunningTestModelsEffects\r\n        ]),\r\n        DetailsPanelModule,\r\n        DetailsSectionModule,\r\n        NoSelectedMessageModule,\r\n        TableModule,\r\n        WebemButtonModule,\r\n        WebemCommonModule\r\n    ],\r\n    declarations: [\r\n        DiagnosticContentMenuComponent,\r\n        TestmodelContentMenuComponent,\r\n        TestmodelPanelDisableMessageComponent,\r\n        TestModelDetailsComponent,\r\n        DiagnosticTestTableComponent\r\n    ],\r\n    exports: [\r\n        DiagnosticContentMenuComponent,\r\n        TestmodelContentMenuComponent,\r\n        TestmodelPanelDisableMessageComponent,\r\n        DiagnosticTestTableComponent\r\n    ]\r\n})\r\nexport class DiagnosticSharedModule {\r\n}\r\n","export class SnapshotFetchFilesConfig {\r\n    SNAPSHOT_NAME_PARAMETERS: string[];\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { ErrorMessage, FilesDataResponse, SNAPSHOT_LOCATION } from '../models';\r\nimport { SNAPSHOT_COVERAGE } from '@oam/diagnostic-snapshot/core/models/snapshot-coverage-type';\r\n\r\nexport const startCheckingSnapshotServerStatus = createAction('[User] [Snapshot] Start checking Snapshot server status');\r\nexport const stopCheckingSnapshotServerStatus = createAction('[User] [Snapshot] Stop checking Snapshot server status');\r\nexport const isSnapshotIdle = createAction('[Snapshot] Collecting Snapshot is available');\r\nexport const collectingSnapshotIsUnavailable = createAction('[Snapshot] Collecting Snapshot is unavailable');\r\nexport const startCollectingLocalSnapshot = createAction('[User] [Snapshot] Start collecting local Snapshot');\r\nexport const startCollectingRemoteSnapshot = createAction('[User] [Snapshot] Start collecting remote Snapshot');\r\nexport const setSnapshotServerStatus = createAction('[Snapshot] Set Snapshot Server status',\r\n    props<{ snapshotServerStatus: string }>()\r\n);\r\nexport const startCancellingCollectionLocalSnapshot = createAction('[User] [Snapshot] Cancelling local Snapshot operation triggered');\r\nexport const startCancellingCollectionRemoteSnapshot = createAction('[User] [Snapshot] Cancelling remote Snapshot operation triggered');\r\n\r\nexport const collectingLocalSnapshotIsSucceeded = createAction(\r\n    '[User] [Snapshot] Collecting local snapshot is succeeded',\r\n    props<{ operationId: string }>());\r\nexport const collectingRemoteSnapshotIsSucceeded = createAction(\r\n    '[User] [Snapshot] Collecting remote snapshot is succeeded',\r\n    props<{ operationId: string, files?: FilesDataResponse[] }>()\r\n);\r\nexport const cleanSnapshotStateIfCollectingIsNotOngoing = createAction('[Snapshot] Clean Snapshot state if collecting is not ongoing');\r\nexport const setSnapshotStatusToCanceled = createAction('[User] [Snapshot] Set Snapshot status to canceled');\r\nexport const saveFilesLocal = createAction('[User] [Snapshot] save snapshot in local');\r\nexport const startDownloadingFiles = createAction(\r\n    '[User] [Snapshot] Downloading Files In Time',\r\n    props<{ operationId: string, files: FilesDataResponse[] }>()\r\n);\r\nexport const downloadFilesCollectingSuccess = createAction(\r\n    '[User] [Snapshot] download ZIP files when collected file successful',\r\n    props<{ fileStates?: string }>()\r\n);\r\nexport const updateDownloadFileStatus = createAction(\r\n    '[User] [Snapshot] update download file status',\r\n    props<{ fileId: string, fileStates: string }>()\r\n);\r\nexport const startSavingFiles = createAction('[User] [Snapshot] Start saving files');\r\nexport const downloadingFilesCompleted = createAction(\r\n    '[User] [Snapshot] Downloading plan completed',\r\n    props<{ operationId: string }>()\r\n);\r\nexport const cleanSnapshotState = createAction('[User] [Snapshot] Clean snapshot state');\r\nexport const cleanCollectSnapshotResultState = createAction('[User] [Snapshot] Clean collect snapshot state');\r\nexport const collectingLocalSnapshotIsFailed = createAction(\r\n    '[User] [Snapshot] Collecting local snapshot is failed',\r\n    props<{ error: ErrorMessage, operationId?: string }>()\r\n);\r\nexport const collectingRemoteSnapshotIsFailed = createAction(\r\n    '[User] [Snapshot] Collecting remote snapshot is failed',\r\n    props<{ error: ErrorMessage, operationId?: string }>()\r\n);\r\nexport const addCollectedFilesToStore = createAction(\r\n    '[User] [Snapshot] Add collected files to store',\r\n    props<{ files: FilesDataResponse[] }>()\r\n);\r\nexport const collectingLocalSnapshotOngoing = createAction(\r\n    '[User] [Snapshot] Collecting local snapshot ongoing',\r\n    props<{operationId: string, files: FilesDataResponse[], startedAt: number}>()\r\n);\r\nexport const startCollectingLocalSnapshotHearbeat = createAction(\r\n    '[User] [Snapshot] Start collecting local snapshot heartbeat',\r\n    props<{ operationId: string, startHeartBeatStatus: boolean }>()\r\n);\r\n\r\nexport const collectingRemoteSnapshotOngoing = createAction(\r\n    '[User] [Snapshot] Collecting remote snapshot ongoing',\r\n    props<{operationId: string, startedAt: number}>()\r\n);\r\nexport const setSnapshotFormValues = createAction(\r\n    '[Snapshot] Set snapshot form values',\r\n    props<{location: SNAPSHOT_LOCATION, filterRegx: string, reason: string, coverage: SNAPSHOT_COVERAGE}>()\r\n);\r\n\r\nexport const cleanUpSnapshotOnServerFinished = createAction(\r\n    '[Snapshot] Clean up snapshot on server finished'\r\n);\r\n\r\nexport const checkSnapshotServerStatusError = createAction(\r\n    '[Snapshot] Checking snapshot availability failed',\r\n    props<{ error: ErrorMessage }>()\r\n);\r\n\r\nexport const cancellingCollectionIsOngoing = createAction('[User] [Snapshot] Cancelling collection snapshot started');\r\n\r\nexport const cancellingSnapshotIsFailed = createAction(\r\n    '[User] [Snapshot] Cancelling] Snapshot failed',\r\n    props<{ error: ErrorMessage, operationId?: string }>()\r\n);\r\n\r\nexport const cleanSnapshotServerStatus = createAction('[User] [Snapshot] Clean snapshot server status');\r\n\r\nexport const updateSnapshotCancelState = createAction('[User] [Snapshot] Clean snapshot cancelling state');\r\n\r\nexport const deleteLocalSnapshotAfterSuccess = createAction(\r\n    '[User] [Snapshot] Delete local snapshot after success',\r\n    props<{ operationId: string }>()\r\n);\r\n\r\nexport const stopGettingRemoteSnapshotNeedToBeTransferred = createAction('[User] [Snapshot] Stop getting remote snapshot need to be transferred');\r\n\r\nexport const startGettingRemoteSnapshotNeedToBeTransferred = createAction('[User] [Snapshot] Start getting remote snapshot need to be transferred');\r\n\r\nexport const setRemoteSnapshotFileNameAndOperationId = createAction(\r\n    '[User] [Snapshot] Set remote snapshot file name',\r\n    props<{ remoteSnapshotFileName: string | undefined, operationId: string | undefined}>()\r\n);\r\n\r\nexport const startGettingRemoteSnapshotError = createAction(\r\n    '[User] [Snapshot] Start getting remote snapshot error',\r\n    props<{ error: ErrorMessage, operationId?: string }>()\r\n);\r\n\r\nexport const startTransferSnapshotToNMS = createAction('[User] [Snapshot] Start transfer snapshot to nms');\r\n\r\nexport const transferSnapshotFailed = createAction(\r\n    '[User] [Snapshot] Transfer snapshot failed',\r\n    props<{ error: ErrorMessage }>()\r\n);\r\n\r\nexport const transferSnapshotToNMSIsFinished = createAction('[User] [Snapshot] Transfer snapshot to nms is finished');\r\n\r\nexport const cleanTransferSnapshotState = createAction('[User] [Snapshot] Clean transfer snapshot state');\r\n\r\nexport const cleanTransferSnapshotResultState = createAction('[User] [Snapshot] Clean transfer snapshot result state');\r\n\r\nexport const cleanTransferStateIfTransferIsNotOngoing = createAction('[User] [Snapshot] Clean transfer state if transfer is not ongoing');\r\n\r\nexport const cleanServerStatusIfOperationIsNotOngoing = createAction('[User] [Snapshot] Clean server status if Operation is not ongoing');\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport { SnapshotServerStatus } from '../models/snapshot-server-status';\r\nimport {\r\n    setSnapshotServerStatus,\r\n    checkSnapshotServerStatusError,\r\n    cleanSnapshotServerStatus\r\n} from '../actions/snapshot.action';\r\n\r\nexport const collectingSnapshotServerStatusFeatureKey = 'collectingSnapshotServerStatus';\r\nexport interface ICollectingSnapshotServerStatus {\r\n    snapshotServerStatus?: SnapshotServerStatus | 'server error' | string;\r\n}\r\nexport const initialState: ICollectingSnapshotServerStatus = {snapshotServerStatus: undefined};\r\n\r\nexport const collectingSnapshotServerStatusReducer = createReducer(initialState,\r\n    on(setSnapshotServerStatus, (state, { snapshotServerStatus } ) => ({...state, snapshotServerStatus})),\r\n    on(checkSnapshotServerStatusError, (state) => ({...state, snapshotServerStatus: 'server error'})),\r\n    on(cleanSnapshotServerStatus, () => initialState),\r\n);\r\n\r\nexport function reducer(state: ICollectingSnapshotServerStatus | undefined, action: Action) {\r\n    return collectingSnapshotServerStatusReducer(state, action);\r\n}\r\n","export enum SNAPSHOT_LOCATION {\r\n    LOCAL = 'local',\r\n    REMOTE = 'remote'\r\n}\r\n","export enum SNAPSHOT_COLLECTING_STATUS {\r\n    COLLECTING_FILES_START= 'COLLECTING_FILES_START',\r\n    COLLECTING_FILES_ONGOING = 'COLLECTING_FILES_ONGOING',\r\n    COLLECTING_FILES_SUCCEEDED = 'COLLECTING_FILES_SUCCEEDED',\r\n    DOWNLOADING_FILES_ONGOING = 'DOWNLOADING_FILES_ONGOING',\r\n    PREPARING_FILES_ONGOING = 'PREPARING_FILES_ONGOING',\r\n    COLLECTING_SNAPSHOT_COMPLETE = 'COLLECTING_SNAPSHOT_COMPLETE',\r\n    COLLECTING_SNAPSHOT_FAILED = 'COLLECTING_SNAPSHOT_FAILED',\r\n    CANCELLING = 'CANCELLING',\r\n    CANCELING_SUCCEEDED = 'CANCELING_SUCCEEDED',\r\n}\r\n\r\nexport enum START_CANCELING_STATUS {\r\n    START_CANCELING = 'START_CANCELING',\r\n    CANCELING_FAILED = 'CANCELING_FAILED'\r\n}\r\n\r\nexport enum TRANSFER_SNAPSHOT_STATUS {\r\n    TRANSFER_SNAPSHOT_ONGOING = 'TRANSFER_SNAPSHOT_ONGOING',\r\n    TRANSFER_SNAPSHOT_SUCCEEDED = 'TRANSFER_SNAPSHOT_SUCCEEDED',\r\n    TRANSFER_SNAPSHOT_FAILED = 'TRANSFER_SNAPSHOT_FAILED'\r\n}\r\n\r\nexport const COLLECTING_SNAPSHOT_IS_ONGOING = [\r\n    SNAPSHOT_COLLECTING_STATUS.COLLECTING_FILES_ONGOING,\r\n    SNAPSHOT_COLLECTING_STATUS.COLLECTING_FILES_SUCCEEDED,\r\n    SNAPSHOT_COLLECTING_STATUS.DOWNLOADING_FILES_ONGOING,\r\n    SNAPSHOT_COLLECTING_STATUS.PREPARING_FILES_ONGOING\r\n];\r\n\r\nexport const CANCEL_IS_ONGOING = [\r\n    SNAPSHOT_COLLECTING_STATUS.CANCELLING,\r\n    START_CANCELING_STATUS.START_CANCELING\r\n];\r\n\r\nexport const MAP_TO_UI_COLLECTING_STATUS_DISPLAY = {\r\n    [SNAPSHOT_COLLECTING_STATUS.COLLECTING_FILES_ONGOING]: 'Collecting files.',\r\n    [SNAPSHOT_COLLECTING_STATUS.DOWNLOADING_FILES_ONGOING]: 'Downloading files.',\r\n    [SNAPSHOT_COLLECTING_STATUS.COLLECTING_FILES_SUCCEEDED]: 'Downloading files.',\r\n    [SNAPSHOT_COLLECTING_STATUS.PREPARING_FILES_ONGOING]: 'Preparing files.',\r\n    [SNAPSHOT_COLLECTING_STATUS.COLLECTING_SNAPSHOT_COMPLETE]: 'Snapshot collection succeeded.',\r\n};\r\n\r\nexport const MAP_TO_UI_TRANSFER_STATUS_DISPLAY = {\r\n    [TRANSFER_SNAPSHOT_STATUS.TRANSFER_SNAPSHOT_ONGOING]: 'Transferring snapshot.',\r\n    [TRANSFER_SNAPSHOT_STATUS.TRANSFER_SNAPSHOT_FAILED]: 'Snapshot transfer failed',\r\n    [TRANSFER_SNAPSHOT_STATUS.TRANSFER_SNAPSHOT_SUCCEEDED]: 'Snapshot transfer succeeded.'\r\n};\r\n","export const TRANSFER_SNAPSHOT_BTN_TITLE = {\r\n    DEFAULT: 'Transfer Snapshot',\r\n    NOT_EXISTS_SNAPSHOT_TRANSFER_TO_NMS: 'No existing snapshot file in vDU',\r\n    TRANSFER_IS_ONGOING: 'Transferring snapshot'\r\n};\r\n\r\nexport const COLLECT_SNAPSHOT_BTN_TITLE = {\r\n    DEFAULT: 'Collect Snapshot',\r\n    CANCELLING: 'Cancelling snapshot collection',\r\n    ONGOING: 'Collecting snapshot',\r\n};\r\n\r\nexport const SNAPSHOT_OPERATION_IS_NOT_AVAILABILITY = 'Operation is already ongoing';\r\n\r\nexport const SERVER_CONNECTION_FAILURE = 'Server connection failure';\r\n","export enum SNAPSHOT_COVERAGE {\r\n    FULL = 'full',\r\n    MINOR = 'minor'\r\n}\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport * as _ from 'lodash';\r\nimport {\r\n    addCollectedFilesToStore,\r\n    cancellingSnapshotIsFailed,\r\n    updateSnapshotCancelState,\r\n    cleanSnapshotState,\r\n    collectingLocalSnapshotIsFailed,\r\n    collectingLocalSnapshotIsSucceeded,\r\n    collectingLocalSnapshotOngoing,\r\n    collectingRemoteSnapshotIsFailed,\r\n    collectingRemoteSnapshotIsSucceeded,\r\n    collectingRemoteSnapshotOngoing,\r\n    setSnapshotFormValues,\r\n    setSnapshotStatusToCanceled,\r\n    cancellingCollectionIsOngoing,\r\n    startCollectingLocalSnapshot,\r\n    startCollectingRemoteSnapshot,\r\n    startDownloadingFiles,\r\n    startSavingFiles,\r\n    startCancellingCollectionLocalSnapshot,\r\n    startCancellingCollectionRemoteSnapshot,\r\n    downloadingFilesCompleted,\r\n    cleanCollectSnapshotResultState,\r\n    startTransferSnapshotToNMS,\r\n    updateDownloadFileStatus,\r\n    startCollectingLocalSnapshotHearbeat\r\n} from '../actions/snapshot.action';\r\nimport { ICollectingSnapshotState, SNAPSHOT_LOCATION } from '../models';\r\nimport { SNAPSHOT_COVERAGE } from '@oam/diagnostic-snapshot/core/models/snapshot-coverage-type';\r\nimport {\r\n    START_CANCELING_STATUS,\r\n    SNAPSHOT_COLLECTING_STATUS\r\n} from '@oam/diagnostic-snapshot/core/models/snapshot-progress-status';\r\n\r\nexport const collectingSnapshotFeatureKey = 'collectingSnapshot';\r\n\r\nexport const initialState: ICollectingSnapshotState = {\r\n    location: SNAPSHOT_LOCATION.LOCAL,\r\n    filterRegx: '',\r\n    reason: '',\r\n    coverage: SNAPSHOT_COVERAGE.FULL,\r\n    operationId: '',\r\n    files: [],\r\n    collectStatus: undefined,\r\n    startCancelingStatus: undefined,\r\n    startHeartBeatStatus: false\r\n};\r\n\r\nexport const collectingSnapshotReducer = createReducer(\r\n    initialState,\r\n    on(cleanSnapshotState, () => {\r\n        return { ...initialState };\r\n    }),\r\n    on(setSnapshotStatusToCanceled, (state) => {\r\n        return {\r\n            ...state,\r\n            collectStatus: SNAPSHOT_COLLECTING_STATUS.CANCELING_SUCCEEDED,\r\n            startHeartBeatStatus: false\r\n        };\r\n    }),\r\n    on(startCancellingCollectionLocalSnapshot, startCancellingCollectionRemoteSnapshot, (state) => {\r\n        return {\r\n            ...state,\r\n            startCancelingStatus: START_CANCELING_STATUS.START_CANCELING,\r\n        };\r\n    }),\r\n    on(cancellingCollectionIsOngoing, (state) => {\r\n        return {\r\n            ...state,\r\n            collectStatus: SNAPSHOT_COLLECTING_STATUS.CANCELLING,\r\n            startCancelingStatus: undefined,\r\n            files: []\r\n        };\r\n    }),\r\n    on(collectingLocalSnapshotIsSucceeded, (state) => {\r\n        return { ...state, collectStatus: SNAPSHOT_COLLECTING_STATUS.COLLECTING_FILES_SUCCEEDED };\r\n    }),\r\n    on(cancellingSnapshotIsFailed, (state) => {\r\n        return {\r\n            ...state,\r\n            startCancelingStatus: START_CANCELING_STATUS.CANCELING_FAILED\r\n        };\r\n    }),\r\n    on(collectingLocalSnapshotOngoing, (state, { operationId, files, startedAt }) => {\r\n        return {\r\n            ...state,\r\n            operationId,\r\n            files,\r\n            startedAt,\r\n            collectStatus: SNAPSHOT_COLLECTING_STATUS.COLLECTING_FILES_ONGOING,\r\n        };\r\n    }),\r\n    on(collectingRemoteSnapshotOngoing, (state, { operationId, startedAt }) => {\r\n        return {\r\n            ...state,\r\n            operationId,\r\n            startedAt,\r\n            collectStatus: SNAPSHOT_COLLECTING_STATUS.COLLECTING_FILES_ONGOING,\r\n        };\r\n    }),\r\n    on(startCollectingRemoteSnapshot, startCollectingLocalSnapshot, (state) => {\r\n        return {\r\n            ...state,\r\n            collectStatus: SNAPSHOT_COLLECTING_STATUS.COLLECTING_FILES_START,\r\n            startCancelingStatus: undefined,\r\n            errorMessage: undefined,\r\n            startedAt: undefined\r\n        };\r\n    }),\r\n    on(downloadingFilesCompleted, collectingRemoteSnapshotIsSucceeded, (state) => {\r\n        return {\r\n            ...state,\r\n            collectStatus: SNAPSHOT_COLLECTING_STATUS.COLLECTING_SNAPSHOT_COMPLETE,\r\n            finishedAt: Date.now(),\r\n            startCancelingStatus: undefined\r\n        };\r\n    }),\r\n    on(collectingLocalSnapshotIsFailed, collectingRemoteSnapshotIsFailed, (state, { error }) => {\r\n        return {\r\n            ...state,\r\n            collectStatus: SNAPSHOT_COLLECTING_STATUS.COLLECTING_SNAPSHOT_FAILED,\r\n            startCancelingStatus: undefined,\r\n            errorMessage: error,\r\n            finishedAt: state.finishedAt || Date.now(),\r\n            startHeartBeatStatus: false\r\n        };\r\n    }),\r\n    on(startDownloadingFiles, (state) => {\r\n        return { ...state, collectStatus: SNAPSHOT_COLLECTING_STATUS.DOWNLOADING_FILES_ONGOING };\r\n    }),\r\n    on(startCollectingLocalSnapshotHearbeat, (state, { startHeartBeatStatus}) => {\r\n        return { ...state,\r\n            startHeartBeatStatus: startHeartBeatStatus };\r\n    }),\r\n    on(addCollectedFilesToStore, (state, { files }) => {\r\n        const fileNameInt = _.keyBy(state.files, 'fileId');\r\n        const updateFiles = files.map((file) => {\r\n            return {\r\n                fileId: file.fileId,\r\n                fileStates: !fileNameInt[file.fileId] ? 'initial' : fileNameInt[file.fileId].fileStates,\r\n                sizeInByte: file.sizeInByte\r\n            };\r\n        });\r\n\r\n        return { ...state,\r\n            files: updateFiles };\r\n    }),\r\n    on(updateDownloadFileStatus, (state, { fileId, fileStates } ) => {\r\n        return { ...state,\r\n            files: state.files.map((file) => fileId === file.fileId ? {...file, fileStates: fileStates }\r\n                : file\r\n            )\r\n        };\r\n    }),\r\n    on(startSavingFiles, (state) => {\r\n        return { ...state, collectStatus: SNAPSHOT_COLLECTING_STATUS.PREPARING_FILES_ONGOING };\r\n    }),\r\n    on(setSnapshotFormValues, (state, { reason, coverage, filterRegx, location }) => {\r\n        return { ...state, reason, coverage, filterRegx, location };\r\n    }),\r\n    on(updateSnapshotCancelState, (state) => {\r\n        return {\r\n            ...state,\r\n            startCancelingStatus: state.startCancelingStatus === START_CANCELING_STATUS.START_CANCELING ?\r\n                state.startCancelingStatus : undefined\r\n        };\r\n    }),\r\n    on(cleanCollectSnapshotResultState, startTransferSnapshotToNMS, (state) => {\r\n        return {\r\n            ...state,\r\n            operationId: '',\r\n            files: [],\r\n            collectStatus: undefined,\r\n            startCancelingStatus: undefined\r\n        };\r\n    }),\r\n);\r\n\r\nexport function reducer(state: ICollectingSnapshotState | undefined, action: Action) {\r\n    return collectingSnapshotReducer(state, action);\r\n}\r\n","import {\r\n    cleanTransferSnapshotResultState,\r\n    cleanTransferSnapshotState,\r\n    setRemoteSnapshotFileNameAndOperationId,\r\n    startCollectingLocalSnapshot,\r\n    startCollectingRemoteSnapshot,\r\n    startGettingRemoteSnapshotError,\r\n    startTransferSnapshotToNMS,\r\n    transferSnapshotFailed,\r\n    transferSnapshotToNMSIsFinished\r\n} from '@oam/diagnostic-snapshot/core/actions/snapshot.action';\r\nimport { Action, createReducer, on } from '@ngrx/store';\r\nimport { ITransferSnapshotToNMS, TRANSFER_SNAPSHOT_STATUS } from '@oam/diagnostic-snapshot/core/models';\r\n\r\nexport const transferSnapshotFeatureKey = 'transferSnapshotToNMS';\r\n\r\nexport const initialState: ITransferSnapshotToNMS = {\r\n    remoteSnapshotFileName: undefined,\r\n    operationId: undefined,\r\n    transferStatus: undefined\r\n};\r\n\r\nexport const transferSnapshotToNMSReducer = createReducer(\r\n    initialState,\r\n    on(setRemoteSnapshotFileNameAndOperationId, (state, { remoteSnapshotFileName, operationId }) => {\r\n        return {\r\n            ...state,\r\n            remoteSnapshotFileName,\r\n            operationId\r\n        };\r\n    }),\r\n    on(startGettingRemoteSnapshotError, (state) => {\r\n        return {\r\n            ...state,\r\n            remoteSnapshotFileName: undefined\r\n        };\r\n    }),\r\n    on(transferSnapshotFailed, (state, { error }) => {\r\n        return {\r\n            ...state,\r\n            transferStatus: TRANSFER_SNAPSHOT_STATUS.TRANSFER_SNAPSHOT_FAILED,\r\n            errorMessage: error,\r\n            finishedAt: Date.now()\r\n        };\r\n    }),\r\n    on(startTransferSnapshotToNMS, (state) => {\r\n        return {\r\n            ...state,\r\n            transferStatus: TRANSFER_SNAPSHOT_STATUS.TRANSFER_SNAPSHOT_ONGOING,\r\n            startedAt: Date.now(),\r\n            errorMessage: undefined\r\n        };\r\n    }),\r\n    on(transferSnapshotToNMSIsFinished, (state) => {\r\n        return {\r\n            ...state,\r\n            transferStatus: TRANSFER_SNAPSHOT_STATUS.TRANSFER_SNAPSHOT_SUCCEEDED,\r\n            finishedAt: Date.now()\r\n        };\r\n    }),\r\n    on(cleanTransferSnapshotResultState, startCollectingRemoteSnapshot, startCollectingLocalSnapshot, (state) => {\r\n        return {\r\n            ...state,\r\n            transferStatus: undefined,\r\n            errorMessage: undefined,\r\n            finishedAt: undefined,\r\n            startedAt: undefined\r\n        };\r\n    }),\r\n    on(cleanTransferSnapshotState, () => {\r\n        return {\r\n            ...initialState\r\n        };\r\n    })\r\n);\r\n\r\nexport function reducer(state: ITransferSnapshotToNMS | undefined, action: Action) {\r\n    return transferSnapshotToNMSReducer(state, action);\r\n}\r\n","export enum SnapshotServerStatus {\r\n    Idle = 'idle',\r\n    Remote_Ongoing = 'remote-ongoing',\r\n    Local_Ongoing = 'local-ongoing',\r\n    Cancelling= 'cancelling'\r\n}\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport {\r\n    collectingSnapshotServerStatusFeatureKey,\r\n    ICollectingSnapshotServerStatus\r\n} from '../reducers/collecting-snapshot-server-status.reducer';\r\nimport { SnapshotServerStatus } from '@oam/diagnostic-snapshot/core/models/snapshot-server-status';\r\n\r\nexport const selectCollectingSnapshotServerStatusFeature =\r\n    createFeatureSelector<ICollectingSnapshotServerStatus>(collectingSnapshotServerStatusFeatureKey);\r\n\r\nexport const selectCollectingSnapshotServerStatus = createSelector(\r\n    selectCollectingSnapshotServerStatusFeature,\r\n    collectingSnapshotServerStatus => collectingSnapshotServerStatus.snapshotServerStatus\r\n);\r\n\r\nexport const selectCollectingSnapshotServerStatusIsCancelling = createSelector(\r\n    selectCollectingSnapshotServerStatusFeature,\r\n    collectingSnapshotServerStatus =>\r\n        collectingSnapshotServerStatus.snapshotServerStatus === SnapshotServerStatus.Cancelling\r\n);\r\n\r\nexport const selectCollectingSnapshotServerStatusIsOngoing = createSelector(\r\n    selectCollectingSnapshotServerStatusFeature,\r\n    collectingSnapshotServerStatus =>\r\n        collectingSnapshotServerStatus.snapshotServerStatus === SnapshotServerStatus.Local_Ongoing\r\n        || collectingSnapshotServerStatus.snapshotServerStatus === SnapshotServerStatus.Remote_Ongoing\r\n);\r\n\r\nexport const selectCollectingSnapshotAvailability = createSelector(\r\n    selectCollectingSnapshotServerStatusFeature,\r\n    collectingSnapshotServerStatus => collectingSnapshotServerStatus.snapshotServerStatus === SnapshotServerStatus.Idle\r\n);\r\n\r\nexport const selectSnapshotServerConnectionFailure = createSelector(\r\n    selectCollectingSnapshotServerStatusFeature,\r\n    collectingSnapshotServerStatus => collectingSnapshotServerStatus.snapshotServerStatus === 'server error'\r\n);\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport {\r\n    ITransferSnapshotToNMS, SERVER_CONNECTION_FAILURE,\r\n    TRANSFER_SNAPSHOT_BTN_TITLE,\r\n    TRANSFER_SNAPSHOT_STATUS\r\n} from '@oam/diagnostic-snapshot/core/models';\r\nimport { transferSnapshotFeatureKey } from '@oam/diagnostic-snapshot/core/reducers/transfer-snapshot-to-nms.reducer';\r\nimport {\r\n    selectCollectingSnapshotAvailability,\r\n    selectSnapshotServerConnectionFailure\r\n} from '@oam/diagnostic-snapshot/core/selectors/collecting-snapshot-server-status.selector';\r\nimport { SNAPSHOT_OPERATION_IS_NOT_AVAILABILITY } from '@oam/diagnostic-snapshot/core/models/snapshot-operation-btn-title.constants';\r\n\r\nexport const selectTransferSnapshotToNmsState =\r\n    createFeatureSelector<ITransferSnapshotToNMS>(transferSnapshotFeatureKey);\r\n\r\nexport const selectRemoteSnapshotFileName = createSelector(\r\n    selectTransferSnapshotToNmsState,\r\n    ({ remoteSnapshotFileName }) => remoteSnapshotFileName\r\n);\r\n\r\nexport const selectOperationIdForRemoteSnapshot = createSelector(\r\n    selectTransferSnapshotToNmsState,\r\n    ({ operationId }) => operationId\r\n);\r\n\r\nexport const selectSnapshotTransferStatus = createSelector(\r\n    selectTransferSnapshotToNmsState,\r\n    ({ transferStatus }) => transferStatus\r\n);\r\n\r\nexport const selectTransferSnapshotIsOngoing = createSelector(\r\n    selectSnapshotTransferStatus,\r\n    (transferStatus) => transferStatus === TRANSFER_SNAPSHOT_STATUS.TRANSFER_SNAPSHOT_ONGOING\r\n);\r\n\r\nexport const selectTransferSnapshotDuration = createSelector(\r\n    selectTransferSnapshotToNmsState,\r\n    ({finishedAt, startedAt}) => (finishedAt as number) - (startedAt as number)\r\n);\r\n\r\nexport const selectTransferSnapshotStartedAt = createSelector(\r\n    selectTransferSnapshotToNmsState,\r\n    ({startedAt}) => startedAt\r\n);\r\n\r\nexport const selectTransferSnapshotFinished = createSelector(\r\n    selectTransferSnapshotToNmsState,\r\n    ({transferStatus}) => transferStatus === TRANSFER_SNAPSHOT_STATUS.TRANSFER_SNAPSHOT_SUCCEEDED\r\n);\r\n\r\nexport const selectTransferSnapshotFailed = createSelector(\r\n    selectTransferSnapshotToNmsState,\r\n    ({transferStatus}) => transferStatus === TRANSFER_SNAPSHOT_STATUS.TRANSFER_SNAPSHOT_FAILED\r\n);\r\n\r\nexport const selectTransferSnapshotErrorMessage = createSelector(\r\n    selectTransferSnapshotToNmsState,\r\n    ({errorMessage}) => errorMessage\r\n);\r\n\r\nexport const selectTransferSnapshotBtnTitle = createSelector(\r\n    selectRemoteSnapshotFileName,\r\n    selectTransferSnapshotIsOngoing,\r\n    selectSnapshotServerConnectionFailure,\r\n    selectCollectingSnapshotAvailability,\r\n    (remoteSnapshotFileName, isTransferSnapshotOngoing, isServerConnectionFailure, isSnapshotOperationAvailability) => {\r\n        if (isTransferSnapshotOngoing) {\r\n            return TRANSFER_SNAPSHOT_BTN_TITLE.TRANSFER_IS_ONGOING;\r\n        } else if(isServerConnectionFailure) {\r\n            return SERVER_CONNECTION_FAILURE;\r\n        } else if (!isSnapshotOperationAvailability) {\r\n            return SNAPSHOT_OPERATION_IS_NOT_AVAILABILITY;\r\n        } else if (!remoteSnapshotFileName) {\r\n            return TRANSFER_SNAPSHOT_BTN_TITLE.NOT_EXISTS_SNAPSHOT_TRANSFER_TO_NMS;\r\n        } else {\r\n            return TRANSFER_SNAPSHOT_BTN_TITLE.DEFAULT;\r\n        }\r\n    }\r\n);\r\n\r\nexport const selectTransferOperationStatus = createSelector(\r\n    selectTransferSnapshotIsOngoing,\r\n    selectTransferSnapshotFinished,\r\n    selectTransferSnapshotFailed,\r\n    (isTransferSnapshotOngoing, isTransferSnapshotFinished, isTransferSnapshotFailed) => {\r\n        return {isTransferSnapshotOngoing, isTransferSnapshotFinished, isTransferSnapshotFailed};\r\n    }\r\n);\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { collectingSnapshotFeatureKey } from '../reducers/collecting-snapshot.reducer';\r\nimport {\r\n    COLLECT_SNAPSHOT_BTN_TITLE,\r\n    FilesDataResponse,\r\n    ICollectingSnapshotState, SERVER_CONNECTION_FAILURE\r\n} from '../models';\r\nimport {\r\n    selectSnapshotServerConnectionFailure,\r\n    selectCollectingSnapshotAvailability\r\n} from '@oam/diagnostic-snapshot/core/selectors/collecting-snapshot-server-status.selector';\r\nimport {\r\n    CANCEL_IS_ONGOING,\r\n    COLLECTING_SNAPSHOT_IS_ONGOING,\r\n    SNAPSHOT_COLLECTING_STATUS, START_CANCELING_STATUS\r\n} from '@oam/diagnostic-snapshot/core/models/snapshot-progress-status';\r\nimport { SNAPSHOT_OPERATION_IS_NOT_AVAILABILITY } from '@oam/diagnostic-snapshot/core/models/snapshot-operation-btn-title.constants';\r\nimport { selectTransferSnapshotIsOngoing } from '@oam/diagnostic-snapshot/core/selectors/transfer-snapshot-to-nms.selector';\r\nimport { isEmpty } from 'lodash';\r\n\r\n\r\nexport const selectCollectingSnapshotState =\r\n    createFeatureSelector<ICollectingSnapshotState>(collectingSnapshotFeatureKey);\r\n\r\nexport const selectCollectingSnapshotOperationId = createSelector(\r\n    selectCollectingSnapshotState,\r\n    collectingSnapshotState => collectingSnapshotState.operationId\r\n);\r\n\r\nexport const selectCollectingSnapshotStartedAt = createSelector(\r\n    selectCollectingSnapshotState,\r\n    collectingSnapshotState => collectingSnapshotState.startedAt\r\n);\r\n\r\nexport const selectCollectingSnapshotDuration = createSelector(\r\n    selectCollectingSnapshotState,\r\n    collectingSnapshotState => (collectingSnapshotState.finishedAt as number) - (collectingSnapshotState.startedAt as number)\r\n);\r\nexport const selectstartHeartBeatStatus = createSelector(\r\n    selectCollectingSnapshotState,\r\n    collectingSnapshotState => collectingSnapshotState.startHeartBeatStatus\r\n);\r\nexport const selectCollectingSnapshotSavingIsOngoing = createSelector(\r\n    selectCollectingSnapshotState,\r\n    ({collectStatus}) => collectStatus === SNAPSHOT_COLLECTING_STATUS.PREPARING_FILES_ONGOING\r\n);\r\n\r\nexport const selectCollectingSnapshotIsCanceled = createSelector(\r\n    selectCollectingSnapshotState,\r\n    ({ collectStatus }) => collectStatus === SNAPSHOT_COLLECTING_STATUS.CANCELING_SUCCEEDED\r\n);\r\n\r\nexport const selectCollectingSnapshotErrorMessage = createSelector(\r\n    selectCollectingSnapshotState,\r\n    collectingSnapshotState => collectingSnapshotState.errorMessage\r\n);\r\n\r\nexport const selectCollectingSnapshotIsFinished = createSelector(\r\n    selectCollectingSnapshotState,\r\n    ({ collectStatus }) => collectStatus === SNAPSHOT_COLLECTING_STATUS.COLLECTING_SNAPSHOT_COMPLETE\r\n);\r\n\r\nexport const selectCollectingSnapshotFiles = createSelector(\r\n    selectCollectingSnapshotState,\r\n    collectingSnapshotState => collectingSnapshotState.files\r\n);\r\n\r\nexport const selectCollectingSnapshotFilesChanged = createSelector(\r\n    selectCollectingSnapshotFiles,\r\n    collectingSnapshotFiles => {\r\n        if (!collectingSnapshotFiles || collectingSnapshotFiles.length === 0) return [];\r\n\r\n        return collectingSnapshotFiles.map((file: FilesDataResponse) => {\r\n            return {\r\n                fileSize: file.sizeInByte < 1024 ? 1 : Math.round((file.sizeInByte / 1024)),\r\n                fileId: file.fileId\r\n            };\r\n        });\r\n    }\r\n);\r\n\r\nexport const selectCollectingSnapshotFileStates = createSelector(\r\n    selectCollectingSnapshotFiles,\r\n    collectingSnapshotFiles => {\r\n        return collectingSnapshotFiles.filter((file: FilesDataResponse) => {\r\n            return file.fileStates === 'initial';\r\n        });\r\n    }\r\n);\r\n\r\nexport const downloadFilesCollectingSuccessSelector = createSelector(\r\n    selectCollectingSnapshotFiles,\r\n    collectingSnapshotFiles => {\r\n\r\n        if (isEmpty(collectingSnapshotFiles)) return false;\r\n\r\n        return collectingSnapshotFiles.every((file: FilesDataResponse) => {\r\n            return file.fileStates === 'completed';\r\n        });\r\n    }\r\n);\r\n\r\nexport const selectCollectingSnapshotIsCancelling = createSelector(\r\n    selectCollectingSnapshotState,\r\n    ({ startCancelingStatus, collectStatus }) =>\r\n        (!!startCancelingStatus && CANCEL_IS_ONGOING.includes(startCancelingStatus)) ||\r\n        (!!collectStatus && CANCEL_IS_ONGOING.includes(collectStatus))\r\n);\r\n\r\nexport const selectCollectingSnapshotIsOngoing = createSelector(\r\n    selectCollectingSnapshotState,\r\n    ({ collectStatus }) => !!collectStatus && COLLECTING_SNAPSHOT_IS_ONGOING.includes(collectStatus)\r\n);\r\n\r\nexport const selectCollectingSnapshotIsStarting = createSelector(\r\n    selectCollectingSnapshotState,\r\n    ({ collectStatus }) => collectStatus === SNAPSHOT_COLLECTING_STATUS.COLLECTING_FILES_START\r\n);\r\n\r\nexport const selectCollectingSnapshotIsOngoingOrCancelling = createSelector(\r\n    selectCollectingSnapshotIsOngoing,\r\n    selectCollectingSnapshotIsCancelling,\r\n    (collectingSnapshotIsOngoing, cancelCollectSnapshotIsOngoing) => collectingSnapshotIsOngoing || cancelCollectSnapshotIsOngoing\r\n);\r\n\r\nexport const selectCollectingStatus = createSelector(\r\n    selectCollectingSnapshotState,\r\n    ({collectStatus}) => collectStatus\r\n);\r\n\r\nexport const selectCollectingSnapshotIsFailed = createSelector(\r\n    selectCollectingSnapshotState,\r\n    ({ collectStatus }) => collectStatus === SNAPSHOT_COLLECTING_STATUS.COLLECTING_SNAPSHOT_FAILED\r\n);\r\n\r\nexport const selectSnapshotCancelingIsFailed = createSelector(\r\n    selectCollectingSnapshotState,\r\n    ({ startCancelingStatus }) => startCancelingStatus === START_CANCELING_STATUS.CANCELING_FAILED\r\n);\r\n\r\nexport const selectCollectSnapshotBtnTitle = createSelector(\r\n    selectCollectingSnapshotIsOngoing,\r\n    selectCollectingSnapshotIsCancelling,\r\n    selectCollectingSnapshotAvailability,\r\n    selectSnapshotServerConnectionFailure,\r\n    selectTransferSnapshotIsOngoing,\r\n    (\r\n        collectingSnapshotIsOngoing,\r\n        collectingSnapshotIsCancelling,\r\n        isSnapshotOperationAvailability,\r\n        isServerConnectionFailure,\r\n        isTransferSnapshotOngoing\r\n    ) => {\r\n        if (collectingSnapshotIsCancelling) {\r\n            return COLLECT_SNAPSHOT_BTN_TITLE.CANCELLING;\r\n        } else if (collectingSnapshotIsOngoing) {\r\n            return COLLECT_SNAPSHOT_BTN_TITLE.ONGOING;\r\n        } else if (isServerConnectionFailure) {\r\n            return SERVER_CONNECTION_FAILURE;\r\n        } else if (!isSnapshotOperationAvailability || isTransferSnapshotOngoing) {\r\n            return SNAPSHOT_OPERATION_IS_NOT_AVAILABILITY;\r\n        } else {\r\n            return COLLECT_SNAPSHOT_BTN_TITLE.DEFAULT;\r\n        }\r\n    }\r\n);\r\n\r\nexport const selectSnapshotOperationIsOngoing = createSelector(\r\n    selectCollectingSnapshotIsStarting,\r\n    selectCollectingSnapshotIsOngoingOrCancelling,\r\n    (isCollectingSnapshotStarting, isCollectingSnapshotIsOngoingOrCancelling) => isCollectingSnapshotStarting || isCollectingSnapshotIsOngoingOrCancelling\r\n);\r\n\r\nexport const selectSnapshotOperationStatus = createSelector(\r\n    selectCollectingSnapshotIsStarting,\r\n    selectCollectingSnapshotSavingIsOngoing,\r\n    selectCollectingSnapshotIsOngoing,\r\n    selectCollectingSnapshotIsFinished,\r\n    selectCollectingSnapshotIsFailed,\r\n    selectCollectingSnapshotIsCancelling,\r\n    selectCollectingSnapshotIsCanceled,\r\n    selectSnapshotOperationIsOngoing,\r\n    (isCollectingSnapshotStarting, isCollectingSnapshotSavingOngoing, isCollectingSnapshotOngoing,\r\n     isCollectingSnapshotFinished, isCollectingSnapshotFailed,\r\n     isCancellingCollection, isCollectionCancelled, isSnapshotOperationOngoing) => {\r\n        return {\r\n            isCollectingSnapshotStarting,\r\n            isCollectingSnapshotSavingOngoing,\r\n            isCollectingSnapshotOngoing,\r\n            isCollectingSnapshotFinished,\r\n            isCollectingSnapshotFailed,\r\n            isCancellingCollection,\r\n            isCollectionCancelled,\r\n            isSnapshotOperationOngoing\r\n        };\r\n    }\r\n);\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Store } from '@ngrx/store';\r\nimport { SnapshotService } from '@oam/cu-asm-api/services';\r\nimport { ConsoleLogsDatabaseService } from '@oam/core/lib/services/console-logs-database.service';\r\nimport { saveAs } from 'file-saver';\r\nimport JSZip from 'jszip';\r\nimport { FilesDataResponse } from '@oam/diagnostic-snapshot/core/models';\r\nimport {\r\n    downloadingFilesCompleted,\r\n    setSnapshotStatusToCanceled,\r\n    startCollectingLocalSnapshotHearbeat,\r\n    startSavingFiles,\r\n    updateDownloadFileStatus\r\n} from '../actions/snapshot.action';\r\nimport { DateTime } from '@oam/core';\r\nimport { isEmpty } from 'lodash';\r\nimport { WebemStateService } from '@oam/core/lib/services/webem.state.service';\r\nimport { SnapshotFetchFilesConfig } from '../services/snapshot-fetch-files-config';\r\nimport {\r\n    selectCollectingSnapshotIsCanceled\r\n} from '../selectors/collecting-snapshot.selector';\r\nimport { take } from 'rxjs/operators';\r\nimport { NGXLogger } from 'ngx-logger';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SnapshotFetchFilesService {\r\n    public readonly mainZip: JSZip;\r\n    public filesListTXT: string;\r\n    private canceled: boolean;\r\n    constructor(\r\n        private readonly logger: NGXLogger,\r\n        private readonly httpClient: HttpClient,\r\n        private readonly store: Store,\r\n        private readonly snapshotService: SnapshotService,\r\n        private readonly consoleLogsDatabaseService: ConsoleLogsDatabaseService,\r\n        private readonly zone: NgZone,\r\n        private readonly webemState: WebemStateService,\r\n        private readonly config: SnapshotFetchFilesConfig,\r\n    ) {\r\n        this.mainZip = new JSZip();\r\n        this.filesListTXT = '';\r\n    }\r\n\r\n    async startDownloadingFiles(filesList: FilesDataResponse[], operationId: string | undefined) {\r\n        for (const file of filesList) {\r\n            this.store.dispatch(updateDownloadFileStatus({fileId: file.fileId,  fileStates: 'ongoing' }));\r\n        }\r\n        let listOfFiles = '';\r\n        this.canceled = false;\r\n        for (const file of filesList) {\r\n            if (this.canceled) {\r\n               this.logger.log('snapshot is canceled');\r\n                     break;\r\n                  }\r\n            const snapshotFile = await this.snapshotService.getLocalSnapshotFile(\r\n                { operationId: operationId as string, fileId: file.fileId }\r\n            ).toPromise().catch( () =>{\r\n                this.store.dispatch(updateDownloadFileStatus({fileId: file.fileId,  fileStates: 'completed' }));\r\n\r\n                return '';\r\n            });\r\n            if (snapshotFile) {\r\n                this.mainZip.file(file.fileId, snapshotFile);\r\n                listOfFiles += file.fileId;\r\n                try {\r\n                    const zippedFiles = await JSZip().loadAsync(snapshotFile).catch(() => '\\n\\n');\r\n                    listOfFiles += (zippedFiles instanceof JSZip) ? this.getNamesOfZippedFiles(zippedFiles) : zippedFiles;\r\n                    this.store.dispatch(updateDownloadFileStatus({fileId: file.fileId,  fileStates: 'completed' }));\r\n                } catch (e) {\r\n                    this.logger.log(`Snapshot collection error on ${file.fileId}`, e);\r\n                }\r\n            }\r\n        }\r\n        this.filesListTXT += listOfFiles;\r\n    }\r\n    async saveFilesLocal(operationId: string | undefined) {\r\n        const logs = await this.consoleLogsDatabaseService.getBlobLogs();\r\n        const browserLogs = `${logs.name}\\n\\n`;\r\n        this.mainZip.file(logs.name, logs.blob);\r\n        this.mainZip.file('snapshot_file_list.txt', browserLogs + this.filesListTXT);\r\n        this.store.select(selectCollectingSnapshotIsCanceled).pipe(take(1)).subscribe(async cancelled => {\r\n            if (!cancelled) {\r\n                await this.zone.runOutsideAngular(async () => {\r\n                    this.store.dispatch(startSavingFiles());\r\n                    const content = await this.mainZip.generateAsync({ type: 'blob' });\r\n                    saveAs(content, this.createSnapshotName());\r\n                });\r\n                this.store.dispatch(startCollectingLocalSnapshotHearbeat({operationId: operationId as string, startHeartBeatStatus: false }));\r\n                this.store.dispatch(downloadingFilesCompleted({ operationId: operationId as string }));\r\n            }\r\n        });\r\n        this.mainZip.files = {};\r\n        this.filesListTXT = '';\r\n    }\r\n\r\n    createSnapshotName(): string {\r\n        const date = new DateTime().toFormattedFileDateTime();\r\n        const dnName = 'MRBTS';\r\n        let webemStateText = '';\r\n        const webemState = this.webemState.getWebemState();\r\n        if (webemState) {\r\n            webemStateText = [...this.config.SNAPSHOT_NAME_PARAMETERS, 'softwareVersion']\r\n                .filter(property => webemState[property])\r\n                .reduce((stateText, property) => stateText + `${webemState[property]}_`, '');\r\n        }\r\n\r\n        return `Snapshot_${dnName}-${webemStateText}${date}.zip`;\r\n    }\r\n\r\n    getNamesOfZippedFiles(zippedFiles: JSZip): string {\r\n        let listOfZippedFiles = '';\r\n        if (isEmpty(zippedFiles.files)) return listOfZippedFiles += '\\n\\n';\r\n        listOfZippedFiles += ':';\r\n        zippedFiles.forEach(fileName => {\r\n            listOfZippedFiles += `\\n\\t${fileName}`;\r\n        });\r\n\r\n        return listOfZippedFiles += '\\n\\n';\r\n    }\r\n\r\n    cancelCollectingFiles() {\r\n        this.canceled = true;\r\n        this.store.dispatch(setSnapshotStatusToCanceled());\r\n        this.mainZip.files = {};\r\n        this.filesListTXT = '';\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { asyncScheduler, of } from 'rxjs';\r\nimport { catchError, mergeMap, takeUntil, withLatestFrom, exhaustMap, filter } from 'rxjs/operators';\r\nimport { PollingService } from '@oam/core/lib/services/polling.service';\r\nimport {\r\n    setSnapshotServerStatus,\r\n    setSnapshotStatusToCanceled,\r\n    checkSnapshotServerStatusError,\r\n    startCheckingSnapshotServerStatus,\r\n    stopCheckingSnapshotServerStatus,\r\n    cleanSnapshotServerStatus,\r\n    cleanServerStatusIfOperationIsNotOngoing\r\n} from '../actions/snapshot.action';\r\nimport { SnapshotService } from '@oam/cu-asm-api/services';\r\nimport { SnapshotServerStatus } from '../models/snapshot-server-status';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { addNotification } from '@oam/core/lib/actions/toast-message.actions';\r\nimport {\r\n    selectCollectingSnapshotIsOngoingOrCancelling,\r\n    selectCollectingSnapshotState\r\n} from '@oam/diagnostic-snapshot/core/selectors/collecting-snapshot.selector';\r\nimport { SNAPSHOT_COLLECTING_STATUS } from '@oam/diagnostic-snapshot/core/models/snapshot-progress-status';\r\nimport { selectTransferSnapshotIsOngoing } from '@oam/diagnostic-snapshot/core/selectors/transfer-snapshot-to-nms.selector';\r\nimport { SnapshotFetchFilesService } from '../services/snapshot-fetch-files.service';\r\n\r\n\r\n@Injectable()\r\nexport class CollectingSnapshotServerStatusEffects {\r\n    stopCheckingSnapshotServerStatus$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(stopCheckingSnapshotServerStatus)\r\n        ), { dispatch: false }\r\n    );\r\n\r\n    startCheckingSnapshotServerStatus$ = createEffect(() => ({ scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(startCheckingSnapshotServerStatus),\r\n            exhaustMap(() => {\r\n                return this.pollingService.getTimer(scheduler).pipe(\r\n                    takeUntil(this.stopCheckingSnapshotServerStatus$),\r\n                    withLatestFrom(this.store.pipe(select(selectCollectingSnapshotState))),\r\n                    mergeMap(([, {collectStatus}]) => this.snapshotService.checkSnapshotStatus().pipe(\r\n                        mergeMap(response => {\r\n                            const actions = [];\r\n                            if (response.status === SnapshotServerStatus.Idle && collectStatus === SNAPSHOT_COLLECTING_STATUS.CANCELLING) {\r\n                                actions.push(\r\n                                    addNotification({\r\n                                        payload: {\r\n                                            detail: 'Cancel snapshot operation succeeded',\r\n                                            severity: 'success',\r\n                                            summary: 'Snapshot Cancellation Succeeded'\r\n                                        }\r\n                                    }),\r\n                                    setSnapshotStatusToCanceled()\r\n                                );\r\n                                this.snapshotFetchFilesService.cancelCollectingFiles();\r\n                            }\r\n                            actions.push(setSnapshotServerStatus({ snapshotServerStatus: response.status as string }));\r\n\r\n                            return actions;\r\n                        }),\r\n                        catchError(error => of(checkSnapshotServerStatusError(error)))\r\n                    ))\r\n                );\r\n            })\r\n        )\r\n    );\r\n\r\n    cleanServerStatusIfOperationIsNotOngoing$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(cleanServerStatusIfOperationIsNotOngoing),\r\n            withLatestFrom(\r\n                this.store.pipe(select(selectCollectingSnapshotIsOngoingOrCancelling)),\r\n                this.store.pipe(select(selectTransferSnapshotIsOngoing))\r\n            ),\r\n            filter(([, isCollectingSnapshotOngoing, isTransferSnapshotOngoing]) => !isCollectingSnapshotOngoing && !isTransferSnapshotOngoing),\r\n            mergeMap(() => [stopCheckingSnapshotServerStatus(), cleanSnapshotServerStatus()])\r\n        )\r\n    );\r\n\r\n    constructor(private readonly actions$: Actions, private readonly pollingService: PollingService,\r\n                private readonly snapshotService: SnapshotService,\r\n                private readonly snapshotFetchFilesService: SnapshotFetchFilesService,\r\n                private readonly store: Store) {\r\n    }\r\n\r\n}\r\n","/* tslint:disable */\nexport enum SnapshotStatus {\n  Accepted = 'accepted',\n  Ongoing = 'ongoing',\n  Succeeded = 'succeeded',\n  Failed = 'failed',\n  Canceled = 'canceled'\n}\n","import { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n    catchError,\r\n    concatMap,\r\n    exhaustMap,\r\n    filter,\r\n    map,\r\n    mergeMap,\r\n    takeUntil,\r\n    throttleTime,\r\n    withLatestFrom,\r\n    first\r\n} from 'rxjs/operators';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { asyncScheduler, of, combineLatest } from 'rxjs';\r\nimport { PollingService } from '@oam/core/lib/services/polling.service';\r\nimport { SnapshotService } from '@oam/cu-asm-api/services';\r\nimport { SnapshotStatus } from '@oam/cu-asm-api/models';\r\nimport { addNotification } from '@oam/core/lib/actions/toast-message.actions';\r\nimport {\r\n    addCollectedFilesToStore,\r\n    cleanSnapshotState,\r\n    cleanSnapshotStateIfCollectingIsNotOngoing,\r\n    cleanUpSnapshotOnServerFinished,\r\n    collectingLocalSnapshotIsFailed,\r\n    collectingLocalSnapshotIsSucceeded,\r\n    collectingLocalSnapshotOngoing,\r\n    collectingRemoteSnapshotIsFailed,\r\n    collectingRemoteSnapshotIsSucceeded,\r\n    collectingRemoteSnapshotOngoing,\r\n    downloadingFilesCompleted,\r\n    startCollectingLocalSnapshot,\r\n    startCollectingLocalSnapshotHearbeat,\r\n    startCollectingRemoteSnapshot,\r\n    startDownloadingFiles,\r\n    saveFilesLocal,\r\n    cancellingCollectionIsOngoing,\r\n    cancellingSnapshotIsFailed,\r\n    deleteLocalSnapshotAfterSuccess,\r\n    startCancellingCollectionLocalSnapshot,\r\n    startCancellingCollectionRemoteSnapshot,\r\n} from '../actions/snapshot.action';\r\nimport {\r\n    selectCollectingSnapshotFiles,\r\n    selectCollectingSnapshotFileStates,\r\n    selectCollectingSnapshotIsOngoingOrCancelling,\r\n    selectCollectingSnapshotOperationId,\r\n    selectCollectingSnapshotState,\r\n    downloadFilesCollectingSuccessSelector,\r\n    selectstartHeartBeatStatus\r\n} from '../selectors/collecting-snapshot.selector';\r\nimport { FilesDataResponse } from '../models';\r\nimport { SnapshotFetchFilesService } from '../services/snapshot-fetch-files.service';\r\nimport { isEmpty } from 'lodash';\r\n\r\n\r\n@Injectable()\r\nexport class CollectingSnapshotEffects {\r\n    cancelSnapshotIsFailed$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(cancellingSnapshotIsFailed),\r\n            map(({ error }) => addNotification({\r\n                payload: {\r\n                    detail: error.content,\r\n                    severity: 'error',\r\n                    summary: 'Snapshot Cancellation Failed'\r\n                }\r\n            }))\r\n        )\r\n    );\r\n\r\n    addCancelNotification$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(startCancellingCollectionLocalSnapshot, startCancellingCollectionRemoteSnapshot),\r\n            map(() => addNotification({\r\n                    payload: {\r\n                        detail: 'Cancel snapshot operation started',\r\n                        severity: 'info',\r\n                        summary: 'Cancelling Snapshot'\r\n                    }\r\n                })\r\n            )\r\n        )\r\n    );\r\n\r\n    startCancellingCollectionLocalSnapshot$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(startCancellingCollectionLocalSnapshot),\r\n            throttleTime(1000),\r\n            withLatestFrom(this.store.select(selectCollectingSnapshotOperationId)),\r\n            exhaustMap(([, operationId]) =>\r\n                this.snapshotService.deleteLocalSnapshotOperation({ operationId: operationId as string })\r\n                    .pipe(\r\n                        map(() => cancellingCollectionIsOngoing()),\r\n                        catchError(({ error }) => of(cancellingSnapshotIsFailed({ error: JSON.parse(error) })))\r\n                    )\r\n            )\r\n        )\r\n    );\r\n\r\n    startCancellingCollectionRemoteSnapshot$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(startCancellingCollectionRemoteSnapshot),\r\n            throttleTime(1000),\r\n            withLatestFrom(this.store.pipe(select(selectCollectingSnapshotOperationId))),\r\n            exhaustMap(([, operationId]) =>\r\n                this.snapshotService.deleteRemoteSnapshotOperation({ operationId: operationId as string }).pipe(\r\n                    map(() => cancellingCollectionIsOngoing()),\r\n                    catchError(({ error }) => of(cancellingSnapshotIsFailed({ error: JSON.parse(error) })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    startCollectingLocalSnapshot$ = createEffect(() => ({ scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(startCollectingLocalSnapshot),\r\n            throttleTime(1000),\r\n            withLatestFrom(this.store.select(selectCollectingSnapshotState)),\r\n            exhaustMap(([, { coverage, filterRegx, reason }]) => this.snapshotService.triggerLocalSnapshot({\r\n                    body: {\r\n                        coverage,\r\n                        filterRegx,\r\n                        reason,\r\n                        heartbeat: true,\r\n                        originator: 'EM'\r\n                    }\r\n                }).pipe(\r\n                mergeMap(response => [\r\n                    collectingLocalSnapshotOngoing({\r\n                        operationId: response.operationId as string,\r\n                        files: response.files as FilesDataResponse[],\r\n                        startedAt: Date.now()\r\n                    }),\r\n                    addNotification({\r\n                        payload: {\r\n                            detail: 'Snapshot collecting operation started',\r\n                            severity: 'info',\r\n                            summary: 'Collecting Snapshot'\r\n                        }\r\n                    })\r\n                ]),\r\n                catchError(error => of(collectingLocalSnapshotIsFailed(error)))\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    startCollectingRemoteSnapshot$ = createEffect(() => ({ scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(startCollectingRemoteSnapshot),\r\n            throttleTime(1000),\r\n            withLatestFrom(this.store.select(selectCollectingSnapshotState)),\r\n            exhaustMap(([, { coverage, filterRegx, reason }]) => this.snapshotService.triggerRemoteSnapshot({\r\n                    body: {\r\n                        coverage,\r\n                        filterRegx,\r\n                        reason,\r\n                        originator: 'EM'\r\n                    }\r\n                }).pipe(\r\n                mergeMap(response => [\r\n                    collectingRemoteSnapshotOngoing({\r\n                        operationId: response.operationId as string,\r\n                        startedAt: Date.now()\r\n                    }),\r\n                    addNotification({\r\n                        payload: {\r\n                            detail: 'Snapshot collecting operation started',\r\n                            severity: 'info',\r\n                            summary: 'Collecting Snapshot'\r\n                        }\r\n                    })\r\n                ]),\r\n                catchError(error => of(collectingRemoteSnapshotIsFailed(error)))\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    collectingLocalSnapshotIsSucceeded$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(collectingLocalSnapshotIsSucceeded),\r\n            mergeMap(action =>\r\n                combineLatest([\r\n                    of(action),\r\n                    this.store.pipe(\r\n                        select(downloadFilesCollectingSuccessSelector),\r\n                        first((fileStates) =>\r\n                            fileStates === true\r\n                        ),\r\n                    )\r\n                ])\r\n            ),\r\n            map(() =>\r\n                saveFilesLocal()\r\n            )\r\n        ));\r\n\r\n    sendNotificationCollectingRemoteSnapshotIsSucceeded$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(collectingRemoteSnapshotIsSucceeded),\r\n            map(() => addNotification({\r\n                payload: {\r\n                    detail: 'Snapshot collection operation succeeded',\r\n                    severity: 'success',\r\n                    summary: 'Snapshot Collected'\r\n                }\r\n            }))\r\n        )\r\n    );\r\n\r\n    downloadingFilesCompleted$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(downloadingFilesCompleted),\r\n            mergeMap((action) => [\r\n                addNotification({\r\n                    payload: {\r\n                        detail: 'Snapshot collection operation succeeded',\r\n                        severity: 'success',\r\n                        summary: 'Snapshot Collected'\r\n                    }\r\n                }),\r\n                deleteLocalSnapshotAfterSuccess({ operationId: action.operationId })\r\n            ])\r\n        )\r\n    );\r\n\r\n    deleteLocalSnapshotAfterSuccess$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(deleteLocalSnapshotAfterSuccess),\r\n            mergeMap((action) => {\r\n                return this.snapshotService.deleteLocalSnapshotOperation({\r\n                    operationId: action.operationId\r\n                }).pipe(\r\n                    map(() => cleanUpSnapshotOnServerFinished())\r\n                );\r\n            })\r\n        )\r\n    );\r\n\r\n    deleteRemoteSnapshotAfterSuccess$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(collectingRemoteSnapshotIsSucceeded),\r\n            mergeMap((action) => this.snapshotService.deleteRemoteSnapshotOperation({\r\n                operationId: action.operationId\r\n            }).pipe(\r\n                map(() => cleanUpSnapshotOnServerFinished())\r\n            ))\r\n        )\r\n    );\r\n\r\n    downloadingFiles$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(saveFilesLocal),\r\n            withLatestFrom(\r\n                this.store.pipe(select(selectCollectingSnapshotFiles)),\r\n                this.store.pipe(select(selectCollectingSnapshotOperationId))\r\n            ),\r\n            map(([, , operationId]: any): any => {\r\n                this.snapshotFetchFilesService.saveFilesLocal(operationId);\r\n\r\n            })\r\n        ), { dispatch: false }\r\n    );\r\n\r\n    startDownloadingFiles$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(startDownloadingFiles),\r\n            withLatestFrom(\r\n                this.store.pipe(select(selectCollectingSnapshotOperationId)),\r\n                this.store.pipe(select(selectCollectingSnapshotFileStates)),\r\n                this.store.pipe(select(selectstartHeartBeatStatus)),\r\n            ),\r\n            map(([,operationId,files,startHeartBeatStatus]: any): any => {\r\n                this.snapshotFetchFilesService.startDownloadingFiles(files as FilesDataResponse[], operationId);\r\n                if (startHeartBeatStatus !== true){\r\n                    this.store.dispatch(startCollectingLocalSnapshotHearbeat({operationId, startHeartBeatStatus: true }));\r\n                }\r\n\r\n            })\r\n        ), { dispatch: false }\r\n    );\r\n    collectingSnapshotIsFailed$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(collectingLocalSnapshotIsFailed, collectingRemoteSnapshotIsFailed),\r\n            map(({ error }) => addNotification({\r\n                payload: {\r\n                    detail: error.content,\r\n                    severity: 'error',\r\n                    summary: 'Collecting Snapshot Failed'\r\n                }\r\n            }))\r\n        )\r\n    );\r\n\r\n    collectingLocalSnapshotOngoing$ = createEffect(() => ({ scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(collectingLocalSnapshotOngoing),\r\n            mergeMap((action) =>\r\n                this.pollingService.getTimer(scheduler).pipe(\r\n                    takeUntil(this.actions$.pipe(ofType(cancellingCollectionIsOngoing))),\r\n                    takeUntil(this.actions$.pipe(ofType(collectingLocalSnapshotIsSucceeded))),\r\n                    takeUntil(this.actions$.pipe(ofType(collectingLocalSnapshotIsFailed))),\r\n                    concatMap(() => {\r\n                        return this.snapshotService.getLocalSnapshotOperation({ operationId: action.operationId as string })\r\n                            .pipe(\r\n                                concatMap(response => {\r\n                                    const actions = [];\r\n                                    if (!isEmpty(response.files)) {\r\n                                        actions.push(addCollectedFilesToStore({ files: response.files as FilesDataResponse[] }));\r\n                                        actions.push(startDownloadingFiles({ operationId: action.operationId as string, files: action.files as FilesDataResponse[] }));\r\n                                        if (response.status === SnapshotStatus.Succeeded) {\r\n                                            actions.push(collectingLocalSnapshotIsSucceeded({ operationId: action.operationId as string }));\r\n                                        }\r\n                                    }\r\n                                    if (response.status === SnapshotStatus.Failed) {\r\n                                        const failureInfo = response.failureInfo as string;\r\n                                        actions.push(collectingLocalSnapshotIsFailed({\r\n                                            error: {\r\n                                                summary: failureInfo,\r\n                                                content: failureInfo\r\n                                            },\r\n                                            operationId: action.operationId as string\r\n                                        }));\r\n                                    }\r\n\r\n                                    return actions;\r\n                                }),\r\n                                catchError(httpError => of(collectingLocalSnapshotIsFailed({\r\n                                        error: httpError.error,\r\n                                        operationId: action.operationId as string\r\n                                    }))\r\n                                )\r\n                            );\r\n                    })\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    startCollectingLocalSnapshotHearbeat$ = createEffect(() => ({ scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(startCollectingLocalSnapshotHearbeat),\r\n            mergeMap((action) =>\r\n                this.pollingService.getTimer(scheduler).pipe(\r\n                    takeUntil(this.actions$.pipe(ofType(downloadingFilesCompleted))),\r\n                    takeUntil(this.actions$.pipe(ofType(cancellingCollectionIsOngoing))),\r\n                    mergeMap(() => this.snapshotService.keepSnapshotAlive({ operationId: action.operationId })),\r\n                    catchError(() => of())\r\n                )\r\n            )\r\n        ), { dispatch: false }\r\n    );\r\n\r\n    collectingRemoteSnapshotOngoing$ = createEffect(() => ({ scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(collectingRemoteSnapshotOngoing),\r\n            mergeMap((action) =>\r\n                this.pollingService.getTimer(scheduler).pipe(\r\n                    takeUntil(this.actions$.pipe(ofType(cancellingCollectionIsOngoing))),\r\n                    takeUntil(this.actions$.pipe(ofType(collectingRemoteSnapshotIsSucceeded))),\r\n                    takeUntil(this.actions$.pipe(ofType(collectingRemoteSnapshotIsFailed))),\r\n                    concatMap(() => {\r\n                        return this.snapshotService.getRemoteSnapshotOperation({ operationId: action.operationId as string })\r\n                            .pipe(\r\n                                concatMap(response => {\r\n                                    const actions = [];\r\n                                    if (response.status === SnapshotStatus.Succeeded) {\r\n                                        actions.push(collectingRemoteSnapshotIsSucceeded(\r\n                                            { operationId: action.operationId as string }\r\n                                        ));\r\n                                    }\r\n                                    if (response.status === SnapshotStatus.Failed) {\r\n                                        const failureInfo = response.failureInfo as string;\r\n                                        actions.push(collectingRemoteSnapshotIsFailed({\r\n                                            error: {\r\n                                                summary: failureInfo,\r\n                                                content: failureInfo\r\n                                            },\r\n                                            operationId: action.operationId as string\r\n                                        }));\r\n                                    }\r\n\r\n                                    return actions;\r\n                                }),\r\n                                catchError(httpError => of(collectingRemoteSnapshotIsFailed({\r\n                                        error: httpError.error,\r\n                                        operationId: action.operationId as string\r\n                                    }))\r\n                                )\r\n                            );\r\n                    })\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    snapshotCollectingIsOngoing$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(cleanSnapshotStateIfCollectingIsNotOngoing),\r\n            withLatestFrom(\r\n                this.store.pipe(select(selectCollectingSnapshotIsOngoingOrCancelling))\r\n            ),\r\n            filter(([, isOngoing]) => !isOngoing),\r\n            map(() => cleanSnapshotState())\r\n        )\r\n    );\r\n\r\n    constructor(private readonly actions$: Actions,\r\n                private readonly pollingService: PollingService,\r\n                private readonly snapshotFetchFilesService: SnapshotFetchFilesService,\r\n                private readonly snapshotService: SnapshotService,\r\n                private readonly store: Store) {\r\n    }\r\n}\r\n","\r\ninterface RangeValue {\r\n    name: string;\r\n    value: 'full' | 'minor'\r\n}\r\n\r\nexport const RANGE_VALUES: RangeValue[] = [\r\n    {name: 'All logs', value: 'full'},\r\n    {name: 'Most important logs', value: 'minor'},\r\n];\r\n\r\nexport const DEFAULT_RANGE = RANGE_VALUES[0];\r\n\r\nexport const LOCATION_VALUES = [\r\n    {name: 'Local', value: 'local'},\r\n    {name: 'Remote', value: 'remote'},\r\n];\r\n\r\nexport const DEFAULT_LOCATION = LOCATION_VALUES[0];\r\n","import { FormGroup, ValidationErrors } from '@angular/forms';\r\n\r\nconst MISSING_MANDATORY_FIELD = {\r\n    missingMandatoryField: true\r\n};\r\n\r\nexport function oneOfControlsMandatoryValidator(form: FormGroup): ValidationErrors | null {\r\n    const password = form.get('password')?.value;\r\n    const skipRenewal = form.get('skipRenewal')?.value;\r\n\r\n    if (skipRenewal) return null;\r\n    if (!password) return MISSING_MANDATORY_FIELD;\r\n\r\n    return null;\r\n}\r\n","<form [formGroup]=\"form\" *ngIf=\"loginStatus$ | async as loginStatus\">\r\n    <div class=\"p-dialog-content abc\">\r\n        <div>\r\n            <div class=\"dialog-information\">\r\n                <i class=\"mdi mdi-alert-circle confirm-icon\"></i>\r\n                <span>\r\n                    Your session could expire before this operation is completed<br>\r\n                    Renew session token and perform the operation\r\n                </span>\r\n            </div>\r\n            <div class=\"input-container\">\r\n                <p-checkbox\r\n                    [binary]=\"true\"\r\n                    (onChange)=\"updatePasswordInputState($event)\"\r\n                    label=\"Continue snapshot download without session renewal\"\r\n                    [formControl]=\"getSkipRenewalControl()\">\r\n                </p-checkbox>\r\n                <span>Password:</span>\r\n                <div class=\"password\">\r\n                    <input class=\"login-input\"\r\n                           pInputText\r\n                           autocomplete=\"off\"\r\n                           [type]=\"showPassword ? 'text' : 'password'\"\r\n                           formControlName=\"password\"\r\n                           id=\"renew-session-password\">\r\n                    <span *ngIf=\"loginStatus.failed\" class=\"validation-error-icon\">\r\n                        <i class=\"mdi mdi-alert error-icon\"></i>\r\n                    </span>\r\n                    <span class=\"renew-fail-reason\">{{loginStatus.failedReason}}</span>\r\n                    <ui-webem-show-password-button\r\n                        class=\"eye-class\"\r\n                        [disabled]=\"!form.get('password')?.value || form.get('skipRenewal')?.value\"\r\n                        (isPasswordVisible)=\"setPasswordVisible($event)\">\r\n                    </ui-webem-show-password-button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"p-dialog-footer\">\r\n        <p-footer>\r\n            <ui-webem-button\r\n                [model]=\"okButtonModel\"\r\n                (action)=\"renewSessionToken()\"\r\n                [disabled]=\"!form.valid\">\r\n            </ui-webem-button>\r\n            <ui-webem-button\r\n                (action)=\"closeDialog()\"\r\n                [model]=\"cancelButtonModel\">\r\n            </ui-webem-button>\r\n        </p-footer>\r\n    </div>\r\n</form>\r\n","import { Observable } from 'rxjs';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { DynamicDialogConfig, DynamicDialogRef } from 'primeng/dynamicdialog';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { BaseDialogComponent } from '@oam/shared/lib/components/base-dialog/base-dialog-component';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { selectUsername } from '@oam/core/lib/user/core/reducers/user-reducer';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { OperationStatus } from '@oam/core/lib/models/operation.interface';\r\nimport {\r\n    getLoginStatus,\r\n    selectLoginInProgress,\r\n    selectTokenRenewalSuccessful\r\n} from '@oam/auth/lib/auth/core/reducers/login.reducer';\r\nimport { renewSessionToken } from '@oam/core/lib/actions/user.actions';\r\nimport { resetOperationStatus, setLoginInitialValues } from '@oam/auth/lib/auth/core/actions/login.actions';\r\nimport { oneOfControlsMandatoryValidator } from '../../core/functions/one-of-controls-mandatory';\r\n\r\n\r\n@Component({\r\n  selector: 'ui-webem-session-token-renewal-dialog',\r\n  templateUrl: './session-token-renewal-dialog.component.html',\r\n  styleUrls: ['./session-token-renewal-dialog.component.scss']\r\n})\r\nexport class SessionTokenRenewalDialogComponent extends BaseDialogComponent implements OnInit, OnDestroy {\r\n\r\n    readonly okButtonModel: ButtonModel = {\r\n        label: 'OK',\r\n        theme: ButtonTheme.Accent\r\n    };\r\n    readonly cancelButtonModel: ButtonModel = {\r\n        label: 'Cancel'\r\n    };\r\n    showPassword: boolean;\r\n    form: FormGroup;\r\n    username: string;\r\n    loginStatus$: Observable<OperationStatus>;\r\n\r\n    constructor(protected store: Store,\r\n                private readonly formBuilder: FormBuilder,\r\n                private config: DynamicDialogConfig,\r\n                ref: DynamicDialogRef) {\r\n        super(store, ref);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.showPassword = false;\r\n        super.ngOnInit();\r\n\r\n        this.form = this.formBuilder.group({\r\n            password: [''],\r\n            skipRenewal: [false]\r\n        }, { validator: oneOfControlsMandatoryValidator });\r\n        this.store.select(selectUsername)\r\n            .pipe(takeUntil(this.ngUnsubscribe))\r\n            .subscribe(username => this.username = username);\r\n        this.loginStatus$ = this.store.pipe(select(getLoginStatus));\r\n        this.store.select(selectLoginInProgress)\r\n            .pipe(takeUntil(this.ngUnsubscribe))\r\n            .subscribe(inProgress => {\r\n                inProgress ? this.form.disable() : this.form.enable();\r\n            });\r\n    }\r\n\r\n    closeDialog(): void {\r\n        this.store.dispatch(setLoginInitialValues());\r\n        super.closeDialog();\r\n    }\r\n\r\n    renewSessionToken(): void {\r\n        if (this.form.value.skipRenewal) {\r\n            this.config.data.startSnapshot();\r\n            this.closeDialog();\r\n\r\n            return;\r\n        }\r\n\r\n        this.store.dispatch(renewSessionToken(\r\n            {\r\n                username: this.username,\r\n                password: this.form.value.password,\r\n                shouldStartOperation: true\r\n            }\r\n        ));\r\n        this.store.select(selectTokenRenewalSuccessful)\r\n            .pipe(\r\n                takeUntil(this.ngUnsubscribe),\r\n                filter(isRenewalSuccessful => !!isRenewalSuccessful?.status))\r\n            .subscribe(() => {\r\n                this.closeDialog();\r\n                this.store.dispatch(resetOperationStatus());\r\n            });\r\n    }\r\n\r\n    setPasswordVisible(isVisible: boolean): void {\r\n        this.showPassword = isVisible;\r\n    }\r\n\r\n    updatePasswordInputState(event: { checked: boolean, originalEvent: any }) {\r\n        event.checked\r\n            ? this.form.get('password')?.disable()\r\n            : this.form.get('password')?.enable();\r\n    }\r\n\r\n    getSkipRenewalControl(): FormControl {\r\n        return this.form.get('skipRenewal') as FormControl;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable, SchedulerLike, timer, asyncScheduler } from 'rxjs';\r\nimport { leaveZone } from '@oam/core/lib/functions/leave-zone-scheduler';\r\nimport { enterZone } from '@oam/core/lib/functions/enter-zone-scheduler';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { observeOn, switchMap, filter, map, distinctUntilChanged } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TimerServiceService {\r\n\r\n    constructor(private readonly ngZone: NgZone, private store: Store) {\r\n    }\r\n\r\n    public getTimer(scheduler: SchedulerLike, dueTime = 0, delay = 5000): Observable<number> {\r\n        return timer(0, delay, leaveZone(this.ngZone, scheduler))\r\n            .pipe(\r\n                observeOn(enterZone(this.ngZone, scheduler))\r\n            );\r\n    }\r\n\r\n    public setSnapshotDurationTimer(selector: any, scheduler = asyncScheduler) {\r\n        return this.store.pipe(\r\n            select(selector),\r\n            filter(startedAt => !!startedAt || startedAt === 0),\r\n            switchMap((startedAt: number) =>\r\n                this.getTimer(scheduler, 0, 1000).pipe(\r\n                    map(() => Date.now() - startedAt)\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    public setSnapshotDuration(selector: any) {\r\n        return this.store.pipe(\r\n            select(selector),\r\n            filter((duration: number) => !!duration && duration >= 0),\r\n            distinctUntilChanged(),\r\n            map((durationMs: number) => durationMs)\r\n        );\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ui-webem-confirm-dialog',\r\n    templateUrl: './confirm-dialog.component.html'\r\n})\r\nexport class ConfirmDialogComponent {\r\n    @Input() header: string | null = null;\r\n    @Input() message: string | null = null;\r\n    @Input() key: string;\r\n    @Input() icon: string | null = null;\r\n    @Input() acceptLabel = 'OK';\r\n    @Input() acceptIcon = '';\r\n    @Input() acceptVisible = true;\r\n    @Input() rejectLabel = 'Cancel';\r\n    @Input() rejectIcon = '';\r\n    @Input() rejectVisible = true;\r\n    @Input() closeOnEscape = true;\r\n    @Input() rtl = false;\r\n    @Input() closable = false;\r\n    @Input() appendTo: any;\r\n    @Input() acceptButtonStyleClass: string;\r\n    @Input() rejectButtonStyleClass: string;\r\n    @Input() baseZIndex = 0;\r\n    @Input() autoZIndex = true;\r\n    @Input() transitionOptions = '400ms cubic-bezier(0.25, 0.8, 0.25, 1)';\r\n}\r\n","<p-confirmDialog\r\n    [header]=\"header ? header : ''\"\r\n    [message]=\"message ? message : ''\"\r\n    [key]=\"key\"\r\n    [icon]=\"icon ? icon : ''\"\r\n    [acceptLabel]=\"acceptLabel\"\r\n    [acceptIcon]=\"acceptIcon\"\r\n    [acceptVisible]=\"acceptVisible\"\r\n    [rejectLabel]=\"rejectLabel\"\r\n    [rejectIcon]=\"rejectIcon\"\r\n    [rejectVisible]=\"rejectVisible\"\r\n    [closeOnEscape]=\"closeOnEscape\"\r\n    [rtl]=\"rtl\"\r\n    [closable]=\"closable\"\r\n    [appendTo]=\"appendTo\"\r\n    [acceptButtonStyleClass]=\"acceptButtonStyleClass\"\r\n    [rejectButtonStyleClass]=\"rejectButtonStyleClass\"\r\n    [baseZIndex]=\"baseZIndex\"\r\n    [autoZIndex]=\"autoZIndex\"\r\n    [transitionOptions]=\"transitionOptions\"\r\n></p-confirmDialog>\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport {\r\n    MAP_TO_UI_COLLECTING_STATUS_DISPLAY,\r\n    MAP_TO_UI_TRANSFER_STATUS_DISPLAY\r\n} from '@oam/diagnostic-snapshot/core/models';\r\n\r\nconst MAP_TO_UI_MSG = {\r\n    ...MAP_TO_UI_COLLECTING_STATUS_DISPLAY,\r\n    ...MAP_TO_UI_TRANSFER_STATUS_DISPLAY\r\n};\r\n\r\n@Pipe({\r\n    name: 'translateOperationStatus'\r\n})\r\nexport class TranslateOperationStatusPipe implements PipeTransform {\r\n\r\n    transform(status: string): string {\r\n        return MAP_TO_UI_MSG[status];\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport moment from 'moment';\r\nimport 'moment-duration-format';\r\n\r\n@Pipe({\r\n    name: 'formatTimePipe'\r\n})\r\nexport class FormatTimePipe implements PipeTransform {\r\n    transform(time: number): any {\r\n        return moment.utc(moment.duration(time,'ms').asMilliseconds()).format('HH:mm:ss');\r\n    }\r\n}\r\n","<ui-webem-rich-panel>\r\n    <ng-template #title>Snapshot Settings</ng-template>\r\n    <ng-template #content>\r\n        <ng-container *ngIf=\"(selectSnapshotOperationStatus$ | async) as snapshotOperationStatus\">\r\n\r\n            <form [formGroup]=\"collectSnapshotForm\">\r\n                <div fxLayout=\"column\" class=\"form-row\">\r\n                <span [ngClass]=\"{'disabled': snapshotOperationStatus.isSnapshotOperationOngoing}\"\r\n                      class=\"extra-margin-element\">Scope:</span>\r\n                    <div class=\"grid-radio-buttons\"\r\n                         [ngClass]=\"{ 'disabled': snapshotOperationStatus.isSnapshotOperationOngoing}\">\r\n                        <p-radioButton class=\"grid-radio-item\"\r\n                                       [name]=\"'coverage'\" *ngFor=\"let coverageValue of coverageValues\"\r\n                                       [label]=\"coverageValue.name\"\r\n                                       [value]=\"coverageValue.value\"\r\n                                       [id]=\"coverageValue.value\"\r\n                                       formControlName=\"coverage\">\r\n                        </p-radioButton>\r\n                    </div>\r\n                </div>\r\n                <div fxLayout=\"column\" class=\"form-row\">\r\n                    <label for=\"filter\"\r\n                           class=\"extra-margin-element\"\r\n                           [ngClass]=\"{'disabled': snapshotOperationStatus.isSnapshotOperationOngoing}\">Filter by regex:</label>\r\n                    <textarea class=\"ta-filter\"\r\n                              id=\"filter\"\r\n                              [rows]=\"4\"\r\n                              [cols]=\"30\"\r\n                              pInputTextarea\r\n                              placeholder=\"<Type in regex>\"\r\n                              formControlName=\"filterRegx\">\r\n                    </textarea>\r\n                </div>\r\n                <div fxLayout=\"column\" class=\"form-row\">\r\n                    <label for=\"notes\"\r\n                           class=\"extra-margin-element\"\r\n                           [ngClass]=\"{'disabled': snapshotOperationStatus.isSnapshotOperationOngoing}\">Notes:</label>\r\n                    <textarea id=\"notes\"\r\n                              class=\"ta-notes\"\r\n                              [rows]=\"4\"\r\n                              [cols]=\"30\"\r\n                              pInputTextarea\r\n                              placeholder=\"<Type in notes>\"\r\n                              formControlName=\"reason\">\r\n                    </textarea>\r\n                </div>\r\n                <div fxLayout=\"column\" class=\"form-row\">\r\n                    <span [ngClass]=\"{'disabled': snapshotOperationStatus.isSnapshotOperationOngoing}\"\r\n                          class=\"extra-margin-element\">Save location:</span>\r\n                    <div class=\"grid-radio-buttons\"\r\n                         [ngClass]=\"{'radio-button-disabled': snapshotOperationStatus.isSnapshotOperationOngoing}\">\r\n                        <p-radioButton class=\"grid-radio-item\"\r\n                                       [name]=\"'location'\"\r\n                                       *ngFor=\"let locationValue of locationValues\"\r\n                                       [label]=\"locationValue.name\"\r\n                                       [value]=\"locationValue.value\"\r\n                                       [id]=\"locationValue.value\"\r\n                                       formControlName=\"location\">\r\n                        </p-radioButton>\r\n                    </div>\r\n                </div>\r\n                <div class=\"form-row\">\r\n                    <ui-webem-button\r\n                        id=\"snapshot-collect-button\"\r\n                        (action)=\"checkSessionTimeAndStartCollectingSnapshot()\"\r\n                        [title]=\"collectSnapshotBtnTitle$ | async\"\r\n                        [model]=\"startCollectingSnapshotButtonModel\"\r\n                        [disabled]=\"(isTransferSnapshotOngoing$ | async) ||\r\n                                    snapshotOperationStatus.isSnapshotOperationOngoing ||\r\n                                    !isSnapshotIdle\">\r\n                    </ui-webem-button>\r\n                    <ui-webem-button\r\n                        *ngIf=\"(snapshotOperationStatus.isCollectingSnapshotOngoing || snapshotOperationStatus.isCancellingCollection)\"\r\n                        id=\"snapshot-cancel\"\r\n                        (action)=\"showConfirmationModal()\"\r\n                        [title]=\"'Cancel'\"\r\n                        [model]=\"stopCollectingSnapshotButtonModel\"\r\n                        [disabled]=\"(snapshotOperationStatus.isCollectingSnapshotSavingOngoing || snapshotOperationStatus.isCancellingCollection)\">\r\n                    </ui-webem-button>\r\n\r\n                    <div class=\"snapshot-notifications-container\">\r\n                        <div id=\"snapshot-notifications\" class=\"snapshot-download-status-notification\">\r\n                            <div\r\n                                *ngIf=\"snapshotOperationStatus.isCancellingCollection || snapshotOperationStatus.isCollectingSnapshotOngoing\"\r\n                                class=\"notification-container\">\r\n                                <div class=\"snapshot-duration\">\r\n                                    <ui-webem-spinner class=\"spinner-icon\"></ui-webem-spinner>\r\n                                </div>\r\n                                <div class=\"snapshot-duration-text\">\r\n                                    <span class=\"collection-status\"\r\n                                        *ngIf=\"snapshotOperationStatus.isCancellingCollection; else collectingSnapshot\">Cancelling snapshot collection</span>\r\n                                    <ng-template #collectingSnapshot>\r\n                                        <span\r\n                                            class=\"collection-status\">{{selectCollectingStatus$ | async | translateOperationStatus}} </span>\r\n                                        <span\r\n                                            class=\"duration-time\">Elapsed time: {{ collectingSnapshotDurationTimer$ | async | formatTimePipe }}.</span>\r\n                                    </ng-template>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div *ngIf=\"snapshotOperationStatus.isCollectingSnapshotFinished\"\r\n                                 class=\"notification-container notification-success\">\r\n                                <i id=\"snapshot-successful\" class=\"success-icon mdi mdi-check-circle\"></i>\r\n                                <div class=\"notification-text\">\r\n                                    <span\r\n                                        class=\"collection-status\">{{selectCollectingStatus$ | async | translateOperationStatus}} </span>\r\n                                    <span\r\n                                        class=\"duration-time\">Elapsed time: {{ collectingSnapshotDuration$ | async | formatTimePipe }}.</span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div *ngIf=\"snapshotOperationStatus.isCollectionCancelled\"\r\n                                 class=\"notification-container notification-cancel\">\r\n                                <i id=\"snapshot-cancelled\" class=\"information-icon mdi mdi-information\"></i>\r\n                                <div class=\"notification-text\">\r\n                                    <div class=\"title\">Snapshot collection cancelled</div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div *ngIf=\"snapshotOperationStatus.isCollectingSnapshotFailed\"\r\n                                 class=\"notification-container notification-failed\">\r\n                                <i id=\"snapshot-failed\" class=\"alert-icon mdi mdi-alert\"></i>\r\n                                <div class=\"notification-text\">\r\n                                    <div class=\"title\">Snapshot collection failed</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            <ng-container *ngIf=\"snapshotOperationStatus.isCollectingSnapshotOngoing\">\r\n                <ui-webem-confirm-dialog\r\n                    header=\"Confirmation\"\r\n                    class=\"cancel-snapshot\"\r\n                    key=\"snapshotConfirmationDialog\">\r\n                </ui-webem-confirm-dialog>\r\n            </ng-container>\r\n        </ng-container>\r\n    </ng-template>\r\n</ui-webem-rich-panel>\r\n","import { ChangeDetectorRef, Component, OnInit, OnDestroy, Input, ChangeDetectionStrategy, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { select, Store } from '@ngrx/store';\r\nimport {\r\n    ErrorMessage,\r\n    IOption, ISnapshotOperationState,\r\n    SNAPSHOT_LOCATION\r\n} from '@oam/diagnostic-snapshot/core/models';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, filter, shareReplay, takeUntil, take } from 'rxjs/operators';\r\nimport { DEFAULT_LOCATION, DEFAULT_RANGE, LOCATION_VALUES, RANGE_VALUES } from '@oam/diagnostic-snapshot/core/config';\r\nimport { TimerServiceService } from '@oam/diagnostic-snapshot/core/services/timer-service.service';\r\nimport { TokenExpirationTimeService } from '@oam/core/lib/services/token-expiration-time.service';\r\nimport {\r\n    selectCollectingSnapshotDuration,\r\n    selectCollectingSnapshotErrorMessage,\r\n    selectCollectingSnapshotStartedAt,\r\n    selectCollectingSnapshotState,\r\n    selectCollectingStatus,\r\n    selectCollectSnapshotBtnTitle,\r\n    selectSnapshotOperationStatus\r\n} from '@oam/diagnostic-snapshot/core/selectors/collecting-snapshot.selector';\r\nimport { ButtonModel, ButtonTheme, ButtonThickness, confirmDialog, openDialog } from '@oam/cu-ui';\r\nimport { SessionTokenRenewalDialogComponent } from '@oam/cu-ui/lib/session-token-renewal/components/session-token-renewal-dialog/session-token-renewal-dialog.component';\r\nimport {\r\n    cleanCollectSnapshotResultState,\r\n    cleanSnapshotStateIfCollectingIsNotOngoing,\r\n    setSnapshotFormValues,\r\n    startCancellingCollectionLocalSnapshot,\r\n    startCancellingCollectionRemoteSnapshot,\r\n    startCollectingLocalSnapshot,\r\n    startCollectingRemoteSnapshot,\r\n    updateSnapshotCancelState\r\n} from '@oam/diagnostic-snapshot/core/actions/snapshot.action';\r\nimport { confirmDialogExclamationIcon } from '@oam/shared';\r\nimport { selectTokenRenewalSuccessful } from '@oam/auth/lib/auth/core/reducers/login.reducer';\r\nimport {\r\n    selectSnapshotServerConnectionFailure\r\n} from '@oam/diagnostic-snapshot/core/selectors/collecting-snapshot-server-status.selector';\r\nimport { selectTransferSnapshotIsOngoing } from '@oam/diagnostic-snapshot/core/selectors/transfer-snapshot-to-nms.selector';\r\n\r\n@Component({\r\n    selector: 'diagnostic-snapshot-collection',\r\n    templateUrl: './diagnostic-snapshot-collection.component.html',\r\n    styleUrls: ['./diagnostic-snapshot-collection.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DiagnosticSnapshotCollectionComponent implements OnInit, OnDestroy {\r\n    @Input() isSnapshotIdle: boolean;\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n    readonly startCollectingSnapshotButtonModel: ButtonModel = {\r\n        label: 'Collect Snapshot',\r\n        theme: ButtonTheme.Accent,\r\n        thickness: ButtonThickness.Default\r\n    };\r\n\r\n    readonly stopCollectingSnapshotButtonModel: ButtonModel = {\r\n        label: 'Cancel',\r\n        theme: ButtonTheme.Default,\r\n        icon: 'mdi mdi-15px mdi-window-close',\r\n        thickness: ButtonThickness.Default\r\n    };\r\n    collectSnapshotForm: FormGroup;\r\n    coverageValues: IOption[];\r\n    locationValues: IOption[];\r\n\r\n    collectSnapshotBtnTitle$: Observable<string>;\r\n    collectingSnapshotDurationTimer$: Observable<number>;\r\n    collectingSnapshotDuration$: Observable<number>;\r\n    selectCollectingSnapshotErrorMessage$: Observable<ErrorMessage | undefined>;\r\n    snapshotServerConnectionFailure$: Observable<boolean>;\r\n    selectCollectingStatus$: Observable<string | undefined>;\r\n    selectSnapshotOperationStatus$: Observable<ISnapshotOperationState>;\r\n    isTransferSnapshotOngoing$: Observable<boolean>;\r\n\r\n    constructor(\r\n        private readonly store: Store,\r\n        private readonly timerService: TimerServiceService,\r\n        private readonly cd: ChangeDetectorRef,\r\n        private readonly tokenExpirationService: TokenExpirationTimeService\r\n    ) {\r\n        this.coverageValues = RANGE_VALUES;\r\n        this.locationValues = LOCATION_VALUES;\r\n\r\n        this.collectSnapshotForm = new FormGroup({\r\n            coverage: new FormControl(DEFAULT_RANGE.value, [Validators.required]),\r\n            location: new FormControl(DEFAULT_LOCATION.value, [Validators.required]),\r\n            filterRegx: new FormControl(''),\r\n            reason: new FormControl('')\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.collectingSnapshotDurationTimer$ = this.timerService.setSnapshotDurationTimer(selectCollectingSnapshotStartedAt).pipe(\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n        this.collectingSnapshotDuration$ = this.timerService.setSnapshotDuration(selectCollectingSnapshotDuration).pipe(\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.snapshotServerConnectionFailure$ = this.store.pipe(\r\n            select(selectSnapshotServerConnectionFailure),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.store.pipe(\r\n            select(selectCollectingSnapshotState),\r\n            take(1))\r\n            .subscribe(({collectStatus, location, reason, filterRegx, coverage}) => {\r\n                    if (collectStatus) {\r\n                        this.collectSnapshotForm.patchValue({\r\n                            location, reason, filterRegx, coverage\r\n                        });\r\n                    }\r\n                }\r\n            );\r\n\r\n        this.selectSnapshotOperationStatus$ = this.store.pipe(\r\n            select(selectSnapshotOperationStatus),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.selectSnapshotOperationStatus$.subscribe(({isSnapshotOperationOngoing}) => {\r\n            isSnapshotOperationOngoing ?\r\n                this.collectSnapshotForm.disable({ emitEvent: false }) :\r\n                this.collectSnapshotForm.enable({ emitEvent: false });\r\n        });\r\n\r\n        this.collectSnapshotForm.valueChanges.pipe(\r\n            takeUntil(this.ngUnsubscribe),\r\n            distinctUntilChanged()\r\n        ).subscribe(() => {\r\n            this.store.dispatch(cleanCollectSnapshotResultState());\r\n        });\r\n\r\n        this.selectCollectingStatus$ = this.store.pipe(\r\n            select(selectCollectingStatus),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.collectSnapshotBtnTitle$ = this.store.pipe(\r\n            select(selectCollectSnapshotBtnTitle),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.selectCollectingSnapshotErrorMessage$ = this.store.pipe(\r\n            select(selectCollectingSnapshotErrorMessage),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.store.select(selectTokenRenewalSuccessful)\r\n            .pipe(\r\n                takeUntil(this.ngUnsubscribe),\r\n                filter(isRenewalSuccessful =>\r\n                    !!isRenewalSuccessful?.status\r\n                    && !!isRenewalSuccessful?.shouldStartOperationAfterTokenRenewal))\r\n            .subscribe(() => {\r\n                this.startCollectingSnapshot();\r\n            });\r\n\r\n        this.isTransferSnapshotOngoing$ = this.store.pipe(\r\n            select(selectTransferSnapshotIsOngoing),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.store.dispatch(cleanSnapshotStateIfCollectingIsNotOngoing());\r\n        this.store.dispatch(updateSnapshotCancelState());\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    showConfirmationModal() {\r\n        this.store.dispatch(confirmDialog({\r\n            header: 'Cancel Snapshot',\r\n            key: 'snapshotConfirmationDialog',\r\n            message: 'You are about to cancel Snapshot collection\\n\\n Are you sure you want to proceed?',\r\n            icon: confirmDialogExclamationIcon,\r\n            rejectLabel: 'Cancel',\r\n            accept: this.onYesButtonClick\r\n        }));\r\n    }\r\n\r\n    onYesButtonClick = (): void => {\r\n        this.snapshotLocationIsLocal() ?\r\n            this.store.dispatch(startCancellingCollectionLocalSnapshot()) :\r\n            this.store.dispatch(startCancellingCollectionRemoteSnapshot());\r\n    };\r\n\r\n    startCollectingSnapshot() {\r\n        this.store.dispatch(setSnapshotFormValues({\r\n            reason: this.collectSnapshotForm.value.reason,\r\n            coverage: this.collectSnapshotForm.value.coverage,\r\n            filterRegx: this.collectSnapshotForm.value.filterRegx,\r\n            location: this.collectSnapshotForm.value.location\r\n        }));\r\n\r\n        this.snapshotLocationIsLocal() ?\r\n            this.store.dispatch(startCollectingLocalSnapshot()) :\r\n            this.store.dispatch(startCollectingRemoteSnapshot());\r\n    }\r\n\r\n    checkSessionTimeAndStartCollectingSnapshot() {\r\n        if (this.snapshotLocationIsLocal() &&\r\n            this.tokenExpirationService.isRemainingTimeLessThan40Minutes()) {\r\n            this.openRenewTokenDialog();\r\n        } else {\r\n            this.startCollectingSnapshot();\r\n        }\r\n    }\r\n\r\n    openRenewTokenDialog(): void {\r\n        this.store.dispatch(openDialog({\r\n            componentType: SessionTokenRenewalDialogComponent,\r\n            config: {\r\n                header: 'Session token renewal',\r\n                closable: false,\r\n                data: {\r\n                    startSnapshot: this.startCollectingSnapshot.bind(this)\r\n                }\r\n            }\r\n        }));\r\n    }\r\n\r\n    snapshotLocationIsLocal = (): boolean => {\r\n        return this.collectSnapshotForm.value.location === SNAPSHOT_LOCATION.LOCAL;\r\n    };\r\n}\r\n","<ui-webem-rich-panel>\r\n    <ng-template #title>Collected Files</ng-template>\r\n    <ng-template #content>\r\n        <div class=\"snapshot-files-container\">\r\n            <div *ngIf=\"!detailFiles?.length else filesTable\" class=\"snapshot-no-files-collected-notification\">\r\n                <i class=\"information-icon mdi mdi-information\" alt=\"No files are being downloaded locally\"></i>\r\n                <span>No files are being downloaded locally</span>\r\n            </div>\r\n            <ng-template #filesTable>\r\n                <p-table\r\n                    #table\r\n                    [value]=\"detailFiles\"\r\n                    [scrollable]=\"true\"\r\n                    scrollHeight=\"calc(100vh - {{toolbarHeight}}\"\r\n                    [autoLayout]=\"true\">\r\n                    <ng-template pTemplate=\"colgroup\" let-columns>\r\n                        <colgroup>\r\n                            <col *ngFor=\"let col of columns\">\r\n                        </colgroup>\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"header\">\r\n                        <tr class=\"snapshot-details-table-row\">\r\n                            <th class=\"snapshot-details-table-col file-id-column\">\r\n                                File name\r\n                            </th>\r\n                            <th class=\"snapshot-details-table-col\">\r\n                                File size (kB)\r\n                            </th>\r\n                        </tr>\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"body\" let-file>\r\n                        <tr class=\"snapshot-details-table-row body\">\r\n                            <td class=\"snapshot-details-table-col file-id-column\">{{file.fileId}}</td>\r\n                            <td class=\"snapshot-details-table-col\">{{file.fileSize}}</td>\r\n                        </tr>\r\n                    </ng-template>\r\n                </p-table>\r\n            </ng-template>\r\n        </div>\r\n    </ng-template>\r\n</ui-webem-rich-panel>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    Input,\r\n    NgZone,\r\n    OnChanges,\r\n    OnInit,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { DetailFiles } from '../../core/models';\r\nimport { Table } from 'primeng/table';\r\n\r\n@Component({\r\n    selector: 'diagnostic-snapshot-details',\r\n    templateUrl: './diagnostic-snapsthot-details.component.html',\r\n    styleUrls: ['./diagnostic-snapsthot-details.component.scss']\r\n})\r\n\r\nexport class DiagnosticSnapsthotDetailsComponent implements OnInit, OnChanges {\r\n    @Input() detailFiles: DetailFiles[] = [];\r\n    @ViewChild('table') table: Table;\r\n    toolbarHeight = '172px';\r\n\r\n    constructor(private readonly ngZone: NgZone) {\r\n    }\r\n\r\n    ngOnInit() {}\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.scroll();\r\n    }\r\n\r\n    scroll() {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                this.ngZone.run(() => {\r\n                    if (this.table && this.table.containerViewChild) {\r\n                        const body = this.table.containerViewChild.nativeElement.getElementsByClassName('p-datatable-scrollable-body')[0];\r\n                        body.scrollTop = body.scrollHeight;\r\n                    }\r\n                });\r\n            }, 0);\r\n        });\r\n    }\r\n}\r\n","<ui-webem-rich-panel id=\"transfer-snapshot\" *ngIf=\"selectTransferOperationStatus$ | async as transferOperationStatus\">\r\n    <ng-template #title>Transfer Snapshot To NMS</ng-template>\r\n    <ng-template #content>\r\n        <ui-webem-button\r\n            id=\"transfer-snapshot-to-nms\"\r\n            (action)=\"startTransferSnapshot()\"\r\n            [title]=\"(transferSnapshotBtnTitle$ | async)\"\r\n            [model]=\"transferSnapshotToNMSButtonModel\"\r\n            [disabled]=\"!isSnapshotIdle ||\r\n                        !remoteSnapshotFileName ||\r\n                        (selectSnapshotOperationIsOngoing$ | async) ||\r\n                        transferOperationStatus.isTransferSnapshotOngoing\">\r\n        </ui-webem-button>\r\n\r\n        <div class=\"transfer-notifications-container\">\r\n            <div id=\"transfer-notifications\" class=\"transfer-status-notification\">\r\n                <div *ngIf=\"transferOperationStatus.isTransferSnapshotOngoing\" class=\"notification-container\">\r\n                    <div class=\"transfer-duration\">\r\n                        <ui-webem-spinner class=\"spinner-icon\"></ui-webem-spinner>\r\n                    </div>\r\n                    <div class=\"transfer-duration-text\">\r\n                        <span class=\"transfer-status\">{{selectSnapshotTransferStatus$ | async | translateOperationStatus}}</span>\r\n                        <span class=\"duration-timer\"> Elapsed time: {{transferSnapshotDurationTimer$ | async | formatTimePipe }}.</span>\r\n                    </div>\r\n                </div>\r\n                <div *ngIf=\"transferOperationStatus.isTransferSnapshotFinished\"\r\n                     class=\"notification-container notification-success\">\r\n                    <i id=\"transfer-succeeded\" class=\"success-icon mdi mdi-check-circle\"></i>\r\n                    <div class=\"notification-text\">\r\n                        <span class=\"transfer-status\">{{selectSnapshotTransferStatus$ | async | translateOperationStatus}}</span>\r\n                        <span class=\"duration-timer\"> Elapsed time: {{ transferSnapshotDuration$ | async | formatTimePipe}}.</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div *ngIf=\"transferOperationStatus.isTransferSnapshotFailed\"\r\n                     class=\"notification-container notification-failed\">\r\n                    <i id=\"transfer-failed\" class=\"alert-icon mdi mdi-alert\"></i>\r\n                    <div class=\"notification-text\">\r\n                        <span class=\"title\">{{selectSnapshotTransferStatus$ | async | translateOperationStatus}}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n</ui-webem-rich-panel>\r\n","import { Component, OnInit, ChangeDetectionStrategy, Input } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ButtonModel, ButtonTheme, ButtonThickness } from '@oam/cu-ui';\r\nimport {\r\n    selectSnapshotTransferStatus, selectTransferOperationStatus, selectTransferSnapshotBtnTitle,\r\n    selectTransferSnapshotDuration,\r\n    selectTransferSnapshotErrorMessage,\r\n    selectTransferSnapshotStartedAt\r\n} from '@oam/diagnostic-snapshot/core/selectors/transfer-snapshot-to-nms.selector';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport {\r\n    cleanTransferStateIfTransferIsNotOngoing,\r\n    startTransferSnapshotToNMS\r\n} from '@oam/diagnostic-snapshot/core/actions/snapshot.action';\r\nimport { TimerServiceService } from '@oam/diagnostic-snapshot/core/services/timer-service.service';\r\nimport {\r\n    ErrorMessage, ITransferSnapshot\r\n} from '@oam/diagnostic-snapshot/core/models';\r\nimport { selectSnapshotOperationIsOngoing } from '@oam/diagnostic-snapshot/core/selectors/collecting-snapshot.selector';\r\n\r\n@Component({\r\n    selector: 'diagnostic-snapshot-transfer',\r\n    templateUrl: './diagnostic-snapshot-transfer.component.html',\r\n    styleUrls: ['./diagnostic-snapshot-transfer.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DiagnosticSnapshotTransferComponent implements OnInit {\r\n    @Input() isSnapshotIdle: boolean;\r\n    @Input() remoteSnapshotFileName: string | undefined;\r\n\r\n    selectTransferOperationStatus$: Observable<ITransferSnapshot>;\r\n    transferSnapshotDurationTimer$: Observable<number>;\r\n    transferSnapshotDuration$: Observable<number>;\r\n    selectTransferSnapshotErrorMessage$: Observable<ErrorMessage | undefined>;\r\n    transferSnapshotBtnTitle$: Observable<string>;\r\n    selectSnapshotTransferStatus$: Observable<string | undefined>;\r\n    selectSnapshotOperationIsOngoing$: Observable<boolean>;\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n\r\n    readonly transferSnapshotToNMSButtonModel: ButtonModel = {\r\n        label: 'Transfer Snapshot',\r\n        theme: ButtonTheme.Accent,\r\n        thickness: ButtonThickness.Default\r\n    };\r\n\r\n    constructor(private readonly store: Store, private readonly timerService: TimerServiceService) {};\r\n\r\n    ngOnInit(): void {\r\n        this.transferSnapshotDurationTimer$ = this.timerService.setSnapshotDurationTimer(selectTransferSnapshotStartedAt).pipe(\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n        this.transferSnapshotDuration$ = this.timerService.setSnapshotDuration(selectTransferSnapshotDuration).pipe(\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.selectTransferOperationStatus$ = this.store.pipe(\r\n            select(selectTransferOperationStatus),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.selectTransferSnapshotErrorMessage$ = this.store.pipe(\r\n            select(selectTransferSnapshotErrorMessage),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.selectSnapshotTransferStatus$ = this.store.pipe(\r\n            select(selectSnapshotTransferStatus),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.transferSnapshotBtnTitle$ = this.store.pipe(\r\n            select(selectTransferSnapshotBtnTitle),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.selectSnapshotOperationIsOngoing$ = this.store.pipe(\r\n            select(selectSnapshotOperationIsOngoing),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.store.dispatch(cleanTransferStateIfTransferIsNotOngoing());\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    startTransferSnapshot() {\r\n        this.store.dispatch(startTransferSnapshotToNMS());\r\n    }\r\n}\r\n","<ng-container *oamFeatureFlag=\"'PRODUCT_SNAPSHOT_TRANSFER'\">\r\n    <ui-webem-alarm-message\r\n        *ngIf=\"(remoteSnapshotFileName$ | async) as remoteSnapshotFileName\"\r\n        [text]=\"'vDU has an existing snapshot file <' + remoteSnapshotFileName + '>. Triggering snapshot collection will remove the existing snapshot file.'\">\r\n    </ui-webem-alarm-message>\r\n</ng-container>\r\n\r\n<div class=\"snapshot-panels\">\r\n    <div class=\"snapshot-operation-column\">\r\n        <diagnostic-snapshot-collection\r\n            [isSnapshotIdle]=\"(isSnapshotIdle$ | async)\">\r\n        </diagnostic-snapshot-collection>\r\n\r\n        <diagnostic-snapshot-transfer\r\n            *oamFeatureFlag=\"'PRODUCT_SNAPSHOT_TRANSFER'\"\r\n            [isSnapshotIdle]=\"(isSnapshotIdle$ | async)\"\r\n            [remoteSnapshotFileName]=\"(remoteSnapshotFileName$ | async)\">\r\n        </diagnostic-snapshot-transfer>\r\n    </div>\r\n    <diagnostic-snapshot-details\r\n        [detailFiles]=\"(collectingSnapshotFiles$ | async)!\">\r\n    </diagnostic-snapshot-details>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DiagnosticSnapshotHomeComponent } from '@oam/diagnostic-snapshot/pages/diagnostic-snapshot-home/diagnostic-snapshot-home.component';\r\nimport { DiagnosticContentMenuComponent } from '../../../diagnostic/diagnostic-shared/src/lib/components/diagnostic-content-menu/diagnostic-content-menu.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: DiagnosticSnapshotHomeComponent,\r\n        outlet: 'content_center'\r\n    },\r\n    {\r\n        path: '',\r\n        component: DiagnosticContentMenuComponent,\r\n        outlet: 'content_menu'\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    imports: [CommonModule, RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class DiagnosticSnapshotRoutingModule {\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { DetailFiles, ISnapshotOperationState } from '../../core/models';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport {\r\n    selectCollectingSnapshotAvailability,\r\n} from '@oam/diagnostic-snapshot/core/selectors/collecting-snapshot-server-status.selector';\r\nimport {\r\n    selectCollectingSnapshotFilesChanged\r\n} from '@oam/diagnostic-snapshot/core/selectors/collecting-snapshot.selector';\r\nimport {\r\n    cleanServerStatusIfOperationIsNotOngoing,\r\n    startCheckingSnapshotServerStatus,\r\n    startGettingRemoteSnapshotNeedToBeTransferred\r\n} from '@oam/diagnostic-snapshot/core/actions/snapshot.action';\r\nimport {\r\n    selectRemoteSnapshotFileName\r\n} from '@oam/diagnostic-snapshot/core/selectors/transfer-snapshot-to-nms.selector';\r\nimport { FeatureFlag } from '@oam/feature-flag';\r\nimport { AvailableFeatureFlagsEnum } from '@oam/core/lib/environment-variables/core/models';\r\n\r\n@Component({\r\n    selector: 'diagnostic-snapshot-home',\r\n    templateUrl: './diagnostic-snapshot-home.component.html',\r\n    styleUrls: ['./diagnostic-snapshot-home.component.scss']\r\n})\r\nexport class DiagnosticSnapshotHomeComponent implements OnInit, OnDestroy {\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n    collectingSnapshotFiles$: Observable<DetailFiles[]>;\r\n    isSnapshotIdle$: Observable<boolean>;\r\n    remoteSnapshotFileName$: Observable<string | undefined>;\r\n\r\n    constructor(\r\n        private readonly store: Store,\r\n        private readonly featureFlag: FeatureFlag\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.featureFlag.isFeatureEnabled(AvailableFeatureFlagsEnum.PRODUCT_SNAPSHOT_TRANSFER)) {\r\n            this.store.dispatch(startGettingRemoteSnapshotNeedToBeTransferred());\r\n        }\r\n\r\n        this.isSnapshotIdle$ = this.store.pipe(\r\n            select(selectCollectingSnapshotAvailability),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.collectingSnapshotFiles$ = this.store.pipe(\r\n            select(selectCollectingSnapshotFilesChanged),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.remoteSnapshotFileName$ = this.store.pipe(\r\n            select(selectRemoteSnapshotFileName),\r\n            takeUntil(this.ngUnsubscribe)\r\n        );\r\n\r\n        this.store.dispatch(startCheckingSnapshotServerStatus());\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.store.dispatch(cleanServerStatusIfOperationIsNotOngoing());\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SessionTokenRenewalDialogComponent } from '@oam/cu-ui/lib/session-token-renewal/components/session-token-renewal-dialog/session-token-renewal-dialog.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { WebemButtonModule } from '../button/button.module';\r\nimport { ShowPasswordButtonModule,  } from '../show-password-button/show-password-button.module';\r\nimport { SharedModule } from 'primeng/api';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\n\r\n@NgModule({\r\n    declarations: [SessionTokenRenewalDialogComponent],\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        ShowPasswordButtonModule,\r\n        SharedModule,\r\n        CheckboxModule,\r\n        InputTextModule,\r\n        WebemButtonModule\r\n    ],\r\n    exports: [SessionTokenRenewalDialogComponent]\r\n})\r\nexport class SessionTokenRenewalModule {\r\n}\r\n","import { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Injectable } from '@angular/core';\r\nimport { asyncScheduler, of } from 'rxjs';\r\nimport {\r\n    catchError,\r\n    exhaustMap,\r\n    map,\r\n    mergeMap,\r\n    takeUntil,\r\n    withLatestFrom,\r\n    filter\r\n} from 'rxjs/operators';\r\nimport { Store, select } from '@ngrx/store';\r\nimport {\r\n    cleanTransferSnapshotState,\r\n    cleanTransferStateIfTransferIsNotOngoing,\r\n    setRemoteSnapshotFileNameAndOperationId,\r\n    startGettingRemoteSnapshotError,\r\n    startGettingRemoteSnapshotNeedToBeTransferred,\r\n    startTransferSnapshotToNMS,\r\n    stopGettingRemoteSnapshotNeedToBeTransferred,\r\n    transferSnapshotFailed,\r\n    transferSnapshotToNMSIsFinished\r\n} from '@oam/diagnostic-snapshot/core/actions/snapshot.action';\r\nimport { SnapshotStatus } from '@oam/cu-asm-api';\r\nimport { addNotification } from '@oam/core/lib/actions/toast-message.actions';\r\nimport { PollingService } from '@oam/core';\r\nimport { SnapshotFetchFilesService } from '@oam/diagnostic-snapshot/core/services/snapshot-fetch-files.service';\r\nimport { SnapshotService } from '@oam/cu-asm-api/services';\r\nimport {\r\n    selectOperationIdForRemoteSnapshot,\r\n    selectTransferSnapshotIsOngoing\r\n} from '@oam/diagnostic-snapshot/core/selectors/transfer-snapshot-to-nms.selector';\r\n\r\n\r\n@Injectable()\r\nexport class TransferSnapshotToNmsEffects {\r\n    transferSnapshotFailed$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(transferSnapshotFailed),\r\n            map(({ error }) => addNotification({\r\n                payload: {\r\n                    detail: error.content,\r\n                    severity: 'error',\r\n                    summary: 'Snapshot Transfer Failed'\r\n                }\r\n            }))\r\n        )\r\n    );\r\n\r\n    stopGettingRemoteSnapshotNeedToBeTransferred$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(stopGettingRemoteSnapshotNeedToBeTransferred)\r\n        ), { dispatch: false }\r\n    );\r\n\r\n    startGettingRemoteSnapshotNeedToBeTransferred$ = createEffect(() => ({ scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(startGettingRemoteSnapshotNeedToBeTransferred),\r\n            exhaustMap(() => {\r\n                return this.pollingService.getTimer(scheduler).pipe(\r\n                    takeUntil(this.stopGettingRemoteSnapshotNeedToBeTransferred$),\r\n                    mergeMap(() => this.snapshotService.getRemoteSnapshotOperations({status: SnapshotStatus.Failed})\r\n                        .pipe(\r\n                            map(response => setRemoteSnapshotFileNameAndOperationId({\r\n                                remoteSnapshotFileName: response[0]?.remoteName,\r\n                                operationId: response[0]?.operationId\r\n                            })),\r\n                            catchError(error => of(startGettingRemoteSnapshotError(error)))\r\n                        )\r\n                    )\r\n                );\r\n            })\r\n        )\r\n    );\r\n\r\n    addNotificationForTransferSnapshot$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(startTransferSnapshotToNMS),\r\n            map(() => addNotification({\r\n                payload: {\r\n                    detail: 'Transfer snapshot to nms started',\r\n                    severity: 'info',\r\n                    summary: 'Snapshot Transfer Started'\r\n                }\r\n            }))\r\n        )\r\n    );\r\n\r\n    startTransferSnapshotToNMS$ = createEffect(() => ({ scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(startTransferSnapshotToNMS),\r\n            withLatestFrom(this.store.select(selectOperationIdForRemoteSnapshot)),\r\n            exhaustMap(([, operationId]) =>\r\n                this.snapshotService.uploadRemoteSnapshot({ operationId: operationId as string })\r\n                    .pipe(\r\n                        mergeMap(() => [\r\n                            addNotification({\r\n                                payload: {\r\n                                    detail: 'Transfer snapshot to nms succeeded',\r\n                                    severity: 'success',\r\n                                    summary: 'Snapshot Transfer Succeeded'\r\n                                }\r\n                            }),\r\n                            transferSnapshotToNMSIsFinished()\r\n                        ]),\r\n                        catchError(( {error} ) => {\r\n                            return of(transferSnapshotFailed({ error: JSON.parse(error) }));\r\n                        })\r\n                    )\r\n            )\r\n        )\r\n    );\r\n\r\n    cleanTransferStateIfTransferIsNotOngoing$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(cleanTransferStateIfTransferIsNotOngoing),\r\n            withLatestFrom(\r\n                this.store.pipe(select(selectTransferSnapshotIsOngoing))\r\n            ),\r\n            filter(([, isOngoing]) => !isOngoing),\r\n            mergeMap(() => [cleanTransferSnapshotState(), stopGettingRemoteSnapshotNeedToBeTransferred()])\r\n        )\r\n    );\r\n\r\n    constructor(private readonly actions$: Actions,\r\n                private readonly pollingService: PollingService,\r\n                private readonly snapshotFetchFilesService: SnapshotFetchFilesService,\r\n                private readonly snapshotService: SnapshotService,\r\n                private readonly store: Store) {}\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DiagnosticSnapshotHomeComponent } from './pages/diagnostic-snapshot-home/diagnostic-snapshot-home.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport * as fromCollectingSnapshotServerStatus from './core/reducers/collecting-snapshot-server-status.reducer';\r\nimport * as fromCollectingSnapshot from './core/reducers/collecting-snapshot.reducer';\r\nimport * as fromTransferSnapshotToNMS from './core/reducers/transfer-snapshot-to-nms.reducer';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { CollectingSnapshotServerStatusEffects } from './core/effects/collecting-snapshot-server-status.effects';\r\n\r\nimport {\r\n    AlarmMessageModule,\r\n    PanelModule,\r\n    SpinnerModule,\r\n    StepperModule,\r\n    ToggleIconButtonModule,\r\n    WebemButtonModule,\r\n    WebemOverlayModule\r\n} from '@oam/cu-ui';\r\nimport { DiagnosticSnapsthotDetailsComponent } from './components/diagnostic-snapsthot-details/diagnostic-snapsthot-details.component';\r\nimport { CollectingSnapshotEffects } from './core/effects/collecting-snapshot.effects';\r\nimport { DiagnosticSnapshotRoutingModule } from './diagnostic-snapshot-routing.module';\r\nimport { DiagnosticSharedModule } from '@oam/diagnostic-shared/lib/diagnostic-shared.module';\r\nimport { SessionTokenRenewalModule } from '@oam/cu-ui/lib/session-token-renewal/session-token-renewal.module';\r\nimport { SnapshotFetchFilesConfig } from '@oam/diagnostic-snapshot/core/services/snapshot-fetch-files-config';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { ProgressBarModule } from 'primeng/progressbar';\r\nimport { TableModule } from 'primeng/table';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\nimport { InputTextareaModule } from 'primeng/inputtextarea';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { DiagnosticSnapshotCollectionComponent } from './components/diagnostic-snapshot-collection/diagnostic-snapshot-collection.component';\r\nimport { TransferSnapshotToNmsEffects } from '@oam/diagnostic-snapshot/core/effects/transfer-snapshot-to-nms.effects';\r\nimport { DiagnosticSnapshotTransferComponent } from './components/diagnostic-snapshot-transfer/diagnostic-snapshot-transfer.component';\r\nimport { TranslateOperationStatusPipe } from '@oam/diagnostic-snapshot/core/pipe/translate-operation-status.pipe';\r\nimport { NgFeatureFlagModule } from '@oam/ng-feature-flag';\r\nimport { FormatTimePipe } from '@oam/diagnostic-snapshot/core/pipe/format-time.pipe';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        DiagnosticSnapshotHomeComponent,\r\n        DiagnosticSnapsthotDetailsComponent,\r\n        DiagnosticSnapshotCollectionComponent,\r\n        DiagnosticSnapshotTransferComponent,\r\n        TranslateOperationStatusPipe,\r\n        FormatTimePipe\r\n    ],\r\n    imports: [\r\n        DiagnosticSharedModule,\r\n        CommonModule,\r\n        PanelModule,\r\n        RadioButtonModule,\r\n        FlexLayoutModule,\r\n        ReactiveFormsModule,\r\n        InputTextareaModule,\r\n        AlarmMessageModule,\r\n        StoreModule.forFeature(\r\n            fromCollectingSnapshot.collectingSnapshotFeatureKey,\r\n            fromCollectingSnapshot.reducer\r\n        ),\r\n        StoreModule.forFeature(\r\n            fromTransferSnapshotToNMS.transferSnapshotFeatureKey,\r\n            fromTransferSnapshotToNMS.reducer\r\n        ),\r\n        StoreModule.forFeature(\r\n            fromCollectingSnapshotServerStatus.collectingSnapshotServerStatusFeatureKey,\r\n            fromCollectingSnapshotServerStatus.reducer\r\n        ),\r\n        EffectsModule.forFeature([CollectingSnapshotServerStatusEffects, CollectingSnapshotEffects, TransferSnapshotToNmsEffects]),\r\n        InputTextareaModule,\r\n        TableModule,\r\n        ProgressBarModule,\r\n        DialogModule,\r\n        ButtonModule,\r\n        ToggleIconButtonModule,\r\n        WebemOverlayModule,\r\n        SpinnerModule,\r\n        WebemButtonModule,\r\n        DiagnosticSnapshotRoutingModule,\r\n        StepperModule,\r\n        SessionTokenRenewalModule,\r\n        NgFeatureFlagModule\r\n    ]\r\n})\r\nexport class DiagnosticSnapshotModule {\r\n    static forRoot(config: SnapshotFetchFilesConfig): ModuleWithProviders<DiagnosticSnapshotModule> {\r\n        return {\r\n            ngModule: DiagnosticSnapshotModule,\r\n            providers: [\r\n                {\r\n                    provide: SnapshotFetchFilesConfig,\r\n                    useValue: config,\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { TracingConfig } from '@oam/tracing/lib/tracing-config.service';\r\n\r\n\r\n@NgModule({})\r\nexport class TracingConfigModule {\r\n    static forRoot(additionalData: TracingConfig): ModuleWithProviders<TracingConfigModule> {\r\n        return {\r\n            ngModule: TracingConfigModule,\r\n            providers: [\r\n                {\r\n                    provide: TracingConfig,\r\n                    useValue: additionalData\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TargetComponentOptions } from '@oam/tracing/lib/core/models';\r\n\r\n\r\nexport class TracingConfig {\r\n    isConfigVdu: boolean;\r\n    targetComponents: TargetComponentOptions[];\r\n    withBitmaskFilters: boolean;\r\n}\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TracingConfigService {\r\n    private readonly isVdu: boolean;\r\n    private readonly areBitmapsVisible: boolean;\r\n    private readonly targetComponents: TargetComponentOptions[];\r\n\r\n    constructor(config: TracingConfig) {\r\n        if (config) {\r\n            this.isVdu = config.isConfigVdu;\r\n            this.targetComponents = config.targetComponents;\r\n            this.areBitmapsVisible = config.withBitmaskFilters;\r\n        }\r\n    }\r\n\r\n    get isConfigVdu(): boolean {\r\n        return this.isVdu;\r\n    }\r\n\r\n    get targetComponentOptions(): TargetComponentOptions[] {\r\n        return this.targetComponents;\r\n    }\r\n\r\n}\r\n","export type FlagsType = { [key: string]: boolean };\r\nexport type FeatureFlagProperty = {\r\n    featureFlag?: string\r\n};\r\n\r\nexport class FeatureFlag {\r\n\r\n    private readonly flags: FlagsType;\r\n\r\n    constructor(flags: FlagsType) {\r\n        this.flags = flags;\r\n    }\r\n\r\n    isFeatureEnabled(flag: string | undefined): boolean {\r\n        if (flag === undefined || this.flags[flag] === undefined) return true;\r\n\r\n        return this.flags[flag];\r\n    }\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\n\r\nenum ActionTypes {\r\n    ToggleKeyboardShortcutsAvailability = '[Keyboard Shortcuts] Toggle keyboard shortcuts availability'\r\n}\r\n\r\nexport const toggleKeyboardShortcutsAvailability = createAction(\r\n    ActionTypes.ToggleKeyboardShortcutsAvailability, props<{ payload: boolean}>()\r\n);\r\n\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport { toggleKeyboardShortcutsAvailability } from '../actions/keyboard-shortcuts.actions';\r\n\r\nexport const KEYBOARD_SHORTCUTS = 'KeyboardShortcuts';\r\n\r\nexport interface KeyboardShortcutsState {\r\n    [key: string]: boolean;\r\n    enabled: boolean;\r\n}\r\n\r\nexport const initialState: KeyboardShortcutsState = {\r\n    enabled: true\r\n};\r\n\r\nconst keyboardShortcutsReducer = createReducer(\r\n    initialState,\r\n    on(toggleKeyboardShortcutsAvailability, (state, { payload: enabled }) => {\r\n        return { ...state, enabled };\r\n    }),\r\n);\r\n\r\nexport function reducer(state: KeyboardShortcutsState | undefined, action: Action) {\r\n    return keyboardShortcutsReducer(state, action);\r\n}\r\n","import { createFeatureSelector, createSelector, select } from '@ngrx/store';\r\nimport {\r\n    KEYBOARD_SHORTCUTS,\r\n    KeyboardShortcutsState\r\n} from '../reducers/keyboard-shortcuts.reducer';\r\n\r\nconst keyboardShortcutsAvailabilityState = createFeatureSelector<KeyboardShortcutsState>(KEYBOARD_SHORTCUTS);\r\n\r\nexport const areKeyboardShortcutsEnabled = createSelector(keyboardShortcutsAvailabilityState, state => state.enabled);\r\n\r\n","<div class=\"single-view\" uiWebemDragDropFile (fileDroppedAction)=\"handleDroppedItem($event)\" data-scrollselectors=\"div.content\" >\r\n    <webem-server-connection-notification></webem-server-connection-notification>\r\n    <webem-password-expiration-warning></webem-password-expiration-warning>\r\n    <ui-webem-browser-incompatibility-bar></ui-webem-browser-incompatibility-bar>\r\n    <webem-page-header [statusBarModel]=\"statusBarModel\" [productName]=\"statusBarModel.productName\"\r\n                       [helpFilePath]=\"statusBarModel.helpFilePath\" [helpFileName]=\"statusBarModel.helpFileName\">\r\n        <webem-quick-menu class=\"quick-menu\" [items]=\"quickMenuItems\" [model]=\"quickMenuAlarmsModel\"></webem-quick-menu>\r\n    </webem-page-header>\r\n    <webem-page-navigation-menu [navigationMenuModel]=\"navigationMenu\"></webem-page-navigation-menu>\r\n    <ui-webem-panel-split class=\"main-content\"\r\n        (dragStart)=\"setDetailsPanelResizingFlag(true)\"\r\n        (dragEnd)=\"setDetailsPanelResizingFlag(false)\"\r\n        (transitionEnd)=\"setDetailsPanelResizingFlag(false)\">\r\n\r\n        <div *uiWebemSplitPanel=\"contentPanelConfiguration\" class=\"main-content-split\">\r\n            <ui-webem-status-bar>\r\n                <router-outlet name=\"content_menu\"></router-outlet>\r\n            </ui-webem-status-bar>\r\n            <div class=\"content\">\r\n                <ng-content></ng-content>\r\n            </div>\r\n        </div>\r\n\r\n        <ng-template [uiWebemSplitPanel]=\"detailsPanelConfiguration\" [visible]=\"(isDetailsPanelExpanded$ | async)!\">\r\n            <div class=\"details-panel\" [class.detail-panel-animation-ongoing]=\"detailPanelAnimationOngoing\">\r\n                <router-outlet name=\"content_right\"></router-outlet>\r\n            </div>\r\n        </ng-template>\r\n\r\n        <ng-template [uiWebemPanelToggle]=\"{ order: 1, align: 'start', position: 'start' }\">\r\n            <webem-details-panel-toggle-button (buttonClicked)=\"handleDetailPanelToggleButtonClick()\" class=\"detail-panel-toggle\"\r\n                *ngIf=\"showDetailPanelButton()\">\r\n            </webem-details-panel-toggle-button>\r\n        </ng-template>\r\n    </ui-webem-panel-split>\r\n</div>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Store } from '@ngrx/store';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { includes } from 'lodash';\r\nimport { RoutedMenuItem, SplitPanelConfiguration } from '@oam/cu-ui';\r\nimport { DroppedItemService } from '@oam/core/lib/services/dropped-item.service';\r\nimport { StatusModelBar } from '@oam/navigation/lib/navigation/core/models/status-bar-info.interface';\r\nimport { QuickMenuAlarms } from '@oam/navigation/lib/navigation/core/models/quick-menu-alarms.interface';\r\nimport { Navigation } from '@oam/navigation/lib/navigation/core/models/navigation.interface';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { LayoutsConfigService } from '@oam/layouts/lib/layouts-config.service';\r\nimport { isDetailPanelVisible } from '@oam/details-panel/lib/core/selectors/detail-panel.selectors';\r\nimport { DetailsPanelConfigService } from '@oam/details-panel/lib/core/services/details-panel-config.service';\r\nimport { setDetailsPanelResizingFlag } from '@oam/details-panel/lib/core/actions/detail-panel.actions';\r\n\r\n@Component({\r\n    selector: 'webem-page-layout',\r\n    templateUrl: './page-layout.component.html',\r\n    styleUrls: ['./page-layout.component.scss']\r\n})\r\nexport class PageLayoutComponent implements OnInit, OnDestroy {\r\n    currentRoute = '';\r\n    navigationMenu: Navigation[];\r\n    quickMenuItems: RoutedMenuItem[];\r\n    statusBarModel: StatusModelBar;\r\n    quickMenuAlarmsModel: QuickMenuAlarms;\r\n    detailPanelAnimationOngoing = false;\r\n\r\n    isDetailsPanelExpanded$: Observable<boolean>;\r\n    contentPanelConfiguration: SplitPanelConfiguration = { size: '*' };\r\n    detailsPanelConfiguration: SplitPanelConfiguration = {\r\n        minSize: 270,\r\n        maxSize: 370,\r\n        size: 328,\r\n        style: {\r\n            'box-shadow': '-2px 0px 10px rgba(0,0,0,0.15)',\r\n        }\r\n    };\r\n\r\n    private currentRoute$: Observable<NavigationEnd>;\r\n    private readonly ngUnsubscribe = new Subject();\r\n\r\n    constructor(\r\n        private readonly store: Store,\r\n        private readonly router: Router,\r\n        private readonly droppedItemService: DroppedItemService,\r\n        private readonly detailsPanelConfigService: DetailsPanelConfigService,\r\n        private readonly layoutsConfigService: LayoutsConfigService\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.navigationMenu = this.layoutsConfigService.getNavigations;\r\n        this.quickMenuItems = this.layoutsConfigService.getQuickMenuItems;\r\n        this.statusBarModel = this.layoutsConfigService.getStatusBarModel;\r\n        this.quickMenuAlarmsModel = this.layoutsConfigService.getQuickMenuAlarmsModel;\r\n\r\n        this.currentRoute$ = this.router.events.pipe(\r\n            filter<NavigationEnd>(event => event instanceof NavigationEnd)\r\n        );\r\n        this.isDetailsPanelExpanded$ = this.store.select(isDetailPanelVisible);\r\n        this.watchCurrentRoute();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    showDetailPanelButton(): boolean {\r\n        const currentRouteWithoutSlash = this.currentRoute.substring(1);\r\n        const urlsWithDetailPanel = this.detailsPanelConfigService.getUrlsWithDetailsPanel();\r\n\r\n        return includes(urlsWithDetailPanel, currentRouteWithoutSlash);\r\n    }\r\n\r\n    handleDroppedItem(item: File | Error): void {\r\n        this.droppedItemService.handleItem(item);\r\n    }\r\n\r\n    setDetailsPanelResizingFlag(isBeingResized: boolean) {\r\n        this.store.dispatch(setDetailsPanelResizingFlag({ payload: isBeingResized }));\r\n        this.detailPanelAnimationOngoing = false;\r\n    }\r\n\r\n    handleDetailPanelToggleButtonClick(): void {\r\n        this.detailPanelAnimationOngoing = true;\r\n    }\r\n\r\n    private watchCurrentRoute() {\r\n        this.currentRoute$.pipe(\r\n            takeUntil(this.ngUnsubscribe),\r\n        ).subscribe((event: NavigationEnd) => {\r\n            this.currentRoute = event.url;\r\n            this.setDetailsPanelResizingFlag(false);\r\n        });\r\n\r\n        this.currentRoute = this.router.url;\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { LayoutsConfig } from '@oam/layouts/lib/layouts-config.service';\r\n\r\n\r\n@NgModule({})\r\nexport class LayoutsConfigModule {\r\n    static forRoot(layoutsConfig: LayoutsConfig): ModuleWithProviders<LayoutsConfigModule> {\r\n        return {\r\n            ngModule: LayoutsConfigModule,\r\n            providers: [\r\n                {\r\n                    provide: LayoutsConfig,\r\n                    useValue: layoutsConfig\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { RoutedMenuItem } from '@oam/cu-ui';\r\nimport { StatusModelBar } from '@oam/navigation/lib/navigation/core/models/status-bar-info.interface';\r\nimport { QuickMenuAlarms } from '@oam/navigation/lib/navigation/core/models/quick-menu-alarms.interface';\r\nimport { Navigation } from '@oam/navigation/lib/navigation/core/models/navigation.interface';\r\n\r\nexport class LayoutsConfig {\r\n    quickMenuItems: RoutedMenuItem[];\r\n    statusBarModel: StatusModelBar;\r\n    quickMenuAlarmsModel: QuickMenuAlarms;\r\n    navigations: Navigation[];\r\n}\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LayoutsConfigService {\r\n    private readonly layoutConfig: LayoutsConfig;\r\n\r\n    constructor(config: LayoutsConfig) {\r\n        if (config) this.layoutConfig = config;\r\n    }\r\n\r\n    get getQuickMenuItems() {\r\n        return this.layoutConfig.quickMenuItems;\r\n    }\r\n\r\n    get getStatusBarModel() {\r\n        return this.layoutConfig.statusBarModel;\r\n    }\r\n\r\n    get getQuickMenuAlarmsModel() {\r\n        return this.layoutConfig.quickMenuAlarmsModel;\r\n    }\r\n\r\n    get getNavigations() {\r\n        return this.layoutConfig.navigations;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FixedTwoColumnsLayoutComponent } from './components/fixed-two-columns-layout/fixed-two-columns-layout.component';\r\nimport { TwoColumnsSplitLayoutComponent } from './components/two-columns-split-layout/two-columns-split-layout.component';\r\nimport { SingleColumnLayoutWithActionsBarComponent } from './components/single-column-layout-with-actions-bar/single-column-layout-with-actions-bar.component';\r\nimport { SingleColumnLayoutComponent } from './components/single-column-layout/single-column-layout.component';\r\nimport { PageLayoutComponent } from './components/page-layout/page-layout.component';\r\nimport { LayoutsConfigModule } from '@oam/layouts/lib/layouts-config.module';\r\nimport { RouterModule } from '@angular/router';\r\nimport { BrowserCompatibilityModule, DragDropUploadModule, PanelSplitAreaModule, PanelSplitModule } from '@oam/cu-ui';\r\nimport { ServerConnectionCheckerModule } from '@oam/server-connection-checker';\r\nimport { NavigationModule } from '@oam/navigation';\r\nimport { DetailsPanelModule } from '@oam/details-panel/lib/details-panel.module';\r\nimport { StatusBarModule } from '../../../ui-webem/src/lib/status-bar/status-bar.module';\r\nimport { NavigationSearchModule } from '@oam/layouts/lib/modules/navigation-search/navigation-search.module';\r\nimport { PageHeaderModule } from '@oam/layouts/lib/modules/page-header/page-header.module';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        PageLayoutComponent,\r\n        FixedTwoColumnsLayoutComponent,\r\n        SingleColumnLayoutComponent,\r\n        TwoColumnsSplitLayoutComponent,\r\n        SingleColumnLayoutWithActionsBarComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        LayoutsConfigModule,\r\n        RouterModule,\r\n        PanelSplitAreaModule,\r\n        ServerConnectionCheckerModule,\r\n        BrowserCompatibilityModule,\r\n        NavigationModule,\r\n        PanelSplitModule,\r\n        StatusBarModule,\r\n        DetailsPanelModule,\r\n        DragDropUploadModule,\r\n        PageHeaderModule\r\n    ]\r\n})\r\nexport class LayoutsModule {\r\n}\r\n","import { createAction } from '@ngrx/store';\r\n\r\n\r\nexport enum NavigationSearchActions {\r\n    OpenOverlay = '[Navigation Search] Open overlay',\r\n    CloseOverlay = '[Navigation Search] Close overlay'\r\n}\r\n\r\nexport const setNavigationSearchOverlayOpened = createAction(\r\n    NavigationSearchActions.OpenOverlay\r\n);\r\n\r\nexport const setNavigationSearchOverlayClosed = createAction(\r\n    NavigationSearchActions.CloseOverlay\r\n);\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport { NavigationSearchState } from '../models/navigation-search-state';\r\nimport { setNavigationSearchOverlayClosed, setNavigationSearchOverlayOpened } from '../actions/navigation-search.actions';\r\n\r\n\r\nexport const navigationSearchStateFeatureKey = 'navigationSearch';\r\n\r\nexport const initialState: NavigationSearchState = {\r\n    isNavigationSearchOverlayOpened: false\r\n};\r\n\r\nconst setNavigationSearchReducer = createReducer(\r\n    initialState,\r\n    on(setNavigationSearchOverlayOpened, () => {\r\n        return { isNavigationSearchOverlayOpened: true } as NavigationSearchState;\r\n    }),\r\n    on(setNavigationSearchOverlayClosed, () => {\r\n        return { isNavigationSearchOverlayOpened: false } as NavigationSearchState;\r\n    })\r\n);\r\n\r\nexport function reducer(state: NavigationSearchState | undefined, action: Action) {\r\n    return setNavigationSearchReducer(state, action);\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { PollingService } from '@oam/core';\r\nimport { asyncScheduler } from 'rxjs';\r\nimport { exhaustMap, map, mergeMap, takeUntil, tap, withLatestFrom } from 'rxjs/operators';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { selectUserTokenExpirationTime } from '@oam/core/lib/user/core/reducers/user-reducer';\r\nimport { TokenExpirationTimeService } from '@oam/core/lib/services/token-expiration-time.service';\r\nimport {\r\n    setRemainingSeconds,\r\n    setRemainingTime,\r\n    startCountingSeconds,\r\n    startCountingSessionTime, stopCountingSeconds\r\n} from '../actions/session-token-time.actions';\r\n\r\n@Injectable()\r\nexport class SessionTokenTimeEffects {\r\n    remainingSeconds = 60;\r\n\r\n    stopCountingSeconds$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(stopCountingSeconds),\r\n            tap(() => this.remainingSeconds = 60)\r\n        ), { dispatch: false }\r\n    );\r\n\r\n    setRemainingTime$ = createEffect(() => ({ scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(startCountingSessionTime),\r\n            withLatestFrom(this.store.pipe(select(selectUserTokenExpirationTime))),\r\n            mergeMap(() => this.pollingService.getTimer(scheduler).pipe(\r\n                map(() => {\r\n                    this.tokenExpirationService.calculateRemainingTime();\r\n                    const remainingTime = this.tokenExpirationService.getTokenExpirationTime();\r\n\r\n                    return setRemainingTime({ remainingTime });\r\n                })\r\n            ))\r\n        )\r\n    );\r\n\r\n    startCountingSeconds$ = createEffect(() => ({ scheduler = asyncScheduler } = {}) =>\r\n        this.actions$.pipe(\r\n            ofType(startCountingSeconds),\r\n            exhaustMap(() => this.pollingService.getTimer(scheduler, 0, 1000).pipe(\r\n                takeUntil(this.stopCountingSeconds$),\r\n                map(() => {\r\n                    if (this.remainingSeconds === 0) {\r\n                        return setRemainingSeconds({ remainingSeconds: null });\r\n                    }\r\n\r\n                    return setRemainingSeconds({ remainingSeconds: `${this.remainingSeconds--} sec` });\r\n                })\r\n            ))\r\n        )\r\n    );\r\n\r\n\r\n    constructor(\r\n        private readonly actions$: Actions,\r\n        private readonly pollingService: PollingService,\r\n        private readonly store: Store,\r\n        private readonly tokenExpirationService: TokenExpirationTimeService) {\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserMenuComponent } from './components/user-menu/user-menu.component';\r\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { OverlayMenuBarModule } from '../overlay-menu-bar/overlay-menu-bar.module';\r\nimport { NotificationComponent } from './components/notification/notification.component';\r\nimport { NotificationPanelComponent } from './components/notification-panel/notification-panel.component';\r\nimport { UserMenuOverlayComponent } from './components/user-menu-overlay/user-menu-overlay.component';\r\nimport { ClickOutsideModule } from 'ng-click-outside';\r\nimport { WebemButtonModule } from '../button/button.module';\r\nimport { RenewSessionDialogComponent } from './components/renew-session-dialog/renew-session-dialog.component';\r\nimport { DowngradedPrivilegesDialogComponent } from './components/downgraded-privileges-dialog/downgraded-privileges-dialog.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { TrackCapsLockModule } from '@oam/cu-ui/lib/track-caps-lock/track-caps-lock.module';\r\nimport { ShowPasswordButtonModule } from '@oam/cu-ui/lib/show-password-button/show-password-button.module';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport * as fromSessionTime from './components/session-time/core/reducers/session-token-time.reducer';\r\nimport { SessionTimeComponent } from './components/session-time/session-time.component';\r\nimport { SessionTokenTimeEffects } from '@oam/cu-ui/lib/user-menu/components/session-time/core/effects/session-token-time.effects';\r\nimport { SharedModule } from 'primeng/api';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { OverlayPanelModule } from 'primeng/overlaypanel';\r\nimport { WebemCommonModule } from '@oam/shared/lib/modules/webem-common';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        UserMenuComponent,\r\n        NotificationComponent,\r\n        NotificationPanelComponent,\r\n        UserMenuOverlayComponent,\r\n        RenewSessionDialogComponent,\r\n        DowngradedPrivilegesDialogComponent,\r\n        SessionTimeComponent\r\n    ],\r\n    exports: [UserMenuComponent],\r\n    imports: [\r\n        CommonModule,\r\n        NgbDropdownModule,\r\n        OverlayMenuBarModule,\r\n        WebemButtonModule,\r\n        ButtonModule,\r\n        OverlayPanelModule,\r\n        ClickOutsideModule,\r\n        SharedModule,\r\n        TrackCapsLockModule,\r\n        ShowPasswordButtonModule,\r\n        ReactiveFormsModule,\r\n        InputTextModule,\r\n        EffectsModule.forFeature([SessionTokenTimeEffects]),\r\n        StoreModule.forFeature(fromSessionTime.sessionTokenTimeFeatureKey, fromSessionTime.reducer),\r\n        WebemCommonModule\r\n  ]\r\n})\r\nexport class UserMenuModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NavigationSearchComponent } from './components/navigation-search/navigation-search.component';\r\nimport { NavigationSearchInputComponent } from './components/navigation-search-input/navigation-search-input.component';\r\nimport { NavigationSearchRoutesListComponent } from './components/navigation-search-routes-list/navigation-search-routes-list.component';\r\nimport { NavigationSearchRoutesListItemComponent } from './components/navigation-search-routes-list-item/navigation-search-routes-list-item.component';\r\nimport { ScrollPanelModule } from 'primeng/scrollpanel';\r\nimport { ClickOutsideModule } from 'ng-click-outside';\r\nimport { WebemButtonModule, WebemOverlayModule } from '@oam/cu-ui';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        NavigationSearchComponent,\r\n        NavigationSearchInputComponent,\r\n        NavigationSearchRoutesListComponent,\r\n        NavigationSearchRoutesListItemComponent\r\n    ],\r\n    exports: [ NavigationSearchComponent ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ClickOutsideModule,\r\n        ScrollPanelModule,\r\n        WebemButtonModule,\r\n        WebemOverlayModule\r\n    ]\r\n})\r\nexport class NavigationSearchModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport {\r\n    OnAirStatusPanelModule,\r\n    RoutedMenuModule,\r\n    VerticalHtmlLineModule,\r\n    WebemButtonModule\r\n} from '@oam/cu-ui';\r\nimport { UserMenuModule } from '@oam/cu-ui/lib/user-menu/user-menu.module';\r\nimport { WarnignPeriodToIconColor } from '@oam/layouts/lib/modules/page-header/user-menu/to-icon-color';\r\nimport { PasswordExpirationWarningComponent } from '@oam/layouts/lib/modules/page-header/password-expiration-warning/password-expiration-warning';\r\nimport { GeneralStatusInfoComponent } from '@oam/layouts/lib/modules/page-header/general-status-info/general-status-info.component';\r\nimport { FullScreenComponent } from '@oam/layouts/lib/modules/page-header/full-screen/full-screen.component';\r\nimport { UserMenuSmartComponent } from '@oam/layouts/lib/modules/page-header/user-menu/user-menu.component';\r\nimport { QuickMenuComponent } from '@oam/layouts/lib/modules/page-header/quick-menu/quick-menu.component';\r\nimport { PageHeaderComponent } from '@oam/layouts/lib/modules/page-header/page-header/page-header.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WebemCommonModule } from '@oam/shared/lib/modules/webem-common';\r\nimport { UpperFirstPipe } from '@oam/layouts/lib/modules/page-header/pipes/upper-first.pipe';\r\nimport { FormatMrbtsIdPipe } from '@oam/layouts/lib/modules/page-header/pipes/format-mrbts-id.pipe';\r\nimport { IsOperationalStateOnAirPipe } from '@oam/layouts/lib/modules/page-header/pipes/is-operational-state-on-air.pipe';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NavigationSearchModule } from '@oam/layouts/lib/modules/navigation-search/navigation-search.module';\r\nimport { FormatGeneralStatusTimeZonePipe } from '@oam/layouts/lib/modules/page-header/pipes/format-general-status-time-zone.pipe';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        GeneralStatusInfoComponent,\r\n        PasswordExpirationWarningComponent,\r\n        FullScreenComponent,\r\n        UserMenuSmartComponent,\r\n        QuickMenuComponent,\r\n        PageHeaderComponent,\r\n        WarnignPeriodToIconColor,\r\n        UpperFirstPipe,\r\n        FormatMrbtsIdPipe,\r\n        IsOperationalStateOnAirPipe,\r\n        FormatGeneralStatusTimeZonePipe\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        WebemCommonModule,\r\n        WebemButtonModule,\r\n        OnAirStatusPanelModule,\r\n        VerticalHtmlLineModule,\r\n        UserMenuModule,\r\n        RouterModule,\r\n        RoutedMenuModule,\r\n        NavigationSearchModule\r\n    ],\r\n    exports: [\r\n        GeneralStatusInfoComponent,\r\n        PasswordExpirationWarningComponent,\r\n        FullScreenComponent,\r\n        UserMenuSmartComponent,\r\n        QuickMenuComponent,\r\n        WarnignPeriodToIconColor,\r\n        PageHeaderComponent\r\n    ]\r\n})\r\nexport class PageHeaderModule {\r\n}\r\n","import { Store } from '@ngrx/store';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { DynamicDialogConfig, DynamicDialogRef } from 'primeng/dynamicdialog';\r\nimport { BaseDialogComponent } from '@oam/shared/lib/components/base-dialog/base-dialog-component';\r\nimport { ButtonModel, ButtonTheme } from '@oam/cu-ui';\r\n\r\n@Component({\r\n    selector: 'webem-token-info-dialog',\r\n    templateUrl: './token-info-dialog.component.html',\r\n    styleUrls: ['./token-info-dialog.component.scss']\r\n})\r\nexport class TokenInfoDialogComponent extends BaseDialogComponent implements OnInit, OnDestroy {\r\n    readonly okButtonModel: ButtonModel = {\r\n        label: 'OK',\r\n        theme: ButtonTheme.Accent\r\n    };\r\n\r\n    constructor(protected store: Store,\r\n                public config: DynamicDialogConfig,\r\n                ref: DynamicDialogRef) {\r\n        super(store, ref);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n    }\r\n\r\n    closeDialog(): void {\r\n        super.closeDialog();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n    }\r\n}\r\n","<div class=\"p-dialog-content\">\r\n    <div class=\"dialog-information\">\r\n        <i class=\"information-icon mdi mdi-information\"></i>\r\n        <span>{{config.data.alertMessage}}</span>\r\n    </div>\r\n</div>\r\n<div class=\"p-dialog-footer\">\r\n    <p-footer>\r\n        <ui-webem-button [model]=\"okButtonModel\" (action)=\"closeDialog()\"></ui-webem-button>\r\n    </p-footer>\r\n</div>\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { tokenInfoFeatureKey } from '../reducers/token-info.reducer';\r\nimport { TokenInfo } from '@oam/cu-api-gw-api';\r\n\r\nconst tokenInfoState = createFeatureSelector<TokenInfo>(tokenInfoFeatureKey);\r\nexport const getTokenInfo = createSelector(tokenInfoState, (state) => state);\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { lowerCase } from 'lodash';\r\n\r\nconst MRBTS_PREFIX = 'mrbts-';\r\n\r\n@Pipe({\r\n    name: 'formatMrbtsId'\r\n})\r\nexport class FormatMrbtsIdPipe implements PipeTransform {\r\n\r\n    transform(mrbtsId: string): string {\r\n        const hasMrbtsPrefix = mrbtsId && mrbtsId.toLowerCase().startsWith(MRBTS_PREFIX);\r\n        if (hasMrbtsPrefix) return mrbtsId;\r\n\r\n        return `MRBTS-${mrbtsId}`;\r\n    }\r\n\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ui-webem-on-air-svg-definition',\r\n    templateUrl: './on-air-svg-definition.component.html',\r\n    styleUrls: ['./on-air-svg-definition.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OnAirSvgDefinitionComponent implements OnInit {\r\n    constructor() {}\r\n\r\n    ngOnInit() {}\r\n}\r\n","<svg xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\r\n    <defs>\r\n        <symbol id=\"__on-air-status\">\r\n            <g>\r\n                <path\r\n                    class=\"on-air-status\"\r\n                    d=\"M12 11c-1.1 0-2 .9-2 2s.9 2 2 2s2-.9 2-2s-.9-2-2-2zm6 2c0-3.31-2.69-6-6-6s-6 2.69-6\r\n                        6c0 2.22 1.21 4.15 3 5.19l1-1.74c-1.19-.7-2-1.97-2-3.45c0-2.21 1.79-4 4-4s4 1.79 4 4c0\r\n                        1.48-.81 2.75-2 3.45l1 1.74c1.79-1.04 3-2.97 3-5.19zM12 3C6.48 3 2 7.48 2 13c0 3.7 2.01\r\n                        6.92 4.99 8.65l1-1.73C5.61 18.53 4 15.96 4 13c0-4.42 3.58-8 8-8s8 3.58 8 8c0 2.96-1.61\r\n                        5.53-4 6.92l1 1.73c2.99-1.73 5-4.95 5-8.65c0-5.52-4.48-10-10-10z\">\r\n                </path>\r\n            </g>\r\n        </symbol>\r\n    </defs>\r\n</svg>\r\n","import { Component, Input, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ui-webem-on-air-status-icon',\r\n    templateUrl: './on-air-status-icon.component.html',\r\n    styleUrls: ['./on-air-status-icon.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class OnAirStatusIconComponent implements OnInit {\r\n    @Input() isEnabled: boolean;\r\n\r\n    constructor() {}\r\n\r\n    ngOnInit() {}\r\n\r\n    get absUrl() {\r\n        return window.location.href;\r\n    }\r\n}\r\n","<svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    class=\"on-air-status\"\r\n    aria-hidden=\"true\"\r\n    width=\"29px\"\r\n    viewBox=\"0 0 24 24\"\r\n    preserveAspectRatio=\"xMidYMid meet\">\r\n    <use [attr.xlink:href]=\"absUrl + '#__on-air-status'\" [ngClass]=\"{ enabled: isEnabled, disabled: !isEnabled}\"></use>\r\n</svg>\r\n\r\n<ui-webem-on-air-svg-definition></ui-webem-on-air-svg-definition>\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { upperFirst } from 'lodash';\r\n\r\n@Pipe({\r\n    name: 'upperFirst'\r\n})\r\nexport class UpperFirstPipe implements PipeTransform {\r\n\r\n    transform(value: string): string {\r\n        return upperFirst(value);\r\n    }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'formatGeneralStatusTimeZone',\r\n    pure: true\r\n})\r\nexport class FormatGeneralStatusTimeZonePipe implements PipeTransform {\r\n    timeZoneRegex = new RegExp('([A-Z]{3})([+-]?)([0-9]{1,4})');\r\n\r\n    transform(timeZone: string | undefined): string {\r\n        if (!timeZone) return '-';\r\n\r\n        const [, zone , sign, diff]: RegExpMatchArray = Object.assign(\r\n            [],\r\n            timeZone.match(this.timeZoneRegex) as RegExpMatchArray\r\n        );\r\n\r\n        if (!zone || !sign || !diff) return '-';\r\n\r\n        const time = parseInt(diff.substring(0, 2), 10).toString();\r\n\r\n        return `${zone}${sign}${time}`;\r\n    }\r\n}\r\n","<ng-container *ngIf=\"modelState$ | async as modelState\">\r\n    <button class=\"status-button ui-corner-all ui-button-secondary p-button ui-state-default\"\r\n        [title]=\"getStatusTitle(modelState)\"\r\n        (click)=\"navigateToStatus()\">\r\n        <ui-webem-on-air-status-icon\r\n            class=\"on-air-status-icon\"\r\n            [isEnabled]=\"isEnabledState(modelState.operationalState)\"\r\n            *ngIf=\"!isTDSState(modelState.operationalState)\"\r\n        >\r\n        </ui-webem-on-air-status-icon>\r\n        <div>\r\n            <span class=\"operational-status\"\r\n                *ngIf=\"operationatStateView && modelState.operationalState\"\r\n                [ngClass]=\"getStyleByOperationalStatus(modelState.operationalState)\"\r\n            >\r\n                {{ getStateMessage(modelState.operationalState) | upperFirst }}\r\n            </span>\r\n            <span class=\"status-id-name\">{{ model.gNBname }} ID: </span>\r\n            <span> {{ modelState.mrbtsId | nullableValue | formatMrbtsId}} / {{ modelState.btsName | nullableValue}}</span>\r\n        </div>\r\n    </button>\r\n    <span class=\"software-version\"\r\n        [title]=\"getSoftwareVersionTitle(modelState.softwareVersion)\">\r\n        <img src=\"assets/bts-status/software_version_icon.svg\" alt=\"Software version\" />\r\n        <span>{{ modelState.softwareVersion | nullableValue }}</span>\r\n    </span>\r\n    <span class=\"timeZone\"\r\n        *ngIf=\"modelState.timeZone\"\r\n        [title]=\"modelState.timeZone\">\r\n        <i class=\"mdi mdi-web-clock mdi-18px\"></i>\r\n        <span>{{ modelState.timeZone | formatGeneralStatusTimeZone }}</span>\r\n    </span>\r\n</ng-container>\r\n","import { upperFirst } from 'lodash';\r\nimport { Component, Input, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { redirect } from '@oam/core/lib/actions/router.actions';\r\nimport { StatusModelBar, ModelState } from '@oam/navigation/lib/navigation/core/models/status-bar-info.interface';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormatMrbtsIdPipe } from '@oam/layouts/lib/modules/page-header/pipes/format-mrbts-id.pipe';\r\nimport { nullableValueFormat } from '@oam/shared/lib/functions/nullable-value-format';\r\n\r\n\r\nconst formatMrbtsId = new FormatMrbtsIdPipe();\r\n@Component({\r\n    selector: 'webem-general-status-info',\r\n    templateUrl: './general-status-info.component.html',\r\n    styleUrls: ['./general-status-info.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GeneralStatusInfoComponent implements OnInit {\r\n    @Input() model: StatusModelBar;\r\n    modelState$: Observable<ModelState>;\r\n    mrbtsIdAndNameView: boolean;\r\n    mrbtsNameView: boolean;\r\n    operationatStateView: boolean;\r\n\r\n    constructor(\r\n        private readonly store: Store,\r\n        private readonly activatedRoute: ActivatedRoute\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.modelState$ = this.store.pipe(\r\n            select(this.model.selectModelState)\r\n        );\r\n\r\n        this.operationatStateView = this.model.operationatStateView;\r\n    }\r\n\r\n    navigateToStatus() {\r\n        this.store.dispatch(redirect({routerLink: this.model.statusPropertiesLink, activatedRoute: this.activatedRoute}));\r\n    }\r\n\r\n    getStatusTitle(modelState: ModelState): string {\r\n        const btsName = nullableValueFormat(this.model.name);\r\n\r\n        return modelState.mrbtsId !== this.model.initialState.mrbtsId && modelState.btsName !== this.model.initialState.btsName\r\n            ? this.getStatusTitleWithOperationalState(modelState)\r\n            : btsName;\r\n    }\r\n\r\n    getStatusTitleWithOperationalState(modelState: ModelState): string {\r\n        const operationalStatePart = modelState.operationalState ? `: ${upperFirst(modelState.operationalState)}` : '';\r\n        const mrbtsId = nullableValueFormat(modelState.mrbtsId);\r\n        const btsName = nullableValueFormat(modelState.btsName);\r\n\r\n        return `${formatMrbtsId.transform(mrbtsId)} / ${btsName}${operationalStatePart}`;\r\n    }\r\n\r\n    getSoftwareVersionTitle(softwareVersion: string | null): string {\r\n        return !!softwareVersion && softwareVersion !== this.model.initialState.softwareVersion\r\n            ? `${this.model.name} software version: ${softwareVersion}`\r\n            : `${this.model.name} software version`;\r\n    }\r\n\r\n    isEnabledState(operationalState: string | null): boolean {\r\n        return operationalState === this.model.operationalState.Enabled\r\n            || operationalState === this.model.operationalState.OnAir;\r\n    }\r\n\r\n    isTDSState(operationalState: string | null): boolean {\r\n        return operationalState === this.model.operationalState.Test;\r\n    }\r\n\r\n    getStyleByOperationalStatus(operationalState: string | null): string {\r\n        let style = '';\r\n        if (this.isTDSState(operationalState)) {\r\n            style = 'tds';\r\n        } else if (operationalState === this.model.operationalState.OnAir) {\r\n            style = 'enabled';\r\n        }\r\n\r\n        return style;\r\n    }\r\n\r\n    getStateMessage(operationalState: string | null): string | null {\r\n        return this.isTDSState(operationalState)? 'TDS' : operationalState;\r\n    }\r\n}\r\n","import { Store } from '@ngrx/store';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { DynamicDialogConfig, DynamicDialogRef } from 'primeng/dynamicdialog';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { BaseDialogComponent } from '@oam/shared/lib/components/base-dialog/base-dialog-component';\r\nimport { updateDowngradedPrivilegesDialogPopupFlag } from '@oam/core/lib/actions/user.actions';\r\n\r\n@Component({\r\n    selector: 'ui-webem-downgraded-privileges-dialog',\r\n    templateUrl: './downgraded-privileges-dialog.component.html',\r\n    styleUrls: ['./downgraded-privileges-dialog.component.scss']\r\n})\r\nexport class DowngradedPrivilegesDialogComponent extends BaseDialogComponent implements OnInit, OnDestroy {\r\n    readonly okButtonModel: ButtonModel = {\r\n        label: 'OK',\r\n        theme: ButtonTheme.Accent\r\n    };\r\n\r\n\r\n    constructor(protected store: Store,\r\n                public config: DynamicDialogConfig,\r\n                ref: DynamicDialogRef) {\r\n        super(store, ref);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n    }\r\n\r\n    closeDialog(): void {\r\n        super.closeDialog();\r\n        this.store.dispatch(updateDowngradedPrivilegesDialogPopupFlag({ payload: false }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n}\r\n","<div class=\"p-dialog-content\">\r\n    <div>\r\n        <div class=\"dialog-information\">\r\n            <i class=\"information-icon mdi mdi-information\"></i>\r\n            <span>This user has been downgraded to BTS Read-Only User privileges</span>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"p-dialog-footer\">\r\n    <p-footer>\r\n        <ui-webem-button\r\n            [model]=\"okButtonModel\"\r\n            (action)=\"closeDialog()\"\r\n        >\r\n        </ui-webem-button>\r\n    </p-footer>\r\n</div>\r\n","<ng-container *ngIf=\"(userInformation$ | async)! as userInformation\">\r\n    <ui-webem-user-menu\r\n        [userName]=\"userInformation.username\"\r\n        [lastLoginTime]=\"userInformation.lastLogin ? userInformation.lastLogin : ''\"\r\n        [passwordExpirationDate]=\"userInformation.passwordExpirationDate ? userInformation.passwordExpirationDate : ''\"\r\n        [invalidLoginAttempts]=\"userInformation.failedLoginAttempts ? userInformation.failedLoginAttempts : ''\"\r\n        [tokenExpirationTime]=\"userInformation.expires ? userInformation.expires : ''\"\r\n        (helpClick)=\"onHelpClick()\"\r\n        (logOutClick)=\"onLogOutClick()\">\r\n    </ui-webem-user-menu>\r\n</ng-container>\r\n","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { map, pluck } from 'rxjs/operators';\r\nimport { NGXLogger } from 'ngx-logger';\r\nimport { GetHelp } from '@oam/core/lib/actions/help.actions';\r\nimport { DatetimeService } from '@oam/core/lib/services/datetime.service';\r\nimport { UserInformation } from '@oam/core/lib/store/user-state';\r\nimport { getUser, selectDowngradedPrivilegesDialogPopupFlag } from '@oam/core/lib/user/core/reducers/user-reducer';\r\nimport { logout } from '@oam/auth/lib/auth/core/actions/logout.actions';\r\nimport { openDialog } from '@oam/cu-ui';\r\nimport { DowngradedPrivilegesDialogComponent } from '@oam/cu-ui/lib/user-menu/components/downgraded-privileges-dialog/downgraded-privileges-dialog.component';\r\nimport { Userrole } from '@oam/cu-asm-api/models';\r\nimport { UserInformationService } from '@oam/core/lib/services/user-information.service';\r\n\r\nconst INVALID = 'Invalid';\r\n\r\n@Component({\r\n    selector: 'webem-user-menu',\r\n    templateUrl: './user-menu.component.html',\r\n    styleUrls: ['./user-menu.component.scss']\r\n})\r\nexport class UserMenuSmartComponent implements OnInit, OnDestroy {\r\n    @Input() helpFilePath: string;\r\n    @Input() helpFileName: string;\r\n\r\n    userInformation$: Observable<UserInformation>;\r\n\r\n    downgradedPrivilegesDialogPopupFlag$: Observable<any>;\r\n    downgradedPrivilegesDialogPopupFlagSubscription: any;\r\n\r\n    constructor(\r\n        private readonly store: Store,\r\n        private readonly logger: NGXLogger,\r\n        private readonly datetimeService: DatetimeService,\r\n        private readonly userInformationService: UserInformationService\r\n    ) {}\r\n\r\n    ngOnDestroy(): void {\r\n        this.downgradedPrivilegesDialogPopupFlagSubscription.unsubscribe();\r\n    }\r\n\r\n    ngOnInit() {\r\n        const role = this.userInformationService.getRole();\r\n        this.downgradedPrivilegesDialogPopupFlag$ = this.store.pipe(select(selectDowngradedPrivilegesDialogPopupFlag));\r\n\r\n        this.downgradedPrivilegesDialogPopupFlagSubscription = this.downgradedPrivilegesDialogPopupFlag$.subscribe((shouldDowngradedPrivilegesDialogPopup) => {\r\n            if (shouldDowngradedPrivilegesDialogPopup && role !== Userrole.ReadOnlyUserAccessMode) {\r\n                this.store.dispatch(openDialog({\r\n                    componentType: DowngradedPrivilegesDialogComponent,\r\n                    config: {\r\n                        header: 'Downgraded privileges',\r\n                        closable: false\r\n                    }\r\n                }));\r\n            }\r\n        });\r\n\r\n        this.userInformation$ = this.store.pipe(select(getUser),\r\n            pluck('information'),\r\n            map((user: UserInformation) => {\r\n                const passwordExpirationDate = this.getPasswordExpirationFromApiDirectly(user.passwordExpirationDate);\r\n                const lastLogin =  user.lastLogin && this.formatLoginInfoDate(user.lastLogin);\r\n                const expires =  user.expires && this.formatLoginInfoDate(user.expires);\r\n\r\n                return {\r\n                    ...user,\r\n                    passwordExpirationDate,\r\n                    lastLogin: lastLogin?.includes(INVALID) ? user.lastLogin : lastLogin,\r\n                    expires\r\n                };\r\n            }));\r\n    }\r\n\r\n    formatLoginInfoDate(lastLogin: string) {\r\n        const separator = 'from';\r\n        if (lastLogin.includes(separator)) {\r\n            lastLogin = lastLogin.split(separator)[0].trim();\r\n        }\r\n        lastLogin = lastLogin.replace(/\\s[A-Z]+(?=\\s[0-9]+$)/, '');\r\n\r\n        return this.datetimeService.getFormattedDateTime(lastLogin, false);\r\n    }\r\n\r\n    getPasswordExpirationFromApiDirectly(rawDateOrMessage = ''): string {\r\n        return rawDateOrMessage === '' ? 'N/A' : rawDateOrMessage;\r\n    }\r\n\r\n    getPasswordExpirationInfo(rawDateOrMessage = ''): string {\r\n        const formattedDate = this.datetimeService.getFormattedDateTime(rawDateOrMessage, true);\r\n\r\n        return formattedDate.includes(INVALID) ? rawDateOrMessage : formattedDate;\r\n    }\r\n\r\n    onHelpClick() {\r\n        this.logger.trace('[UserMenuComponent] Event helpClick has been caught. Action getHelp is emitting...');\r\n        this.store.dispatch(new GetHelp({ filePath: this.helpFilePath, fileName: this.helpFileName }));\r\n    }\r\n\r\n    onLogOutClick() {\r\n        this.store.dispatch(logout());\r\n    }\r\n}\r\n","export const KEY_F = 'KeyF';\r\nexport const ENTER = 'Enter';\r\nexport const ESCAPE = 'Escape';\r\nexport const ARROW_UP = 'ArrowUp';\r\nexport const ARROW_DOWN = 'ArrowDown';\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { NavigationSearchState } from '../models/navigation-search-state';\r\nimport { navigationSearchStateFeatureKey } from '../reducers/navigation-search.reducer';\r\n\r\nexport const selectNavigationSearch = createFeatureSelector<NavigationSearchState>(navigationSearchStateFeatureKey);\r\n\r\nexport const selectIsNavigationSearchOverlayOpened = createSelector(\r\n    selectNavigationSearch,\r\n    (state: NavigationSearchState) => state.isNavigationSearchOverlayOpened\r\n);\r\n","import { Injectable, Output, Directive } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { ARROW_DOWN, ARROW_UP, ENTER } from '../../constants/keyboard-keys.constants';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NavigationSearchKeyboardService {\r\n    @Output() handleKeyboardEvent = new Subject();\r\n\r\n    handleKeyUp(event: KeyboardEvent): void {\r\n        if ([ARROW_UP, ARROW_DOWN, ENTER].includes(event.key)) {\r\n            this.handleKeyboardEvent.next(event);\r\n        }\r\n    }\r\n}\r\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { NavigationSearchKeyboardService } from '../../shared/navigation-search-keyboard/navigation-search-keyboard.service';\r\n\r\n\r\n@Component({\r\n    selector: 'webem-navigation-search-input',\r\n    templateUrl: './navigation-search-input.component.html',\r\n    styleUrls: ['./navigation-search-input.component.scss']\r\n})\r\nexport class NavigationSearchInputComponent implements OnInit, OnDestroy {\r\n    @Output() valueChange: EventEmitter<string> = new EventEmitter<string>();\r\n    @Input() value = '';\r\n    @ViewChild('input') searchInputField: any;\r\n    changeValueSubject: Subject<void> = new Subject<void>();\r\n\r\n    constructor(private readonly navSearchKeyboardService: NavigationSearchKeyboardService) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.changeValueSubject\r\n            .pipe(debounceTime(200))\r\n            .subscribe(() => this.valueChange.emit(this.value));\r\n    }\r\n\r\n    ngAfterContentChecked(): void {\r\n        if (this.searchInputField) this.searchInputField.nativeElement.focus();\r\n    }\r\n\r\n    onValueChange(event: KeyboardEvent): void {\r\n        this.navSearchKeyboardService.handleKeyUp(event);\r\n        this.changeValueSubject.next();\r\n    }\r\n\r\n    resetValue(): void {\r\n        this.valueChange.emit('');\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.changeValueSubject.complete();\r\n    }\r\n}\r\n","<div class=\"filter-input\" id=\"navigation-search-input\">\r\n    <div class=\"ui-inputgroup\">\r\n        <div class=\"ui-inputgroup-addon magnify-icon\">\r\n            <i class=\"mdi mdi-magnify\"></i>\r\n        </div>\r\n        <input #input\r\n               autocomplete=\"off\"\r\n               id=\"search-input-field\"\r\n               class=\"search-input-field\"\r\n               type=\"search\"\r\n               (keyup)=\"onValueChange($event)\"\r\n               (search)=\"resetValue()\"\r\n               [(ngModel)]=\"value\"/>\r\n    </div>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { SelectItem } from 'primeng/api';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { redirect } from '@oam/core/lib/actions/router.actions';\r\nimport { setNavigationSearchOverlayClosed } from '../../core/actions/navigation-search.actions';\r\n\r\n\r\n@Component({\r\n    selector: 'webem-navigation-search-routes-list-item',\r\n    templateUrl: './navigation-search-routes-list-item.component.html',\r\n    styleUrls: ['./navigation-search-routes-list-item.component.scss']\r\n})\r\nexport class NavigationSearchRoutesListItemComponent {\r\n    @Input() routeItem: SelectItem;\r\n    isActive = false;\r\n\r\n    constructor(public readonly router: Router,\r\n                private readonly store: Store,\r\n                public readonly activatedRoute: ActivatedRoute) {\r\n    }\r\n\r\n    isDisabled(): boolean {\r\n        return this.routeItem.value === this.router.url;\r\n    }\r\n\r\n    setActive(value: boolean): void {\r\n        this.isActive = value;\r\n    }\r\n\r\n    redirectToSelectedRoute(): void {\r\n        if (!this.isDisabled()) {\r\n            this.store.dispatch(redirect({ routerLink: this.routeItem.value, activatedRoute: this.activatedRoute }));\r\n            this.store.dispatch(setNavigationSearchOverlayClosed());\r\n        }\r\n    }\r\n}\r\n","<li\r\n    (click)=\"redirectToSelectedRoute()\"\r\n    [ngClass]=\"{\r\n                'disabled': isDisabled(),\r\n                'active': isActive\r\n            }\">\r\n    <span [title]=\"routeItem.label\" id=\"navigation-search-{{ routeItem.value }}\">{{ routeItem.label }}</span>\r\n</li>\r\n","<div *ngIf=\"routesList.filteredRoutes.length else notFound\">\r\n    <ul class=\"available-routes-list\" #listref>\r\n        <webem-navigation-search-routes-list-item\r\n            *ngFor=\"let route of routesList.filteredRoutes\"\r\n            [routeItem]=\"route\">\r\n        </webem-navigation-search-routes-list-item>\r\n    </ul>\r\n</div>\r\n\r\n<ng-template #notFound>\r\n    <div class=\"not-found-text-container\">\r\n        <span class=\"not-found-text\">{{ NOT_FOUND }}</span>\r\n    </div>\r\n</ng-template>\r\n","import { Component, Input, OnDestroy, OnInit, QueryList, SimpleChanges, ViewChildren, ViewChild, ElementRef } from '@angular/core';\r\nimport { ListKeyManager } from '@angular/cdk/a11y';\r\nimport { SelectItem } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { RoutesList } from '../../models/routes-list';\r\nimport { ARROW_DOWN, ARROW_UP, ENTER } from '../../constants/keyboard-keys.constants';\r\nimport { NavigationSearchKeyboardService } from '../../shared/navigation-search-keyboard/navigation-search-keyboard.service';\r\nimport { NavigationSearchRoutesListItemComponent } from '../navigation-search-routes-list-item/navigation-search-routes-list-item.component';\r\n\r\n\r\n@Component({\r\n    selector: 'webem-navigation-search-routes-list',\r\n    templateUrl: './navigation-search-routes-list.component.html',\r\n    styleUrls: ['./navigation-search-routes-list.component.scss']\r\n})\r\nexport class NavigationSearchRoutesListComponent implements OnInit, OnDestroy {\r\n    @Input() routesList: RoutesList;\r\n    @Input() isOverlayClosed: boolean;\r\n    routesListChanged = false;\r\n    NOT_FOUND = 'Not found';\r\n    keyboardEventsManager: ListKeyManager<any>;\r\n    @ViewChildren(NavigationSearchRoutesListItemComponent) listItems: QueryList<any>;\r\n    @ViewChild('listref', { read: ElementRef }) listref: ElementRef;\r\n\r\n    keyboardEventSubscription: Subscription;\r\n\r\n    constructor(private readonly navSearchKeyboardService: NavigationSearchKeyboardService) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.keyboardEventSubscription = this.navSearchKeyboardService.handleKeyboardEvent\r\n            .subscribe((event: KeyboardEvent) => {\r\n                this.handleKeyUp(event);\r\n            });\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.keyboardEventsManager = new ListKeyManager(this.listItems)\r\n            .withWrap()\r\n            .skipPredicate((item: NavigationSearchRoutesListItemComponent) => item.isDisabled());\r\n        this.initKeyManagerHandlers();\r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        if (this.routesListChanged) this.updateStylesInRoutesList();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.routesList && !changes.routesList.firstChange) this.routesListChanged = true;\r\n        if (changes.isOverlayClosed && changes.isOverlayClosed.currentValue && this.keyboardEventsManager) {\r\n            this.keyboardEventsManager.setActiveItem(-1);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.keyboardEventSubscription.unsubscribe();\r\n    }\r\n\r\n    private initKeyManagerHandlers() {\r\n        this.keyboardEventsManager.change\r\n            .subscribe((activeIndex: number) => {\r\n                this.listItems.map((item, index: number) => {\r\n                    item.setActive(activeIndex === index);\r\n\r\n                    return item;\r\n                });\r\n                this.scrollToRouteIndex(activeIndex);\r\n            });\r\n    }\r\n\r\n    private handleKeyUp(event: KeyboardEvent): void {\r\n        event.stopImmediatePropagation();\r\n        if (this.keyboardEventsManager) {\r\n            if ([ARROW_UP, ARROW_DOWN].includes(event.key)) {\r\n                this.keyboardEventsManager.onKeydown(event);\r\n            } else if (event.key === ENTER && this.keyboardEventsManager.activeItem) {\r\n                this.keyboardEventsManager.activeItem.redirectToSelectedRoute();\r\n            }\r\n        }\r\n    }\r\n\r\n    scrollToRouteIndex(index: number) {\r\n        if (!this.listref || !this.listref.nativeElement || !this.listref.nativeElement.children) return;\r\n\r\n        const container = this.listref.nativeElement;\r\n        const routeElements = container.children;\r\n        const element = routeElements[index];\r\n        if (!element) return;\r\n\r\n        const childElement = element.children[0];\r\n        if (!childElement) return;\r\n\r\n        const firstRouteElement = routeElements[0];\r\n        if (!firstRouteElement) return;\r\n\r\n        if (this.isElementCompletelyVisible(container, element, childElement)) return;\r\n\r\n        const firstElementOffset = firstRouteElement.offsetTop;\r\n        const elementTop = element.offsetTop;\r\n        container.scrollTop = elementTop - firstElementOffset;\r\n    }\r\n\r\n    private isElementCompletelyVisible(container: HTMLElement, element: HTMLElement, childElement: HTMLElement) {\r\n        const containerTop = container.scrollTop + container.offsetTop;\r\n        const containerBottom = containerTop + container.clientHeight;\r\n\r\n        const elementHeight = childElement.clientHeight;\r\n        const elementTop = element.offsetTop;\r\n        const elementBottom = elementHeight + elementTop;\r\n\r\n        return elementTop >= containerTop && elementBottom <= containerBottom;\r\n    }\r\n\r\n    private updateStylesInRoutesList(): void {\r\n        let styledLabel;\r\n        this.routesList.filteredRoutes.forEach((route: SelectItem) => {\r\n            if (!route.label) return;\r\n            styledLabel = route.label.replace(new RegExp(this.routesList.searchText, 'gi'), (match: string) => {\r\n                return `<span class=\"bold-and-underlined-text\">${match}</span>`;\r\n            });\r\n\r\n            const elementId = `navigation-search-${route.value}`;\r\n            // @ts-ignore\r\n            if (document.getElementById(elementId)) document.getElementById(elementId).innerHTML = styledLabel;\r\n        });\r\n        this.routesListChanged = false;\r\n    }\r\n}\r\n","import { Component, ElementRef, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { isEmpty } from 'lodash';\r\nimport { Subject } from 'rxjs';\r\nimport { SelectItem } from 'primeng/api';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { RoutesList } from '../../models/routes-list';\r\nimport { ESCAPE, KEY_F } from '../../constants/keyboard-keys.constants';\r\nimport { selectIsNavigationSearchOverlayOpened } from '../../core/selectors/navigation-search.selectors';\r\nimport {\r\n    setNavigationSearchOverlayClosed,\r\n    setNavigationSearchOverlayOpened\r\n} from '../../core/actions/navigation-search.actions';\r\nimport { ButtonLength, ButtonModel, ButtonTheme, OverlayPanelComponent } from '@oam/cu-ui';\r\nimport { NavGroup, Navigation } from '@oam/navigation/lib/navigation/core/models/navigation.interface';\r\nimport { navigationRoot } from '@oam/navigation/lib/navigation/core/models/navigation-group.model';\r\nimport { groupNavigations } from '@oam/navigation/lib/navigation/core/utility/navigation-transformer';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { NavigationService } from '@oam/navigation/lib/navigation/service/navigation.service';\r\n\r\n\r\n@Component({\r\n    selector: 'webem-navigation-search',\r\n    templateUrl: './navigation-search.component.html',\r\n    styleUrls: ['./navigation-search.component.scss']\r\n})\r\nexport class NavigationSearchComponent implements OnInit, OnDestroy {\r\n    isOverlayOpened: boolean;\r\n    allRoutes: SelectItem[];\r\n    routesList: RoutesList;\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n    navigationSearchButtonModel: ButtonModel = {\r\n        icon: 'navigation-search-icon mdi mdi-feature-search-outline',\r\n        theme: ButtonTheme.Secondary,\r\n        length: ButtonLength.Long,\r\n        title: 'Navigation search'\r\n    };\r\n    @ViewChild('overlayPanel') overlayPanel: OverlayPanelComponent;\r\n    @ViewChild('overlayTarget') overlayTarget: ElementRef;\r\n\r\n    @HostListener('window:keydown', ['$event'])\r\n    onKeyDown(event: KeyboardEvent): void {\r\n        if ((event.ctrlKey && event.shiftKey && event.code === KEY_F) && !this.isOverlayOpened) {\r\n            this.openOverlay(event);\r\n        }\r\n        if (event.code === ESCAPE) {\r\n            this.hideOverlayIfOpened();\r\n        }\r\n    }\r\n\r\n    constructor(private readonly store: Store,\r\n                private navigationService: NavigationService) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.allRoutes = this.getAllRoutesSorted();\r\n        this.setAllRoutesAsFilteredRoutes();\r\n        this.store.pipe(\r\n            takeUntil(this.ngUnsubscribe),\r\n            select(selectIsNavigationSearchOverlayOpened)\r\n        ).subscribe((isOpened: boolean) => {\r\n            this.isOverlayOpened = isOpened;\r\n        });\r\n    }\r\n\r\n    toggle(event: Event): void {\r\n        if (!this.isOverlayOpened) {\r\n            this.openOverlay(event);\r\n        } else {\r\n            this.hideOverlayIfOpened();\r\n        }\r\n    }\r\n\r\n    hideOverlayIfOpened(): void {\r\n        if (this.isOverlayOpened) {\r\n            this.overlayPanel.hide();\r\n            this.store.dispatch(setNavigationSearchOverlayClosed());\r\n            this.setAllRoutesAsFilteredRoutes();\r\n        }\r\n    }\r\n\r\n    filterChanged(searchText: string): void {\r\n        let filteredRoutes: SelectItem[];\r\n        searchText = searchText.toLowerCase();\r\n\r\n        if (searchText === '') {\r\n            this.setAllRoutesAsFilteredRoutes();\r\n        } else {\r\n            filteredRoutes = this.allRoutes.filter((view: SelectItem) =>\r\n                view.label && view.label.toLowerCase().includes(searchText)\r\n            );\r\n            this.routesList = { filteredRoutes, searchText };\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    openOverlay(event: Event): void {\r\n        this.overlayPanel.show(event, this.overlayTarget.nativeElement);\r\n        this.store.dispatch(setNavigationSearchOverlayOpened());\r\n    }\r\n\r\n    private getAllRoutesSorted(): SelectItem[] {\r\n\r\n        return this.transFormToRouteSelectItems(this.navigationService.getAvailableNavigations())\r\n            .sort(this.sortRoutes);\r\n    }\r\n\r\n    private sortRoutes(a: SelectItem, b: SelectItem): number {\r\n        if (!a.label || !b.label) return 0;\r\n        const firstLabel = a.label.toLowerCase();\r\n        const secondLabel = b.label.toLowerCase();\r\n        if (firstLabel < secondLabel) return -1;\r\n        if (firstLabel > secondLabel) return 1;\r\n\r\n        return 0;\r\n    }\r\n\r\n    private setAllRoutesAsFilteredRoutes(): void {\r\n        this.routesList = {\r\n            filteredRoutes: this.allRoutes,\r\n            searchText: ''\r\n        };\r\n    }\r\n\r\n    private transFormToRouteSelectItems(navigations: Navigation[]): SelectItem[] {\r\n\r\n        return groupNavigations<Navigation, NavGroup>(navigations, prepareModel, filter)\r\n            .map((group: NavGroup) => {\r\n                return group.items.reduce((searchItemGroup: any, item: Navigation) => {\r\n                    const searchItem = {\r\n                        label: getLabel(item, group),\r\n                        value: item.routerLink\r\n                    };\r\n                    if (!isEmpty(item?.children)) {\r\n                        searchItemGroup.push(...(item.children as any).map((child: any) => ({\r\n                            label: `${searchItem.label} / ${child.label}`,\r\n                            value: child.routerLink\r\n                        })));\r\n                    } else {\r\n                        searchItemGroup.push(searchItem);\r\n                    }\r\n\r\n                    return searchItemGroup;\r\n                }, []);\r\n            })\r\n            .flat();\r\n\r\n        function prepareModel({ isGroup, nav }: { isGroup: boolean, isItem: boolean, nav: NavGroup | Navigation }) {\r\n\r\n            return {\r\n                label: isGroup ? (nav?.navigationGroup?.label || nav?.navigationGroup?.id) : nav?.label,\r\n                items: nav['items'],\r\n                navigationGroup: nav?.navigationGroup,\r\n                routerLink: nav?.routerLink,\r\n                children: nav?.children\r\n            };\r\n        }\r\n\r\n        function filter(nav: Navigation) {\r\n\r\n            return nav.routerLink === RouterLink.errors;\r\n        }\r\n\r\n        function getLabel(item: Navigation, group: NavGroup) {\r\n\r\n            return group?.items.length === 1 || group?.navigationGroup?.id === navigationRoot.id\r\n                ? item?.label :\r\n                `${group.label} / ${item.label}`;\r\n        }\r\n    }\r\n}\r\n","<span (clickOutside)=\"hideOverlayIfOpened()\" [exclude]=\"'.p-overlaypanel-content'\" [excludeBeforeClick]=\"true\" #overlayTarget>\r\n    <ui-webem-overlay-panel #overlayPanel styleClass=\"navigation-search-overlay-panel\" (hideEvent)='hideOverlayIfOpened()' >\r\n        <webem-navigation-search-input\r\n            [value]=\"routesList.searchText\"\r\n            (valueChange)=\"filterChanged($event)\">\r\n        </webem-navigation-search-input>\r\n        <webem-navigation-search-routes-list\r\n            [isOverlayClosed]=\"!isOverlayOpened\"\r\n            [routesList]=\"routesList\">\r\n        </webem-navigation-search-routes-list>\r\n    </ui-webem-overlay-panel>\r\n\r\n    <ui-webem-button class=\"button\"\r\n                     [model]=\"navigationSearchButtonModel\"\r\n                     (action)=\"toggle($event.event)\">\r\n    </ui-webem-button>\r\n</span>\r\n","export const firefox = 'Firefox';\r\nexport const chrome = 'Chrome';\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { get } from 'lodash';\r\nimport { chrome, firefox } from '@oam/layouts/lib/models/browsers-names';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FullScreenService {\r\n    constructor(@Inject(DOCUMENT) private readonly document: Document) {}\r\n\r\n    requestFullScreen(): Promise<void> {\r\n        return this.document.documentElement.requestFullscreen();\r\n    }\r\n\r\n    isInFullScreenModeByAPI() {\r\n        return !!this.document.fullscreenElement;\r\n    }\r\n\r\n    isFirefoxInFullScreen(): boolean {\r\n        return get(window, 'fullScreen');\r\n    }\r\n\r\n    isFirefoxInFullScreenModeByOS(): boolean {\r\n        return this.isFirefoxInFullScreen() && !this.isInFullScreenModeByAPI();\r\n    }\r\n\r\n    exitFullScreen(): Promise<void> {\r\n        return this.document.exitFullscreen();\r\n    }\r\n\r\n    toggleFullScreen(): void {\r\n        if (this.isInFullScreenModeByAPI()) {\r\n            this.exitFullScreen();\r\n        } else {\r\n            this.requestFullScreen();\r\n        }\r\n    }\r\n\r\n    getBrowser(): string {\r\n        let browser = '';\r\n        if (this.checkUserAgent(chrome)) {\r\n            browser = chrome;\r\n        } else if (this.checkUserAgent(firefox)) {\r\n            browser = firefox;\r\n        }\r\n\r\n        return browser;\r\n    }\r\n\r\n    checkUserAgent(browser: string): boolean {\r\n        return navigator.userAgent.indexOf(browser) !== -1;\r\n    }\r\n}\r\n","import { Component, HostListener, OnInit } from '@angular/core';\r\nimport {\r\n    ButtonModel,\r\n    ButtonTheme,\r\n    ButtonLength\r\n} from '@oam/cu-ui';\r\nimport { FullScreenService } from '@oam/layouts/lib/modules/page-header/full-screen.service';\r\nimport { chrome, firefox } from '@oam/layouts/lib/models/browsers-names';\r\n\r\n@Component({\r\n  selector: 'webem-full-screen',\r\n  templateUrl: './full-screen.component.html',\r\n  styleUrls: ['./full-screen.component.scss']\r\n})\r\nexport class FullScreenComponent implements OnInit {\r\n\r\n    isInFullScreenByAPI: boolean;\r\n    isFirefoxInFullScreenByOS: boolean;\r\n    disableFullScreenButton = false;\r\n    browser: string;\r\n    fullScreenButtonModel: ButtonModel;\r\n\r\n    readonly f11Warning = 'Exit full screen by keyboard (F11) or firefox menu';\r\n    readonly fullScreenEnterButtonModel: ButtonModel = {\r\n        icon: 'mdi mdi-fullscreen',\r\n        theme: ButtonTheme.Secondary,\r\n        length: ButtonLength.Long,\r\n        title: 'Full screen mode'\r\n    };\r\n    readonly fullScreenExitButtonModel: ButtonModel = {\r\n        icon: 'mdi mdi-fullscreen-exit',\r\n        theme: ButtonTheme.Secondary,\r\n        length: ButtonLength.Long,\r\n        title: 'Exit full screen mode'\r\n    };\r\n    readonly firefoxF11ButtonModel: ButtonModel = {\r\n        icon: 'mdi mdi-fullscreen-exit',\r\n        theme: ButtonTheme.Secondary,\r\n        length: ButtonLength.Long,\r\n        title: this.f11Warning\r\n    };\r\n\r\n    constructor(private readonly fullScreenService: FullScreenService) { }\r\n\r\n\r\n    ngOnInit() {\r\n        this.checkBrowser();\r\n        this.checkFullScreenByAPI();\r\n        this.updateFullScreenButton();\r\n    }\r\n\r\n    @HostListener('window:keydown', ['$event'])\r\n    onKeyDown(event: KeyboardEvent) {\r\n        if (event.key === 'F11' && this.browser === chrome) {\r\n            event.preventDefault();\r\n            this.toggleFullScreen();\r\n        }\r\n    }\r\n\r\n    @HostListener('window:resize', [])\r\n    onResize() {\r\n        this.checkFullScreenByAPI();\r\n        this.updateFullScreenButton();\r\n    }\r\n\r\n    toggleFullScreen(): void {\r\n        this.fullScreenService.toggleFullScreen();\r\n    }\r\n\r\n    checkFullScreenByAPI(): void {\r\n        this.isInFullScreenByAPI = this.fullScreenService.isInFullScreenModeByAPI();\r\n    }\r\n\r\n    updateFullScreenButton(): void {\r\n        this.updateFullScreenButtonByAPI();\r\n        if (this.browser === firefox) {\r\n            this.checkFirefoxFullScreenByOS();\r\n            this.updateFirefoxFullScreenButton();\r\n        }\r\n    }\r\n\r\n\r\n    updateFirefoxFullScreenButton(): void {\r\n        if (this.isFirefoxInFullScreenByOS) this.fullScreenButtonModel = this.firefoxF11ButtonModel;\r\n        this.disableFullScreenButton = this.isFirefoxInFullScreenByOS;\r\n    }\r\n\r\n    checkFirefoxFullScreenByOS() {\r\n        this.isFirefoxInFullScreenByOS = this.fullScreenService.isFirefoxInFullScreenModeByOS();\r\n    }\r\n\r\n    updateFullScreenButtonByAPI(): void {\r\n        this.fullScreenButtonModel = this.isInFullScreenByAPI ? this.fullScreenExitButtonModel : this.fullScreenEnterButtonModel;\r\n        this.disableFullScreenButton = false;\r\n    }\r\n\r\n    checkBrowser() {\r\n        this.browser = this.fullScreenService.getBrowser();\r\n    }\r\n}\r\n","<ui-webem-button id=\"full-screen\"\r\n                 [model]=\"fullScreenButtonModel\"\r\n                 (action)=\"toggleFullScreen()\"\r\n                 [disabled]=\"disableFullScreenButton\">\r\n</ui-webem-button>\r\n","import { Component, HostListener, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { forceRedirect } from '@oam/core/lib/actions/router.actions';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { StatusModelBar } from '@oam/navigation/lib/navigation/core/models/status-bar-info.interface';\r\nimport { TokenInfoDialogComponent } from '@oam/auth/lib/auth/components/token-info/token-info-dialog.component';\r\nimport { getTokenInfo } from '@oam/auth/lib/auth/core/selectors/token-info.selectors';\r\nimport { openDialog, closeDialogsByName } from '@oam/cu-ui';\r\nimport { Subject } from 'rxjs';\r\nimport { filter, pairwise, take, takeUntil } from 'rxjs/operators';\r\nimport { DateTime } from '@oam/core';\r\nimport _ from 'lodash';\r\nimport { TokenInfo } from '@oam/cu-api-gw-api';\r\nimport { AvailableFeatureFlagsEnum } from '@oam/core/lib/environment-variables/core/models';\r\nimport { FeatureFlag } from '@oam/feature-flag';\r\nimport { UserOperationService } from '@oam/core/lib/services/user-operation.service';\r\nimport { addNotification } from '@oam/core/lib/actions/toast-message.actions';\r\nimport { cleanUiSettingsCache } from '@oam/core/lib/actions/app-settings.actions';\r\nimport { selectHasCleanUiSettingsState } from '@oam/core/lib/reducers/app-settings.reducer';\r\n\r\n@Component({\r\n    selector: 'webem-page-header',\r\n    templateUrl: './page-header.component.html',\r\n    styleUrls: ['./page-header.component.scss']\r\n})\r\nexport class PageHeaderComponent implements OnInit, OnDestroy {\r\n    @Input() statusBarModel: StatusModelBar;\r\n    @Input() productName: string;\r\n    @Input() helpFilePath: string;\r\n    @Input() helpFileName: string;\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    constructor(private readonly store: Store,\r\n                private readonly featureFlag: FeatureFlag,\r\n                private userOperationService: UserOperationService) { }\r\n\r\n    @HostListener('window:keydown', ['$event'])\r\n    @HostListener('window:keyup', ['$event'])\r\n    @HostListener('window:resize', ['$event'])\r\n    @HostListener('window:scroll', ['$event'])\r\n    @HostListener('window:mousemove', ['$event'])\r\n    @HostListener('window:touchend', ['$event'])\r\n    @HostListener('window:mouseup', ['$event'])\r\n    @HostListener('window:wheel', ['$event'])\r\n    onEvent(event: any): void {\r\n        this.userOperationService.setFlag(true, event.type);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.store.pipe(\r\n            take(1),\r\n            select(selectHasCleanUiSettingsState),\r\n            filter(shouldNotifyUISettingGotRestored => shouldNotifyUISettingGotRestored),\r\n        ).subscribe( () => {\r\n            this.store.dispatch(cleanUiSettingsCache({payload: false}));\r\n            this.store.dispatch(\r\n                addNotification({\r\n                    payload: {\r\n                        detail: 'Legacy layout setting is incompatable, fallen back to the default one',\r\n                        severity: 'warning',\r\n                        summary: 'LayoutSettings'\r\n                    }\r\n                })\r\n            );\r\n        });\r\n\r\n        this.store.dispatch(this.statusBarModel.subscribeModelWatch());\r\n        // disabled until CB007962/RCP3024 completed\r\n        if (this.featureFlag.isFeatureEnabled(AvailableFeatureFlagsEnum.WIP_CB007962_TOKENINFO)) {\r\n            this.store.dispatch(this.statusBarModel.subscribeUserOperationWatch());\r\n            this.store.dispatch(this.statusBarModel.subscribeTokenInfoWatch());\r\n            this.store.select(getTokenInfo)\r\n                .pipe(\r\n                    pairwise(),\r\n                    takeUntil(this.ngUnsubscribe),\r\n                ).subscribe(\r\n                ([pre, now]) => {\r\n                    this.showTokenInfoDialog(pre, now);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.store.dispatch(this.statusBarModel.unsubscribeModelWatch());\r\n\r\n        if (this.featureFlag.isFeatureEnabled(AvailableFeatureFlagsEnum.WIP_CB007962_TOKENINFO)) {\r\n            this.store.dispatch(this.statusBarModel.unsubscribeUserOperationWatch());\r\n            this.store.dispatch(this.statusBarModel.unsubscribeTokenInfoWatch());\r\n            this.ngUnsubscribe.next();\r\n            this.ngUnsubscribe.complete();\r\n        }\r\n    }\r\n\r\n    navigateToHomePage() {\r\n        this.store.dispatch(forceRedirect({routerLink: RouterLink.root}));\r\n    }\r\n\r\n    showTokenInfoDialog(pre: TokenInfo, now: TokenInfo): void {\r\n        if (now?.User === '') return;\r\n        let dialogMsg = '';\r\n        const preEnforceLogout = pre.EnforceLogout;\r\n        const nowEnforceLogout = now?.EnforceLogout;\r\n        if (!preEnforceLogout && nowEnforceLogout) {\r\n            const delayTime = DateTime.convertSecondToHourMinuteSecond(now?.EnforceLogoutDelay);\r\n            dialogMsg = `You will be disconnected in ${delayTime}. ${this.formatLogoutReason(now?.EnforceLogoutReason)}.`;\r\n        }\r\n        if (preEnforceLogout && !nowEnforceLogout) {\r\n            dialogMsg = 'You will not be disconnected. The restricted access feature is deactivated.';\r\n        }\r\n        if (!_.isEmpty(dialogMsg)) {\r\n            this.store.dispatch(closeDialogsByName({closedComponent: TokenInfoDialogComponent}));\r\n            this.store.dispatch(openDialog({\r\n                componentType: TokenInfoDialogComponent,\r\n                config: {\r\n                    header: 'Access restrictions alert',\r\n                    closable: false,\r\n                    data: {\r\n                        alertMessage: dialogMsg,\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    formatLogoutReason(logoutReason: string | undefined): string {\r\n        if (!logoutReason) return '';\r\n        if (logoutReason.startsWith('1')) {\r\n            return 'The restricted access feature is activated';\r\n        } else if (logoutReason.startsWith('2')) {\r\n            return 'High priority user connected';\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n}\r\n","<button class=\"ui-corner-all ui-button-secondary p-button ui-state-default button-logo\" (click)=\"navigateToHomePage()\">\r\n    <div class=\"product-logo\">\r\n        <img class=\"nokia-logo\" src=\"assets/nokia/images/logo.svg\" alt=\"WebEM logo.\" />\r\n        {{ productName }}\r\n    </div>\r\n</button>\r\n\r\n<webem-general-status-info class=\"general-status-info\" [model]=\"statusBarModel\"></webem-general-status-info>\r\n<div class=\"quick-menu-wrapper\">\r\n    <ng-content select=\"webem-quick-menu\"></ng-content>\r\n</div>\r\n<ui-webem-vertical-html-line class=\"vertical-line\"></ui-webem-vertical-html-line>\r\n<webem-user-menu [helpFilePath]=helpFilePath [helpFileName]=helpFileName class=\"user-menu\"></webem-user-menu>\r\n<ui-webem-vertical-html-line class=\"vertical-line\"></ui-webem-vertical-html-line>\r\n<webem-navigation-search class=\"navigation-search-toggle\"></webem-navigation-search>\r\n<webem-full-screen class=\"full-screen-toggle\"></webem-full-screen>\r\n","<div *ngIf=\"isPasswordAboutToExpire$ | async\" class=\"password-about-to-expire-bar\">\r\n    <div class=\"password-about-to-expire-bar-text\" (click)=\"goToPasswordChange()\">{{ passwordAboutToExpireMessage }}</div>\r\n    <i class=\"mdi mdi-close\" (click)=\"closeInformation()\"></i>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { getIsPasswordAgingPresent } from '@oam/core/lib/reducers/user.reducer';\r\nimport { UserInformation } from '@oam/core/lib/store/user-state';\r\nimport { redirect } from '@oam/core/lib/actions/router.actions';\r\nimport { clearPasswordExpirationWarning } from '@oam/core/lib/actions/user.actions';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'webem-password-expiration-warning',\r\n    templateUrl: './password-expiration-warning.html',\r\n    styleUrls: ['./password-expiration-warning.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class PasswordExpirationWarningComponent implements OnInit, OnDestroy {\r\n    passwordAboutToExpireMessage?: string;\r\n    isPasswordAboutToExpire$: Observable<boolean>;\r\n\r\n    constructor(\r\n        private readonly store: Store,\r\n        private readonly activatedRoute: ActivatedRoute) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isPasswordAboutToExpire$ = this.store.pipe(select(getIsPasswordAgingPresent));\r\n        const userInfoFomSession = sessionStorage.getItem('userInfo');\r\n        if (userInfoFomSession) {\r\n            const userInfo: UserInformation = JSON.parse(userInfoFomSession);\r\n            this.passwordAboutToExpireMessage = userInfo.passwordAboutToExpireMessage;\r\n        }\r\n    }\r\n\r\n    goToPasswordChange() {\r\n        this.store.dispatch(redirect({routerLink: RouterLink.localUsersAccount, activatedRoute: this.activatedRoute}));\r\n        this.closeInformation();\r\n    }\r\n\r\n    closeInformation() {\r\n        this.store.dispatch(clearPasswordExpirationWarning());\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n    }\r\n}\r\n","<ui-webem-routed-menu\r\n    *ngIf=\"modelState$ | async as modelState\"\r\n    [items]=\"items\"\r\n    [numberOfAlarms]=\"modelState.numberOfAlarms ? modelState.numberOfAlarms : 0\"\r\n    [model]=\"model\"\r\n    (menuAction)=\"menuAction($event)\"\r\n    (navigateToAlarms)=\"navigateToAlarms()\">\r\n</ui-webem-routed-menu>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { redirect, forceRedirect } from '@oam/core/lib/actions/router.actions';\r\nimport { RoutedMenuItem } from '@oam/cu-ui';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { ModelState, QuickMenuAlarms } from '@oam/navigation/lib/navigation/core/models/quick-menu-alarms.interface';\r\nimport { Observable } from 'rxjs';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'webem-quick-menu',\r\n    templateUrl: './quick-menu.component.html',\r\n    styleUrls: ['./quick-menu.component.scss']\r\n})\r\nexport class QuickMenuComponent implements OnInit {\r\n    @Input() items: RoutedMenuItem[];\r\n    @Input() model: QuickMenuAlarms;\r\n    modelState$: Observable<ModelState>;\r\n\r\n    constructor(private readonly store: Store, private readonly activatedRoute: ActivatedRoute) { }\r\n\r\n    ngOnInit() {\r\n        this.modelState$ = this.store.pipe(\r\n            select(this.model.selectModelState)\r\n        );\r\n    }\r\n\r\n    menuAction(route: RouterLink) {\r\n        this.store.dispatch(forceRedirect({ routerLink: route }));\r\n    }\r\n\r\n    navigateToAlarms() {\r\n        this.store.dispatch(redirect({routerLink: this.model.activeAlarmsLink, activatedRoute: this.activatedRoute}));\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { isEmpty } from 'lodash';\r\nimport { SideBarMenuGroup } from '@oam/cu-ui';\r\nimport { navigationRoot } from '../models/navigation-group.model';\r\nimport { NavGroup, Navigation } from '../models/navigation.interface';\r\nimport { IconTypes } from '@oam/cu-ui/lib/side-bar-menu/model/side-bar-menu-model';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { groupNavigations } from '@oam/navigation/lib/navigation/core/utility/navigation-transformer';\r\nimport { NavigationService } from '@oam/navigation/lib/navigation/service/navigation.service';\r\n\r\n\r\n@Pipe({ name: 'sideBarMenuGroups', pure: true })\r\nexport class SideBarMenuGroupsPipe implements PipeTransform {\r\n    constructor(private navigationService: NavigationService) {\r\n    }\r\n\r\n    transform(currentRoute: string | null, navigations: Navigation[]): SideBarMenuGroup[] | null {\r\n        if (!currentRoute) return null;\r\n\r\n        return toMenuGroupList(this.navigationService.getAvailableNavigations(), currentRoute);\r\n    }\r\n}\r\n\r\nfunction setActive(groups: SideBarMenuGroup[], currentRoute: string) {\r\n    for (const group of groups) {\r\n        group.items.forEach((item: any) => {\r\n            if (!isEmpty(item?.children)) {\r\n                const activeChildIndex = item.children.findIndex((child: any) => child.data === currentRoute);\r\n                if (activeChildIndex !== -1) {\r\n                    item.children[activeChildIndex].isActive = true;\r\n                    item.isActive = true;\r\n                    group.isActive = true;\r\n                }\r\n            } else {\r\n                const activeItem = group.items.find(item => item?.data === currentRoute);\r\n                if (!activeItem) return;\r\n\r\n                activeItem.isActive = true;\r\n                group.isActive = true;\r\n            }\r\n        });\r\n\r\n        if (group.isActive) break;\r\n    }\r\n}\r\n\r\nexport function toMenuGroupList(navigations: Navigation[], currentRoute: string) {\r\n\r\n    const groups =  groupNavigations<Navigation, NavGroup, SideBarMenuGroup>\r\n    (navigations, toSideBarModel, exclude2ndLevelErrorsTab);\r\n\r\n    setActive(groups, currentRoute);\r\n\r\n    return groups;\r\n\r\n    function exclude2ndLevelErrorsTab(navigation: Navigation) {\r\n        return [\r\n            RouterLink.errorsMissingMandatoryObjects,\r\n            RouterLink.errorsObjectsQuantityErrors,\r\n            RouterLink.errorsGlobalRelationErrors,\r\n            RouterLink.errorsParameterErrors,\r\n            RouterLink.errorsHardwareErrors,\r\n            RouterLink.errorsParameterRelationErrors\r\n        ].some(routerLinkConst => routerLinkConst === navigation.routerLink);\r\n    }\r\n\r\n    function toSideBarModel(x: { isGroup: boolean; isItem: boolean; nav: Navigation | NavGroup; }) {\r\n        const { isGroup, isItem, nav } = x;\r\n        const isRootNavigation = nav?.navigationGroup === navigationRoot;\r\n\r\n        const obj = isGroup ?\r\n            {\r\n                icon: isRootNavigation ? (nav?.icon || '') : nav?.navigationGroup.icon,\r\n                items: nav['items'],\r\n                label: isRootNavigation ? nav?.label : (nav?.navigationGroup?.label || nav?.navigationGroup?.id),\r\n                iconType: nav?.navigationGroup.iconType ?\r\n                    nav?.navigationGroup.iconType :\r\n                    IconTypes.MATERIAL_ICON\r\n            } : getContent();\r\n\r\n        function getContent() {\r\n            return isItem ?\r\n                {\r\n                    keyboardShortcut: nav?.keyboardShortcut,\r\n                    label: nav?.label,\r\n                    children: nav?.children\r\n                } : {\r\n                    keyboardShortcut: nav?.keyboardShortcut,\r\n                    label: nav?.label\r\n                };\r\n        }\r\n\r\n        return {\r\n            ...obj,\r\n            data: nav?.routerLink\r\n        } as SideBarMenuGroup;\r\n    }\r\n}\r\n\r\n","<ng-container *ngIf=\"currentRoute | async | sideBarMenuGroups: navigationMenuModel as model\">\r\n    <ui-webem-side-bar-menu [model]=\"{items: model}\"\r\n                            (menuAction)=\"menuAction($event)\"\r\n                            [isExpanded]=\"(isExpanded | async)!\"\r\n                            (expandAction)=\"changeExpandState($event)\">\r\n    </ui-webem-side-bar-menu>\r\n</ng-container>\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { SideBarMenuItem } from '@oam/cu-ui';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { selectIsExpandedMainMenu } from '../../core/reducers/main-menu.reducer';\r\nimport { changeMainMenuExpandState } from '../../core/actions/main-menu.actions';\r\nimport { redirect } from '@oam/core/lib/actions/router.actions';\r\nimport { selectUrlWithoutParams } from '@oam/core/lib/selectors/router.selectors';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Navigation } from '@oam/navigation/lib/navigation/core/models/navigation.interface';\r\n\r\n@Component({\r\n    selector: 'webem-page-navigation-menu',\r\n    templateUrl: './page-navigation-menu.component.html',\r\n    styleUrls: ['./page-navigation-menu.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PageNavigationMenuComponent implements OnInit {\r\n    @Input() navigationMenuModel: Navigation[];\r\n    currentRoute: Observable<string>;\r\n    isExpanded: Observable<boolean>;\r\n\r\n    menuAction = (item: SideBarMenuItem) => {\r\n        this.store.dispatch(redirect({routerLink: item.data, activatedRoute: this.activatedRoute}));\r\n    };\r\n\r\n    constructor(private readonly store: Store, private readonly activatedRoute: ActivatedRoute) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentRoute = this.store.pipe(select(selectUrlWithoutParams));\r\n        this.isExpanded = this.store.pipe(select(selectIsExpandedMainMenu));\r\n    }\r\n\r\n    changeExpandState(isExpanded: boolean) {\r\n        this.store.dispatch(changeMainMenuExpandState({ payload: { isExpanded } }));\r\n    }\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\n\r\nexport enum PageNavigationActionTypes {\r\n    changeMainMenuExpandState = '[User] [Main menu] Change expand state'\r\n}\r\n\r\nexport interface ChangeExpandStateProps {\r\n    payload: { isExpanded: boolean }\r\n}\r\n\r\nexport const changeMainMenuExpandState = createAction(PageNavigationActionTypes.changeMainMenuExpandState, props<ChangeExpandStateProps>());\r\n","import { NavigationGroup } from './navigation-group.interface';\r\nimport { IconTypes } from '@oam/cu-ui/lib/side-bar-menu/model/side-bar-menu-model';\r\n\r\nconst NAVIGATION_ROOT = '<navigationRoot>';\r\n\r\nexport const navigationRoot: NavigationGroup = {\r\n    id: NAVIGATION_ROOT,\r\n    label: NAVIGATION_ROOT,\r\n    icon: NAVIGATION_ROOT\r\n};\r\n\r\nexport const alarmGroup: NavigationGroup = {\r\n    id: '<alarmGroup>',\r\n    label: 'Alarms',\r\n    icon: 'mdi mdi-bell'\r\n};\r\n\r\nexport const settingsGroup: NavigationGroup = {\r\n    id: '<settingsGroup>',\r\n    label: 'Settings',\r\n    icon: 'mdi mdi-cogs'\r\n};\r\n\r\nexport const splitViewGroup: NavigationGroup = {\r\n    id: '<splitViewGroup>',\r\n    label: 'Split View',\r\n    icon: 'mdi mdi-view-agenda'\r\n};\r\n\r\nexport const statusGroup: NavigationGroup = {\r\n    id: '<statusGroup>',\r\n    label: 'Status',\r\n    icon: 'mdi mdi-shield-check'\r\n};\r\n\r\nexport const configurationGroup: NavigationGroup = {\r\n    id: '<configurationGroup>',\r\n    label: 'Configuration',\r\n    icon: 'mdi mdi-settings'\r\n};\r\n\r\nexport const certificationManagementGroup: NavigationGroup = {\r\n    id: '<certificationManagementGroup>',\r\n    label: 'Certificate Management',\r\n    icon: 'mdi mdi-medal'\r\n};\r\n\r\nexport const localUserManagementGroup: NavigationGroup = {\r\n    id: '<localUserManagementGroup>',\r\n    label: 'User Account Management',\r\n    icon: 'mdi mdi-account'\r\n};\r\n\r\nexport const diagnosticsGroup: NavigationGroup = {\r\n    id: '<diagnosticsGroup>',\r\n    label: 'Diagnostic',\r\n    icon: 'mdi mdi-stethoscope'\r\n};\r\n\r\nexport const performanceGroup: NavigationGroup = {\r\n    id: '<performanceGroup>',\r\n    label: 'Performance',\r\n    icon: 'mdi mdi-chart-bar'\r\n};\r\n\r\nexport const softwareUpdateGroup: NavigationGroup = {\r\n    id: '<softwareUpdateGroup>',\r\n    label: 'Software Update',\r\n    icon: 'assets/bts-status/software_version_icon.svg',\r\n    iconType: IconTypes.IMAGE_ICON\r\n};\r\n","export enum PageName {\r\n    dashboard = 'Dashboard',\r\n    cuProperties = 'CU Properties',\r\n    vduProperties = 'Site Properties',\r\n    vduSiteView = 'Site View',\r\n    dusStatus = 'DUs Status',\r\n    cellsStatus = 'Cells Status',\r\n    infrastructureStatus = 'Infrastructure Status',\r\n    cellsMapping = 'Cells Mapping',\r\n    radioModulesStatus = 'Radio Modules Status',\r\n    vnfcStatus = 'VNFC Status',\r\n    x2LinksStatus = 'X2 Links Status',\r\n    xnLinksStatus = 'Xn Links Status',\r\n    networkSlicingStatus = 'Network Slicing Status',\r\n    aldStatus = 'ALD Status',\r\n    ngLinksStatus = 'NG Links Status',\r\n    parameterEditor = 'Parameter Editor',\r\n    configurationManagement = 'Configuration Management',\r\n    ipsecPskConfiguration = 'IPSec PSK Configuration',\r\n    activeAlarms = 'Active Alarms',\r\n    historicalAlarms = 'Historical Alarms',\r\n    performance = 'Performance',\r\n    operatorCertificates = 'Operator Certificates',\r\n    automaticManagement = 'Automatic Management',\r\n    certificateRevocationList = 'Certificate Revocation Lists',\r\n    localUsersAccount = 'Local Users',\r\n    serviceUsers = 'Service Users',\r\n    sessionList = 'Session List',\r\n    snapshot = 'Snapshot',\r\n    uplane = 'User Plane Traces',\r\n    cplane = 'Control Plane Traces',\r\n    tracing = 'User Plane Traces',\r\n    errors = 'Errors',\r\n    errorsParameterErrors = 'Configuration Management / Errors / Parameter Errors',\r\n    errorsMissingMandatoryObjects = 'Configuration Management / Errors / Missing Mandatory Objects',\r\n    errorsObjectsQuantityErrors = 'Configuration Management / Errors / Objects Quantity Errors',\r\n    errorsGlobalRelationErrors = 'Configuration Management / Errors / Global Relation Errors',\r\n    errorsParameterRelationErrors = 'Configuration Management / Errors / Parameter Relation Errors',\r\n    errorsHardwareErrors = 'Configuration Management / Errors / Hardware Errors',\r\n    parameterSearch = 'Parameter Search',\r\n    compareObjects = 'Compare Objects',\r\n    uiSettings = 'Layout Settings',\r\n    ipConnectivity = 'IP Connectivity',\r\n    pmtuDiscovery = 'PMTU Discovery',\r\n    splitView = 'Split View',\r\n    faultToggling = 'Fault Toggling History',\r\n    sfpMonitoring = 'SFP Monitoring',\r\n    aldSoftwareUpdate = 'ALD Software Update',\r\n    aldSoftwareEditor = 'ALD Software Editor',\r\n    nrDownlink = 'NR Downlink',\r\n    ipsecAssociations = 'IP Security Associations',\r\n    testModel = 'Test Model',\r\n    nrUplink = 'NR Uplink',\r\n    nrPerformance = 'NR Performance'\r\n}\r\n","export enum RouterLink {\r\n    root = '/',\r\n    dashboard = '/dashboard',\r\n    cuProperties = '/status/cu-properties',\r\n    vduProperties = '/status/vdu-properties',\r\n    dusStatus = '/status/dus',\r\n    cellsStatus = '/status/cells',\r\n    infrastructureStatus = '/status/infrastructure',\r\n    cellsMapping = '/status/mapping',\r\n    vduCellsStatus = '/status/vdu-cells',\r\n    radioModulesStatus = '/status/radio-modules',\r\n    vnfcStatus = '/status/vnfc',\r\n    vduSiteView = '/status/site-view',\r\n    x2LinksStatus = '/status/x2',\r\n    xnLinksStatus = '/status/xn-links',\r\n    ngLinksStatus = '/status/ng',\r\n    networkSlicingStatus = '/status/network-slicing',\r\n    aldStatus = '/status/ald-status',\r\n    parameterEditor = '/parameter-editor',\r\n    ipsecPskConfiguration = '/ipsec-psk-configuration',\r\n    errorsMissingMandatoryObjects = '/errors/missing-mandatory-objects',\r\n    errorsParameterErrors = '/errors/parameter-errors',\r\n    errorsHardwareErrors = '/errors/hardware-errors',\r\n    errorsObjectsQuantityErrors = '/errors/objects-quantity-errors',\r\n    errorsGlobalRelationErrors = '/errors/global-relation-errors',\r\n    errorsParameterRelationErrors = '/errors/parameter-relation-errors',\r\n    activeAlarms = '/alarm/active',\r\n    historicalAlarms = '/alarm/historical',\r\n    performance = '/performance',\r\n    operatorCertificates = '/certificate/operator',\r\n    certificateAutomatic = '/certificate/automatic',\r\n    certificateRevocationList = '/certificate/crl',\r\n    localUsersAccount = '/uam/local-user-account',\r\n    serviceAccountManagement = '/uam/service-account-management',\r\n    sessionList = '/uam/sessions',\r\n    snapshot = '/diagnostic/snapshot',\r\n    tracing = '/diagnostic/tracing',\r\n    cplane = '/diagnostic/cplane',\r\n    uplane = '/diagnostic/uplane',\r\n    login = 'login',\r\n    passwordExpired = '/password-expired',\r\n    globalSearch = '/global-search',\r\n    errors = '/errors',\r\n    parameterSearch = '/parameter-search',\r\n    compareObjects = '/compare-objects',\r\n    uiSettings = '/app-settings/layout',\r\n    passwordSettings = '/app-settings/password',\r\n    ipConnectivity = '/diagnostic/diagnostic-ip-connectivity',\r\n    pmtuDiscovery = '/diagnostic/diagnostic-pmtu-discovery',\r\n    ipsecAssociations = '/diagnostic/ip-security-association',\r\n    splitView = '/split-view',\r\n    faultToggling = '/alarm/fault-toggling',\r\n    sfpMonitoring = '/diagnostic/sfp-monitoring',\r\n    aldSoftwareUpdate = '/software-update/ald-software-update',\r\n    aldSoftwareEditor = '/software-update/ald-software-editor',\r\n    nrDownlink = '/diagnostic/nr-downlink',\r\n    nrUplink = '/diagnostic/nr-uplink',\r\n    nrPerformance = '/diagnostic/nr-performance'\r\n}\r\n","import { Action, createFeatureSelector, createReducer, createSelector, on, State } from '@ngrx/store';\r\nimport { changeMainMenuExpandState } from '../actions/main-menu.actions';\r\n\r\nexport const MAIN_MENU_KEY = 'mainMenu';\r\n\r\nexport interface MainMenuState {\r\n    isExpanded: boolean;\r\n}\r\n\r\nconst initialState: MainMenuState = {\r\n    isExpanded: false\r\n};\r\n\r\nconst onChangeMainMenuExpandState = on(changeMainMenuExpandState, (state: MainMenuState, { payload: { isExpanded } }) => {\r\n    return { ...state, isExpanded };\r\n});\r\n\r\nconst mainMenuReducer = createReducer(initialState, onChangeMainMenuExpandState);\r\n\r\n// AOT require to have decorator createReducer wrapped in function.\r\nexport function reducer(state: MainMenuState, action: Action) {\r\n    return mainMenuReducer(state, action);\r\n}\r\nexport const selectMainMenuState = createFeatureSelector<MainMenuState>(MAIN_MENU_KEY);\r\nexport const selectIsExpandedMainMenu = createSelector(selectMainMenuState, (state) => state.isExpanded);\r\n","import { NavGroup, Navigation } from '@oam/navigation/lib/navigation/core/models/navigation.interface';\r\nimport { navigationRoot } from '@oam/navigation/lib/navigation/core/models/navigation-group.model';\r\n\r\nexport function groupNavigations<T extends Navigation = Navigation, B extends NavGroup = NavGroup, R = any>(\r\n    entryModels: T[],\r\n    derivedProperties: (groupOrItem: { isGroup: boolean, isItem: boolean, nav: T | B }) => R = (x) => (x.nav as unknown as R) ,\r\n    shouldExclude: (a: T) => boolean = () => false\r\n): R[] {\r\n\r\n    const navigationGroupMap = entryModels.reduce((entryModelGroup, entryModelItem) => {\r\n        const groupKey = getGroupKey(entryModelItem);\r\n        const group = entryModelGroup[groupKey] || { ...entryModelItem, items: [] };\r\n\r\n        if (shouldExclude(entryModelItem)) return entryModelGroup;\r\n\r\n        group.items.push({...entryModelItem});\r\n        entryModelGroup[groupKey] = group;\r\n\r\n        return entryModelGroup;\r\n    }, {} as NavGroup);\r\n\r\n    return Object.values(navigationGroupMap).map(navGroup => {\r\n        const navItemsGroup = navGroup.items.reduce((itemGroup: any, item: any) => {\r\n            if (!item.parentKey) {\r\n                itemGroup[item.label] = derivedProperties({ isGroup: false, isItem: true, nav: item });\r\n            } else {\r\n\r\n                if (!itemGroup[item.parentKey]) {\r\n                    itemGroup[item.parentKey] = derivedProperties({ isGroup: false, isItem: true, nav: {\r\n                            label: item.parentKey,\r\n                            routerLink: item.routerLink,\r\n                            navigationGroup: item.navigationGroup,\r\n                            children: [derivedProperties({ isGroup: false, isItem: false, nav: item })]\r\n                        } as any\r\n                    });\r\n                } else {\r\n                    itemGroup[item.parentKey].children.push(derivedProperties({ isGroup: false, isItem: false, nav: item }));\r\n                }\r\n            }\r\n\r\n            return itemGroup;\r\n        }, {});\r\n\r\n        navGroup.items = Object.values(navItemsGroup);\r\n\r\n        return derivedProperties({ isGroup: true, isItem: false, nav: navGroup });\r\n    });\r\n\r\n    function getGroupKey(entryModel: T) {\r\n        const isRootNavigation = entryModel.navigationGroup === navigationRoot;\r\n\r\n        return isRootNavigation ? entryModel.label : entryModel.navigationGroup?.id;\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { PageNavigationMenuComponent } from './components/page-navigation-menu/page-navigation-menu.component';\r\nimport { MAIN_MENU_KEY, reducer } from './core/reducers/main-menu.reducer';\r\nimport { SideBarMenuGroupsPipe } from './core/pipes/side-bar-menu-groups.pipe';\r\nimport { SideBarMenuModule } from '@oam/cu-ui';\r\nimport { Navigation } from '@oam/navigation/lib/navigation/core/models/navigation.interface';\r\nimport { NavigationService } from '@oam/navigation/lib/navigation/service/navigation.service';\r\nimport { FeatureFlag } from '@oam/feature-flag';\r\nimport { VnfcSharedService } from '@oam/vnfc-shared/lib/vnfc-store/services/vnfc-shared.service';\r\nimport { RoleAccessService } from '@oam/role-access-core';\r\n\r\n@NgModule({\r\n    declarations: [PageNavigationMenuComponent, SideBarMenuGroupsPipe],\r\n    imports: [\r\n        CommonModule,\r\n        SideBarMenuModule,\r\n        StoreModule.forFeature(MAIN_MENU_KEY, reducer)\r\n    ],\r\n    exports: [PageNavigationMenuComponent, SideBarMenuGroupsPipe]\r\n})\r\nexport class NavigationModule {\r\n    static forRoot(navigations: Navigation[]): ModuleWithProviders<NavigationModule> {\r\n\r\n        return {\r\n            ngModule: NavigationModule,\r\n            providers: [\r\n                {\r\n                    provide: NavigationService,\r\n                    useFactory: (featureFlag: FeatureFlag, vnfcSharedService: VnfcSharedService, roleAccessService: RoleAccessService) => {\r\n                        return new NavigationService(navigations, featureFlag, vnfcSharedService, roleAccessService);\r\n                    },\r\n                    deps: [FeatureFlag, VnfcSharedService, RoleAccessService]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Navigation } from '@oam/navigation/lib/navigation/core/models/navigation.interface';\r\nimport { FeatureFlag } from '@oam/feature-flag';\r\nimport { VnfcSharedService } from '@oam/vnfc-shared/lib/vnfc-store/services/vnfc-shared.service';\r\nimport { RoleAccessService } from '@oam/role-access-core';\r\n\r\n@Injectable()\r\nexport class NavigationService {\r\n\r\n    private readonly navigations: Navigation[];\r\n\r\n    constructor(\r\n        navigations: Navigation[],\r\n        private featureFlag: FeatureFlag,\r\n        private vnfcSharedService: VnfcSharedService,\r\n        private roleAccessService: RoleAccessService\r\n    ) {\r\n        this.navigations = navigations;\r\n    }\r\n\r\n    getAvailableNavigations(): Navigation[] {\r\n\r\n        return (this.vnfcSharedService\r\n            .filterMenuForVcuVmcu(this.navigations)  as Navigation[])\r\n            .filter(({ featureFlag, roleAccessFlag }) =>\r\n                this.featureFlag.isFeatureEnabled(featureFlag) &&\r\n                !this.roleAccessService.isForbiddenForCurrentRole(roleAccessFlag));\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { FeatureFlag } from '@oam/feature-flag';\r\n\r\n@Directive({\r\n    selector: '[oamFeatureFlag]'\r\n})\r\nexport class FeatureFlagDirective {\r\n\r\n    @Input() set oamFeatureFlag(flag: string) {\r\n        if (this.featureFlag.isFeatureEnabled(flag)) {\r\n            this.viewContainer.createEmbeddedView(this.templateRef);\r\n        } else {\r\n            this.viewContainer.clear();\r\n\r\n        }\r\n    }\r\n\r\n    constructor(private featureFlag: FeatureFlag,\r\n                private viewContainer: ViewContainerRef, private templateRef: TemplateRef<any>) {\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FeatureFlagDirective } from './directives/feature-flag.directive';\r\nimport { FeatureFlag, FeatureFlagProperty, FlagsType } from '@oam/feature-flag';\r\nimport { Route } from '@angular/router';\r\n\r\nexport type FeatureFlagGuardRule = FeatureFlagProperty & Pick<Route, 'path'>;\r\n\r\nexport class NgFeatureFlagModuleConfig {\r\n    featureFlagGuardRules: Required<FeatureFlagGuardRule>[];\r\n    featureFlagConf: FlagsType;\r\n\r\n    constructor(featureFlagGuardRules: Required<FeatureFlagGuardRule>[], featureFlagConf: FlagsType) {\r\n        this.featureFlagGuardRules = featureFlagGuardRules;\r\n        this.featureFlagConf = featureFlagConf;\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [FeatureFlagDirective],\r\n    exports: [FeatureFlagDirective]\r\n})\r\nexport class NgFeatureFlagModule {\r\n    static forRoot(moduleConfig: NgFeatureFlagModuleConfig): ModuleWithProviders<NgFeatureFlagModule> {\r\n        const featureFlagInst = new FeatureFlag(moduleConfig.featureFlagConf);\r\n\r\n        return {\r\n            ngModule: NgFeatureFlagModule,\r\n            providers: [\r\n                {\r\n                    provide: NgFeatureFlagModuleConfig,\r\n                    useValue: moduleConfig\r\n                },\r\n                {\r\n                    provide: FeatureFlag,\r\n                    useValue: featureFlagInst\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CellsInfoConfig } from './core/models/cells-info-config';\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    imports: [],\r\n    exports: []\r\n})\r\nexport class CellsInfoConfigModule {\r\n    static forRoot(config: CellsInfoConfig): ModuleWithProviders<CellsInfoConfigModule> {\r\n        return {\r\n            ngModule: CellsInfoConfigModule,\r\n            providers: [\r\n                {\r\n                    provide: CellsInfoConfig,\r\n                    useValue: config,\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { StatusService } from '@oam/cu-asm-api/services';\r\nimport { BasicCell } from '@oam/cu-asm-api';\r\n\r\ninterface Cell {\r\n    basicCell: BasicCell;\r\n    duName?: string;\r\n}\r\n\r\nexport interface CellsDiff {\r\n    created: Cell[];\r\n}\r\n\r\nexport class CellsInfoConfig {\r\n    getCellsDiff: (statusService: StatusService) => Observable<CellsDiff>;\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { CounterInfo } from '@oam/cu-pmv2-api/models';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nexport enum CountersInfoActionTypes {\r\n    SetCountersInfo = '[PMV2] [PM Counters Info] Set counters info',\r\n    ClearCountersInfo = '[PMV2] [PM Counters Info] Clear counters info',\r\n    CountersInfoFetchingError = '[PMV2] [PM Counters Info] Counters info fetching error',\r\n    SetCountersInfoPanelState = '[PMV2] [PM Counters Info] Set counters info panel state',\r\n    UnsetCountersInfoPanelState = '[PMV2] [PM Counters Info] Unset counters info panel state',\r\n    RetrievingCounterInfoFailed = '[PMV2] [PM Counters Info] Failed to retrieve counter info from server',\r\n    RetrievingCounterInfoSucceed = '[PMV2] [PM Counters Info] Counter info successfully retrieved from the server'\r\n}\r\n\r\nexport const setCountersInfo = createAction(\r\n    CountersInfoActionTypes.SetCountersInfo,\r\n    props<{info: CounterInfo[]}>()\r\n);\r\n\r\nexport const clearCountersInfo = createAction(\r\n    CountersInfoActionTypes.ClearCountersInfo,\r\n);\r\n\r\nexport const setCountersInfoPanelState = createAction(\r\n    CountersInfoActionTypes.SetCountersInfoPanelState,\r\n    props<{id: string}>()\r\n);\r\n\r\nexport const unsetCountersInfoPanelState = createAction(\r\n    CountersInfoActionTypes.UnsetCountersInfoPanelState,\r\n    props<{id: string}>()\r\n);\r\n\r\nexport const countersInfoFetchingError = createAction(\r\n    CountersInfoActionTypes.CountersInfoFetchingError,\r\n    props<{error: HttpErrorResponse}>()\r\n);\r\n\r\nexport const retrievingCounterInfoFailed = createAction(\r\n    CountersInfoActionTypes.RetrievingCounterInfoFailed\r\n);\r\n\r\nexport const retrievingCounterInfoSucceed = createAction(\r\n    CountersInfoActionTypes.RetrievingCounterInfoSucceed\r\n);\r\n\r\n","import { createAction } from '@ngrx/store';\r\n\r\nexport enum CountersPmServiceActionTypes {\r\n    PmServerDown = '[PMV2] [PM Sever] Pm server is down',\r\n    PmServerAvailable = '[PMV2] [PM Sever] Pm server is available',\r\n    SubscribeToPmServiceState = '[PMV2] [PM Sever] Subscribe to PM Service state',\r\n    RequestPmServiceAction = '[PMV2] [PM Sever] Request PM Service state'\r\n}\r\n\r\nexport const pmServerDown = createAction(\r\n    CountersPmServiceActionTypes.PmServerDown\r\n);\r\n\r\nexport const pmServerAvailable = createAction(\r\n    CountersPmServiceActionTypes.PmServerAvailable\r\n);\r\n\r\nexport const subscribeToPmServiceState = createAction(\r\n    CountersPmServiceActionTypes.SubscribeToPmServiceState\r\n);\r\n\r\nexport const requestPmServiceAction = createAction(\r\n    CountersPmServiceActionTypes.RequestPmServiceAction\r\n);\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { CounterNode } from '@oam/pm-shared/lib/measurement-store/models/counters-selection.interface';\r\n\r\nexport enum CountersSelectionActionTypes {\r\n    SubscribeToCounterChanges = '[PMV2] [User] [PM Counters Selection] Subscribe counters change',\r\n    UnsubscribeFromCounterChanges = '[PMV2] [PM Counters Selection] Unsubscribe counters change',\r\n    SelectCounters = '[PMV2] [User] [PM Counters Selection] Select counters',\r\n    ClearCountersSelection = '[PMV2] [User] [PM Counters Selection] Clear selection',\r\n}\r\n\r\nexport const subscribeToCountersChanges = createAction(\r\n    CountersSelectionActionTypes.SubscribeToCounterChanges\r\n);\r\n\r\nexport const unsubscribeFromCountersChanges = createAction(\r\n    CountersSelectionActionTypes.UnsubscribeFromCounterChanges\r\n);\r\n\r\nexport const selectCounters = createAction(\r\n    CountersSelectionActionTypes.SelectCounters,\r\n    props<{nodes: CounterNode[], counterStartTime: string, timeFrame: number}>()\r\n);\r\n\r\nexport const clearCountersSelection = createAction(\r\n    CountersSelectionActionTypes.ClearCountersSelection\r\n);\r\n","import {  createAction, props } from '@ngrx/store';\r\nimport { CountersViews } from '../models/counters-values.interface';\r\nimport { CounterValues } from '../store/counter-values';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { MultiValue } from '@oam/cu-pmv2-api/models';\r\n\r\nexport enum CountersValuesActionTypes {\r\n    SetCountersValues = '[PMV2] [PM Counters Values] Set counters',\r\n    AppendCountersValues = '[PMV2] [PM Counters Values] Update counters values',\r\n    ClearCountersValues = '[PMV2] [PM Counters Values] Clear counters',\r\n    SetStartTime = '[PMV2] [PM Counters  Timestamp Values] Add start time values',\r\n    SetEndTime = '[PMV2] [PM Counters Timestamp Values] Add end time values',\r\n    ClearStartTime = '[PMV2] [PM Counters Timestamp Values] Remove start time values',\r\n    ClearEndTime = '[PMV2] [PM Counters Timestamp Values] Remove end time values',\r\n    SetCountersFilter = '[PMV2] [User] [Counters] Set Counters Filter',\r\n    ChangeCountersView = '[PMV2] [PM Counters Selection] Change counters view',\r\n    ExportCountersTable = '[PMV2] [PM Counters Selection] Export counters table',\r\n    ExportCountersChart = '[PMV2] [PM Counters Selection] Export counters chart',\r\n    CounterValuesNotModified = '[PMV2] [PM Counters Values] Counters values not modified',\r\n    CounterValuesHttpError = '[PMV2] [PM Counters Values] Counters values http error',\r\n    FetchCounters = '[PMV2] [PM Counters Values] Fetch counters',\r\n    CountersValuesFetchingSuccess = '[PMV2] [PM Counters Values] Counters values fetching success',\r\n    SetLatestEtag = '[PMV2] [PM] Set Latest Etag',\r\n    RetrievingCounterValuesFailed = '[PMV2] [PM Counters Values] Failed to retrieve counter values from server',\r\n    RetrievingCounterValuesSucceed = '[PMV2] [PM Counters Values] Counter values successfully retrieved from the server',\r\n}\r\n\r\nexport const setCountersValues = createAction(\r\n    CountersValuesActionTypes.SetCountersValues,\r\n    props<{ values: CounterValues[] }>()\r\n);\r\n\r\nexport const appendCountersValues = createAction(\r\n    CountersValuesActionTypes.AppendCountersValues,\r\n    props<{ values: CounterValues[], isOldRequest: boolean }>()\r\n);\r\n\r\nexport const clearCountersValues = createAction(\r\n    CountersValuesActionTypes.ClearCountersValues\r\n);\r\n\r\nexport const setCountersFilter = createAction(\r\n    CountersValuesActionTypes.SetCountersFilter,\r\n    props<{filter: string}>()\r\n);\r\n\r\nexport const setStartTime = createAction(\r\n    CountersValuesActionTypes.SetStartTime,\r\n    props<{timestamp: string}>()\r\n);\r\n\r\nexport const clearStartTime = createAction(\r\n    CountersValuesActionTypes.ClearStartTime\r\n);\r\n\r\nexport const setEndTime = createAction(\r\n    CountersValuesActionTypes.SetEndTime,\r\n    props<{timestamp: string}>()\r\n);\r\n\r\nexport const setLatestEtag = createAction(\r\n    CountersValuesActionTypes.SetLatestEtag,\r\n    props<{etag: string | undefined}>()\r\n);\r\n\r\nexport const clearEndTime = createAction(\r\n    CountersValuesActionTypes.ClearEndTime\r\n);\r\n\r\nexport const changeCountersView = createAction(\r\n    CountersValuesActionTypes.ChangeCountersView,\r\n    props<{viewType: CountersViews}>()\r\n);\r\n\r\nexport const exportCountersTable = createAction(\r\n    CountersValuesActionTypes.ExportCountersTable,\r\n    props<{filename: string}>()\r\n);\r\n\r\nexport const exportCountersChart = createAction(\r\n    CountersValuesActionTypes.ExportCountersChart,\r\n    props<{filename: string}>()\r\n);\r\n\r\nexport const fetchCountersValues = createAction(\r\n    CountersValuesActionTypes.FetchCounters\r\n);\r\n\r\nexport const countersValuesNotModified = createAction(\r\n    CountersValuesActionTypes.CounterValuesNotModified,\r\n);\r\n\r\nexport const countersFetchingError = createAction(\r\n    CountersValuesActionTypes.CounterValuesHttpError,\r\n    props<{error: HttpErrorResponse}>()\r\n);\r\n\r\nexport const countersValuesFetchingSuccess = createAction(\r\n    CountersValuesActionTypes.CountersValuesFetchingSuccess,\r\n    props<{values: MultiValue, etag: string | undefined, isOldRequest?: boolean}>()\r\n);\r\n\r\nexport const retrievingCounterValuesFailed = createAction(\r\n    CountersValuesActionTypes.RetrievingCounterValuesFailed\r\n);\r\n\r\nexport const retrievingCounterValuesSucceed = createAction(\r\n    CountersValuesActionTypes.RetrievingCounterValuesSucceed\r\n);\r\n","import { mapKeys } from 'lodash';\r\nimport { MultiValue } from '@oam/cu-pmv2-api/models/multi-value';\r\nimport { Value } from '@oam/cu-pmv2-api/models';\r\n\r\nexport function getCounterDistNameFromUniqueId(uniqueCounterId: string): string {\r\n    const [, dimensionDistName] = uniqueCounterId.split(':');\r\n\r\n    return dimensionDistName;\r\n}\r\n\r\nexport function getCounterIdFromUniqueId(uniqueCounterId: string): string {\r\n    const [counterId, ] = uniqueCounterId.split(':');\r\n\r\n    return counterId;\r\n}\r\n\r\nexport function getMeasurementIdFromUniqueId(uniqueCounterId: string): string {\r\n    const [counterId, ] = uniqueCounterId.split(':');\r\n\r\n    return counterId.split('C')[0].slice(1);\r\n}\r\n\r\nexport function removeCounterKeyPrefix(values: MultiValue): MultiValue {\r\n    const prefix = 'PLMN-PLMN/';\r\n\r\n    return mapKeys(values, (value: Value[], key: string) => key.replace(prefix, ''));\r\n}\r\n\r\nexport function filterCounterKey(previousValues: Value[], newValues: Value[]): Value[] {\r\n\r\n    return Object.values([...previousValues, ...newValues].reduce((result, {\r\n        startTime,\r\n        ...rest\r\n    }) => {\r\n        result[startTime] = {\r\n            ...(result[startTime] || {}),\r\n            startTime,\r\n            ...rest\r\n        };\r\n\r\n        return result;\r\n    }, {}));\r\n}\r\n","export enum CountersViews {\r\n    TABLE = 'TABLE',\r\n    CHART = 'CHART'\r\n}\r\n","import { createEntityAdapter, EntityAdapter } from '@ngrx/entity';\r\nimport { setCountersInfoPanelState, unsetCountersInfoPanelState } from '../actions/counters-info.actions';\r\nimport { CountersDetailsState } from '../store/counters-details.state';\r\nimport { Action, createReducer, on } from '@ngrx/store';\r\n\r\nexport const countersDetailsPanelAdapter: EntityAdapter<string> = createEntityAdapter<string>({\r\n    selectId: (counter: string) => counter\r\n});\r\n\r\nconst countersDetailsPanelInitialState: CountersDetailsState = countersDetailsPanelAdapter.getInitialState();\r\n\r\nconst reducer = createReducer(\r\n    countersDetailsPanelInitialState,\r\n    on(setCountersInfoPanelState, (state, { id }) => countersDetailsPanelAdapter.addOne(id, state)),\r\n    on(unsetCountersInfoPanelState, (state, { id }) => countersDetailsPanelAdapter.removeOne(id, state))\r\n);\r\n\r\nexport function countersDetailsPanelReducer(\r\n    state: CountersDetailsState | undefined,\r\n    action: Action\r\n): CountersDetailsState {\r\n    return reducer(state, action);\r\n}\r\n","import { createEntityAdapter, EntityAdapter } from '@ngrx/entity';\r\nimport { CounterInfo } from '@oam/cu-pmv2-api/models/counter-info';\r\nimport {\r\n    clearCountersInfo,\r\n    setCountersInfo,\r\n    retrievingCounterInfoFailed,\r\n    retrievingCounterInfoSucceed\r\n} from '../actions/counters-info.actions';\r\nimport { CountersInfoState } from '../store/counters-info.state';\r\nimport { Action, createReducer, on } from '@ngrx/store';\r\n\r\nexport const countersInfoAdapter: EntityAdapter<CounterInfo> = createEntityAdapter<CounterInfo>({\r\n    selectId: (counter: CounterInfo) => counter.id\r\n});\r\n\r\nconst countersInfoInitialState: CountersInfoState = {\r\n    info: countersInfoAdapter.getInitialState(),\r\n    failedToRetrieveCountersInfo: false\r\n};\r\n\r\nconst reducer = createReducer(\r\n    countersInfoInitialState,\r\n    on(setCountersInfo, (state, { info }) => {\r\n        return ({ ...state, info: countersInfoAdapter.setAll(info, state.info) });\r\n    }),\r\n    on(clearCountersInfo, (state) => {\r\n        return { ...state, info: countersInfoAdapter.removeAll(state.info) };\r\n    }),\r\n    on(retrievingCounterInfoFailed, (state) => ({ ...state, failedToRetrieveCountersInfo: true })),\r\n    on(retrievingCounterInfoSucceed, (state) => ({ ...state, failedToRetrieveCountersInfo: false })),\r\n);\r\n\r\nexport function countersInfoReducer(\r\n    state: CountersInfoState | undefined,\r\n    action: Action\r\n): CountersInfoState {\r\n    return reducer(state, action);\r\n}\r\n","import { CountersSelectionState } from '../store/counters-selection.state';\r\nimport {\r\n    CounterNode,\r\n} from '@oam/pm-shared/lib/measurement-store/models/counters-selection.interface';\r\nimport {\r\n    clearCountersSelection,\r\n    selectCounters\r\n} from '../actions/counters-selection.actions';\r\nimport { createEntityAdapter, EntityAdapter } from '@ngrx/entity';\r\nimport { getCounterUniqueId } from '@oam/cu-ui';\r\nimport { Action, createReducer, on } from '@ngrx/store';\r\n\r\nexport const checkedNodesAdapter: EntityAdapter<CounterNode> = createEntityAdapter<CounterNode>({\r\n    selectId: (counter: CounterNode) => getCounterUniqueId(counter)\r\n});\r\n\r\nexport const countersSelectionInitialState: CountersSelectionState = {\r\n    checkedNodes: checkedNodesAdapter.getInitialState(),\r\n    counterStartTime: '',\r\n    timeFrame: 6\r\n};\r\n\r\nconst reducer = createReducer(\r\n    countersSelectionInitialState,\r\n    on(selectCounters, (state, { nodes, counterStartTime, timeFrame }) => ({\r\n        ...state,\r\n        checkedNodes: checkedNodesAdapter.setAll(nodes, state.checkedNodes),\r\n        counterStartTime,\r\n        timeFrame\r\n    })),\r\n    on(clearCountersSelection, (state) => ({\r\n        ...state,\r\n        checkedNodes: checkedNodesAdapter.removeAll(state.checkedNodes),\r\n        counterStartTime: countersSelectionInitialState.counterStartTime,\r\n        timeFrame: countersSelectionInitialState.timeFrame\r\n    }))\r\n);\r\n\r\nexport function countersSelectionReducer(\r\n    state: CountersSelectionState | undefined,\r\n    action: Action\r\n): CountersSelectionState {\r\n    return reducer(state, action);\r\n}\r\n","import { createEntityAdapter, EntityAdapter } from '@ngrx/entity';\r\nimport { CountersValuesState } from '../store/counters-values.state';\r\nimport {\r\n    appendCountersValues,\r\n    changeCountersView,\r\n    clearCountersValues,\r\n    clearEndTime,\r\n    clearStartTime,\r\n    setCountersFilter,\r\n    setCountersValues, retrievingCounterValuesFailed,\r\n    setEndTime,\r\n    setLatestEtag,\r\n    setStartTime, retrievingCounterValuesSucceed\r\n} from '../actions/counters-values.actions';\r\nimport { CountersViews } from '../models/counters-values.interface';\r\nimport { Action, createReducer, on } from '@ngrx/store';\r\nimport { CounterValues } from '../store/counter-values';\r\nimport { filterCounterKey } from '../functions/counter-id-utils';\r\n\r\nexport const countersValuesAdapter: EntityAdapter<CounterValues> = createEntityAdapter<CounterValues>({\r\n    selectId: (counterValues: CounterValues) => counterValues.uniqueId\r\n});\r\n\r\nfunction appendCounters(state: CountersValuesState, values: CounterValues[], isOldRequest: boolean): CountersValuesState {\r\n    const newValues: CounterValues[] = values.map((counterValues) => {\r\n        const current: CounterValues | undefined = state.values.entities[counterValues.uniqueId];\r\n\r\n        if (!current || !isOldRequest) {\r\n            return {\r\n                uniqueId: counterValues.uniqueId,\r\n                values: counterValues.values\r\n            };\r\n        }\r\n\r\n        return {\r\n            uniqueId: counterValues.uniqueId,\r\n            values: filterCounterKey(current.values, counterValues.values)\r\n        };\r\n    });\r\n\r\n    return ({ ...state, values: countersValuesAdapter.setAll(newValues, state.values) });\r\n}\r\n\r\nconst countersValuesInitialState: CountersValuesState = {\r\n    values: countersValuesAdapter.getInitialState(),\r\n    viewType: CountersViews.TABLE,\r\n    filter: '',\r\n    startTime: '',\r\n    endTime: '',\r\n    latestEtag: '',\r\n    failedToRetrieveCountersValues: false\r\n};\r\n\r\nconst reducer = createReducer(\r\n    countersValuesInitialState,\r\n    on(appendCountersValues, (state, { values, isOldRequest }) => appendCounters(state, values, isOldRequest)),\r\n    on(setCountersValues, (state, { values }) => {\r\n        return ({ ...state, values: countersValuesAdapter.setAll(values, state.values) });\r\n    }),\r\n    on(clearCountersValues, (state) => {\r\n        return { ...state, values: countersValuesAdapter.removeAll(state.values) };\r\n    }),\r\n    on(setCountersFilter, (state, { filter }) => ({ ...state, filter })),\r\n    on(setStartTime, (state, { timestamp }) => ({ ...state, startTime: timestamp })),\r\n    on(clearStartTime, (state) => ({ ...state, startTime: '' })),\r\n    on(setEndTime, (state, { timestamp }) => ({ ...state, endTime: timestamp })),\r\n    on(clearEndTime, (state) => ({ ...state, endTime: '' })),\r\n    on(changeCountersView, (state, { viewType }) => ({ ...state, viewType })),\r\n    on(setLatestEtag, (state, { etag }: any) => ({ ...state, latestEtag: etag })),\r\n    on(retrievingCounterValuesFailed, (state) => ({ ...state, failedToRetrieveCountersValues: true })),\r\n    on(retrievingCounterValuesSucceed, (state) => ({ ...state, failedToRetrieveCountersValues: false }))\r\n);\r\n\r\nexport function countersValuesReducer(state: CountersValuesState | undefined, action: Action) {\r\n    return reducer(state, action);\r\n}\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { Dictionary } from '@ngrx/entity';\r\nimport { CounterInfo } from '@oam/cu-pmv2-api/models/counter-info';\r\nimport {\r\n    countersValuesAdapter,\r\n} from '../reducers/counters-values.reducer';\r\nimport {\r\n    checkedNodesAdapter\r\n} from '../reducers/counters-selection.reducer';\r\nimport { countersInfoAdapter } from '../reducers/counters-info.reducer';\r\nimport { PmState } from '../store/pm.state';\r\nimport { CountersValuesState } from '../store/counters-values.state';\r\nimport { CountersSelectionState } from '../store/counters-selection.state';\r\nimport { TreePanelState } from '../reducers/counters-tree-panel.reducer';\r\nimport { countersDetailsPanelAdapter } from '../reducers/counters-details-panel.reducer';\r\nimport { CountersExpansionState } from '../store/counters-expansion.state';\r\nimport { CountersFilterState } from '../store/counters-filter.state';\r\nimport { CountersInfoState } from '../store/counters-info.state';\r\nimport { CountersPmServiceState } from '../store/counters-pm-service.state';\r\n\r\nconst countersValueSelectors = countersValuesAdapter.getSelectors();\r\nconst checkedNodesSelectors = checkedNodesAdapter.getSelectors();\r\nconst countersInfoSelectors = countersInfoAdapter.getSelectors();\r\nconst countersDetailsSelectors = countersDetailsPanelAdapter.getSelectors();\r\n\r\nconst selectPmV2State = createFeatureSelector<PmState>('PerformanceManagementV2');\r\n\r\nconst selectCountersInfoState = createSelector(selectPmV2State, (state: PmState) => state.countersInfo);\r\nconst selectCountersValuesState = createSelector(selectPmV2State, (state: PmState) => state.countersValues);\r\nconst selectCountersSelectionState = createSelector(selectPmV2State, (state: PmState) => state.countersSelection);\r\nconst selectCountersToggleTreePanelState = createSelector(selectPmV2State, (state: PmState) => state.countersToggleTree);\r\nconst selectCountersDetailsState = createSelector(selectPmV2State, (state: PmState) => state.countersDetails);\r\nconst selectCountersExpansionState = createSelector(selectPmV2State, (state: PmState) => state.countersExpansion);\r\nconst selectCountersFilterState = createSelector(selectPmV2State, (state: PmState) => state.countersFilter);\r\nconst selectCountersPmServiceState = createSelector(selectPmV2State, (state: PmState) => state.countersPmService);\r\n\r\nconst selectValues = createSelector(selectCountersValuesState, (state: CountersValuesState) => state.values);\r\nconst selectCheckedNodes = createSelector(selectCountersSelectionState, (state: CountersSelectionState) => state.checkedNodes);\r\nconst selectInfo = createSelector(selectCountersInfoState, (state: CountersInfoState) => state.info);\r\n\r\nconst selectCountersInfoEntries = createSelector(selectInfo, countersInfoSelectors.selectEntities);\r\n\r\nexport const selectCountersView = createSelector(selectCountersValuesState, (state: CountersValuesState) => state.viewType);\r\nexport const selectAllCheckedCountersValues = createSelector(selectValues, countersValueSelectors.selectAll);\r\nexport const selectStartTime = createSelector(selectCountersValuesState, (state: CountersValuesState) => state.startTime);\r\nexport const selectEndTime = createSelector(selectCountersValuesState, (state: CountersValuesState) => state.endTime);\r\nexport const selectAllCheckedCounters = createSelector(selectCheckedNodes, checkedNodesSelectors.selectAll);\r\nexport const selectTimeFrame = createSelector(selectCountersSelectionState, (state: CountersSelectionState) => state.timeFrame);\r\nexport const selectCounterStartTime = createSelector(\r\n    selectCountersSelectionState,\r\n    (state: CountersSelectionState) => state.counterStartTime\r\n);\r\nexport const selectAllCheckedCountersInfo = createSelector(selectInfo, countersInfoSelectors.selectAll);\r\nexport const selectOneCheckedCountersInfo = createSelector(selectCountersInfoEntries,\r\n    (additionalInfos: Dictionary<CounterInfo>, props: { id: string }) => additionalInfos[props.id]);\r\nexport const selectLatestEtag = createSelector(selectCountersValuesState, (state: CountersValuesState) => state.latestEtag);\r\nexport const selectCheckedCountersValuesFilter = createSelector(selectCountersValuesState, (state: CountersValuesState) => state.filter);\r\nexport const performanceManagementV2PanelToggle = createSelector(selectCountersToggleTreePanelState,\r\n    (state: TreePanelState) => state.hideTogglePanelTree);\r\nexport const selectAllDetailsCounters = createSelector(selectCountersDetailsState, countersDetailsSelectors.selectAll);\r\nexport const selectExpandedNodes = createSelector(selectCountersExpansionState, (state: CountersExpansionState) => state.expandedNodes);\r\nexport const selectCountersFilter = createSelector(selectCountersFilterState, (state: CountersFilterState) => state.countersFilter);\r\nexport const selectCounterInfoRetrieveFailed = createSelector(selectCountersInfoState,\r\n    (state: CountersInfoState) => state.failedToRetrieveCountersInfo);\r\nexport const selectCountersValuesRetrieveFailed = createSelector(selectCountersValuesState,\r\n    (state: CountersValuesState) => state.failedToRetrieveCountersValues);\r\nexport const selectPmServerDown = createSelector(selectCountersPmServiceState,\r\n    (state: CountersPmServiceState) => state.isPmServerDown);\r\n","export enum Role {\r\n    SYSTEM_USER = 'systemUserAccessMode',\r\n    SEC_USER = 'secUserAccessMode',\r\n    APP_USER = 'appUserAccessMode',\r\n    READ_ONLY_USER = 'readOnlyUserAccessMode'\r\n}\r\n","import { UserProfileInterface } from '../model/user-profile.interface';\r\nimport { Role } from '../model/role.enmu';\r\n\r\nexport class RoleAccessService {\r\n    private readonly userProfiles: UserProfileInterface[];\r\n    currentRole: string;\r\n    readOnlyMode: boolean | undefined;\r\n\r\n    constructor(\r\n        userProfiles: UserProfileInterface[],\r\n        private skipPredictor: (roleAccessFlag: string) => boolean\r\n    ) {\r\n        this.userProfiles = userProfiles;\r\n    }\r\n\r\n    public isForbiddenForCurrentRole(roleAccessFlag: string | undefined) {\r\n\r\n        if (!roleAccessFlag || this.skipPredictor(roleAccessFlag)) return false;\r\n\r\n        return !!this.getProfileByName()?.forbidden.includes(roleAccessFlag);\r\n    };\r\n\r\n    getProfileByName(): UserProfileInterface | undefined {\r\n        const profileKey = this.readOnlyMode ? Role.READ_ONLY_USER : this.currentRole;\r\n\r\n        return this.userProfiles.find(({ roleId }: UserProfileInterface) => roleId === profileKey);\r\n    };\r\n\r\n    setRoleAndReadOnlyMode({\r\n                               currentRole,\r\n                               readOnlyMode\r\n                           }: Pick<RoleAccessService, 'currentRole' | 'readOnlyMode'>): void {\r\n        this.currentRole = currentRole;\r\n        this.readOnlyMode = readOnlyMode;\r\n    };\r\n}\r\n","export const NOT_ACCESSIBLE_FOR_CURRENT_ROLE_TITLE = 'Unavailable due to insufficient privileges';\r\nexport const TITLE_DEFAULT_PATH = 'model.title';\r\nexport const DISABLED_DEFAULT_PATH = 'disabled';\r\nexport const PARAM_EDIT_FIELD_DISABLE_PATH = 'isDisabled';\r\n","import { ChangeDetectorRef, Directive, ElementRef, Input, OnInit } from '@angular/core';\r\nimport {\r\n    DISABLED_DEFAULT_PATH,\r\n    NOT_ACCESSIBLE_FOR_CURRENT_ROLE_TITLE,\r\n    RoleAccessService,\r\n    TITLE_DEFAULT_PATH\r\n} from '@oam/role-access-core';\r\nimport { get, set } from 'lodash';\r\nimport { RoleAccessConfig } from '@oam/role-access-ng/lib/role-access.config';\r\n\r\n/**\r\n * @param {string} roleAccessFlag - Function name\r\n * @param {string} [disabledPath=\"disabled\"] - The path of the disabled attribute of the host instance\r\n * @param {string} [titlePath=\"title\"] - The path of the title attribute of the host instance\r\n */\r\nexport class RoleAccessInputModel {\r\n    roleAccessFlag: string;\r\n    disabledPath?: string;\r\n    titlePath?: string;\r\n}\r\n\r\ninterface InputModel {\r\n    roleAccessFlag: string;\r\n    disabledPath: string;\r\n    titlePath: string;\r\n}\r\n\r\n/**\r\n * @description\r\n * oamRoleAccessControl control function operation permission based on user role\r\n *\r\n * @usageNotes\r\n * Used when the host instance is encapsulated by components\r\n *\r\n * ```html\r\n * <ui-webem-button\r\n *      [oamRoleAccessControl]=\"'snapshot'\"\r\n * </ui-webem-button>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[oamRoleAccessControl]'\r\n})\r\nexport class RoleAccessControlDirective implements OnInit {\r\n    private isForbiddenForCurrentRole = false;\r\n    private inputModel: InputModel = {\r\n        roleAccessFlag: '',\r\n        disabledPath: DISABLED_DEFAULT_PATH,\r\n        titlePath: TITLE_DEFAULT_PATH\r\n    };\r\n\r\n    @Input() titleOnHost = false;\r\n    @Input() hostInstance: any;\r\n\r\n    @Input() set oamRoleAccessControl(inputModel: string | InputModel) {\r\n        let roleAccessFlag = this.inputModel.roleAccessFlag;\r\n\r\n        if (typeof inputModel === 'object') {\r\n            this.inputModel = { ...this.inputModel, ...inputModel };\r\n        } else {\r\n            roleAccessFlag = inputModel;\r\n        }\r\n\r\n        if (this.roleAccessService.isForbiddenForCurrentRole(roleAccessFlag)) {\r\n            this.isForbiddenForCurrentRole = true;\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        private readonly roleAccessConfig: RoleAccessConfig,\r\n        private readonly roleAccessService: RoleAccessService,\r\n        private readonly cd: ChangeDetectorRef,\r\n        public readonly el: ElementRef\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (!this.hostInstance) {\r\n            throw new Error('The host component must be one of [' + 'ButtonComponent,' + 'Checkbox]');\r\n        }\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (!this.isForbiddenForCurrentRole || !this.isToUpdateValuesDifferentWithCurrent()) return;\r\n\r\n        set(this.hostInstance, this.inputModel.disabledPath, true);\r\n        if (this.titleOnHost) {\r\n            this.el.nativeElement.title = NOT_ACCESSIBLE_FOR_CURRENT_ROLE_TITLE;\r\n        } else {\r\n            set(this.hostInstance, this.inputModel.titlePath, NOT_ACCESSIBLE_FOR_CURRENT_ROLE_TITLE);\r\n        }\r\n\r\n        this.cd.detectChanges();\r\n    }\r\n\r\n    isToUpdateValuesDifferentWithCurrent() {\r\n        return get(this.hostInstance, this.inputModel.disabledPath) !== NOT_ACCESSIBLE_FOR_CURRENT_ROLE_TITLE\r\n            || (this.titleOnHost && this.el.nativeElement.title !== NOT_ACCESSIBLE_FOR_CURRENT_ROLE_TITLE)\r\n            || get(this.hostInstance, this.inputModel.titlePath) !== true;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanLoad, Route, Router } from '@angular/router';\r\nimport { RoleAccessConfig } from '@oam/role-access-ng';\r\nimport { RoleAccessService } from '@oam/role-access-core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RoleAccessGuard implements CanActivate, CanLoad {\r\n    private mapping: Map<string, string>;\r\n\r\n    constructor(private readonly router: Router, private roleAccessConfig: RoleAccessConfig, public roleAccessService: RoleAccessService) {\r\n        this.mapping = this.roleAccessConfig.roleAccessGuardRules.reduce((result, rule) => {\r\n            result.set(rule.path, rule.roleAccessFlag);\r\n\r\n            return result;\r\n        }, new Map<string, string>());\r\n    }\r\n\r\n    canLoad(route: Route): boolean {\r\n        this.redirectToDefault(route.path);\r\n\r\n        return this.isPathEnabled(route.path);\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot): boolean {\r\n        this.redirectToDefault(route.routeConfig?.path);\r\n\r\n        return this.isPathEnabled(route.routeConfig?.path);\r\n    }\r\n\r\n    isPathEnabled(path = ''): boolean {\r\n        const roleAccessFlag = this.mapping.get(path);\r\n\r\n        return roleAccessFlag ? !this.roleAccessService.isForbiddenForCurrentRole(roleAccessFlag) : true;\r\n    }\r\n\r\n    redirectToDefault (path = '') {\r\n        //  dashboard as default page after user login.\r\n        //  Otherwise when user with role(e.g. BTSApplication)  want to access restricted page would be stuck\r\n        if (!this.isPathEnabled(path)) {\r\n            this.router.navigate([this.roleAccessConfig.index]);\r\n        }\r\n    }\r\n}\r\n","import { UserProfileInterface } from '@oam/role-access-core';\r\nimport { RoleAccessGuardRule } from '@oam/role-access-ng/lib/role-access.module';\r\n\r\ntype IgnoreWhenType<T = any> = {\r\n    fn: (dep: T) => (dep: T) => boolean;\r\n    token: (T)\r\n};\r\nexport class RoleAccessConfig {\r\n    roleAccessGuardRules: Required<RoleAccessGuardRule>[];\r\n    userProfiles: UserProfileInterface[];\r\n    readonly index: string;\r\n    ignoreWhen: IgnoreWhenType;\r\n\r\n    constructor(roleAccessGuardRules: Required<RoleAccessGuardRule>[], userProfiles: UserProfileInterface[], index: string, ignoreWhen: IgnoreWhenType) {\r\n        this.roleAccessGuardRules = roleAccessGuardRules;\r\n        this.userProfiles = userProfiles;\r\n        this.index = index;\r\n        this.ignoreWhen = ignoreWhen;\r\n    }\r\n}\r\n","import { Injector, ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RoleAccessControlDirective } from '@oam/role-access-ng/lib/directives/role-access-control.directive';\r\nimport { RoleAccessControlNativeDirective } from '@oam/role-access-ng/lib/directives/role-access-control-native.directive';\r\nimport { RoleAccessService } from '@oam/role-access-core';\r\nimport { Route } from '@angular/router';\r\nimport { RoleAccessConfig } from '@oam/role-access-ng/lib/role-access.config';\r\n\r\nexport type RoleAccessProperty = {\r\n    roleAccessFlag?: string\r\n};\r\n\r\nexport type RoleAccessGuardRule = RoleAccessProperty & Pick<Route, 'path'>;\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [\r\n        RoleAccessControlNativeDirective,\r\n        RoleAccessControlDirective\r\n    ],\r\n    exports: [\r\n        RoleAccessControlNativeDirective,\r\n        RoleAccessControlDirective\r\n    ]\r\n})\r\nexport class RoleAccessModule {\r\n    static forRoot(moduleConfig: RoleAccessConfig): ModuleWithProviders<RoleAccessModule> {\r\n        return {\r\n            ngModule: RoleAccessModule,\r\n            providers: [\r\n                {\r\n                    provide: RoleAccessConfig,\r\n                    useValue: moduleConfig\r\n                },\r\n                {\r\n                    provide: RoleAccessService,\r\n                    useFactory: (\r\n                        roleAccessConfig: RoleAccessConfig,\r\n                        injector: Injector\r\n                    ) => {\r\n                        const dep = injector.get(roleAccessConfig.ignoreWhen.token);\r\n\r\n                        return new RoleAccessService(\r\n                            roleAccessConfig.userProfiles,\r\n                            roleAccessConfig.ignoreWhen.fn(dep)\r\n                        );\r\n                    },\r\n                    deps: [RoleAccessConfig, Injector]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ServerConnectionNotificationComponent } from './components/server-connection-notification/server-connection-notification.component';\r\nimport { FlexModule } from '@angular/flex-layout';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport * as fromServerConnectionReducer from './core/reducers/server-connection.reducer';\r\n\r\n@NgModule({\r\n    declarations: [ServerConnectionNotificationComponent],\r\n    exports: [\r\n        ServerConnectionNotificationComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FlexModule,\r\n        StoreModule.forFeature(\r\n            fromServerConnectionReducer.serverConnectionFeatureKey,\r\n            fromServerConnectionReducer.reducer\r\n        )\r\n    ]\r\n})\r\nexport class ServerConnectionCheckerModule {\r\n}\r\n","<div\r\n    fxFlex\r\n    *ngIf=\"isDisconnected\"\r\n    class=\"server-connection-checker\">\r\n    <span fxFlexFill class=\"message\">\r\n        Connection to the server was lost. Reconnecting automatically, but if it does not work, refresh the page manually. {{ appName }} WebEM is in offline mode with data relevant for timestamp {{ timestamp }}\r\n    </span>\r\n</div>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { DateTime } from '@oam/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { selectIsDisconnected } from '../../core/selectors/server-connection.selectors';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { Environment } from '@oam/core/lib/environment-variables/core/models';\r\n\r\n@Component({\r\n    selector: 'webem-server-connection-notification',\r\n    templateUrl: './server-connection-notification.component.html',\r\n    styleUrls: ['./server-connection-notification.component.scss']\r\n})\r\nexport class ServerConnectionNotificationComponent implements OnInit, OnDestroy {\r\n    appName: string;\r\n    timestamp: string;\r\n    isDisconnected: boolean;\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    constructor(private readonly store: Store, private readonly environment: Environment) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.store.pipe(\r\n            select(selectIsDisconnected),\r\n            takeUntil(this.ngUnsubscribe)\r\n        ).subscribe((isDisconnected: boolean) => {\r\n            this.isDisconnected = isDisconnected;\r\n            this.timestamp = this.getTimestamp();\r\n        });\r\n\r\n        this.appName = this.environment.appMetadata.type;\r\n    }\r\n\r\n    getTimestamp(): string {\r\n        return new DateTime().toFormattedDateTime();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\n\r\nexport const setConnectionStatus = createAction(\r\n    '[ServerConnection] SetConnectionStatus',\r\n    props<{ isConnected: boolean }>()\r\n);\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport { setConnectionStatus } from '../actions/server-connection.actions';\r\n\r\nexport const serverConnectionFeatureKey = 'serverConnection';\r\n\r\nexport interface ServerConnectionState {\r\n    isConnected: boolean\r\n}\r\n\r\nexport const initialState: ServerConnectionState = {\r\n    isConnected: true\r\n};\r\n\r\nconst serverConnectionReducer = createReducer(\r\n    initialState,\r\n    on(setConnectionStatus, (state, { isConnected }) => ({ ...state, isConnected }))\r\n);\r\n\r\nexport function reducer(state: ServerConnectionState | undefined, action: Action) {\r\n    return serverConnectionReducer(state, action);\r\n}\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { serverConnectionFeatureKey, ServerConnectionState } from '../reducers/server-connection.reducer';\r\n\r\nexport const selectServerConnectionState = createFeatureSelector<ServerConnectionState>(serverConnectionFeatureKey);\r\n\r\nexport const selectIsConnected = createSelector(\r\n    selectServerConnectionState,\r\n    (state: ServerConnectionState) => state && state.isConnected\r\n);\r\n\r\nexport const selectIsDisconnected = createSelector(\r\n    selectIsConnected,\r\n    (isConnected: boolean) => !isConnected\r\n);\r\n","import { NgModule } from '@angular/core';\r\nimport { ToIpInterfacesDetailsPropertiesPipe } from './core/pipes/to-ip-interfaces-details-properties.pipe';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ToIpInterfacesDetailsPropertiesPipe\r\n    ],\r\n    exports: [\r\n        ToIpInterfacesDetailsPropertiesPipe\r\n    ]\r\n})\r\nexport class ToIpInterfacesDetailsPropertiesModule {\r\n}\r\n","import { Subject } from 'rxjs';\r\nimport { selectUrl } from '@oam/core/lib/selectors/router.selectors';\r\nimport { skip, take, takeUntil } from 'rxjs/operators';\r\nimport { OnDestroy, OnInit, Directive, Component } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { DynamicDialogRef } from 'primeng/dynamicdialog';\r\n\r\n@Component({\r\n    template: ''\r\n})\r\nexport class BaseDialogComponent implements OnInit, OnDestroy {\r\n    protected readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    constructor(\r\n        protected readonly store: Store,\r\n        public readonly ref: DynamicDialogRef,\r\n        public shouldCloseWhenRouteChanged: Boolean = false) {\r\n    }\r\n\r\n    closeDialog(): void {\r\n        this.ref.close();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (this.shouldCloseWhenRouteChanged) {\r\n            this.initCloseOnRouteChangeSubscription();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    initCloseOnRouteChangeSubscription(): void {\r\n        this.store.select(selectUrl).pipe(\r\n            takeUntil(this.ngUnsubscribe),\r\n            skip(1),\r\n            take(1),\r\n        ).subscribe(() => {\r\n            this.closeDialog();\r\n        });\r\n    }\r\n}\r\n","export const confirmDialogExclamationIcon = 'mdi mdi-alert-circle confirm-icon';\r\nexport const confirmDialogExclamationErrorIcon = 'mdi mdi-alert confirm-icon';\r\nexport const alertDialogInformationIcon = 'mdi mdi-information confirm-icon mdi-alert-circle';\r\n","export const BTS_SYSTEM_ADMINISTRATOR = 'BTS System Administrator';\r\nexport const BTS_SECURITY_ADMINISTRATOR = 'BTS Security Administrator';\r\nexport const BTS_APPLICATION_ADMINISTRATOR = 'BTS Application Administrator';\r\nexport const BTS_READONLY_USER = 'BTS Read-Only User';\r\n\r\nexport const SYSTEM_USER_ACCESS_MODE = 'systemUserAccessMode';\r\nexport const SEC_USER_ACCESS_MODE = 'secUserAccessMode';\r\nexport const APP_USER_ACCESS_MODE = 'appUserAccessMode';\r\nexport const READONLY_USER_ACCESS_MODE = 'readOnlyUserAccessMode';\r\n\r\nexport const NEMUADMIN = 'Nemuadmin';\r\nexport const BTS_SECURITY = 'BTSSecurity';\r\nexport const BTS_APPLICATION = 'BTSApplication';\r\nexport const BTS_READ = 'BTSRead';\r\n\r\nexport const ACTIVE = 'active';\r\nexport const DEACTIVE = 'deactive';\r\n\r\nexport const ROLE_NAME_MAPPING = {\r\n    systemUserAccessMode: BTS_SYSTEM_ADMINISTRATOR,\r\n    secUserAccessMode: BTS_SECURITY_ADMINISTRATOR,\r\n    appUserAccessMode: BTS_APPLICATION_ADMINISTRATOR,\r\n    readOnlyUserAccessMode: BTS_READONLY_USER\r\n};\r\n\r\nexport const SYSTEM_AVAILABLE_ROLES = [\r\n    BTS_SYSTEM_ADMINISTRATOR,\r\n    BTS_SECURITY_ADMINISTRATOR,\r\n    BTS_APPLICATION_ADMINISTRATOR,\r\n    BTS_READONLY_USER\r\n];\r\n\r\nexport const SECURITY_AVAILABLE_ROLES = [\r\n    BTS_SECURITY_ADMINISTRATOR,\r\n    BTS_APPLICATION_ADMINISTRATOR,\r\n    BTS_READONLY_USER\r\n];\r\n\r\nexport const NAME_ROLE_MAPPING = {\r\n    [BTS_SYSTEM_ADMINISTRATOR]: SYSTEM_USER_ACCESS_MODE,\r\n    [BTS_SECURITY_ADMINISTRATOR]: SEC_USER_ACCESS_MODE,\r\n    [BTS_APPLICATION_ADMINISTRATOR]: APP_USER_ACCESS_MODE,\r\n    [BTS_READONLY_USER]: READONLY_USER_ACCESS_MODE\r\n};\r\n\r\nexport const ROLE_USERNAME_MAPPING = {\r\n    [BTS_SYSTEM_ADMINISTRATOR]: NEMUADMIN,\r\n    [BTS_SECURITY_ADMINISTRATOR]: BTS_SECURITY,\r\n    [BTS_APPLICATION_ADMINISTRATOR]: BTS_APPLICATION,\r\n    [BTS_READONLY_USER]: BTS_READ\r\n};\r\n\r\nexport const ACTIVE_DEACTIVE = [ACTIVE, DEACTIVE];\r\nexport const DEACTIVE_ACTIVE = [DEACTIVE, ACTIVE];\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { Cloud } from '../models/cloud.type';\r\n\r\nenum CloudTypes {\r\n    setCloud = '[CLOUD] Set cloud parameters',\r\n    setCloudError = '[CLOUD] Set cloud parameters error'\r\n}\r\n\r\nexport const setCloudAction = createAction(CloudTypes.setCloud, props<{ payload: Cloud }>());\r\n","import { NullableAvailabilityStatus } from '@oam/cu-asm-api/models';\r\n\r\nexport const availabilityStatusLabels: { [K in NullableAvailabilityStatus]: string } = {\r\n    [NullableAvailabilityStatus.InTest]: 'In test',\r\n    [NullableAvailabilityStatus.Failed]: 'Failed',\r\n    [NullableAvailabilityStatus.PowerOff]: 'Power off',\r\n    [NullableAvailabilityStatus.OffLine]: 'Offline',\r\n    [NullableAvailabilityStatus.OffDuty]: 'Off duty',\r\n    [NullableAvailabilityStatus.Dependency]: 'Dependency',\r\n    [NullableAvailabilityStatus.Degraded]: 'Degraded',\r\n    [NullableAvailabilityStatus.NotInstalled]: 'Not installed',\r\n    [NullableAvailabilityStatus.LogFull]: 'Log full',\r\n    [NullableAvailabilityStatus.OnLine]: 'Online'\r\n};\r\n","export const KILOBYTE_DECIMAL = 1000;\r\nexport const KILOBYTE_BINARY = 1024;\r\nexport const MEGABYTE_DECIMAL = KILOBYTE_DECIMAL * KILOBYTE_DECIMAL;\r\nexport const MEGABYTE_BINARY = KILOBYTE_BINARY * KILOBYTE_BINARY;\r\nexport const MAX_COUNTERS_FILE_SIZE = 100 * KILOBYTE_BINARY;\r\n","export enum StatusIconType {\r\n    Success = 'success',\r\n    Warning = 'warning',\r\n    Danger = 'danger',\r\n    Light1 = 'light1',\r\n    Light2 = 'light2',\r\n    Disabled = 'disabled',\r\n    Dark = 'dark',\r\n    Black = 'black',\r\n    Off = 'off',\r\n    Unknown = 'unknown'\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport {\r\n    ChannelMapping,\r\n    ExternalSystemModule,\r\n    Lna,\r\n    MhaAld, RaeAld,\r\n    Raeu, RetAld,\r\n    Retu,\r\n    RmodConnector,\r\n    VduCell\r\n} from '@oam/cu-asm-api/models';\r\nimport { get } from 'lodash';\r\n\r\n@Pipe({ name: 'getClassExtension', pure: true })\r\nexport class GetClassExtensionPipe implements PipeTransform {\r\n    transform(\r\n        isSelected = false,\r\n        selectedVduCell?: VduCell | null,\r\n        rmodRId?: string,\r\n        selectedSmod?: ExternalSystemModule | null,\r\n        rmodSmodExtRId?: string,\r\n        selectedRetu?: { retu: Retu, retId: string } | null,\r\n        selectedRetAld?: RetAld | null,\r\n        selectedRaeu?: { raeu: Raeu, raeId: string } | null,\r\n        selectedRaeAld?: RaeAld | null,\r\n        selectedLna?: { lna: Lna, mhaId: string } | null,\r\n        selectedMhaAld?: MhaAld | null\r\n    ): string {\r\n        let extentionClass = '';\r\n        if (isSelected) extentionClass = ' selected';\r\n        const cellCondition = selectedVduCell && !!selectedVduCell.channelsMapping.find(\r\n            (channel: ChannelMapping) => channel.rmodRId === rmodRId\r\n        );\r\n\r\n        const smodCondition = selectedSmod && (selectedSmod.smodExtRId === rmodSmodExtRId);\r\n        const retuCondition = selectedRetu && selectedRetu.retu && selectedRetu.retu.antennaList\r\n            && !!selectedRetu.retu.antennaList.find(\r\n                (connector: RmodConnector) => connector.rmodRId === rmodRId\r\n            );\r\n        const raeuCondition = selectedRaeu && selectedRaeu.raeu && selectedRaeu.raeu.antennaList\r\n            && !!selectedRaeu.raeu.antennaList.find(\r\n                (connector: RmodConnector) => connector.rmodRId === rmodRId\r\n            );\r\n\r\n        const retAldCondition = isAldPortsIncludesRmodId(rmodRId, selectedRetAld);\r\n        const raeAldCondition = isAldPortsIncludesRmodId(rmodRId, selectedRaeAld);\r\n\r\n        const lnaCondition = selectedLna && selectedLna.lna &&\r\n            selectedLna.lna.amplifiedAntennaLine.rmodRId === rmodRId;\r\n\r\n        const mhaAldCondition = selectedMhaAld && selectedMhaAld.controlPorts\r\n            && !!selectedMhaAld.controlPorts.find(\r\n                (connector: RmodConnector) => connector.rmodRId === rmodRId\r\n            );\r\n\r\n        if (cellCondition || smodCondition || retuCondition || raeuCondition ||\r\n            lnaCondition || mhaAldCondition || retAldCondition || raeAldCondition) extentionClass += ' RMOD-highlighted';\r\n\r\n        return extentionClass;\r\n    }\r\n\r\n}\r\n\r\nfunction isAldPortsIncludesRmodId (rmodRId: string | undefined, ald?: RetAld | RaeAld | null): RmodConnector | undefined {\r\n    const aldPorts: RmodConnector[] = get(ald, 'controlPorts', []);\r\n\r\n    return aldPorts.find((connector: RmodConnector) => connector.rmodRId === rmodRId);\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HasAlarmsPipe } from './pipes/has-alarms.pipe';\r\n\r\n@NgModule({\r\n    declarations: [HasAlarmsPipe],\r\n    imports: [CommonModule],\r\n    exports: [HasAlarmsPipe]\r\n})\r\nexport class HasAlarmsModule {}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Alarm } from '@oam/cu-asm-api/models';\r\n\r\ninterface AlarmsContainer {\r\n    alarms?: Alarm[] | null\r\n}\r\n\r\n@Pipe({ name: 'hasAlarms', pure: true })\r\nexport class HasAlarmsPipe implements PipeTransform {\r\n    transform({ alarms }: AlarmsContainer): boolean {\r\n        if (!alarms) return false;\r\n\r\n        return alarms.length > 0;\r\n    }\r\n}\r\n","/* tslint:disable */\r\nexport enum AvailabilityStatus {\r\n  InTest = 'in test',\r\n  Failed = 'failed',\r\n  PowerOff = 'power off',\r\n  OffLine = 'off line',\r\n  OffDuty = 'off duty',\r\n  Dependency = 'dependency',\r\n  Degraded = 'degraded',\r\n  NotInstalled = 'not installed',\r\n  LogFull = 'log full',\r\n  OnLine = 'on line'\r\n}\r\n","export enum AvailabilityStatusClasses {\r\n    OnLine = 'online',\r\n    Failed = 'failed',\r\n    Degraded = 'degraded',\r\n    Dependency = 'dependency',\r\n    InTest = 'intest',\r\n    PowerOff = 'poweroff',\r\n    OffDuty = 'offduty',\r\n    NotInstalled = 'notinstalled',\r\n    LogFull = 'logfull',\r\n    OffLine = 'offline'\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { AvailabilityStatus, NullableAvailabilityStatus } from '@oam/cu-asm-api/models';\r\nimport { availabilityStatusLabels } from '../../../models/availability-status-labels';\r\nimport { AvailabilityStatusClasses } from '../../../models/availability-status-classes';\r\nimport { StatusIconType } from '../../../models/status-icon-color.definition';\r\n\r\ntype StatusType = {\r\n    title: string,\r\n    type: StatusIconType,\r\n    class: AvailabilityStatusClasses\r\n};\r\n\r\nconst availabilityStatusMap:\r\n    Partial<{ [K in (NullableAvailabilityStatus & AvailabilityStatus)]:\r\n        [string, StatusIconType, AvailabilityStatusClasses] }> = {\r\n    [NullableAvailabilityStatus.OnLine]: [\r\n        availabilityStatusLabels[NullableAvailabilityStatus.OnLine],\r\n        StatusIconType.Success,\r\n        AvailabilityStatusClasses.OnLine\r\n    ],\r\n    [AvailabilityStatus.OnLine]: [\r\n        availabilityStatusLabels[NullableAvailabilityStatus.OnLine],\r\n        StatusIconType.Success,\r\n        AvailabilityStatusClasses.OnLine\r\n    ],\r\n    [NullableAvailabilityStatus.NotInstalled]: [\r\n        availabilityStatusLabels[NullableAvailabilityStatus.NotInstalled],\r\n        StatusIconType.Disabled,\r\n        AvailabilityStatusClasses.NotInstalled\r\n    ],\r\n    [NullableAvailabilityStatus.OffLine]: [\r\n        availabilityStatusLabels[NullableAvailabilityStatus.OffLine],\r\n        StatusIconType.Dark,\r\n        AvailabilityStatusClasses.OffLine\r\n    ],\r\n    [NullableAvailabilityStatus.PowerOff]: [\r\n        availabilityStatusLabels[NullableAvailabilityStatus.PowerOff],\r\n        StatusIconType.Off,\r\n        AvailabilityStatusClasses.PowerOff\r\n    ],\r\n    [NullableAvailabilityStatus.Failed]: [\r\n        availabilityStatusLabels[NullableAvailabilityStatus.Failed],\r\n        StatusIconType.Danger,\r\n        AvailabilityStatusClasses.Failed\r\n    ],\r\n    [NullableAvailabilityStatus.Degraded]: [\r\n        availabilityStatusLabels[NullableAvailabilityStatus.Degraded],\r\n        StatusIconType.Warning,\r\n        AvailabilityStatusClasses.Degraded\r\n    ],\r\n    [NullableAvailabilityStatus.Dependency]: [\r\n        availabilityStatusLabels[NullableAvailabilityStatus.Dependency],\r\n        StatusIconType.Light2,\r\n        AvailabilityStatusClasses.Dependency\r\n    ],\r\n    [NullableAvailabilityStatus.OffDuty]: [\r\n        availabilityStatusLabels[NullableAvailabilityStatus.OffDuty],\r\n        StatusIconType.Black,\r\n        AvailabilityStatusClasses.OffDuty\r\n    ],\r\n    [NullableAvailabilityStatus.InTest]: [\r\n        availabilityStatusLabels[NullableAvailabilityStatus.InTest],\r\n        StatusIconType.Black,\r\n        AvailabilityStatusClasses.InTest\r\n    ],\r\n    [NullableAvailabilityStatus.LogFull]: [\r\n        availabilityStatusLabels[NullableAvailabilityStatus.LogFull],\r\n        StatusIconType.Black,\r\n        AvailabilityStatusClasses.LogFull\r\n    ],\r\n};\r\n\r\n@Pipe({ name: 'mapAvailabilityStatus', pure: true })\r\nexport class MapAvailabilityStatusPipe implements PipeTransform {\r\n    transform( availabilityStatus?: NullableAvailabilityStatus | AvailabilityStatus | null ): StatusType {\r\n        if (!availabilityStatus) return { title: '', type: StatusIconType.Unknown, class: AvailabilityStatusClasses.OffLine };\r\n        const statusIconData = availabilityStatusMap[availabilityStatus];\r\n\r\n        return statusIconData ?\r\n            { title: statusIconData[0], type: statusIconData[1], class: statusIconData[2] } :\r\n            { title: '', type: StatusIconType.Unknown, class: AvailabilityStatusClasses.OffLine };\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { RaisedAlarm } from '@oam/cu-ui/lib/raised-alarms/model/raised-alarm';\r\nimport { Alarm } from '@oam/cu-asm-api/models/alarm';\r\nimport { toRaisedAlarm } from '@oam/core/lib/functions';\r\n\r\n@Pipe({\r\n    name: 'toActiveAlarms',\r\n    pure: true\r\n})\r\nexport class ToActiveAlarmsPipe implements PipeTransform {\r\n    transform(alarms: Alarm[] | null): RaisedAlarm[] {\r\n        if (!alarms) return [];\r\n\r\n        return alarms.map(toRaisedAlarm);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ToActiveAlarmsPipe } from '@oam/shared/lib/core/pipes/to-active-alarms/pipes/to-active-alarms.pipe';\r\n\r\n@NgModule({\r\n    declarations: [ToActiveAlarmsPipe],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [ToActiveAlarmsPipe]\r\n})\r\nexport class ToActiveAlarmsModule {\r\n}\r\n","import {registerDecorator, ValidationArguments, ValidationOptions, ValidatorConstraint, ValidatorConstraintInterface} from 'class-validator';\r\n\r\nexport function Match(property: string, comparisonArr: Array<Object>, validationOptions?: ValidationOptions) {\r\n    return (object: any, propertyName: string) => {\r\n        registerDecorator({\r\n            target: object.constructor,\r\n            propertyName,\r\n            options: validationOptions,\r\n            constraints: [property, comparisonArr],\r\n            validator: MatchConstraint,\r\n        });\r\n    };\r\n}\r\n\r\n@ValidatorConstraint({name: 'Match'})\r\nexport class MatchConstraint implements ValidatorConstraintInterface {\r\n\r\n    validate(value: any, args: ValidationArguments) {\r\n        const [relatedPropertyName, comparisonArr] = args.constraints;\r\n        const findRelateItem = comparisonArr.find((o: any) => o.type === (args.object as any).type);\r\n        const relatedValue = findRelateItem && findRelateItem[relatedPropertyName];\r\n\r\n        return value === relatedValue;\r\n    }\r\n}\r\n","import { isNil } from 'lodash';\r\n\r\nexport function nullableValueFormat(value: any): any {\r\n    return isNil(value) || value === '' ? '–' : value;\r\n}\r\n","import { Injector, NgModule } from '@angular/core';\r\n\r\n@NgModule({\r\n    providers: []\r\n})\r\nexport class CustomInjectorModule {\r\n    static injector: Injector;\r\n\r\n    constructor(injector: Injector) {\r\n        CustomInjectorModule.injector = injector;\r\n    }\r\n}\r\n","import { AfterViewInit, Directive, ElementRef, ViewChild } from '@angular/core';\r\nimport { Table } from 'primeng/table';\r\nimport { TreeTable } from 'primeng/treetable';\r\n\r\n// workaround for https://github.com/primefaces/primeng/issues/9202\r\n@Directive({\r\n    selector: '[sharedFixTableColumnsResize]'\r\n})\r\nexport class FixTableColumnsResizeDirective implements AfterViewInit {\r\n\r\n    @ViewChild(TreeTable) treetable: ElementRef;\r\n    @ViewChild(Table) table: ElementRef;\r\n\r\n    constructor(private host: ElementRef) {\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (!this.host || !this.host.nativeElement) return;\r\n\r\n        const treeTableBody = this.host.nativeElement.querySelector('.p-treetable-virtual-scrollable-body');\r\n        const dataTableBody = this.host.nativeElement.querySelector('.p-datatable-virtual-scrollable-body');\r\n        if (treeTableBody) {\r\n            treeTableBody.classList.add('p-treetable-scrollable-body');\r\n        } else if (dataTableBody) {\r\n            dataTableBody.classList.add('p-datatable-scrollable-body');\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FixTableColumnsResizeDirective } from './fix-table-columns-resize.directive';\r\n\r\n@NgModule({\r\n  declarations: [FixTableColumnsResizeDirective],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    FixTableColumnsResizeDirective\r\n  ]\r\n})\r\nexport class FixTableColumnsResizeModule { }\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Section } from '@oam/cu-ui';\r\nimport { CloudInfrastructureElementState, IpInterface } from '@oam/cu-asm-api/models';\r\nimport { uniqBy } from 'lodash';\r\n\r\n@Pipe({\r\n    name: 'toIpInterfacesDetailsProperties',\r\n    pure: true\r\n})\r\nexport class ToIpInterfacesDetailsPropertiesPipe implements PipeTransform {\r\n    transform(cloudElement: CloudInfrastructureElementState | undefined): Section {\r\n        if (!cloudElement) return [];\r\n\r\n        return uniqBy(cloudElement.ipInterfaces, 'interfaceName').map((ipInterface: IpInterface)  => {\r\n            return {\r\n                key: ipInterface.interfaceName,\r\n                value: ipInterface.ipAddress\r\n            };\r\n        });\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DatetimeService } from '@oam/core/lib/services/datetime.service';\r\nimport { getValueIfAvailable } from '@oam/core/lib/utils/shared-utils';\r\n\r\n@Pipe({\r\n    name: 'formatFromISO2GMTTime'\r\n})\r\nexport class FormatFromISO2GMTTime implements PipeTransform {\r\n    constructor(private readonly datetimeService: DatetimeService) {\r\n    }\r\n\r\n    transform(value: string): string {\r\n        const formatedDate = this.datetimeService.formatFromISO2GMTTime(value);\r\n\r\n        return formatedDate === 'Invalid date' ? getValueIfAvailable(value) : formatedDate;\r\n    }\r\n}\r\n","import { Injectable, Pipe, PipeTransform } from '@angular/core';\r\nimport { nullableValueFormat } from '../../../../functions/nullable-value-format';\r\n\r\nexport const EMPTY_PLACEHOLDER = '–';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n@Pipe({\r\n    name: 'nullableValue',\r\n    pure: true\r\n})\r\nexport class NullableValuePipe implements PipeTransform {\r\n    transform(value: any): any {\r\n        return nullableValueFormat(value);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NullableValuePipe } from './core/pipes/nullable-value.pipe';\r\nimport { FormatFromISO2GMTTime } from './core/pipes/format-form-iso2gmt-time.pipe';\r\nimport { DecibelValuePipe } from '@oam/shared/lib/modules/webem-common/core/pipes/decibel-value.pipe';\r\nimport { NegativeValuePipe } from '@oam/shared/lib/modules/webem-common/core/pipes/negative-value.pipe';\r\nimport { RemoveEmptyValueFromArrayPipe } from '@oam/shared/lib/modules/webem-common/core/pipes/remove-empty-value-from-array.pipe';\r\nimport { NullableDegreeValuePipe } from '@oam/shared/lib/modules/webem-common/core/pipes/nullable-degree-value.pipe';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        NullableValuePipe,\r\n        NullableDegreeValuePipe,\r\n        FormatFromISO2GMTTime,\r\n        DecibelValuePipe,\r\n        NegativeValuePipe,\r\n        RemoveEmptyValueFromArrayPipe\r\n    ],\r\n    imports: [],\r\n    exports: [\r\n        NullableValuePipe,\r\n        NullableDegreeValuePipe,\r\n        FormatFromISO2GMTTime,\r\n        DecibelValuePipe,\r\n        NegativeValuePipe,\r\n        RemoveEmptyValueFromArrayPipe\r\n    ]\r\n})\r\nexport class WebemCommonModule {\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\r\nimport { PollingService } from '@oam/core/lib/services/polling.service';\r\nimport { Store } from '@ngrx/store';\r\nimport {\r\n    changeSelectionInBottomView,\r\n    changeSelectionInTopView,\r\n    changeSelectionRestriction,\r\n    setLastSelectedViews,\r\n    setViewsFromUrlPath,\r\n    updateSelectedViews,\r\n    updateStoreWithoutRedirect,\r\n    updateViewsAccordingToUrlPath,\r\n    updateViewsWithoutRedirect,\r\n    updateWholeState\r\n} from '../../core/actions/split-view.actions';\r\nimport { Router } from '@angular/router';\r\nimport { SPLIT_VIEW_LOCATION, RoutesPathsWithParams } from '../models';\r\nimport { selectAvailableViews, selectSplitViewsDetails } from '../selectors/split-view.selectors';\r\nimport { VduRoutesPaths } from '@oam/vdu-shared';\r\nimport { selectUrl } from '@oam/core/lib/selectors/router.selectors';\r\nimport { SplitViewRestrictionsService } from '../services/split-view-restrictions.service';\r\nimport { GroupOfViews } from '../models/group-of-views.interface';\r\nimport { SingleView } from '../models/single-view.interface';\r\nimport { OutletUrlPathService } from '@oam/core/lib/services/outlet-url-path.service';\r\nimport { get } from 'lodash';\r\nconst restrictedGroup = 'Configuration';\r\n\r\n@Injectable()\r\nexport class SplitViewEffects {\r\n    changeSplitViews$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(changeSelectionInTopView, changeSelectionInBottomView),\r\n            withLatestFrom(this.store.select(selectAvailableViews)),\r\n            map(([action, availableViews]) =>\r\n                updateSelectedViews({ views: this.getUpdatedAvailableViews(action, availableViews) })\r\n            )\r\n        )\r\n    );\r\n\r\n    navigateToChangedView$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n          ofType(changeSelectionInTopView, changeSelectionInBottomView),\r\n          map(action => {\r\n            const url = action.selectedView && action.selectedView.hasOwnProperty('url') ?\r\n              (action.selectedView as RoutesPathsWithParams).url :\r\n              action.selectedView as string;\r\n            const navigate: string[] = url.split('/');\r\n            if (action.selectedView && action.selectedView.hasOwnProperty('param')) {\r\n              navigate.push((action.selectedView as RoutesPathsWithParams).param);\r\n            }\r\n            const param = get(this.router, 'currentUrlTree.root.children.primary.segments[0].parameters', {});\r\n\r\n            return this.router.navigate([\r\n                'split-view', param, { outlets: { [action.location]: [...navigate] } }\r\n              ]\r\n            );\r\n\r\n          })\r\n        ),\r\n      { dispatch: false }\r\n    );\r\n\r\n    navigateToLastSelectedViews$ = createEffect(() =>\r\n            this.actions$.pipe(\r\n                ofType(setLastSelectedViews),\r\n                withLatestFrom(this.store.select(selectSplitViewsDetails)),\r\n                map(\r\n                    ([, state]) => this.router.navigate(['split-view', {\r\n                        outlets: {\r\n                            [SPLIT_VIEW_LOCATION.TOP]: state.topView || null,\r\n                            [SPLIT_VIEW_LOCATION.BOTTOM]: state.bottomView || null\r\n                        }\r\n                    }])\r\n                )\r\n            ),\r\n        { dispatch: false }\r\n    );\r\n\r\n    changeSelectionRestriction$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(changeSelectionRestriction),\r\n            withLatestFrom(this.store.select(selectAvailableViews)),\r\n            map(([action, availableViews]) =>\r\n                updateSelectedViews({ views: this.getAvailableViewsWithRestriction(action, availableViews) })\r\n            )\r\n        )\r\n    );\r\n\r\n    updateViewsByUrlOutlet$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(setViewsFromUrlPath),\r\n            withLatestFrom(this.store.select(selectUrl)),\r\n            filter(([, url]) => !!url),\r\n            map(() => [{\r\n                    'topView': this.outletUrlService.getOutletWebemRoutePath(this.router.url, SPLIT_VIEW_LOCATION.TOP),\r\n                    'bottomView': this.outletUrlService.getOutletWebemRoutePath(this.router.url, SPLIT_VIEW_LOCATION.BOTTOM)\r\n                }]\r\n            ),\r\n            map(\r\n                ([outlets]) =>\r\n                    updateViewsAccordingToUrlPath({ topOutlet: outlets.topView, bottomOutlet: outlets.bottomView })\r\n            )\r\n        )\r\n    );\r\n\r\n    updateViewsWithoutRedirect$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(updateViewsWithoutRedirect),\r\n            withLatestFrom(this.store.select(selectUrl)),\r\n            map(([, url]) => {\r\n                    return [{\r\n                        'topView': this.outletUrlService.getOutletWebemRoutePath(url as string, SPLIT_VIEW_LOCATION.TOP),\r\n                        'bottomView': this.outletUrlService.getOutletWebemRoutePath(url as string, SPLIT_VIEW_LOCATION.BOTTOM)\r\n                    }];\r\n                }\r\n            ),\r\n            map(\r\n                ([outlets]) => {\r\n                    return updateStoreWithoutRedirect({ topOutlet: outlets.topView, bottomOutlet: outlets.bottomView });\r\n                }\r\n            )\r\n        )\r\n    );\r\n\r\n    navigateToViewsSelectedByUrlOutlets$ = createEffect(() =>\r\n            this.actions$.pipe(\r\n                ofType(updateViewsAccordingToUrlPath),\r\n                map(\r\n                    (action) => this.router.navigate(['split-view', {\r\n                        outlets: {\r\n                            [SPLIT_VIEW_LOCATION.TOP]: action.topOutlet || null,\r\n                            [SPLIT_VIEW_LOCATION.BOTTOM]: action.bottomOutlet || null\r\n                        }\r\n                    }])\r\n                )\r\n            ),\r\n        { dispatch: false }\r\n    );\r\n\r\n    setViewsAccordingToUrlOutlet$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(updateViewsAccordingToUrlPath, updateStoreWithoutRedirect),\r\n            withLatestFrom(this.store.select(selectSplitViewsDetails)),\r\n            map(([action, state]) => {\r\n                let topChanged = false;\r\n                let bottomChanged = false;\r\n                const switchedViews =\r\n                    state.availableViews.map(group => {\r\n                        if (topChanged && bottomChanged) return group;\r\n                        const updateItems = group.items.map((item: SingleView) => {\r\n                            if (topChanged && bottomChanged) return item;\r\n                            if (!topChanged && item.value === action.topOutlet) {\r\n                                topChanged = true;\r\n\r\n                                return { ...item, disabledBy: SPLIT_VIEW_LOCATION.TOP, disabled: true };\r\n                            } else if (!bottomChanged && item.value === action.bottomOutlet) {\r\n                                bottomChanged = true;\r\n\r\n                                return { ...item, disabledBy: SPLIT_VIEW_LOCATION.BOTTOM, disabled: true };\r\n                            } else if (state.bottomView === item.value || state.topView === item.value) {\r\n                                return { ...item, disabled: false };\r\n                            } else {\r\n                                return item;\r\n                            }\r\n                        });\r\n\r\n                        return { ...group, items: updateItems };\r\n                    });\r\n\r\n                return updateWholeState({\r\n                    newState:\r\n                        {\r\n                            topView: action.topOutlet,\r\n                            bottomView: action.bottomOutlet,\r\n                            availableViews: switchedViews,\r\n                            restrictionsForGroupViews: state.restrictionsForGroupViews\r\n                        }\r\n                });\r\n            })\r\n        )\r\n    );\r\n\r\n    getUpdatedAvailableViews(action: any, availableViews: GroupOfViews[]) {\r\n        return availableViews.map(group => {\r\n                const updateItems = group.items.map((item: SingleView) => {\r\n                    if (item.disabled && item.disabledBy === action.location) {\r\n                        return { ...item, disabled: false, disabledBy: SPLIT_VIEW_LOCATION.NONE };\r\n                    }\r\n                    if (item.value === action.selectedView) {\r\n                        return { ...item, disabled: true, disabledBy: action.location };\r\n                    }\r\n                    const value = item.value && (item.value as RoutesPathsWithParams).url ?\r\n                        (item.value as RoutesPathsWithParams).url :\r\n                        item.value as VduRoutesPaths;\r\n                    if (this.splitViewRestrictionsService.isUrlInRestrictionGroup(value) &&\r\n                        action.selectedView &&\r\n                        this.splitViewRestrictionsService.isUrlInRestrictionGroup(action.selectedView)\r\n                    ) {\r\n                        return { ...item, disabledBy: action.location };\r\n                    }\r\n\r\n                    return item;\r\n                });\r\n\r\n                return { ...group, items: updateItems };\r\n            }\r\n        );\r\n    }\r\n\r\n    getAvailableViewsWithRestriction(action: any, availableViews: GroupOfViews[]) {\r\n        return availableViews.map(group => {\r\n            if (group.label === restrictedGroup) {\r\n                return {\r\n                    ...group, items: group.items.map(\r\n                        (item: SingleView) => ({ ...item, disabled: action.selectionRestriction })\r\n                    )\r\n                };\r\n            }\r\n\r\n            return group;\r\n        });\r\n    }\r\n\r\n\r\n    constructor(\r\n        private readonly actions$: Actions,\r\n        private readonly pollingService: PollingService,\r\n        private readonly store: Store,\r\n        private readonly router: Router,\r\n        private readonly outletUrlService: OutletUrlPathService,\r\n        private readonly splitViewRestrictionsService: SplitViewRestrictionsService\r\n    ) {\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { GroupOfViews } from '../core/models/group-of-views.interface';\r\n\r\n\r\n@Pipe({\r\n  name: 'disabledGroupHeaderIfRestricted'\r\n})\r\nexport class DisabledGroupHeaderIfRestrictedPipe implements PipeTransform {\r\n    transform(group: GroupOfViews, restrictions = false): string {\r\n         if (group.label === 'Configuration' && restrictions) {\r\n             return 'disable-group-header';\r\n         } else {\r\n             return '';\r\n         }\r\n    }\r\n\r\n}\r\n\r\n","<div class=\"split-view-single-column-layout\">\r\n    <ui-webem-panel-split-area (transitionEnd)=\"handleAnimationEnd()\" class=\"split-view-single-column-layout-panel-area\">\r\n        <div *uiWebemSplitArea=\"contentSize\" class=\"split-view-single-column-layout-main-content\">\r\n            <ui-webem-status-bar>\r\n                <div class=\"detail-panel-toggle\" *ngIf=\"showDetailToggleButton\">\r\n                    <webem-details-panel-toggle-button\r\n                        [isOnSplitView]=\"true\"\r\n                        (buttonClicked)=\"handleDetailPanelToggleButtonClick()\">\r\n                    </webem-details-panel-toggle-button>\r\n                </div>\r\n            </ui-webem-status-bar>\r\n            <div class=\"split-view-single-column-layout-content\">\r\n                <ng-content></ng-content>\r\n            </div>\r\n        </div>\r\n        <div *uiWebemSplitArea=\"detailsPanelSize\" class=\"details-panel\" [class.detail-panel-animation-ongoing]=\"detailPanelAnimationOngoing\">\r\n            <router-outlet name=\"content_right\"></router-outlet>\r\n        </div>\r\n    </ui-webem-panel-split-area>\r\n</div>\r\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { SplitAreaDirectiveContext } from '@oam/cu-ui';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { DroppedItemService } from '@oam/core/lib/services/dropped-item.service';\r\nimport { isDetailPanelVisible } from '@oam/details-panel/lib/core/selectors/detail-panel.selectors';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { SPLIT_VIEW_LOCATION } from '../../core/models/split-view-location-type';\r\nimport { DetailsPanelConfigService } from '@oam/details-panel/lib/core/services/details-panel-config.service';\r\nimport { OutletUrlPathService } from '@oam/core/lib/services/outlet-url-path.service';\r\n\r\n\r\n@Component({\r\n  selector: 'webem-split-view-single-column-layout',\r\n  templateUrl: './split-view-single-column-page-layout.component.html',\r\n  styleUrls: ['./split-view-single-column-page-layout.component.scss']\r\n})\r\nexport class SplitViewSingleColumnPageLayoutComponent implements OnInit, OnDestroy {\r\n\r\n    isDetailPanelExpanded$: Observable<boolean>;\r\n    currentRoute: string;\r\n\r\n    defaultDetailPanelSize: SplitAreaDirectiveContext = {\r\n        minSize: 270,\r\n        size: 300,\r\n        maxSize: 370,\r\n        id: 2,\r\n        hideGutter: false\r\n    };\r\n    splitViewRouterOutlet: string;\r\n    showDetailToggleButton: boolean;\r\n    topView?: string;\r\n    bottomView?: string;\r\n    detailPanelAnimationOngoing = false;\r\n\r\n    hiddenDetailPanelSize: SplitAreaDirectiveContext = { minSize: 0, size: 0, maxSize: 0, id: 2, hideGutter: true };\r\n    contentDefaultSize: SplitAreaDirectiveContext = { size: '*',  id: 1 };\r\n    detailsPanelSize: SplitAreaDirectiveContext;\r\n    contentSize: SplitAreaDirectiveContext | null;\r\n    readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n    private readonly detailPanelVisibilityUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    constructor(\r\n        private readonly store: Store,\r\n        private readonly router: Router,\r\n        private readonly droppedItemService: DroppedItemService,\r\n        private readonly actRoute: ActivatedRoute,\r\n        private readonly cd: ChangeDetectorRef,\r\n        private readonly outletService: OutletUrlPathService,\r\n        private readonly detailsPanelConfigService: DetailsPanelConfigService\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.splitViewRouterOutlet = this.actRoute.snapshot.outlet;\r\n        this.currentRoute = this.router.url;\r\n        this.showDetailToggleButton = this.showDetailPanelButton();\r\n        this.topView = this.outletService.getOutletWebemRoutePath(this.currentRoute, SPLIT_VIEW_LOCATION.TOP);\r\n        this.bottomView = this.outletService.getOutletWebemRoutePath(this.currentRoute, SPLIT_VIEW_LOCATION.BOTTOM);\r\n        this.subscribeForDetailPanelVisibility(this.topView, this.bottomView);\r\n\r\n        this.router.events.pipe(\r\n            filter(event => event instanceof NavigationEnd),\r\n            takeUntil(this.ngUnsubscribe)\r\n        ).subscribe((event: NavigationEnd) => {\r\n            const splitRouterOutlet = this.actRoute.snapshot.outlet;\r\n\r\n            this.currentRoute = event.url;\r\n            this.splitViewRouterOutlet = splitRouterOutlet === SPLIT_VIEW_LOCATION.TOP\r\n                ? SPLIT_VIEW_LOCATION.TOP : SPLIT_VIEW_LOCATION.BOTTOM;\r\n            this.showDetailToggleButton = this.showDetailPanelButton();\r\n            this.topView = this.outletService.getOutletWebemRoutePath(this.currentRoute, SPLIT_VIEW_LOCATION.TOP );\r\n            this.bottomView = this.outletService.getOutletWebemRoutePath(this.currentRoute, SPLIT_VIEW_LOCATION.BOTTOM );\r\n\r\n            this.detailPanelVisibilityUnsubscribe.next();\r\n            this.detailPanelVisibilityUnsubscribe.complete();\r\n            this.subscribeForDetailPanelVisibility(this.topView, this.bottomView);\r\n\r\n        });\r\n    }\r\n\r\n    subscribeForDetailPanelVisibility(topView?: string, bottomView?: string) {\r\n        this.isDetailPanelExpanded$ = this.store.pipe(\r\n            select(isDetailPanelVisible, {\r\n                outlet: this.splitViewRouterOutlet,\r\n                topView,\r\n                bottomView}\r\n            ),\r\n            takeUntil(this.ngUnsubscribe),\r\n            takeUntil(this.detailPanelVisibilityUnsubscribe)\r\n        );\r\n\r\n        this.isDetailPanelExpanded$.subscribe((toggleDetailPanel) => {\r\n            if (toggleDetailPanel) {\r\n                this.detailsPanelSize = this.defaultDetailPanelSize;\r\n                this.contentSize = this.contentDefaultSize;\r\n            } else {\r\n                this.contentSize = null;\r\n                this.detailsPanelSize = this.hiddenDetailPanelSize;\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    showDetailPanelButton(): boolean {\r\n        const urlsWithDetailPanel = this.detailsPanelConfigService.getUrlsWithDetailsPanel();\r\n\r\n        this.topView = this.outletService.getOutletWebemRoutePath(this.currentRoute, SPLIT_VIEW_LOCATION.TOP);\r\n        this.bottomView = this.outletService.getOutletWebemRoutePath(this.currentRoute, SPLIT_VIEW_LOCATION.BOTTOM);\r\n\r\n        if (this.splitViewRouterOutlet === SPLIT_VIEW_LOCATION.TOP && this.topView !== undefined) {\r\n            return urlsWithDetailPanel.some( route => (this.topView as string).includes(route));\r\n        }\r\n\r\n        if (this.splitViewRouterOutlet === SPLIT_VIEW_LOCATION.BOTTOM && this.bottomView !== undefined) {\r\n            return urlsWithDetailPanel.some( route => (this.bottomView as string).includes(route));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    handleDroppedItem(item: File | Error): void {\r\n        this.droppedItemService.handleItem(item);\r\n    }\r\n\r\n    handleDetailPanelToggleButtonClick(): void {\r\n        this.detailPanelAnimationOngoing = true;\r\n    }\r\n\r\n    handleAnimationEnd(): void {\r\n        this.detailPanelAnimationOngoing = false;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SplitViewEmptyViewComponent } from './components/split-view-empty-view/split-view-empty-view.component';\r\nimport { BrowserCompatibilityModule, PanelSplitAreaModule, WebemButtonModule } from '@oam/cu-ui';\r\nimport { RouterModule } from '@angular/router';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { SplitViewEffects } from './core/effects/split-view.effects';\r\nimport { reducer, splitViewsStateFeatureKey } from './core/reducers/split-view.reducer';\r\nimport { DisabledGroupHeaderIfRestrictedPipe } from './pipes/disabled-group-header-if-restricted.pipe';\r\nimport { SplitViewDropdownsComponent } from './components/split-view-dropdowns/split-view-dropdowns.component';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SplitViewPageLayoutComponent } from './components/page-layout/split-view-page-layout.component';\r\nimport { SplitViewSingleColumnPageLayoutComponent } from './components/split-view-single-column-page-layout/split-view-single-column-page-layout.component';\r\nimport { DetailsPanelModule } from '@oam/details-panel/lib/details-panel.module';\r\nimport { SplitViewLayoutComponent } from '@oam/split-view/lib/components/split-view-layout/split-view-layout.component';\r\nimport { ServerConnectionCheckerModule } from '@oam/server-connection-checker';\r\nimport { NavigationModule } from '@oam/navigation';\r\nimport { StatusBarModule } from '../../../ui-webem/src/lib/status-bar/status-bar.module';\r\nimport { PageHeaderModule } from '@oam/layouts';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        SplitViewDropdownsComponent,\r\n        SplitViewEmptyViewComponent,\r\n        DisabledGroupHeaderIfRestrictedPipe,\r\n        SplitViewPageLayoutComponent,\r\n        SplitViewSingleColumnPageLayoutComponent,\r\n        SplitViewLayoutComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        PageHeaderModule,\r\n        PanelSplitAreaModule,\r\n        RouterModule.forChild([]),\r\n        EffectsModule.forFeature([SplitViewEffects]),\r\n        StoreModule.forFeature(splitViewsStateFeatureKey, reducer),\r\n        DropdownModule,\r\n        WebemButtonModule,\r\n        FormsModule,\r\n        DetailsPanelModule,\r\n        PanelSplitAreaModule,\r\n        DropdownModule,\r\n        FormsModule,\r\n        WebemButtonModule,\r\n        ServerConnectionCheckerModule,\r\n        BrowserCompatibilityModule,\r\n        NavigationModule,\r\n        StatusBarModule\r\n    ]\r\n})\r\nexport class SplitViewModule {\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n\r\n@Component({\r\n    selector: 'webem-split-view-empty-view',\r\n    templateUrl: './split-view-empty-view.component.html',\r\n    styleUrls: ['./split-view-empty-view.component.scss']\r\n})\r\nexport class SplitViewEmptyViewComponent {\r\n}\r\n","<div class=\"split-view-empty-view\">\r\n    <span>\r\n        <i class=\"information-icon mdi mdi-information\"></i>\r\n        <span id=\"empty-view-text\">Select view to be displayed</span>\r\n    </span>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { SPLIT_VIEW_LOCATION } from '../models';\r\nimport { OutletUrlPathService } from '@oam/core/lib/services/outlet-url-path.service';\r\nimport { SplitViewRestrictionsService } from './split-view-restrictions.service';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SplitViewGuardService implements CanActivate {\r\n\r\n    constructor(private readonly outletUrlPathService: OutletUrlPathService,\r\n                private readonly router: Router,\r\n                private readonly splitViewRestrictionsService: SplitViewRestrictionsService) {\r\n    }\r\n\r\n    canActivate( route: ActivatedRouteSnapshot,\r\n                 state: RouterStateSnapshot): boolean | UrlTree {\r\n        const urlTopView = this.outletUrlPathService.getOutletWebemRoutePath(state.url, SPLIT_VIEW_LOCATION.TOP);\r\n        const urlBottomView = this.outletUrlPathService.getOutletWebemRoutePath(state.url, SPLIT_VIEW_LOCATION.BOTTOM);\r\n        const isUrlTopViewInRestrictedGroup = this.splitViewRestrictionsService.isUrlInRestrictionGroup(urlTopView);\r\n        const isUrlBottomViewInRestrictedGroup = this.splitViewRestrictionsService.isUrlInRestrictionGroup(urlBottomView);\r\n        if (urlTopView === urlBottomView) return false;\r\n\r\n        if (isUrlTopViewInRestrictedGroup && isUrlBottomViewInRestrictedGroup) {\r\n            return this.router.parseUrl(this.splitViewRestrictionsService.splitViewConfig.DEFAULT_REDIRECTION_AFTER_FAILED_RESTRICTION_CHECKED);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'webem-split-view-page-layout',\r\n  templateUrl: './split-view-page-layout.component.html',\r\n  styleUrls: ['./split-view-page-layout.component.scss']\r\n})\r\nexport class SplitViewPageLayoutComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<webem-split-view-single-column-layout class=\"content\">\r\n    <router-outlet name=\"content_actions_bar\"></router-outlet>\r\n    <router-outlet name=\"content_center\"></router-outlet>\r\n</webem-split-view-single-column-layout>\r\n","<div class=\"split-view-container\">\r\n    <div>Top view:</div>\r\n    <div class=\"view-state\">\r\n        <div class=\"black-rectangle\"></div>\r\n        <div class=\"grey-rectangle\"></div>\r\n    </div>\r\n    <div class=\"split-view-dropdown\" id=\"split-view-dropdown-top\">\r\n        <p-dropdown\r\n            [placeholder]=\"topViewPlaceholder\"\r\n            (onShow)=\"changeSelectionRestrictionInDropdownList('topView')\"\r\n            [options]=\"views.topViews\"\r\n            [(ngModel)]=\"selectedTopView\"\r\n            [scrollHeight]=\"scrollHeight\"\r\n            [group]=\"true\"\r\n            (ngModelChange)=\"onTopViewChange()\">\r\n            <ng-template let-group pTemplate=\"group\">\r\n                <div class=\"group-header\"\r\n                     [ngClass]=\"(group | disabledGroupHeaderIfRestricted: restrictionsForGroupViews)\">\r\n                    <i class=\"{{group.icon}}\"\r\n                       [ngClass]=\"{ 'label-icon-bigger': group.icon === 'mdi mdi-view-quilt',\r\n                                    'label-icon': group.icon !== 'mdi mdi-view-quilt' }\"></i>\r\n                    <span>{{group.label}}</span>\r\n                </div>\r\n            </ng-template>\r\n            <ng-template let-item pTemplate=\"item\">\r\n                <div class=\"item-label\">{{item.label}}</div>\r\n            </ng-template>\r\n        </p-dropdown>\r\n    </div>\r\n    <div class=\"bottom-view-title\">Bottom view:</div>\r\n    <div class=\"view-state\">\r\n        <div class=\"grey-rectangle\"></div>\r\n        <div class=\"black-rectangle\"></div>\r\n    </div>\r\n    <div class=\"split-view-dropdown\" id=\"split-view-dropdown-bottom\">\r\n        <p-dropdown\r\n            [placeholder]=\"bottomViewPlaceholder\"\r\n            (onShow)=\"changeSelectionRestrictionInDropdownList('bottomView')\"\r\n            [options]=\"views.bottomViews\"\r\n            [(ngModel)]=\"selectedBottomView\"\r\n            [scrollHeight]=\"scrollHeight\"\r\n            [group]=\"true\"\r\n            (ngModelChange)=\"onBottomViewChange()\">\r\n            <ng-template let-group pTemplate=\"group\">\r\n                <div class=\"group-header\"\r\n                     [ngClass]=\"(group | disabledGroupHeaderIfRestricted: restrictionsForGroupViews)\">\r\n                    <i class=\"{{group.icon}}\"\r\n                       [ngClass]=\"{ 'label-icon-bigger': group.icon === 'mdi mdi-view-quilt',\r\n                                    'label-icon': group.icon !== 'mdi mdi-view-quilt' }\"></i>\r\n                    <span>{{group.label}}</span>\r\n                </div>\r\n            </ng-template>\r\n            <ng-template let-item pTemplate=\"item\">\r\n                <div class=\"item-label\">{{item.label}}</div>\r\n            </ng-template>\r\n        </p-dropdown>\r\n    </div>\r\n</div>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Subject } from 'rxjs';\r\nimport { filter, map, pairwise, startWith, takeUntil } from 'rxjs/operators';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { SPLIT_VIEW_LOCATION, RoutesPathsWithParams } from '../../core/models';\r\nimport { selectSplitViewsDetails } from '../../core/selectors/split-view.selectors';\r\nimport {\r\n    changeSelectionInBottomView,\r\n    changeSelectionInTopView,\r\n    changeSelectionRestriction,\r\n    removeSelectedViews,\r\n    setAvailableSplitViewOptions,\r\n    setLastSelectedViews,\r\n    setViewsFromUrlPath,\r\n    updateViewsWithoutRedirect\r\n} from '../../core/actions/split-view.actions';\r\nimport { SplitViewRestrictionsService } from '@oam/split-view/lib/core/services/split-view-restrictions.service';\r\nimport { GroupOfViews } from '@oam/split-view/lib/core/models/group-of-views.interface';\r\nimport { SingleView } from '@oam/split-view/lib/core/models/single-view.interface';\r\nimport { VnfcSharedService } from '@oam/vnfc-shared/lib/vnfc-store/services/vnfc-shared.service';\r\nimport { statusGroup, alarmGroup } from '@oam/navigation/lib/navigation/core/models/navigation-group.model';\r\nimport { PageName } from '@oam/navigation/lib/navigation/core/models/page-name';\r\n\r\n@Component({\r\n    selector: 'webem-split-view-dropdowns',\r\n    templateUrl: './split-view-dropdowns.component.html',\r\n    styleUrls: ['./split-view-dropdowns.component.scss']\r\n})\r\nexport class SplitViewDropdownsComponent implements OnInit, OnDestroy {\r\n    views: {\r\n        topViews: GroupOfViews[],\r\n        bottomViews: GroupOfViews[]\r\n    };\r\n    selectedTopView?: string | RoutesPathsWithParams;\r\n    selectedBottomView?: string | RoutesPathsWithParams;\r\n    restrictionsForGroupViews?: boolean;\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n    private readonly splitViewPath: string = '/split-view';\r\n\r\n    readonly scrollHeight: string = '320px';\r\n    readonly topViewPlaceholder = '<Select first view>';\r\n    readonly bottomViewPlaceholder = '<Select second view>';\r\n\r\n    constructor(private readonly store: Store, private readonly route: ActivatedRoute,\r\n                private readonly vnfcSharedService: VnfcSharedService,\r\n                private readonly router: Router, private readonly splitViewRestrictionsService: SplitViewRestrictionsService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.router.events.pipe(\r\n            filter(event => event instanceof NavigationEnd),\r\n            map((navEnd: NavigationEnd) => navEnd.urlAfterRedirects),\r\n            startWith(''),\r\n            pairwise(),\r\n            takeUntil(this.ngUnsubscribe))\r\n            .subscribe(urls => {\r\n                if (this.isNavigateToSplitViewAgain(urls)) {\r\n                    this.store.dispatch(removeSelectedViews());\r\n                    const availableViews = this.splitViewRestrictionsService.getAvailableViews() as GroupOfViews[];\r\n                    this.store.dispatch(setAvailableSplitViewOptions({\r\n                        availableViews: availableViews\r\n                    }));\r\n                } else {\r\n                    this.changeSelectionRestrictionInDropdownList(SPLIT_VIEW_LOCATION.TOP);\r\n                    this.changeSelectionRestrictionInDropdownList(SPLIT_VIEW_LOCATION.BOTTOM);\r\n                    this.store.dispatch(updateViewsWithoutRedirect());\r\n                }\r\n            });\r\n\r\n        if (this.router.url === this.splitViewPath) {\r\n            this.store.dispatch(setLastSelectedViews());\r\n        } else {\r\n            this.store.dispatch(setViewsFromUrlPath());\r\n        }\r\n\r\n        this.store.pipe(\r\n            select(selectSplitViewsDetails),\r\n            takeUntil(this.ngUnsubscribe)\r\n        ).subscribe(state => {\r\n            const views = this.flatteningValueInAvailableViews(state.availableViews);\r\n            this.views = {\r\n                topViews: views.filter(view => view.label === PageName.dashboard || view.label === statusGroup.label),\r\n                bottomViews: views.filter(view => view.label === alarmGroup.label)\r\n            };\r\n            this.selectedBottomView = this.selectValidView(state.bottomView as string, state.availableViews);\r\n            this.selectedTopView = this.selectValidView(state.topView as string, state.availableViews);\r\n            this.restrictionsForGroupViews = state.restrictionsForGroupViews;\r\n        });\r\n    }\r\n\r\n    private selectValidView(view: string, availableViews: GroupOfViews[]): string | RoutesPathsWithParams | undefined {\r\n\r\n        const itemView = availableViews\r\n            .map((availableView) => availableView.items)\r\n            .flat()\r\n            .find((item: SingleView) => {\r\n                if (item.value.hasOwnProperty('url') && item.value.hasOwnProperty('param')) {\r\n                    return view && view.includes((item.value as RoutesPathsWithParams).url);\r\n                }\r\n\r\n                return view && view.includes(item.value as string);\r\n            });\r\n\r\n        return itemView && itemView.value.hasOwnProperty('url') && itemView.value.hasOwnProperty('param') ?\r\n            `${(itemView.value as RoutesPathsWithParams).url}/${(itemView.value as RoutesPathsWithParams).param}` :\r\n            itemView && itemView.value;\r\n    }\r\n\r\n    onTopViewChange() {\r\n        this.store.dispatch(changeSelectionInTopView({\r\n            location: SPLIT_VIEW_LOCATION.TOP, selectedView: this.selectedTopView\r\n        }));\r\n    }\r\n\r\n    onBottomViewChange() {\r\n        this.store.dispatch(changeSelectionInBottomView({\r\n            location: SPLIT_VIEW_LOCATION.BOTTOM, selectedView: this.selectedBottomView\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    changeSelectionRestrictionInDropdownList(viewLocation: string) {\r\n        const selectedView: string | RoutesPathsWithParams | undefined =\r\n            viewLocation === SPLIT_VIEW_LOCATION.TOP ? this.selectedBottomView : this.selectedTopView;\r\n        if (selectedView && this.splitViewRestrictionsService.isUrlInRestrictionGroup(selectedView as string) &&\r\n            !this.restrictionsForGroupViews) {\r\n                this.store.dispatch(changeSelectionRestriction({ selectionRestriction: true }));\r\n        } else if (\r\n            this.restrictionsForGroupViews && (!selectedView ||\r\n            !this.splitViewRestrictionsService.isUrlInRestrictionGroup(selectedView as string))) {\r\n                this.store.dispatch(changeSelectionRestriction({ selectionRestriction: false }));\r\n        }\r\n    }\r\n\r\n    private isNavigateToSplitViewAgain(urls: string[]): boolean {\r\n        const previousUrl = urls[0];\r\n        const actualUrl = urls[1];\r\n\r\n        return actualUrl === this.splitViewPath && previousUrl.includes(actualUrl);\r\n    }\r\n\r\n    flatteningValueInAvailableViews(availableViews: GroupOfViews[]): GroupOfViews[] {\r\n        return availableViews.map((view: GroupOfViews) => {\r\n            const items = view.items.map(item => {\r\n                return {\r\n                    ...item,\r\n                    value: item.value.hasOwnProperty('url') && item.value.hasOwnProperty('param') ?\r\n                        `${(item.value as RoutesPathsWithParams).url}/${(item.value as RoutesPathsWithParams).param}` : item.value\r\n                } as SingleView;\r\n            });\r\n\r\n            return {\r\n                ...view,\r\n                items\r\n            };\r\n        });\r\n    }\r\n\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { SPLIT_VIEW_LOCATION, RoutesPathsWithParams } from '@oam/split-view';\r\n\r\nimport { SplitViewState } from '../reducers/split-view.reducer';\r\nimport { GroupOfViews } from '@oam/split-view/lib/core/models/group-of-views.interface';\r\n\r\nexport enum SplitViewActionTypes {\r\n    ChangeSelectionInTopView = '[User] [Split View] Change selected item in top view',\r\n    ChangeSelectionInBottomView = '[User] [Split View] Change selected item in bottom view',\r\n    RemoveSelectedViews = '[Split View] Remove selected items in both views',\r\n    SetViewsFromUrlPath = '[Split View] Set views by using url outlets',\r\n    UpdateViewsWithoutRedirect = '[Split View] Update views without redirect',\r\n    UpdateViewsAccordingToUrlPath = '[Split View] Update views according to url outlets',\r\n    UpdateStoreWithoutRedirect = '[Split View] Update store without redirect',\r\n    ChangeSelectionRestriction = '[Split View] Change selection restriction in list of views',\r\n    UpdateSelectedViews = '[Split View] Update Selected views',\r\n    UpdateWholeState = '[Split View] Update whole state',\r\n    SetLastSelectedViews = '[Split View] Navigate to last selected views',\r\n    SetAvailableSplitViewOptions = '[Split View] Set available views',\r\n}\r\n\r\nexport const changeSelectionInTopView = createAction(\r\n    SplitViewActionTypes.ChangeSelectionInTopView,\r\n    props<{ location: SPLIT_VIEW_LOCATION, selectedView?: string | RoutesPathsWithParams }>()\r\n);\r\n\r\nexport const setAvailableSplitViewOptions = createAction(\r\n    SplitViewActionTypes.SetAvailableSplitViewOptions,\r\n    props<{ availableViews: GroupOfViews[] }>()\r\n);\r\n\r\nexport const changeSelectionInBottomView = createAction(\r\n    SplitViewActionTypes.ChangeSelectionInBottomView,\r\n    props<{ location: SPLIT_VIEW_LOCATION, selectedView?: string | RoutesPathsWithParams }>()\r\n);\r\n\r\nexport const changeSelectionRestriction = createAction(\r\n    SplitViewActionTypes.ChangeSelectionRestriction,\r\n    props<{ selectionRestriction: boolean }>()\r\n);\r\n\r\nexport const updateSelectedViews = createAction(\r\n    SplitViewActionTypes.UpdateSelectedViews,\r\n    props<{ views: GroupOfViews[] }>()\r\n);\r\n\r\nexport const updateWholeState = createAction(\r\n    SplitViewActionTypes.UpdateWholeState,\r\n    props<{ newState: SplitViewState }>()\r\n);\r\n\r\nexport const setViewsFromUrlPath = createAction(\r\n    SplitViewActionTypes.SetViewsFromUrlPath\r\n);\r\n\r\nexport const updateViewsWithoutRedirect = createAction(\r\n    SplitViewActionTypes.UpdateViewsWithoutRedirect\r\n);\r\n\r\nexport const updateViewsAccordingToUrlPath = createAction(\r\n    SplitViewActionTypes.UpdateViewsAccordingToUrlPath,\r\n    props<{ topOutlet?: string, bottomOutlet?: string }>()\r\n);\r\n\r\nexport const updateStoreWithoutRedirect = createAction(\r\n    SplitViewActionTypes.UpdateStoreWithoutRedirect,\r\n    props<{ topOutlet?: string, bottomOutlet?: string }>()\r\n);\r\n\r\n\r\nexport const setLastSelectedViews = createAction(SplitViewActionTypes.SetLastSelectedViews);\r\n\r\nexport const removeSelectedViews = createAction(SplitViewActionTypes.RemoveSelectedViews);\r\n","export enum SPLIT_VIEW_LOCATION {\r\n    TOP = 'topView',\r\n    BOTTOM = 'bottomView',\r\n    NONE = 'none'\r\n}\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\n\r\nimport {\r\n    changeSelectionInBottomView,\r\n    changeSelectionInTopView,\r\n    changeSelectionRestriction,\r\n    removeSelectedViews,\r\n    setAvailableSplitViewOptions,\r\n    updateSelectedViews,\r\n    updateWholeState\r\n} from '../actions/split-view.actions';\r\nimport { RoutesPathsWithParams } from '@oam/split-view';\r\nimport { GroupOfViews } from '@oam/split-view/lib/core/models/group-of-views.interface';\r\n\r\nexport interface SplitViewState {\r\n    topView?: string | RoutesPathsWithParams;\r\n    bottomView?: string | RoutesPathsWithParams,\r\n    restrictionsForGroupViews?: boolean,\r\n    availableViews: GroupOfViews[],\r\n}\r\nexport const splitViewsStateFeatureKey = 'splitViews';\r\n\r\nexport const initialState: SplitViewState = {\r\n    restrictionsForGroupViews: undefined,\r\n    availableViews: [{\r\n        label: '',\r\n        icon: '',\r\n        items: [],\r\n    }]\r\n};\r\n\r\nconst splitViewReducer = createReducer(\r\n    initialState,\r\n\r\n    on(setAvailableSplitViewOptions, (state, {availableViews}) => ({\r\n        ...state,\r\n        availableViews\r\n    })),\r\n\r\n    on(changeSelectionInTopView, (state, action) => ({\r\n        ...state,\r\n        topView: action.selectedView\r\n    })),\r\n    on(changeSelectionInBottomView, (state, action) => ({\r\n        ...state,\r\n        bottomView: action.selectedView\r\n    })),\r\n    on(changeSelectionRestriction, (state, action) => ({\r\n        ...state,\r\n        restrictionsForGroupViews: action.selectionRestriction\r\n    })),\r\n    on(updateSelectedViews, (state, action) => ({\r\n        ...state,\r\n        availableViews: action.views\r\n    })),\r\n    on(removeSelectedViews, (state) => ({\r\n        ...state,\r\n        topView: undefined,\r\n        bottomView: undefined\r\n    })),\r\n    on(updateWholeState, (state, action) => action.newState)\r\n);\r\n\r\nexport function reducer(state: SplitViewState, action: Action) {\r\n    return splitViewReducer(state, action);\r\n}\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { splitViewsStateFeatureKey, SplitViewState } from '../../core/reducers/split-view.reducer';\r\n\r\nexport const selectSplitViewState = createFeatureSelector<SplitViewState>(splitViewsStateFeatureKey);\r\n\r\nexport const selectAvailableViews = createSelector(\r\n    selectSplitViewState,\r\n    (state: SplitViewState) => state.availableViews\r\n);\r\n\r\nexport const selectSplitViewsDetails = createSelector(\r\n    selectSplitViewState,\r\n    (state: SplitViewState) => state\r\n);\r\n","import { find, some, isEmpty } from 'lodash';\r\nimport { SPLIT_VIEW_LOCATION, SplitViewConfig, SplitViewRoutePath } from '../models';\r\nimport { NavigationService } from '@oam/navigation/lib/navigation/service/navigation.service';\r\nimport { groupNavigations } from '@oam/navigation/lib/navigation/core/utility/navigation-transformer';\r\nimport { navigationRoot, statusGroup, alarmGroup } from '@oam/navigation/lib/navigation/core/models/navigation-group.model';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { GroupOfViews } from '@oam/split-view/lib/core/models/group-of-views.interface';\r\n\r\nexport class SplitViewRestrictionsService {\r\n    splitViewConfig: SplitViewConfig;\r\n    private navigationService: NavigationService;\r\n\r\n    constructor(config: SplitViewConfig, navigationService: NavigationService) {\r\n        this.splitViewConfig = config;\r\n        this.navigationService = navigationService;\r\n    }\r\n\r\n    getAvailableViews() {\r\n        const availableViews = groupNavigations(this.navigationService.getAvailableNavigations(), item => {\r\n            const isNavigationRoot = item.isGroup && item.nav.navigationGroup.id === navigationRoot.id;\r\n\r\n            return item.isGroup ? getGroupProperties() : getItemProperties();\r\n\r\n            function getItemProperties() {\r\n                const childProperties = {\r\n                    disabled: false,\r\n                    disabledBy: 'none',\r\n                    value: item.nav.routerLink.replace(/^\\//, ''),\r\n                    label: item.nav.label\r\n                };\r\n\r\n                return item.isItem ? {...childProperties, children: item.nav.children} : childProperties;\r\n            }\r\n\r\n            function getGroupProperties() {\r\n                const properties = isNavigationRoot? {icon: item.nav.icon, label: item.nav.label} : {icon: item.nav.navigationGroup.icon, label: item.nav.navigationGroup.label};\r\n                properties['items'] = item.nav['items'].flat();\r\n\r\n                return properties;\r\n            }\r\n        }, (nav) => {\r\n            return ![\r\n                navigationRoot,\r\n                statusGroup,\r\n                alarmGroup\r\n            ].some(group => nav.navigationGroup.id === group.id && nav.routerLink !== RouterLink.performance);\r\n        });\r\n\r\n        return (availableViews as GroupOfViews[]).map((group: GroupOfViews) => {\r\n            const availableItems = group.items.reduce((flattenItems: any, item: any) => {\r\n                if (!isEmpty(item.children)) {\r\n                    flattenItems.push(...item.children);\r\n                } else {\r\n                    flattenItems.push(item);\r\n                }\r\n\r\n                return flattenItems;\r\n            }, []);\r\n\r\n            return {...group, items: availableItems};\r\n        });\r\n    }\r\n\r\n    getViewRefreshLocation(topView: SplitViewRoutePath, bottomView: SplitViewRoutePath): SPLIT_VIEW_LOCATION {\r\n        const views = [\r\n            {\r\n                value: topView,\r\n                refreshLocation: SPLIT_VIEW_LOCATION.BOTTOM\r\n            },\r\n            {\r\n                value: bottomView,\r\n                refreshLocation: SPLIT_VIEW_LOCATION.TOP\r\n            }\r\n        ];\r\n\r\n        const viewToRefresh = find(views, (view) => {\r\n            return some(this.splitViewConfig.REFRESHING_VIEWS, (refreshingView) => refreshingView === view.value);\r\n        });\r\n\r\n        return viewToRefresh ? viewToRefresh.refreshLocation : SPLIT_VIEW_LOCATION.NONE;\r\n    }\r\n\r\n    isUrlInRestrictionGroup(url: string | undefined): boolean {\r\n        return !!url && this.splitViewConfig.RESTRICTED_PATTERNS.views.includes(url);\r\n    }\r\n\r\n    notInSplitViews(destination: string[] | undefined): boolean {\r\n        if (!destination) return false;\r\n\r\n        return !this.splitViewConfig.RESTRICTED_PATTERNS.splitViews.includes(destination.join('/'));\r\n    }\r\n\r\n    isSplitBottomView(url: string): boolean {\r\n        return this.splitViewConfig.RESTRICTED_PATTERNS.splitBottomViews.includes(url);\r\n    }\r\n}\r\n\r\n","export enum CellsFilterType {\r\n    BY_NRCELL_ID = 'nrCellId',\r\n    BY_CELL_NAME = 'cellName',\r\n    BY_SERVING_DU_ID = 'servingDuId',\r\n    BY_OPERATIONAL_STATE = 'operationalState',\r\n    BY_ADMINISTRATIVE_STATE = 'administrativeState',\r\n}\r\n","export enum CellsSortType {\r\n    BY_NR_CELL_ID = 'BY_NR_CELL_ID',\r\n    BY_SERVING_DU = 'BY_SERVING_DU',\r\n    BY_OPERATIONAL_STATE = 'BY_OPERATIONAL_STATE',\r\n    BY_ADMINISTRATIVE_STATE = 'BY_ADMINISTRATIVE_STATE'\r\n}\r\n","import { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport enum ViewType {\r\n    TILE = 'Tile',\r\n    TABLE = 'Table'\r\n}\r\n\r\nexport interface ViewToggleInput {\r\n    getDataSource: (store: Store<{}>) => Observable<ViewType>;\r\n    toggleView: (value: ViewType, store: Store<{}>) => void;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FileUploadModule } from 'primeng/fileupload';\r\nimport { MessagesModule } from 'primeng/messages';\r\n\r\nimport { AlarmMessageComponent } from './alarm-message.component';\r\nimport { NgFeatureFlagModule } from '@oam/ng-feature-flag';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AlarmMessageComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FileUploadModule,\r\n        MessagesModule,\r\n        NgFeatureFlagModule\r\n    ],\r\n    exports: [AlarmMessageComponent]\r\n})\r\nexport class AlarmMessageModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AlarmSeverityIconComponent } from './components/alarm-severity-icon/alarm-severity-icon.component';\r\nimport { GetHighestAlarmSeverityPipe } from './pipes/get-highest-alarm-severity.pipe';\r\n\r\n@NgModule({\r\n    declarations: [AlarmSeverityIconComponent, GetHighestAlarmSeverityPipe],\r\n    exports: [AlarmSeverityIconComponent, GetHighestAlarmSeverityPipe],\r\n    imports: [\r\n        CommonModule\r\n    ]\r\n})\r\nexport class AlarmSeverityIconModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WarningAlarmsCounterBlockComponent } from './components/warning-alarms-counter-block/warning-alarms-counter-block.component';\r\nimport { MinorAlarmsCounterBlockComponent } from './components/minor-alarms-counter-block/minor-alarms-counter-block.component';\r\nimport { MajorAlarmsCounterBlockComponent } from './components/major-alarms-counter-block/major-alarms-counter-block.component';\r\nimport { CriticalAlarmsCounterBlockComponent } from './components/critical-alarms-counter-block/critical-alarms-counter-block.component';\r\nimport { AlarmsDashboardPanelComponent } from './components/alarms-dashboard-panel/alarms-dashboard-panel.component';\r\nimport { DashboardAlarmsTableComponent } from './components/dashboard-alarms-table/dashboard-alarms-table.component';\r\nimport { AlarmsCounterPanelComponent } from './components/alarms-counter-panel/alarms-counter-panel.component';\r\nimport { AlarmSeverityDashboardPanelComponent } from './components/alarm-severity-dashboard-panel/alarm-severity-dashboard-panel.component';\r\nimport { TableModule } from 'primeng/table';\r\nimport { AlarmSeverityIconModule } from '../alarm-severity-icon/alarm-severity-icon.module';\r\nimport { TablePaginationModule } from '../table-pagination/table-pagination.module';\r\nimport { WebemCommonModule } from '@oam/shared/lib/modules/webem-common';\r\n\r\n@NgModule({\r\n    exports: [AlarmsDashboardPanelComponent],\r\n    declarations: [\r\n        WarningAlarmsCounterBlockComponent,\r\n        MinorAlarmsCounterBlockComponent,\r\n        MajorAlarmsCounterBlockComponent,\r\n        CriticalAlarmsCounterBlockComponent,\r\n        AlarmsDashboardPanelComponent,\r\n        DashboardAlarmsTableComponent,\r\n        AlarmsCounterPanelComponent,\r\n        AlarmSeverityDashboardPanelComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        TableModule,\r\n        AlarmSeverityIconModule,\r\n        TablePaginationModule,\r\n        WebemCommonModule\r\n    ]\r\n})\r\nexport class AlarmsDashboardPanelModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AlarmSeverityIconModule } from '../alarm-severity-icon/alarm-severity-icon.module';\r\nimport { TableModule } from 'primeng/table';\r\nimport { AlarmsTableComponent } from '../alarms-table/components/alarms-table/alarms-table.component';\r\nimport { TablePaginationModule } from '../table-pagination/table-pagination.module';\r\nimport { WebemCommonModule } from '@oam/shared/lib/modules/webem-common';\r\n\r\n@NgModule({\r\n    declarations: [AlarmsTableComponent],\r\n    exports: [AlarmsTableComponent],\r\n    imports: [\r\n        CommonModule,\r\n        AlarmSeverityIconModule,\r\n        TableModule,\r\n        TablePaginationModule,\r\n        WebemCommonModule\r\n    ]\r\n})\r\nexport class AlarmsTableModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RaisedAlarmsComponent } from './components/raised-alarms/raised-alarms.component';\r\nimport { OverlayPanelModule } from 'primeng/overlaypanel';\r\nimport { AlarmSeverityIconModule } from '../alarm-severity-icon/alarm-severity-icon.module';\r\n\r\n@NgModule({\r\n    declarations: [RaisedAlarmsComponent],\r\n    exports: [RaisedAlarmsComponent],\r\n    imports: [\r\n        CommonModule,\r\n        OverlayPanelModule,\r\n        AlarmSeverityIconModule\r\n    ]\r\n})\r\nexport class RaisedAlarmsModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CellTileComponent } from './components/cell-tile/cell-tile.component';\r\nimport { GroupTileComponent } from './components/group-tile/group-tile.component';\r\nimport { RaisedAlarmsModule } from '../raised-alarms/raised-alarms.module';\r\nimport { ButtonWithMenuModule } from '../button-with-menu/button-with-menu.module';\r\nimport { AlarmSeverityIconModule } from '../alarm-severity-icon/alarm-severity-icon.module';\r\nimport { TileTooltipModule } from '../tile-tooltip/tile-tooltip.module';\r\nimport { WebemCommonModule } from '@oam/shared/lib/modules/webem-common';\r\nimport { ToActiveAlarmsModule } from '@oam/shared/lib/core/pipes/to-active-alarms/to-active-alarms.module';\r\nimport { NgFeatureFlagModule } from '@oam/ng-feature-flag';\r\n\r\nconst declarations = [CellTileComponent, GroupTileComponent];\r\n\r\n@NgModule({\r\n    declarations,\r\n    imports: [\r\n        CommonModule,\r\n        RaisedAlarmsModule,\r\n        ButtonWithMenuModule,\r\n        AlarmSeverityIconModule,\r\n        TileTooltipModule,\r\n        WebemCommonModule,\r\n        ToActiveAlarmsModule,\r\n        NgFeatureFlagModule\r\n    ],\r\n    exports: declarations\r\n})\r\nexport class CellStatusComponentsModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ChartBarStatusPanelComponent } from './components/chart-bar-status-panel/chart-bar-status-panel.component';\r\nimport { ChartModule } from '../chart/chart.module';\r\n\r\n@NgModule({\r\n    declarations: [ChartBarStatusPanelComponent],\r\n    exports: [ChartBarStatusPanelComponent],\r\n    imports: [\r\n        CommonModule,\r\n        ChartModule\r\n    ]\r\n})\r\nexport class ChartBarStatusPanelModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DetailsSectionComponent } from './components/details-section/details-section.component';\r\nimport { DetailDataRowComponent } from './components/detail-data-row/detail-data-row.component';\r\nimport { DetailValidationRowComponent } from './components/detail-validation-row/detail-validation-row.component';\r\nimport { DetailsSectionListComponent } from './components/details-section-list/details-section-list.component';\r\nimport { DetailsSectionValidationComponent } from './components/details-section-validation/details-section-validation.component';\r\nimport { DetailsSectionTextComponent } from './components/details-section-text/details-section-text.component';\r\nimport { DetailsSectionCustomComponent } from './components/details-section-custom/details-section-custom.component';\r\nimport { DetailDataRowWithActionsMenuComponent } from './components/detail-data-row-with-actions-menu/detail-data-row-with-actions-menu.component';\r\nimport { ButtonWithMenuModule } from '../../lib/button-with-menu/button-with-menu.module';\r\nimport { WebemCommonModule } from '@oam/shared/lib/modules/webem-common';\r\nimport { FormatTitlePipe } from './pipe/format-title.pipe';\r\nimport { DetailsSectionInfoComponent } from './components/details-section-info/details-section-info.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        DetailsSectionComponent,\r\n        DetailDataRowComponent,\r\n        DetailValidationRowComponent,\r\n        DetailsSectionListComponent,\r\n        DetailsSectionValidationComponent,\r\n        DetailsSectionTextComponent,\r\n        DetailsSectionCustomComponent,\r\n        DetailDataRowWithActionsMenuComponent,\r\n        FormatTitlePipe,\r\n        DetailsSectionInfoComponent],\r\n    exports: [\r\n        DetailsSectionComponent,\r\n        DetailDataRowComponent,\r\n        DetailValidationRowComponent,\r\n        DetailsSectionListComponent,\r\n        DetailsSectionValidationComponent,\r\n        DetailsSectionTextComponent,\r\n        DetailsSectionCustomComponent,\r\n        DetailDataRowWithActionsMenuComponent,\r\n        DetailsSectionInfoComponent,\r\n        FormatTitlePipe\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        ButtonWithMenuModule,\r\n        WebemCommonModule\r\n    ]\r\n})\r\nexport class DetailsSectionModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CrlInformationTableComponent } from './components/crl-information-table/crl-information-table.component';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { TableModule } from 'primeng/table';\r\nimport { TablePaginationModule } from '../table-pagination/table-pagination.module';\r\nimport { FilterInputModule } from '../filter-input/filter-input.module';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CheckBoxTableFilterModule } from '../check-box-table-filter/check-box-table-filter.module';\r\nimport { WebemCommonModule } from '@oam/shared/lib/modules/webem-common';\r\nimport { DetailsSectionModule } from '@oam/cu-ui/lib/details-section/details-section.module';\r\n\r\n@NgModule({\r\n    declarations: [CrlInformationTableComponent],\r\n    exports: [CrlInformationTableComponent],\r\n    imports: [\r\n        CommonModule,\r\n        TableModule,\r\n        TablePaginationModule,\r\n        FormsModule,\r\n        DropdownModule,\r\n        FilterInputModule,\r\n        CheckBoxTableFilterModule,\r\n        WebemCommonModule,\r\n        DetailsSectionModule\r\n    ]\r\n})\r\nexport class CrlInformationTableModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DragDropUploadDirective } from './directives/drag-drop-upload.directive';\r\n\r\n@NgModule({\r\n  declarations: [DragDropUploadDirective],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [DragDropUploadDirective]\r\n})\r\nexport class DragDropUploadModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { VerticalHtmlLineComponent } from './components/vertical-html-line/vertical-html-line.component';\r\n\r\n@NgModule({\r\n    declarations: [VerticalHtmlLineComponent],\r\n    exports: [VerticalHtmlLineComponent],\r\n    imports: [\r\n        CommonModule\r\n    ]\r\n})\r\nexport class VerticalHtmlLineModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HasAlarmsModule } from '@oam/shared/lib/core/pipes/has-alarms/has-alarms.module';\r\nimport { RaisedAlarmsModule } from '../raised-alarms/raised-alarms.module';\r\nimport { DuComponent } from './components/du/du.component';\r\nimport { ButtonWithMenuModule } from '../button-with-menu/button-with-menu.module';\r\nimport { GetDuClassPipe } from './pipes/get-du-class.pipe';\r\nimport { VerticalHtmlLineModule } from '../vertical-html-line/vertical-html-line.module';\r\nimport { AlarmSeverityIconModule } from '../alarm-severity-icon/alarm-severity-icon.module';\r\nimport { GetTotalNumberOfCellsInDuPipe } from './pipes/get-total-number-of-cells-in-du.pipe';\r\nimport { TileTooltipModule } from '../tile-tooltip/tile-tooltip.module';\r\nimport { WebemCommonModule } from '@oam/shared/lib/modules/webem-common';\r\nimport { ToActiveAlarmsModule } from '@oam/shared/lib/core/pipes/to-active-alarms/to-active-alarms.module';\r\n\r\n@NgModule({\r\n    declarations: [DuComponent, GetDuClassPipe, GetTotalNumberOfCellsInDuPipe],\r\n    exports: [DuComponent, GetTotalNumberOfCellsInDuPipe],\r\n    imports: [\r\n        CommonModule,\r\n        HasAlarmsModule,\r\n        RaisedAlarmsModule,\r\n        ButtonWithMenuModule,\r\n        VerticalHtmlLineModule,\r\n        AlarmSeverityIconModule,\r\n        TileTooltipModule,\r\n        WebemCommonModule,\r\n        ToActiveAlarmsModule\r\n    ]\r\n})\r\nexport class DuModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { GlobalSearchInputComponent } from './components/global-search-input/global-search-input.component';\r\nimport { InputClearModule } from '../input-clear/components/input-clear.module';\r\n\r\n@NgModule({\r\n    declarations: [ GlobalSearchInputComponent],\r\n    exports: [GlobalSearchInputComponent],\r\n    imports: [\r\n        CommonModule,\r\n        InputTextModule,\r\n        FormsModule,\r\n        InputClearModule\r\n    ]\r\n})\r\nexport class GlobalSearchInputModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { OnAirStatusIconComponent } from './components/on-air-status-icon/on-air-status-icon.component';\r\nimport { OnAirSvgDefinitionComponent } from './components/on-air-svg-definition/on-air-svg-definition.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        OnAirStatusIconComponent,\r\n        OnAirSvgDefinitionComponent\r\n    ],\r\n    exports: [OnAirStatusIconComponent],\r\n    imports: [\r\n        CommonModule\r\n    ]\r\n})\r\nexport class OnAirStatusPanelModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PanelComponent } from './components/panel/panel.component';\r\nimport { AngularSplitModule } from 'angular-split';\r\nimport { SpinnerModule } from '../spinner/spinner.module';\r\nimport { RichPanelComponent } from './components/rich-panel/rich-panel.component';\r\nimport { StopPropagationDirective } from './directives/stop-propagation.directive';\r\nimport { WebemButtonModule } from '../button/button.module';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        PanelComponent,\r\n        RichPanelComponent,\r\n        StopPropagationDirective,\r\n    ],\r\n    exports: [\r\n        PanelComponent,\r\n        RichPanelComponent,\r\n        StopPropagationDirective,\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        AngularSplitModule,\r\n        SpinnerModule,\r\n        WebemButtonModule,\r\n    ]\r\n})\r\nexport class PanelModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PanelSplitAreaComponent } from './components/panel-split-area/panel-split-area.component';\r\nimport { ObjectTreePanelSplitAreaComponent } from './components/object-tree-panel-split-area/object-tree-panel-split-area.component';\r\nimport { CurledUpAreaDirective } from './directives/curled-up-area/curled-up-area.directive';\r\nimport { SplitAreaDirective } from './directives/split-area/split-area.directive';\r\nimport { AngularSplitModule } from 'angular-split';\r\nimport { SizeBiggerThanMinSizePipe } from './pipes/size-bigger-than-min-size.pipe';\r\nimport { IsCurledUpAreaPipe } from './pipes/is-curled-up-area.pipe';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { ToggleButtonModule } from 'primeng/togglebutton';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        PanelSplitAreaComponent,\r\n        ObjectTreePanelSplitAreaComponent,\r\n        CurledUpAreaDirective,\r\n        SplitAreaDirective,\r\n        SizeBiggerThanMinSizePipe,\r\n        IsCurledUpAreaPipe\r\n    ],\r\n    exports: [\r\n        PanelSplitAreaComponent,\r\n        ObjectTreePanelSplitAreaComponent,\r\n        CurledUpAreaDirective,\r\n        SplitAreaDirective\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        ToggleButtonModule,\r\n        ButtonModule,\r\n        AngularSplitModule\r\n    ]\r\n})\r\nexport class PanelSplitAreaModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PanelSplitComponent } from './components/panel-split/panel-split.component';\r\nimport { PanelToggleDirective } from './directives/panel-toggle/panel-toggle.directive';\r\nimport { SplitPanelDirective } from './directives/split-panel/split-panel.directive';\r\nimport { AngularSplitModule } from 'angular-split';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        PanelSplitComponent,\r\n        PanelToggleDirective,\r\n        SplitPanelDirective,\r\n    ],\r\n    exports: [\r\n        PanelSplitComponent,\r\n        PanelToggleDirective,\r\n        SplitPanelDirective,\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        AngularSplitModule,\r\n    ],\r\n})\r\nexport class PanelSplitModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RadioButtonGroupComponent } from './components/radio-button-group/radio-button-group.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\n\r\n@NgModule({\r\n    declarations: [RadioButtonGroupComponent],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        CheckboxModule,\r\n        RadioButtonModule\r\n    ],\r\n    exports: [RadioButtonGroupComponent]\r\n})\r\nexport class RadioButtonGroupModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RadioButtonWithLabelComponent } from './components/radio-button-with-label/radio-button-with-label.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\n\r\n@NgModule({\r\n    declarations: [RadioButtonWithLabelComponent],\r\n    exports: [RadioButtonWithLabelComponent],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        RadioButtonModule\r\n    ]\r\n})\r\nexport class RadioButtonWithLabelModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RaisedAlarmsModule } from '../raised-alarms/raised-alarms.module';\r\nimport { RmodComponent } from './components/rmod/rmod.component';\r\nimport { ButtonWithMenuModule } from '../button-with-menu/button-with-menu.module';\r\nimport { GetAntPortClassPipe } from './pipes/get-ant-port-class.pipe';\r\nimport { GetMappedAntPortsPipe } from './pipes/get-mapped-ant-ports.pipe';\r\nimport { GetAldCellHeightPipe } from './pipes/get-ald-cell-height.pipe';\r\nimport { GetGridTemplateRowsPipe } from './pipes/get-grid-template-rows.pipe';\r\nimport { HasAlarmsModule } from '@oam/shared/lib/core/pipes/has-alarms/has-alarms.module';\r\nimport { MapAvailabilityStatusModule } from '@oam/shared/lib/core/pipes/map-availability-status/map-availability-status.module';\r\nimport { GetClassExtensionModule } from '@oam/shared/lib/core/pipes/get-class-extension/get-class-extension.module';\r\nimport { TileTooltipModule } from '../tile-tooltip/tile-tooltip.module';\r\nimport { WebemCommonModule } from '@oam/shared/lib/modules/webem-common';\r\nimport { ToActiveAlarmsModule } from '@oam/shared/lib/core/pipes/to-active-alarms/to-active-alarms.module';\r\nimport { GetAntPortsListPipe } from '@oam/cu-ui/lib/rmod/pipes/get-ant-ports-list.pipe';\r\n\r\n@NgModule({\r\n    declarations: [RmodComponent, GetAntPortClassPipe, GetMappedAntPortsPipe, GetGridTemplateRowsPipe, GetAldCellHeightPipe, GetAntPortsListPipe],\r\n    exports: [RmodComponent, GetMappedAntPortsPipe, GetGridTemplateRowsPipe, GetAldCellHeightPipe, GetAntPortsListPipe],\r\n    imports: [\r\n        CommonModule,\r\n        RaisedAlarmsModule,\r\n        ButtonWithMenuModule,\r\n        HasAlarmsModule,\r\n        MapAvailabilityStatusModule,\r\n        GetClassExtensionModule,\r\n        TileTooltipModule,\r\n        WebemCommonModule,\r\n        ToActiveAlarmsModule\r\n    ]\r\n})\r\nexport class RmodModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AlarmCounterComponent } from './components/alarm-counter/alarm-counter.component';\r\nimport { SpinnerModule } from '../spinner/spinner.module';\r\n\r\n@NgModule({\r\n    declarations: [AlarmCounterComponent],\r\n    exports: [AlarmCounterComponent],\r\n    imports: [\r\n        CommonModule,\r\n        SpinnerModule,\r\n    ]\r\n})\r\nexport class AlarmCounterModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RoutedMenuComponent } from './components/routed-menu/routed-menu.component';\r\nimport { WebemButtonModule } from '../button/button.module';\r\nimport { AlarmCounterModule } from '../alarm-counter/alarm-counter.module';\r\n\r\n@NgModule({\r\n    declarations: [RoutedMenuComponent],\r\n    exports: [RoutedMenuComponent],\r\n    imports: [\r\n        CommonModule,\r\n        WebemButtonModule,\r\n        AlarmCounterModule\r\n    ]\r\n})\r\nexport class RoutedMenuModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TableModule } from 'primeng/table';\r\nimport { SessionsTableComponent } from './components/sessions-table/sessions-table.component';\r\nimport { WebemCommonModule } from '@oam/shared/lib/modules/webem-common';\r\n\r\n@NgModule({\r\n    declarations: [SessionsTableComponent],\r\n    exports: [SessionsTableComponent],\r\n    imports: [\r\n        CommonModule,\r\n        TableModule,\r\n        WebemCommonModule\r\n    ]\r\n})\r\nexport class SessionsTableModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SideBarMenuComponent } from './components/side-bar-menu/side-bar-menu.component';\r\nimport { WebemButtonModule } from '../button/button.module';\r\n\r\n@NgModule({\r\n    declarations: [SideBarMenuComponent],\r\n    exports: [SideBarMenuComponent],\r\n    imports: [\r\n        CommonModule,\r\n        WebemButtonModule\r\n    ]\r\n})\r\nexport class SideBarMenuModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SplitPanelToggleButtonComponent } from './components/split-panel-toggle-button/split-panel-toggle-button.component';\r\nimport { ButtonModule } from 'primeng/button';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        SplitPanelToggleButtonComponent,\r\n    ],\r\n    exports: [\r\n        SplitPanelToggleButtonComponent,\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        ButtonModule,\r\n    ],\r\n})\r\nexport class SplitPanelToggleButtonModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StatusIconComponent } from './components/status-icon/status-icon.component';\r\nimport { GetCircleTypePipe } from './core/pipes/get-circle-type.pipe';\r\n\r\n@NgModule({\r\n    declarations: [StatusIconComponent, GetCircleTypePipe],\r\n    exports: [StatusIconComponent],\r\n    imports: [\r\n        CommonModule\r\n    ]\r\n})\r\nexport class StatusIconModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StepperComponent } from './components/stepper.component';\r\nimport { StepsModule } from 'primeng/steps';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    StepperComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    StepsModule\r\n  ],\r\n  exports: [\r\n    StepperComponent\r\n  ]\r\n})\r\nexport class StepperModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MenubarModule } from 'primeng/menubar';\r\nimport { SubmenuComponent } from './components/submenu/submenu.component';\r\n\r\n@NgModule({\r\n    declarations: [SubmenuComponent],\r\n    exports: [SubmenuComponent],\r\n    imports: [\r\n        CommonModule,\r\n        MenubarModule\r\n    ]\r\n})\r\nexport class SubmenuModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NoSelectedMessageComponent } from './components/no-selected-details/no-selected-message.component';\r\n\r\n@NgModule({\r\n    declarations: [NoSelectedMessageComponent],\r\n    exports: [NoSelectedMessageComponent],\r\n    imports: [\r\n        CommonModule,\r\n    ]\r\n})\r\nexport class NoSelectedMessageModule {\r\n}\r\n","import { Injectable, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TableViewComponent } from './components/table-view/table-view.component';\r\nimport { FilterInvisibleColumnsPipe } from './core/pipes/filter-invisible-columns.pipe';\r\nimport { TreeTableViewComponent } from '@oam/cu-ui/lib/table-view/components/tree-table-view/tree-table-view.component';\r\nimport { MakeLastColumnResponsivePipe } from '@oam/cu-ui/lib/table-view/core/pipes/make-last-column-responsive.pipe';\r\nimport { ValidateParentStylePipe } from './core/pipes/validate-parent-row.pipe';\r\nimport { TableModule } from 'primeng/table';\r\nimport { TreeTableModule } from 'primeng/treetable';\r\nimport { FixTableColumnsResizeModule } from '@oam/shared/lib/modules/fix-table-columns-resize/fix-table-columns-resize.module';\r\nimport { NoSelectedMessageModule } from '@oam/cu-ui/lib/no-selected-message/no-selected-message.module';\r\n\r\n@NgModule({\r\n    exports: [\r\n        TableViewComponent,\r\n        TreeTableViewComponent\r\n    ],\r\n    declarations: [\r\n        TableViewComponent,\r\n        TreeTableViewComponent,\r\n        FilterInvisibleColumnsPipe,\r\n        MakeLastColumnResponsivePipe,\r\n        ValidateParentStylePipe\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        TableModule,\r\n        TreeTableModule,\r\n        FixTableColumnsResizeModule,\r\n        NoSelectedMessageModule\r\n    ]\r\n})\r\nexport class TableViewModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TitledCounterComponent } from './components/titled-counter/titled-counter.component';\r\n\r\n@NgModule({\r\n    declarations: [TitledCounterComponent],\r\n    exports: [TitledCounterComponent],\r\n    imports: [\r\n        CommonModule\r\n    ]\r\n})\r\nexport class TitledCounterModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ToggleIconButtonComponent } from './components/toggle-icon-button/toggle-icon-button.component';\r\n\r\n@NgModule({\r\n    declarations: [ToggleIconButtonComponent],\r\n    exports: [ToggleIconButtonComponent],\r\n    imports: [\r\n        CommonModule\r\n    ]\r\n})\r\nexport class ToggleIconButtonModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserInformationChangeComponent } from './user-information-change.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { TrackCapsLockModule } from '../track-caps-lock/track-caps-lock.module';\r\nimport { WebemButtonModule } from '../button/button.module';\r\nimport { ShowPasswordButtonModule } from '../show-password-button/show-password-button.module';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        DropdownModule,\r\n        InputTextModule,\r\n        ButtonModule,\r\n        TrackCapsLockModule,\r\n        TooltipModule,\r\n        WebemButtonModule,\r\n        ShowPasswordButtonModule\r\n    ],\r\n    declarations: [UserInformationChangeComponent],\r\n    providers: [],\r\n    exports: [UserInformationChangeComponent]\r\n})\r\nexport class UserInformationChangeModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ValidationRulesDetailsComponent } from './components/validation-rules-details/validation-rules-details.component';\r\n\r\n@NgModule({\r\n    declarations: [ValidationRulesDetailsComponent],\r\n    exports: [ValidationRulesDetailsComponent],\r\n    imports: [\r\n        CommonModule\r\n    ]\r\n})\r\nexport class ValidationRulesDetailsModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ValidationRulesDetailsLocalComponent } from './components/validation-rules-details-local/validation-rules-details-local.component';\r\n\r\n@NgModule({\r\n    declarations: [ValidationRulesDetailsLocalComponent],\r\n    exports: [ValidationRulesDetailsLocalComponent],\r\n    imports: [\r\n        CommonModule\r\n    ]\r\n})\r\nexport class ValidationRulesDetailsLocalModule {\r\n}\r\n","import { ApplicationModule, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FormInputComponent } from './form-components/form-input/form-input.component';\r\nimport { FormTextareaComponent } from './form-components/form-textarea/form-textarea.component';\r\nimport { FormCheckboxComponent } from './form-components/form-checkbox/form-checkbox.component';\r\nimport { FormDropdownComponent } from './form-components/form-dropdown/form-dropdown.component';\r\nimport { FormValidationMessageComponent } from './form-message/form-validation-message.component';\r\nimport { FormLabelComponent } from './form-label/form-label.component';\r\nimport { FormInputFileComponent } from './form-components/form-input-file/form-input-file.component';\r\nimport { WebemButtonModule } from '../button/button.module';\r\nimport { InputClearModule } from '../input-clear/components/input-clear.module';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        FormInputComponent,\r\n        FormTextareaComponent,\r\n        FormCheckboxComponent,\r\n        FormDropdownComponent,\r\n        FormValidationMessageComponent,\r\n        FormLabelComponent,\r\n        FormInputFileComponent,\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        ApplicationModule,\r\n        ReactiveFormsModule,\r\n        InputTextModule,\r\n        CheckboxModule,\r\n        DropdownModule,\r\n        WebemButtonModule,\r\n        InputClearModule\r\n    ],\r\n    exports: [\r\n        FormInputComponent,\r\n        FormTextareaComponent,\r\n        FormCheckboxComponent,\r\n        FormDropdownComponent,\r\n        FormInputFileComponent,\r\n        FormLabelComponent\r\n    ]\r\n})\r\nexport class VerticalFormsModule {\r\n}\r\n","export enum AlarmSeveritiesForFiltering {\r\n    critical = 'critical',\r\n    major = 'major',\r\n    minor = 'minor',\r\n    warning = 'warning'\r\n}\r\n","export enum ValidationEntryType  {\r\n    warning = 'warning',\r\n    error = 'error'\r\n}\r\nexport type ValidationEntry = { type: ValidationEntryType, value?: string };\r\nexport type ValidationData = ValidationEntry[];\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { WebemButtonModule } from '../button/button.module';\r\nimport { PageNotFoundComponent } from './components/page-not-found/page-not-found.component';\r\n\r\n@NgModule({\r\n    declarations: [PageNotFoundComponent],\r\n    imports: [\r\n        CommonModule,\r\n        FlexLayoutModule,\r\n        WebemButtonModule\r\n    ]\r\n})\r\nexport class PageNotFoundModule {\r\n}\r\n","export enum PageNotFoundRedirectPaths {\r\n    Dashboard = 'dashboard',\r\n    Login = 'login'\r\n}\r\n","<section\r\n    fxLayout=\"row\"\r\n    fxLayoutAlign=\"center center\"\r\n    gdAlignRows=\"center center\"\r\n    class=\"page-not-found\">\r\n\r\n    <div *ngFor=\"let block of blocks\">\r\n        <ng-container *ngTemplateOutlet=\"block.template; context: block\"></ng-container>\r\n    </div>\r\n\r\n    <ng-template #textBlock let-text=\"text\" let-className=\"className\">\r\n        <span [ngClass]=\"className\">{{text}}</span>\r\n    </ng-template>\r\n\r\n    <ng-template #separatorBlock let-className=\"className\">\r\n        <hr [ngClass]=\"className\"/>\r\n    </ng-template>\r\n\r\n    <ng-template #buttonBlock let-label=\"label\" let-url=\"url\" let-theme=\"theme\" let-className=\"className\">\r\n        <ui-webem-button\r\n            [ngClass]=\"className\"\r\n            [model]=\"{label: label, theme: theme}\"\r\n            (click)=\"redirectToPage(url)\"\r\n        ></ui-webem-button>\r\n    </ng-template>\r\n</section>\r\n","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\nimport { PageNotFoundRedirectPaths, TextBlockModel } from '../../core/models';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { Router } from '@angular/router';\r\nimport { isUserAuthenticated } from '../../core/functions/page-not-found.utils';\r\n\r\n@Component({\r\n    selector: 'ui-webem-page-not-found',\r\n    templateUrl: './page-not-found.component.html',\r\n    styleUrls: ['./page-not-found.component.scss']\r\n})\r\nexport class PageNotFoundComponent implements OnInit {\r\n    @ViewChild('textBlock', { static: true }) textTemplateRef: TemplateRef<HTMLSpanElement>;\r\n    @ViewChild('separatorBlock', { static: true }) separatorTemplateRef: TemplateRef<HTMLHRElement>;\r\n    @ViewChild('buttonBlock', { static: true }) buttonTemplateRef: TemplateRef<HTMLElement>;\r\n\r\n    blocks: TextBlockModel[];\r\n\r\n    constructor(private readonly router: Router) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const isUserLogged = isUserAuthenticated();\r\n\r\n        this.blocks = [\r\n            {\r\n                text: '404',\r\n                className: 'header-404',\r\n                template: this.textTemplateRef\r\n            },\r\n            {\r\n                text: 'Page does not exist',\r\n                className: 'header-description',\r\n                template: this.textTemplateRef\r\n            },\r\n            {\r\n                className: 'separator',\r\n                template: this.separatorTemplateRef\r\n            },\r\n            {\r\n                text: 'Sorry, we can\\'t find this page',\r\n                className: 'description-title',\r\n                template: this.textTemplateRef\r\n            },\r\n            {\r\n                text: 'You\\'re here, because probably:',\r\n                className: 'description-text-bold',\r\n                template: this.textTemplateRef\r\n            },\r\n            {\r\n                text: '- the page has incorrect URL',\r\n                className: 'description-text',\r\n                template: this.textTemplateRef\r\n            },\r\n            {\r\n                text: '- the page has been moved',\r\n                className: 'description-text',\r\n                template: this.textTemplateRef\r\n            },\r\n            {\r\n                label: isUserLogged ? 'Go to Dashboard Page' : 'Go to Login Page',\r\n                url: isUserLogged ? PageNotFoundRedirectPaths.Dashboard : PageNotFoundRedirectPaths.Login,\r\n                className: 'redirect-button',\r\n                theme: ButtonTheme.Accent,\r\n                template: this.buttonTemplateRef\r\n            }\r\n        ];\r\n    }\r\n\r\n    async redirectToPage(url: string): Promise<void> {\r\n        await this.router.navigateByUrl(url);\r\n    }\r\n}\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { OverlayState } from '../models';\r\n\r\nexport const selectOverlay = createFeatureSelector<OverlayState>('overlay');\r\n\r\nexport const selectIsOutdatedDeltaPlanDialogOpened = createSelector(selectOverlay,\r\n    (state: OverlayState) => state.isOutdatedDeltaPlanDialogOpen);\r\n","import {\r\n    PasswordValidationOptions, UsernameValidationOptions, ValidationRules,\r\n    ValidationStatus\r\n} from '../interface/user-information-change.interface';\r\nimport { ValidationRule } from '@oam/cu-ui/lib/validation-rules-details/models/ValidationRule';\r\n\r\nexport function getPasswordMessages(validationOptions: PasswordValidationOptions, passwordErrors: ValidationStatus['password'],\r\n                                    isRoleOperationPage = false) {\r\n    const passwordMessages: ValidationRule[] = [\r\n        {\r\n            value: getCharacterNumberMessage(validationOptions),\r\n            isRulePassed: !(passwordErrors && passwordErrors[ValidationRules.MIN_LENGTH]) && !(passwordErrors[ValidationRules.MAX_LENGTH])\r\n        },\r\n        {\r\n            value: 'There must be at least 1 upper case letter (A-Z)',\r\n            isRulePassed: !(passwordErrors && passwordErrors[ValidationRules.UPPER_CASE])\r\n        },\r\n        {\r\n            value: 'There must be at least 1 lower case letter (a-z)',\r\n            isRulePassed: !(passwordErrors && passwordErrors[ValidationRules.LOWER_CASE])\r\n        },\r\n        {\r\n            value: `There must be at least ${validationOptions.minNumberOfDigits} ` +\r\n            `${validationOptions.minNumberOfDigits === 1 ? 'number' : 'numbers'} (0-9)`,\r\n            isRulePassed: !(passwordErrors && passwordErrors[ValidationRules.DIGIT_NUMBER])\r\n        },\r\n        {\r\n            value: 'There should not be two consecutive identical characters',\r\n            isRulePassed: !(passwordErrors && passwordErrors[ValidationRules.CONSECUTIVE_CHAR])\r\n        },\r\n        {\r\n            value: 'Only the following characters are allowed: A-Za-z0-9!#$%&\\'()*+,-.;=?@[]_~/',\r\n            isRulePassed: !(passwordErrors && passwordErrors[ValidationRules.DISALLOWED_ASCII])\r\n        }\r\n    ];\r\n\r\n    if (isRoleOperationPage) {\r\n        passwordMessages.push({\r\n            value: 'The password can not same as selected role\\'s username in straight or reversed form (check is case insensitive)',\r\n            isRulePassed: !(passwordErrors && passwordErrors[ValidationRules.PASSWORD_NOT_SAME_AS_USERNAME])\r\n        }, {\r\n            value: 'The password can not contain selected role\\'s username in straight or reversed form (check is case insensitive)',\r\n            isRulePassed: !(passwordErrors && passwordErrors[ValidationRules.PASSWORD_NOT_CONTAIN_USERNAME])\r\n        });\r\n    } else {\r\n        passwordMessages.push({\r\n            value: 'The password can not same as username in straight or reversed form (check is case insensitive)',\r\n            isRulePassed: !(passwordErrors && passwordErrors[ValidationRules.PASSWORD_NOT_SAME_AS_USERNAME])\r\n        }, {\r\n            value: 'The password can not contain username in straight or reversed form (check is case insensitive)',\r\n            isRulePassed: !(passwordErrors && passwordErrors[ValidationRules.PASSWORD_NOT_CONTAIN_USERNAME])\r\n        });\r\n    }\r\n\r\n    const nonAlphaNumericalCheck: ValidationRule = {\r\n        value: `There must be at least ${validationOptions.minNonAlphaNumerical} ` +\r\n            `special ${validationOptions.minNonAlphaNumerical === 1 ? 'character' : 'characters'} (e.g. @#$)`,\r\n        isRulePassed: !(passwordErrors && passwordErrors[ValidationRules.NON_ALPHA_NUMBER])\r\n    };\r\n\r\n    return !validationOptions.minNonAlphaNumerical\r\n        ? passwordMessages\r\n        : addNonAlphaNumericalCheck(passwordMessages, nonAlphaNumericalCheck);\r\n}\r\n\r\nexport function getUsernameMessages(validationOptions: UsernameValidationOptions, usernameErrors: ValidationStatus['username']) {\r\n    return [\r\n        {\r\n            value: `The username should have ${validationOptions.minLength}-${validationOptions.maxLength} characters`,\r\n            isRulePassed: !(usernameErrors && usernameErrors[ValidationRules.MIN_LENGTH]) &&\r\n            !(usernameErrors && usernameErrors[ValidationRules.MAX_LENGTH])\r\n        },\r\n        {\r\n            value: 'Only the following characters are allowed: A-Za-z0-9._-',\r\n            isRulePassed: !(usernameErrors && usernameErrors[ValidationRules.DISALLOWED_ASCII])\r\n        }\r\n    ];\r\n}\r\n\r\nfunction addNonAlphaNumericalCheck(passwordMessages: ValidationRule[], nonAlphaNumericalCheck: ValidationRule): ValidationRule[] {\r\n    return [...passwordMessages.slice(0, 4), nonAlphaNumericalCheck, ...passwordMessages.slice(4)];\r\n}\r\n\r\nfunction getCharacterNumberMessage(validationOptions: PasswordValidationOptions) {\r\n    return validationOptions.minLength === validationOptions.maxLength\r\n        ? `The password should have ${validationOptions.minLength} characters`\r\n        : `The password should have ${validationOptions.minLength}-${validationOptions.maxLength} characters`;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UiClickableDirective } from './directives/ui-clickable.directive';\r\n\r\n\r\n@NgModule({\r\n    declarations: [UiClickableDirective],\r\n    exports: [\r\n        UiClickableDirective\r\n    ],\r\n    imports: [\r\n        CommonModule\r\n    ]\r\n})\r\nexport class UiClickableModule {\r\n}\r\n","import { CompatibilityBrowserActions, CompatibilityBrowserActionTypes } from '../actions/compatibility-browser.actions';\r\n\r\nexport const featureKey = 'browserCompatibility';\r\n\r\nexport interface BrowserCompatibilityState {\r\n    browserIsSupport: boolean;\r\n    browserInformationClosed: boolean;\r\n}\r\n\r\nexport const initialState: BrowserCompatibilityState = {\r\n    browserIsSupport: true,\r\n    browserInformationClosed: false\r\n};\r\n\r\nexport function reducer(state = initialState, action: CompatibilityBrowserActions): BrowserCompatibilityState {\r\n    switch (action.type) {\r\n        case CompatibilityBrowserActionTypes.YourBrowserIsSupport:\r\n            return { ...state, browserIsSupport: true };\r\n        case CompatibilityBrowserActionTypes.YourBrowserIsNotSupport:\r\n            return { ...state, browserIsSupport: false };\r\n        case CompatibilityBrowserActionTypes.BrowserInformationClosed:\r\n            return { ... state, browserInformationClosed: true };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport * as fromCompatibilityBrowser from './reducers/compatibility-browser.reducer';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WebemButtonModule } from '../../lib/button/button.module';\r\nimport { BrowserIncompatibilityBarComponent } from './components/browser-incompatibility-bar/browser-incompatibility-bar.component';\r\n\r\n@NgModule({\r\n    declarations: [BrowserIncompatibilityBarComponent],\r\n    imports: [\r\n        CommonModule,\r\n        WebemButtonModule,\r\n        StoreModule.forFeature('browserCompatibility', fromCompatibilityBrowser.reducer)\r\n    ],\r\n    providers: [],\r\n    exports: [BrowserIncompatibilityBarComponent]\r\n})\r\nexport class BrowserCompatibilityModule {\r\n}\r\n","import { OverlayState } from '../models';\r\nimport { Action, createReducer, on } from '@ngrx/store';\r\nimport { closeOutdatedDeltaPlanDialog, openDialog } from '../actions/overlay.actions';\r\n\r\nexport const overlayStateFeatureKey = 'overlay';\r\n\r\nexport const initialState: OverlayState = {\r\n    isOutdatedDeltaPlanDialogOpen: false\r\n};\r\n\r\nconst setOverlayReducer = createReducer(\r\n    initialState,\r\n    on(openDialog, (state, action) => {\r\n        if (action.config.header === 'Outdated delta plan') {\r\n            return { isOutdatedDeltaPlanDialogOpen: true } as OverlayState;\r\n        } else {\r\n            return { ...state };\r\n        }\r\n    }),\r\n    on(closeOutdatedDeltaPlanDialog, (state, action) => {\r\n        return { isOutdatedDeltaPlanDialogOpen: false } as OverlayState;\r\n    })\r\n);\r\n\r\nexport function reducer(state: OverlayState | undefined, action: Action) {\r\n    return setOverlayReducer(state, action);\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ModuleInfoBarComponent } from './components/module-info-bar/module-info-bar.component';\r\nimport { ButtonWithMenuModule } from '../button-with-menu/button-with-menu.module';\r\nimport { InfoBarDirective } from '../module-info-bar/directives/info-bar.directive';\r\n\r\nconst components = [ModuleInfoBarComponent, InfoBarDirective];\r\n\r\n@NgModule({\r\n    declarations: components,\r\n    exports: components,\r\n    imports: [\r\n        CommonModule,\r\n        ButtonWithMenuModule\r\n    ]\r\n})\r\nexport class ModuleInfoBarModule { }\r\n","import { DynamicDialogConfig } from 'primeng/dynamicdialog';\r\n\r\nexport const legalNoticeModalConfig: DynamicDialogConfig = {\r\n    header: 'Legal Notice',\r\n    width: '430px',\r\n    closable: false,\r\n    baseZIndex: 9999,\r\n    styleClass: 'ui-webem-legal-notice-modal'\r\n};\r\n\r\nexport const defaultLegalNoticeModalMessage = 'You are about to access a private system. This system is for the use of authorized users only. All connections are logged to the extent and by means acceptable by the local legislation. Any unauthorized access or access attempts may be punished to the fullest extent possible under the applicable local legislation.';\r\n\r\nexport const errorLegalNoticeModalMessage = 'Legal notice could not be load in current phase, you will be logged out of WebEM for some security policies.\\nPlease try to login again a few minutes later.\\nAfter try again, if you still meet such case, please check the cloud environment.';\r\n\r\nexport const loadingLegalNoticeModalMessage = 'Loading...';\r\n\r\nexport const CLASSES = {\r\n    INFO: 'mdi-information',\r\n    LOADING: 'mdi-loading mdi-spin',\r\n    ERROR: 'mdi-alert red-alert'\r\n};\r\n\r\nexport const BUTTONLABEL = {\r\n    REJECT: 'Reject',\r\n    LOGOUT: 'Log Out',\r\n    OK: 'OK'\r\n};\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport { loadingLegalNoticeModalMessage } from '../legal-notice.constants';\r\nimport {\r\n    setLegalNoticeMessage,\r\n    showLegalNoticeModal,\r\n    submitLegalNoticeModal,\r\n    denyLegalNoticeModal\r\n} from '../actions/legal-notice-modal.actions';\r\n\r\nexport const legalNoticeModalFeatureKey = 'legalNoticeModal';\r\n\r\nexport interface LegalNoticeModalState {\r\n    isVisible: boolean;\r\n    securityNotice: string;\r\n    confirmButtonVisible?: boolean;\r\n    okButtonVisible?: boolean;\r\n}\r\n\r\nexport const initialState: LegalNoticeModalState = {\r\n    isVisible: false,\r\n    securityNotice: loadingLegalNoticeModalMessage,\r\n    confirmButtonVisible: false,\r\n    okButtonVisible: false\r\n};\r\n\r\nconst legalNoticeModalReducer = createReducer(\r\n    initialState,\r\n    on(setLegalNoticeMessage, (state, { securityNotice, confirmButtonVisible, okButtonVisible }) => ({\r\n        ...state,\r\n        securityNotice: securityNotice.replace(/\\\\n/g, '\\n'),\r\n        confirmButtonVisible,\r\n        okButtonVisible\r\n    })),\r\n    on(showLegalNoticeModal, (state) => ({\r\n        ...state,\r\n        isVisible: true\r\n    })),\r\n    on(submitLegalNoticeModal, denyLegalNoticeModal, (state) => ({\r\n        ...state,\r\n        isVisible: false\r\n    }))\r\n);\r\n\r\nexport function reducer(state: LegalNoticeModalState, action: Action) {\r\n    return legalNoticeModalReducer(state, action);\r\n}\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { legalNoticeModalFeatureKey, LegalNoticeModalState } from '../reducers/legal-notice-modal.reducer';\r\n\r\nexport const legalNoticeModalFeatureSelector = createFeatureSelector(legalNoticeModalFeatureKey);\r\n\r\nexport const securityNoticeSelector = createSelector(\r\n    legalNoticeModalFeatureSelector,\r\n    (state: LegalNoticeModalState) => state.securityNotice\r\n);\r\n\r\nexport const securityNoticeConfirmButtonVisibleSelector = createSelector(\r\n    legalNoticeModalFeatureSelector,\r\n    (state: LegalNoticeModalState) => !!state.confirmButtonVisible\r\n);\r\n\r\nexport const securityNoticeErrorSelector = createSelector(\r\n    legalNoticeModalFeatureSelector,\r\n    (state: LegalNoticeModalState) => !!state.okButtonVisible\r\n);\r\n\r\nexport const isLegalNoticeVisibleSelector = createSelector(\r\n    legalNoticeModalFeatureSelector,\r\n    (state: LegalNoticeModalState) => state.isVisible\r\n);\r\n","<div class=\"p-dialog-content\">\r\n    <div>\r\n        <div class=\"dialog-information\">\r\n            <i class=\"mdi {{iconType}}\"></i>\r\n            <span>{{securityNotice$ | async}}</span>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"p-dialog-footer\">\r\n    <p-footer>\r\n        <ui-webem-button\r\n            [model]=\"confirmButtonModel\"\r\n            (action)=\"accept()\"\r\n            *ngIf=\"securityNoticeConfirmVisible$ | async\"\r\n        >\r\n        </ui-webem-button>\r\n        <ui-webem-button\r\n            [model]=\"commonRejectButtonModel\"\r\n            (action)=\"deny()\"\r\n        >\r\n        </ui-webem-button>\r\n    </p-footer>\r\n</div>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { combineLatest, Observable, Subject, Subscription } from 'rxjs';\r\nimport {\r\n    securityNoticeConfirmButtonVisibleSelector, securityNoticeErrorSelector,\r\n    securityNoticeSelector\r\n} from '../../core/selectors/legal-notice-modal.selectors';\r\nimport { logout } from '@oam/auth/lib/auth/core/actions/logout.actions';\r\nimport { denyLegalNoticeModal, submitLegalNoticeModal } from '../../core/actions/legal-notice-modal.actions';\r\nimport { BaseDialogComponent } from '@oam/shared/lib/components/base-dialog/base-dialog-component';\r\nimport { DynamicDialogConfig, DynamicDialogRef } from 'primeng/dynamicdialog';\r\nimport { ButtonModel } from '@oam/cu-ui/lib/button/model/button-model.definition';\r\nimport { ButtonTheme } from '@oam/cu-ui/lib/button/model/button-theme.enum';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { BUTTONLABEL, CLASSES } from '@oam/cu-ui/lib/legal-notice-modal/core/legal-notice.constants';\r\n@Component({\r\n    selector: 'ui-webem-legal-notice-modal',\r\n    templateUrl: './legal-notice-modal.component.html',\r\n    styleUrls: ['./legal-notice-modal.component.scss']\r\n})\r\nexport class LegalNoticeModalComponent extends BaseDialogComponent  implements OnInit, OnDestroy {\r\n    securityNotice$: Observable<string>;\r\n    securityNoticeButton$: Subscription;\r\n    securityNoticeConfirmVisible$: Observable<boolean>;\r\n    securityNoticeError$: Observable<boolean>;\r\n    ngUnsubscribe$: Subject<void> = new Subject<void>();\r\n    iconType: string;\r\n\r\n    readonly confirmButtonModel = {\r\n        label: 'Confirm',\r\n        iconPosition: 'right',\r\n        theme: ButtonTheme.Accent\r\n    } as ButtonModel;\r\n\r\n    commonRejectButtonModel = {\r\n        label: 'Reject',\r\n        iconPosition: 'right',\r\n        theme: ButtonTheme.Default\r\n    } as ButtonModel;\r\n\r\n    constructor(\r\n        protected store: Store,\r\n        public config: DynamicDialogConfig,\r\n        ref: DynamicDialogRef\r\n    ) {\r\n        super(store, ref);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.securityNotice$ = this.store.select(securityNoticeSelector);\r\n        this.securityNoticeConfirmVisible$ = this.store.select(securityNoticeConfirmButtonVisibleSelector);\r\n        this.securityNoticeButton$ = combineLatest(\r\n            this.securityNoticeConfirmVisible$,\r\n            this.store.select(securityNoticeErrorSelector))\r\n            .pipe(takeUntil(this.ngUnsubscribe$))\r\n            .subscribe(([confirmButtonVisible, errorButtonVisible]) => {\r\n                this.commonRejectButtonModel ={\r\n                    ...this.commonRejectButtonModel,\r\n                    theme: confirmButtonVisible ? ButtonTheme.Default : ButtonTheme.Accent,\r\n                    label: confirmButtonVisible ? BUTTONLABEL.REJECT : (errorButtonVisible ? BUTTONLABEL.OK : BUTTONLABEL.LOGOUT)\r\n                };\r\n                this.iconType = confirmButtonVisible ? CLASSES.INFO : (errorButtonVisible ? CLASSES.ERROR : CLASSES.LOADING);\r\n            });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe$.next();\r\n        this.ngUnsubscribe$.complete();\r\n    }\r\n\r\n    accept(): void {\r\n        this.store.dispatch(submitLegalNoticeModal());\r\n        this.closeDialog();\r\n    }\r\n\r\n    deny(): void {\r\n        this.store.dispatch(logout());\r\n        this.store.dispatch(denyLegalNoticeModal());\r\n        this.closeDialog();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, concatMap, filter, map, mergeMap, switchMap, timeout, withLatestFrom } from 'rxjs/operators';\r\nimport {\r\n    denyLegalNoticeModal,\r\n    getLegalNoticeMessage,\r\n    setLegalNoticeMessage,\r\n    showLegalNoticeModal\r\n} from '../actions/legal-notice-modal.actions';\r\nimport { SecService } from '@oam/cu-asm-api/services';\r\nimport {\r\n    defaultLegalNoticeModalMessage,\r\n    errorLegalNoticeModalMessage, legalNoticeModalConfig, loadingLegalNoticeModalMessage\r\n} from '../legal-notice.constants';\r\nimport { logout, LogoutActionsTypes } from '@oam/auth/lib/auth/core/actions/logout.actions';\r\nimport { TypedAction } from '@ngrx/store/src/models';\r\nimport { openDialog } from '@oam/cu-ui/lib/webem-overlay/core/actions/overlay.actions';\r\nimport { LegalNoticeModalComponent } from '@oam/cu-ui/lib/legal-notice-modal/components/legal-notice-modal/legal-notice-modal.component';\r\nimport { Store } from '@ngrx/store';\r\nimport {\r\n    isLegalNoticeVisibleSelector\r\n} from '@oam/cu-ui/lib/legal-notice-modal/core/selectors/legal-notice-modal.selectors';\r\n\r\n@Injectable()\r\nexport class LegalNoticeModalEffects {\r\n    getLegalNoticeMessage$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(getLegalNoticeMessage),\r\n            switchMap(() => {\r\n                return this.secService.getSystemInfo().pipe(\r\n                    timeout(30000),\r\n                    withLatestFrom(\r\n                        this.store.select(isLegalNoticeVisibleSelector)\r\n                    ),\r\n                    filter(([, isVisible]) => {\r\n                        return isVisible;\r\n                    }),\r\n                    concatMap(([systemInfo]) => of(\r\n                        setLegalNoticeMessage({\r\n                            securityNotice: systemInfo.securityNotice || defaultLegalNoticeModalMessage,\r\n                            confirmButtonVisible: true,\r\n                            okButtonVisible: false\r\n                        })\r\n                    )),\r\n                    catchError(() => of(\r\n                        setLegalNoticeMessage({\r\n                            securityNotice: errorLegalNoticeModalMessage,\r\n                            confirmButtonVisible: false,\r\n                            okButtonVisible: true\r\n                        })\r\n                    ))\r\n                );\r\n            })\r\n        )\r\n    );\r\n\r\n    denyLegalNoticeModal$: Observable<TypedAction<LogoutActionsTypes.LOGOUT>> = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(denyLegalNoticeModal),\r\n            concatMap(() => of(logout()))\r\n        )\r\n    );\r\n\r\n    showLegalNoticeModal$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(showLegalNoticeModal),\r\n            mergeMap(() => {\r\n                return [\r\n                    openDialog({\r\n                        componentType: LegalNoticeModalComponent,\r\n                        config: legalNoticeModalConfig\r\n                    }),\r\n                    setLegalNoticeMessage({\r\n                        securityNotice: loadingLegalNoticeModalMessage,\r\n                        confirmButtonVisible: false,\r\n                        okButtonVisible: false\r\n                    })];\r\n            })\r\n        )\r\n    );\r\n\r\n    constructor(\r\n        private readonly actions$: Actions,\r\n        private readonly secService: SecService,\r\n        private readonly store: Store\r\n    ) {\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\n\r\nimport { LegalNoticeModalComponent } from './components/legal-notice-modal/legal-notice-modal.component';\r\nimport { LegalNoticeModalEffects } from './core/effects/legal-notice-modal.effects';\r\nimport * as legalNoticeReducer from './core/reducers/legal-notice-modal.reducer';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\r\nimport { WebemButtonModule } from '@oam/cu-ui/lib/button/button.module';\r\nimport { DynamicDialogConfig, DynamicDialogRef } from 'primeng/dynamicdialog';\r\n\r\n@NgModule({\r\n    declarations: [LegalNoticeModalComponent],\r\n    imports: [\r\n        CommonModule,\r\n        ConfirmDialogModule,\r\n        StoreModule.forFeature(legalNoticeReducer.legalNoticeModalFeatureKey, legalNoticeReducer.reducer),\r\n        EffectsModule.forFeature([LegalNoticeModalEffects]),\r\n        WebemButtonModule\r\n    ],\r\n    providers: [\r\n        ConfirmationService, DynamicDialogRef, DynamicDialogConfig\r\n    ],\r\n    exports: [\r\n        LegalNoticeModalComponent\r\n    ]\r\n})\r\nexport class LegalNoticeModalModule {\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { ActionProgress } from '../model';\r\n\r\nexport enum ActionProgressTypes {\r\n    SetActionProgress = '[ActionProgress] Set Action Progress',\r\n    ClearActionProgress = '[ActionProgress] Clear Action Progress',\r\n    ClearActionProgresses = '[ActionProgress] Clear Action Progresses'\r\n}\r\n\r\nexport const setActionProgress = createAction(\r\n    ActionProgressTypes.SetActionProgress,\r\n    props<ActionProgress>()\r\n);\r\n\r\nexport const clearActionProgress = createAction(\r\n    ActionProgressTypes.ClearActionProgress,\r\n    props<ActionProgress>()\r\n);\r\n\r\nexport const clearActionProgresses = createAction(\r\n    ActionProgressTypes.ClearActionProgresses,\r\n    props<{ actionProgresses: ActionProgress[] }>()\r\n);\r\n","<p-messages [severity]=\"severity ? severity : 'info'\" [styleClass]=\"severity === 'error' ? 'error-message-container' : 'warning-message-container'\" class=\"common-message-container\">\r\n    <ng-template pTemplate>\r\n        <i [class]=\"iconClass ? iconClass : 'information-icon mdi mdi-information'\"></i>\r\n        <span class=\"custom-message\">{{text}}</span>\r\n    </ng-template>\r\n</p-messages>\r\n","import { Component, OnInit, ChangeDetectionStrategy, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ui-webem-alarm-message',\r\n  templateUrl: './alarm-message.component.html',\r\n  styleUrls: ['./alarm-message.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AlarmMessageComponent {\r\n    @Input() text: string;\r\n    @Input() severity?: string;\r\n    @Input() iconClass?: string;\r\n\r\n    constructor() { }\r\n\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { AlarmSeverityType } from '../../model/alarm-severity-type.definition';\r\n\r\n@Component({\r\n    selector: 'ui-webem-alarm-severity-icon',\r\n    templateUrl: './alarm-severity-icon.component.html',\r\n    styleUrls: ['./alarm-severity-icon.component.scss']\r\n})\r\nexport class AlarmSeverityIconComponent implements OnInit {\r\n    @Input() type: AlarmSeverityType;\r\n    @Input() hideTitle: boolean;\r\n    @Input() iconClass: string;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n","<i [class]=\"iconClass ? iconClass : 'mdi mdi-bell mdi-16px'\" [ngClass]=\"type.color\" [attr.title]=\"hideTitle ? '' : type.label\"></i>\r\n\r\n","export enum AlarmSeverityTypeColor {\r\n    critical = 'red',\r\n    major = 'orange',\r\n    minor = 'yellow',\r\n    warning = 'blue',\r\n    indeterminate = 'gray'\r\n}\r\n","export enum AlarmSeverityTypeLabel {\r\n    critical = 'Critical',\r\n    major = 'Major',\r\n    minor = 'Minor',\r\n    warning = 'Warning',\r\n    indeterminate = 'Indeterminate'\r\n}\r\n","import { AlarmSeverityTypeColor } from '../model/alarm-severity-type-color.definition';\r\nimport { AlarmSeverityTypeLabel } from '../model/alarm-severity-type-label.definition';\r\nimport { AlarmSeverityType } from '../model/alarm-severity-type.definition';\r\nimport { AlarmSeverities } from '../model/alarm-severities.definition';\r\n\r\nexport type AlarmSeverityMap = {\r\n    [k in keyof typeof AlarmSeverities]: AlarmSeverityType;\r\n};\r\n\r\nexport const alarmSeverity: AlarmSeverityMap = {\r\n    critical: { color: AlarmSeverityTypeColor.critical, label: AlarmSeverityTypeLabel.critical },\r\n    major: { color: AlarmSeverityTypeColor.major, label: AlarmSeverityTypeLabel.major },\r\n    minor: { color: AlarmSeverityTypeColor.minor, label: AlarmSeverityTypeLabel.minor },\r\n    warning: { color: AlarmSeverityTypeColor.warning, label: AlarmSeverityTypeLabel.warning },\r\n    indeterminate: { color: AlarmSeverityTypeColor.indeterminate, label: AlarmSeverityTypeLabel.indeterminate }\r\n} as AlarmSeverityMap;\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Alarm } from '@oam/cu-asm-api/models';\r\nimport { AlarmSeverityType } from '../model/alarm-severity-type.definition';\r\nimport { maxBy } from 'lodash';\r\nimport { alarmSeverity } from '../model/alarm-severity.definitions';\r\n\r\nconst mapSeverityToNumber = {\r\n    critical: 5,\r\n    major: 4,\r\n    minor: 3,\r\n    warning: 2,\r\n    indeterminate: 1\r\n};\r\n\r\n@Pipe({\r\n    name: 'getHighestAlarmSeverity',\r\n    pure: true\r\n})\r\nexport class GetHighestAlarmSeverityPipe implements PipeTransform {\r\n    transform(alarms: Alarm[] | null): AlarmSeverityType | undefined {\r\n        const highestSeverityAlarm = maxBy(alarms, (alarm: Alarm) => mapSeverityToNumber[alarm.severity]);\r\n        if (highestSeverityAlarm) {\r\n            return alarmSeverity[highestSeverityAlarm.severity];\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n}\r\n","<div [class]=\"['alarm-severity-block', backgroundColorClass]\"\r\n     [style.color]=\"fontColor\">\r\n    <div class=\"content\">\r\n        <span class=\"alarm-severity-name\">\r\n            {{severity}}\r\n        </span>\r\n        <span class=\"alarm-severity-amount\">\r\n            <ng-template *ngIf=\"amount !== 'Undefined value'; then withAmount else noAmount\">\r\n                {{amount}}\r\n            </ng-template>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #withAmount>\r\n    <span [style.font-size.px]=\"fontSize\">{{amount}}</span>\r\n</ng-template>\r\n\r\n<ng-template #noAmount>\r\n    -\r\n</ng-template>\r\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\r\nimport { AlarmCountBySeverity } from './AlarmCountBySeverity';\r\n\r\nconst normalFontSizeRange = 9999;\r\nconst nextFontSizeRange = 9999999;\r\n\r\n@Component({\r\n    selector: 'ui-webem-alarm-severity-dashboard-panel',\r\n    templateUrl: './alarm-severity-dashboard-panel.component.html',\r\n    styleUrls: ['./alarm-severity-dashboard-panel.component.scss']\r\n})\r\nexport class AlarmSeverityDashboardPanelComponent implements OnInit, OnChanges {\r\n    @Input() backgroundColorClass: string;\r\n    @Input() severity: string;\r\n    @Input() amount: AlarmCountBySeverity;\r\n    @Input() fontColor: 'black' | 'white';\r\n\r\n    fontSize = 22;\r\n\r\n    constructor() {}\r\n\r\n    ngOnInit() {}\r\n\r\n    ngOnChanges(): void {\r\n        if (typeof this.amount === 'number' && this.amount > normalFontSizeRange && this.amount < nextFontSizeRange) {\r\n            this.fontSize = 15;\r\n        } else if (typeof this.amount === 'number' && this.amount > nextFontSizeRange) {\r\n            this.fontSize = 11;\r\n        }\r\n    }\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { AlarmCountBySeverity } from '../alarm-severity-dashboard-panel/AlarmCountBySeverity';\r\n\r\n@Component({\r\n    selector: 'ui-webem-critical-alarms-counter-block',\r\n    templateUrl: './critical-alarms-counter-block.component.html',\r\n    styleUrls: ['./critical-alarms-counter-block.component.scss']\r\n})\r\nexport class CriticalAlarmsCounterBlockComponent implements OnInit {\r\n    @Input() amount: AlarmCountBySeverity;\r\n    @Output() panelClick = new EventEmitter<void>();\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","<ui-webem-alarm-severity-dashboard-panel\r\n    (click)=\"panelClick.next()\"\r\n    [amount]=\"amount\"\r\n    backgroundColorClass=\"critical\"\r\n    fontColor=\"white\"\r\n    severity=\"Critical\">\r\n</ui-webem-alarm-severity-dashboard-panel>\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { AlarmCountBySeverity } from '../alarm-severity-dashboard-panel/AlarmCountBySeverity';\r\n\r\n@Component({\r\n    selector: 'ui-webem-major-alarms-counter-block',\r\n    templateUrl: './major-alarms-counter-block.component.html',\r\n    styleUrls: ['./major-alarms-counter-block.component.scss']\r\n})\r\nexport class MajorAlarmsCounterBlockComponent implements OnInit {\r\n    @Input() amount: AlarmCountBySeverity;\r\n    @Output() panelClick = new EventEmitter<void>();\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","<ui-webem-alarm-severity-dashboard-panel\r\n    (click)=\"panelClick.next()\"\r\n    [amount]=\"amount\"\r\n    backgroundColorClass=\"major\"\r\n    fontColor=\"black\"\r\n    severity=\"Major\">\r\n</ui-webem-alarm-severity-dashboard-panel>\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { AlarmCountBySeverity } from '../alarm-severity-dashboard-panel/AlarmCountBySeverity';\r\n\r\n@Component({\r\n    selector: 'ui-webem-minor-alarms-counter-block',\r\n    templateUrl: './minor-alarms-counter-block.component.html',\r\n    styleUrls: ['./minor-alarms-counter-block.component.scss']\r\n})\r\nexport class MinorAlarmsCounterBlockComponent implements OnInit {\r\n    @Input() amount: AlarmCountBySeverity;\r\n    @Output() panelClick = new EventEmitter<void>();\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","<ui-webem-alarm-severity-dashboard-panel\r\n    (click)=\"panelClick.next()\"\r\n    [amount]=\"amount\"\r\n    backgroundColorClass=\"minor\"\r\n    fontColor=\"black\"\r\n    severity=\"Minor\">\r\n</ui-webem-alarm-severity-dashboard-panel>\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { AlarmCountBySeverity } from '../alarm-severity-dashboard-panel/AlarmCountBySeverity';\r\n\r\n@Component({\r\n    selector: 'ui-webem-warning-alarms-counter-block',\r\n    templateUrl: './warning-alarms-counter-block.component.html',\r\n    styleUrls: ['./warning-alarms-counter-block.component.scss']\r\n})\r\nexport class WarningAlarmsCounterBlockComponent implements OnInit {\r\n    @Input() amount: AlarmCountBySeverity;\r\n    @Output() panelClick = new EventEmitter<void>();\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","<ui-webem-alarm-severity-dashboard-panel\r\n    (click)=\"panelClick.next()\"\r\n    [amount]=\"amount\"\r\n    backgroundColorClass=\"warning\"\r\n    fontColor=\"white\"\r\n    severity=\"Warning\">\r\n</ui-webem-alarm-severity-dashboard-panel>\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { AlarmCountBySeverity } from '../alarm-severity-dashboard-panel/AlarmCountBySeverity';\r\n\r\n@Component({\r\n    selector: 'ui-webem-alarms-counter-panel',\r\n    templateUrl: './alarms-counter-panel.component.html',\r\n    styleUrls: ['./alarms-counter-panel.component.scss']\r\n})\r\nexport class AlarmsCounterPanelComponent implements OnInit {\r\n\r\n    @Input() criticalAlarmsNumber: AlarmCountBySeverity;\r\n    @Input() majorAlarmsNumber: AlarmCountBySeverity;\r\n    @Input() minorAlarmsNumber: AlarmCountBySeverity;\r\n    @Input() warningAlarmsNumber: AlarmCountBySeverity;\r\n\r\n    @Output() criticalClick = new EventEmitter<void>();\r\n    @Output() majorClick = new EventEmitter<void>();\r\n    @Output() minorClick = new EventEmitter<void>();\r\n    @Output() warningClick = new EventEmitter<void>();\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","<ui-webem-critical-alarms-counter-block\r\n    [amount]=\"criticalAlarmsNumber\"\r\n    (panelClick)=\"criticalClick.next()\">\r\n</ui-webem-critical-alarms-counter-block>\r\n\r\n<ui-webem-major-alarms-counter-block\r\n    [amount]=\"majorAlarmsNumber\"\r\n    (panelClick)=\"majorClick.next()\">\r\n</ui-webem-major-alarms-counter-block>\r\n\r\n<ui-webem-minor-alarms-counter-block\r\n    [amount]=\"minorAlarmsNumber\"\r\n    (panelClick)=\"minorClick.next()\">\r\n</ui-webem-minor-alarms-counter-block>\r\n\r\n<ui-webem-warning-alarms-counter-block\r\n    [amount]=\"warningAlarmsNumber\"\r\n    (panelClick)=\"warningClick.next()\">\r\n</ui-webem-warning-alarms-counter-block>\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Alarm } from '@oam/cu-fm-api/models/alarm';\r\nimport { LazyLoadEvent } from 'primeng/api';\r\nimport { AlarmCountBySeverity } from '../alarm-severity-dashboard-panel/AlarmCountBySeverity';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'ui-webem-alarms-dashboard-panel',\r\n    templateUrl: './alarms-dashboard-panel.component.html',\r\n    styleUrls: ['./alarms-dashboard-panel.component.scss']\r\n})\r\nexport class AlarmsDashboardPanelComponent implements OnInit {\r\n\r\n    @Input() criticalAlarmsNumber: AlarmCountBySeverity;\r\n    @Input() majorAlarmsNumber: AlarmCountBySeverity;\r\n    @Input() minorAlarmsNumber: AlarmCountBySeverity;\r\n    @Input() warningAlarmsNumber: AlarmCountBySeverity;\r\n\r\n    @Input() alarms: Alarm[];\r\n    @Input() totalNumberOfAlarms: Observable<number>;\r\n    @Input() loading: boolean;\r\n\r\n    @Input() itemsPerPage: number;\r\n\r\n    @Output() PageChanged = new EventEmitter<LazyLoadEvent>();\r\n\r\n    @Output() criticalClick = new EventEmitter<void>();\r\n    @Output() majorClick = new EventEmitter<void>();\r\n    @Output() minorClick = new EventEmitter<void>();\r\n    @Output() warningClick = new EventEmitter<void>();\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","<ui-webem-alarms-counter-panel\r\n    [criticalAlarmsNumber]=\"criticalAlarmsNumber\"\r\n    [majorAlarmsNumber]=\"majorAlarmsNumber\"\r\n    [minorAlarmsNumber]=\"minorAlarmsNumber\"\r\n    [warningAlarmsNumber]=\"warningAlarmsNumber\"\r\n    (criticalClick)=\"criticalClick.next()\"\r\n    (majorClick)=\"majorClick.next()\"\r\n    (minorClick)=\"minorClick.next()\"\r\n    (warningClick)=\"warningClick.next()\">\r\n</ui-webem-alarms-counter-panel>\r\n\r\n<ui-webem-dashboard-alarms-table\r\n    [itemsPerPage]=\"itemsPerPage\"\r\n    [alarms]=\"alarms\"\r\n    [loading]=\"loading\"\r\n    [totalNumberOfAlarms$]=\"totalNumberOfAlarms\"\r\n    (PageChanged)=\"PageChanged.next($event)\">\r\n</ui-webem-dashboard-alarms-table>\r\n","<div class=\"table-with-pagination-shadow-wrapper\">\r\n    <p-table\r\n        #table\r\n        [value]=\"alarms\"\r\n        [rows]=\"itemsPerPage\"\r\n        [loading]=\"loading\"\r\n        (onLazyLoad)=\"onLoadNewPage($event)\"\r\n        [resizableColumns]=\"true\"\r\n        [autoLayout]=\"true\"\r\n        [lazy]=\"true\"\r\n        [loadingIcon]=\"SPINNER_CLASS\"\r\n        dataKey=\"uuid\"\r\n        [sortField]=\"'appearTime'\"\r\n        class=\"dashboard-alarms-table\">\r\n        <ng-template pTemplate=\"header\">\r\n            <tr>\r\n                <th pResizableColumn pSortableColumn=\"severity\" class=\"alarm-severity-column\">Severity<p-sortIcon\r\n                    [field]=\"'severity'\">\r\n                </p-sortIcon>\r\n                </th>\r\n\r\n                <th pResizableColumn pSortableColumn=\"alarmId\" class=\"alarm-id-column\">Alarm ID<p-sortIcon\r\n                    [field]=\"'alarmId'\">\r\n                </p-sortIcon>\r\n                </th>\r\n                <th pResizableColumn pSortableColumn=\"alarmName\" class=\"alarm-name-column\">Alarm name<p-sortIcon\r\n                    [field]=\"'alarmName'\">\r\n                </p-sortIcon>\r\n                </th>\r\n\r\n                <th pResizableColumn pSortableColumn=\"faultSource\" class=\"alarm-alarming-obj-column\">Alarming resource<p-sortIcon\r\n                    [field]=\"'faultSource'\">\r\n                </p-sortIcon>\r\n                </th>\r\n            </tr>\r\n            <tr *ngIf=\"!(totalNumberOfAlarms$ | async) && !loading\">\r\n                <td colspan=\"8\" class=\"empty-table\">No data</td>\r\n            </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"body\" let-alarm>\r\n            <tr [pSelectableRow]=\"alarm\" [id]=\"'ALARM_' + alarm.uuid\">\r\n                <td class=\"icon-content ui-resizable-column\">\r\n                    <ui-webem-alarm-severity-icon [type]=\"alarmSeverity[alarm.severity]\">\r\n                    </ui-webem-alarm-severity-icon>\r\n                </td>\r\n                <td class=\"ui-resizable-column\">{{ alarm.alarmId | nullableValue }}</td>\r\n                <td class=\"ui-resizable-column\">{{ alarm.alarmName | nullableValue }}</td>\r\n                <td class=\"distname-value-content ui-resizable-column\"\r\n                    [title]=\"alarm.alarmingObject | nullableValue\">\r\n                    {{ alarm.alarmingObject | nullableValue }}\r\n                </td>\r\n            </tr>\r\n        </ng-template>\r\n    </p-table>\r\n    <ui-webem-table-pagination\r\n        [itemsPerPage]=\"itemsPerPage\"\r\n        [totalNumberOfItems]=\"(totalNumberOfAlarms$ | async)!\"\r\n        (PageChange)=\"onPageChange($event)\"\r\n        *ngIf=\"totalNumberOfAlarms$ | async\">\r\n    </ui-webem-table-pagination>\r\n</div>\r\n","import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\r\nimport { Alarm } from '@oam/cu-fm-api/models/alarm';\r\nimport { Table } from 'primeng/table';\r\nimport { LazyLoadEvent } from 'primeng/api';\r\nimport { alarmSeverity } from '../../../alarm-severity-icon/model/alarm-severity.definitions';\r\nimport { omit } from 'lodash';\r\nimport { Observable } from 'rxjs';\r\nimport { SPINNER_CLASS } from '@oam/cu-ui/lib/spinner/models/spinner-class-constants';\r\n\r\n\r\n@Component({\r\n    selector: 'ui-webem-dashboard-alarms-table',\r\n    templateUrl: './dashboard-alarms-table.component.html',\r\n    styleUrls: ['./dashboard-alarms-table.component.scss']\r\n})\r\nexport class DashboardAlarmsTableComponent {\r\n    @Input() alarms: Alarm[];\r\n    @Input() totalNumberOfAlarms$: Observable<number>;\r\n    @Input() loading: boolean;\r\n    @Input() itemsPerPage: number;\r\n\r\n    @ViewChild('table', { static: true }) table: Table;\r\n\r\n    @Output() PageChanged = new EventEmitter<LazyLoadEvent>();\r\n\r\n    alarmSeverity = alarmSeverity;\r\n    event: LazyLoadEvent;\r\n    readonly SPINNER_CLASS = SPINNER_CLASS;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    onLoadNewPage($event: LazyLoadEvent) {\r\n        const partialEvent = omit($event, ['first']);\r\n        this.event = { ...this.event, ...partialEvent};\r\n        this.event.first = this.event.first || 1;\r\n        this.PageChanged.emit(this.event);\r\n    }\r\n\r\n    onPageChange(pageNumber: number) {\r\n        this.event = { ...this.event, first: pageNumber };\r\n        this.PageChanged.emit(this.event);\r\n    }\r\n}\r\n","<div class=\"table-with-pagination-shadow-wrapper\">\r\n    <p-table\r\n        #table\r\n        class=\"alarms-table\"\r\n        [value]=\"alarms\"\r\n        [customSort]=\"true\"\r\n        selectionMode=\"single\"\r\n        (onRowSelect)=\"onAlarmSelect($event)\"\r\n        (onRowUnselect)=\"onRowUnselect()\"\r\n        [resizableColumns]=\"true\"\r\n        [autoLayout]=\"true\"\r\n        [lazy]=\"true\"\r\n        [loadingIcon]=\"SPINNER_CLASS\"\r\n        (onLazyLoad)=\"onLoadNewPage($event)\"\r\n        [rows]=\"itemsPerPage\"\r\n        [loading]=\"loading\"\r\n        dataKey=\"uuid\"\r\n        [sortField]=\"'appearTime'\">\r\n        <ng-template pTemplate=\"header\">\r\n            <tr id=\"alarms-table-headers\">\r\n                <th  id=\"severity-header\" pResizableColumn pSortableColumn=\"severity\" class=\"alarm-severity-column\">Severity<p-sortIcon\r\n                    [field]=\"'severity'\">\r\n                </p-sortIcon>\r\n                </th>\r\n                <th id=\"appeared-header\" pResizableColumn pSortableColumn=\"appearTime\" class=\"alarm-time-column\">Appeared<p-sortIcon\r\n                    [field]=\"'appearTime'\">\r\n                </p-sortIcon>\r\n                </th>\r\n                <th id=\"cleared-header\" *ngIf=\"isHistoricalAlarm()\" pResizableColumn pSortableColumn=\"clearedTime\" class=\"alarm-time-column\">Cleared<p-sortIcon\r\n                    [field]=\"'clearedTime'\">\r\n                </p-sortIcon>\r\n                </th>\r\n                <th id=\"alarm-id-header\" pResizableColumn pSortableColumn=\"alarmId\" class=\"alarm-id-column\">Alarm ID<p-sortIcon\r\n                    [field]=\"'alarmId'\">\r\n                </p-sortIcon>\r\n                </th>\r\n                <th id=\"alarm-name-header\" pResizableColumn pSortableColumn=\"alarmName\" class=\"alarm-name-column\">Alarm name<p-sortIcon\r\n                    [field]=\"'alarmName'\">\r\n                </p-sortIcon>\r\n                </th>\r\n                <th id=\"fault-id-header\" pResizableColumn pSortableColumn=\"faultId\" class=\"alarm-id-column\">Fault ID<p-sortIcon\r\n                    [field]=\"'faultId'\">\r\n                </p-sortIcon>\r\n                </th>\r\n                <th id=\"fault-name-header\" pResizableColumn pSortableColumn=\"faultName\" class=\"alarm-name-column\">Fault name<p-sortIcon\r\n                    [field]=\"'faultName'\">\r\n                </p-sortIcon>\r\n                </th>\r\n                <th id=\"alarming-object-header\" pResizableColumn pSortableColumn=\"faultSource\" class=\"alarm-alarming-obj-column\">Alarming object<p-sortIcon\r\n                    [field]=\"'faultSource'\">\r\n                </p-sortIcon>\r\n                </th>\r\n            </tr>\r\n            <tr *ngIf=\"!(totalNumberOfAlarms$ | async)! && !loading\">\r\n                <td colspan=\"8\" id=\"alarms-empty-table\" class=\"empty-table\">No data</td>\r\n            </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"body\" let-alarm>\r\n            <tr [pSelectableRow]=\"alarm\" [id]=\"'ALARM_' + alarm.uuid\">\r\n                <td class=\"icon-content ui-resizable-column alarm-severity-column\">\r\n                    <ui-webem-alarm-severity-icon [type]=\"alarmSeverity[alarm.severity]\">\r\n                    </ui-webem-alarm-severity-icon>\r\n                </td>\r\n                <td [id]=\"'alarm-time-column-' + alarm.uuid\" class=\"ui-resizable-column alarm-time-column\" title=\"{{ alarm.appearTime | nullableValue }}\">{{ alarm.appearTime | nullableValue }}</td>\r\n                <td [id]=\"'history-alarm-time-column-'  + alarm.uuid\" class=\"ui-resizable-column alarm-time-column\" title=\"{{ alarm.clearedTime | nullableValue }}\" *ngIf=\"isHistoricalAlarm()\">{{ alarm.clearedTime | nullableValue }}</td>\r\n                <td [id]=\"'alarm-id-column-'  + alarm.uuid\" class=\"ui-resizable-column alarm-id-column\">{{ alarm.alarmId | nullableValue }}</td>\r\n                <td [id]=\"'alarm-name-column-'  + alarm.uuid\" class=\"ui-resizable-column alarm-name-column\" title=\"{{ alarm.alarmName | nullableValue }}\">{{ alarm.alarmName | nullableValue }}</td>\r\n                <td [id]=\"'alarm-fault-id-column-'  + alarm.uuid\" class=\"ui-resizable-column alarm-id-column\">{{ alarm.faultId | nullableValue }}</td>\r\n                <td [id]=\"'alarm-fault-name-column-'  + alarm.uuid\" class=\"ui-resizable-column alarm-name-column\" title=\"{{ alarm.faultName | nullableValue }}\">{{ alarm.faultName | nullableValue }}</td>\r\n                <td [id]=\"'alarm-alarming-obj-column-'  + alarm.uuid\" class=\"ui-resizable-column alarm-alarming-obj-column\" title=\"{{ alarm.alarmingObject | nullableValue }}\">{{ alarm.alarmingObject | nullableValue }}</td>\r\n            </tr>\r\n        </ng-template>\r\n    </p-table>\r\n    <ui-webem-table-pagination\r\n        [itemsPerPage]=\"itemsPerPage\"\r\n        [totalNumberOfItems]=\"(totalNumberOfAlarms$ | async)!\"\r\n        (PageChange)=\"onPageChange($event)\"\r\n        >\r\n    </ui-webem-table-pagination>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { Alarm } from '@oam/cu-fm-api/models/alarm';\r\nimport { alarmSeverity } from '../../../alarm-severity-icon/model/alarm-severity.definitions';\r\n\r\nimport { Table } from 'primeng/table';\r\nimport { LazyLoadEvent } from 'primeng/api';\r\nimport { applyPrimeTablePatch } from '../../../prime-table-workaround/prime-table-workaround';\r\nimport { omit } from 'lodash';\r\nimport { Observable } from 'rxjs';\r\nimport { SPINNER_CLASS } from '@oam/cu-ui/lib/spinner/models/spinner-class-constants';\r\n\r\n\r\n@Component({\r\n    selector: 'ui-webem-alarms-table',\r\n    templateUrl: './alarms-table.component.html',\r\n    styleUrls: ['./alarms-table.component.scss']\r\n})\r\nexport class AlarmsTableComponent implements OnInit {\r\n    event: LazyLoadEvent;\r\n    @Input() alarms: Alarm[];\r\n    @Input() totalNumberOfAlarms$: Observable<number>;\r\n    @Input() loading: boolean;\r\n    @Input() totalRecords: number;\r\n    @Input() itemsPerPage: number;\r\n    @Input() alarmType: string;\r\n\r\n    @ViewChild('table', { static: true }) table: Table;\r\n\r\n    @Output()\r\n    PageChanged = new EventEmitter();\r\n\r\n    @Output()\r\n    AlarmSelected = new EventEmitter<Alarm>();\r\n\r\n    @Output()\r\n    clearSelection = new EventEmitter();\r\n\r\n    alarmSeverity = alarmSeverity;\r\n\r\n    readonly SPINNER_CLASS = SPINNER_CLASS;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n        applyPrimeTablePatch(this.table);\r\n    }\r\n\r\n    onAlarmSelect({ data }: { data: Alarm }) {\r\n        this.AlarmSelected.emit(data);\r\n    }\r\n\r\n    onRowUnselect() {\r\n        this.clearSelection.emit();\r\n    }\r\n\r\n    onLoadNewPage($event: LazyLoadEvent) {\r\n        const partialEvent = omit($event, ['first']);\r\n        this.event = { ...this.event, ...partialEvent};\r\n        this.event.first = this.event.first || 1;\r\n        this.PageChanged.emit(this.event);\r\n    }\r\n\r\n    onPageChange(pageNumber: number) {\r\n        this.event = { ...this.event, first: pageNumber };\r\n        this.PageChanged.emit(this.event);\r\n    }\r\n\r\n    isHistoricalAlarm() {\r\n        return this.alarmType === 'historical';\r\n    }\r\n}\r\n","import { Action } from '@ngrx/store';\r\n\r\nexport enum CompatibilityBrowserActionTypes {\r\n    BrowserInformationClosed = '[User] [IncompatibilityBrowser] Browser incompatibility info closed',\r\n    YourBrowserIsSupport = '[IncompatibilityBrowser] Your browser is support with app',\r\n    YourBrowserIsNotSupport = '[IncompatibilityBrowser] Your browser is not support with app'\r\n}\r\n\r\nexport class BrowserIncompatibilityInfoClosed implements Action {\r\n    readonly type = CompatibilityBrowserActionTypes.BrowserInformationClosed;\r\n}\r\n\r\nexport class BrowserIsSupport implements Action {\r\n    readonly type = CompatibilityBrowserActionTypes.YourBrowserIsSupport;\r\n}\r\n\r\nexport class BrowserIsNotSupport implements Action {\r\n    readonly type = CompatibilityBrowserActionTypes.YourBrowserIsNotSupport;\r\n}\r\n\r\nexport type CompatibilityBrowserActions = BrowserIsSupport |\r\n    BrowserIsNotSupport | BrowserIncompatibilityInfoClosed;\r\n","const browserSupportedNames = {\r\n    names: [\r\n        'chrome',\r\n        'firefox'\r\n    ]\r\n};\r\n\r\nexport const BrowserCompatibilityConfig = {\r\n    browserSupportedNames\r\n};\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { BrowserCompatibilityState } from '../reducers/compatibility-browser.reducer';\r\n\r\nexport const selectBrowserCompatibilityState = createFeatureSelector<BrowserCompatibilityState>('browserCompatibility');\r\n\r\nexport const selectBrowserCompatibility = createSelector(\r\n    selectBrowserCompatibilityState,\r\n    browserCompatibility => browserCompatibility.browserIsSupport || browserCompatibility.browserInformationClosed\r\n);\r\n","<div *ngIf=\"!(browserCompatibility$ | async)\" class=\"browser-incompatibility-bar\">\r\n    <span class=\"browser-incompatibility-bar-text\" *ngIf=\"!isSupported\">\r\n        This web browser is currently not supported. Please use Google Chrome or Mozilla Firefox\r\n    </span>\r\n    <ui-webem-button class=\"close-button\" (action)=\"closeInformation()\" [model]=\"closeButton\"></ui-webem-button>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { getParser } from 'bowser';\r\nimport { BrowserCompatibilityConfig } from './config';\r\nimport {\r\n    BrowserIncompatibilityInfoClosed,\r\n    BrowserIsSupport,\r\n    BrowserIsNotSupport\r\n} from '../../actions/compatibility-browser.actions';\r\nimport { ButtonThickness } from '../../../button/model/button-thickness.enum';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { selectBrowserCompatibility } from '../../selectors/browser-compatibility.selectors';\r\nimport { AccountConfigService } from '@oam/account-shared/lib/accounts-management/services/account-config.service';\r\n\r\nconst CHROME = 'chrome';\r\nconst FIREFOX = 'firefox';\r\nconst BRAVE = 'brave';\r\n@Component({\r\n    selector: 'ui-webem-browser-incompatibility-bar',\r\n    templateUrl: './browser-incompatibility-bar.component.html',\r\n    styleUrls: ['./browser-incompatibility-bar.component.scss']\r\n})\r\nexport class BrowserIncompatibilityBarComponent implements OnInit {\r\n    browserCompatibility$: Observable<boolean>;\r\n    browserName: string;\r\n    isSupported: boolean;\r\n    closeButton = {\r\n        icon: 'mdi mdi-close',\r\n        thickness: ButtonThickness.Thin,\r\n        theme: ButtonTheme.Secondary\r\n    } as ButtonModel;\r\n\r\n    constructor(private readonly store: Store,\r\n                private readonly accountConfigService: AccountConfigService) {}\r\n\r\n    ngOnInit() {\r\n        this.browserCompatibility$ = this.store.select(selectBrowserCompatibility);\r\n        this.checkBrowserCompatibility();\r\n    }\r\n\r\n    checkBrowserCompatibility() {\r\n        const browser = getParser(window.navigator.userAgent);\r\n        this.createInfoMessage(browser);\r\n    }\r\n\r\n    closeInformation() {\r\n        this.store.dispatch(new BrowserIncompatibilityInfoClosed());\r\n    }\r\n\r\n    createInfoMessage(browser: any): void {\r\n        this.browserName = this.getBrowserName(browser);\r\n        this.isSupported = BrowserCompatibilityConfig.browserSupportedNames.names.includes(this.browserName);\r\n\r\n        this.store.dispatch(this.isSupported ? new BrowserIsSupport() :\r\n            new BrowserIsNotSupport());\r\n    }\r\n\r\n    getBrowserName(browser: any): string {\r\n        const name = browser.getBrowserName().toLocaleLowerCase();\r\n        const isBrave = name === CHROME && this.isBrave();\r\n\r\n        return isBrave ? BRAVE : name;\r\n    }\r\n\r\n    isBrave(): boolean {\r\n        const navigator = window.navigator as any;\r\n\r\n        return navigator.brave !== undefined;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonWithMenuComponent } from './components/button-with-menu/button-with-menu.component';\r\nimport { WebemButtonModule } from '../button/button.module';\r\nimport { MenuModule } from 'primeng/menu';\r\n\r\n@NgModule({\r\n    exports: [ButtonWithMenuComponent],\r\n    declarations: [\r\n        ButtonWithMenuComponent,\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        WebemButtonModule,\r\n        MenuModule\r\n    ],\r\n})\r\nexport class ButtonWithMenuModule {\r\n}\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { MenuAction } from '../../model/menu-action';\r\nimport { Menu } from 'primeng/menu';\r\nimport { isEqual } from 'lodash';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ButtonLength } from '../../../button/model/button-length.enum';\r\nimport { ButtonOptions } from '../../../button/model/button-options.definition';\r\nimport { NOT_ACCESSIBLE_FOR_CURRENT_ROLE_TITLE, RoleAccessService } from '@oam/role-access-core';\r\n\r\n@Component({\r\n    selector: 'ui-webem-button-with-menu',\r\n    templateUrl: './button-with-menu.component.html',\r\n    styleUrls: ['./button-with-menu.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ButtonWithMenuComponent implements OnDestroy, OnChanges {\r\n    @Input() menuOptions: MenuAction[];\r\n    @Input() buttonConfig?: ButtonModel;\r\n    @Input() options: ButtonOptions;\r\n    @Input() scrollableContainer?: ElementRef | HTMLElement;\r\n    @Input() id?: string;\r\n\r\n    @ViewChild('menu') menu: Menu;\r\n\r\n    constructor(private roleAccessService: RoleAccessService) {}\r\n\r\n    readonly ACTIONS_BUTTON_MODEL: ButtonModel = {\r\n        title: 'Actions',\r\n        icon: 'mdi mdi-dots-vertical',\r\n        theme: ButtonTheme.Secondary,\r\n        length: ButtonLength.Long\r\n    };\r\n    private boundScrollEventTargets: HTMLElement[] = [];\r\n    btnConfig: ButtonModel;\r\n    hideMenu = () => this.menu.hide();\r\n\r\n    ngOnInit() {\r\n        if (!this.buttonConfig) {\r\n            this.btnConfig = this.ACTIONS_BUTTON_MODEL;\r\n        } else {\r\n            this.btnConfig = this.buttonConfig;\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.buttonConfig) this.btnConfig = this.buttonConfig;\r\n\r\n        if (!isEqual(changes.menuOptions?.previousValue, changes.menuOptions?.currentValue)) {\r\n            this.menuOptions.forEach((option) => {\r\n                if (this.roleAccessService.isForbiddenForCurrentRole(option.roleAccessFlag)) {\r\n                    option.disabled = true;\r\n                    option.title = NOT_ACCESSIBLE_FOR_CURRENT_ROLE_TITLE;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindScrollListeners();\r\n    }\r\n\r\n    onMenuShow() {\r\n        if (!this.scrollableContainer) return;\r\n\r\n        const scrollableContainerElement: HTMLElement = (this.scrollableContainer as ElementRef).nativeElement ?\r\n            (this.scrollableContainer as ElementRef).nativeElement :\r\n            this.scrollableContainer;\r\n        this.bindScrollListeners(scrollableContainerElement);\r\n    }\r\n\r\n    onMenuHide() {\r\n        this.unbindScrollListeners();\r\n    }\r\n\r\n    bindScrollListeners(scrollableContainer: HTMLElement) {\r\n        scrollableContainer.addEventListener('scroll', this.hideMenu);\r\n        this.boundScrollEventTargets.push(scrollableContainer);\r\n    }\r\n\r\n    unbindScrollListeners() {\r\n        if (this.boundScrollEventTargets.length === 0) return;\r\n\r\n        this.boundScrollEventTargets.forEach(target =>\r\n            target.removeEventListener('scroll', this.hideMenu)\r\n        );\r\n        this.boundScrollEventTargets = [];\r\n    }\r\n}\r\n","<ui-webem-button\r\n    [model]=\"btnConfig\"\r\n    [options]=\"options\"\r\n    [id]=\"id ? id : ''\"\r\n    (click)=\"menu.toggle($event)\">\r\n</ui-webem-button>\r\n\r\n<p-menu #menu\r\n    styleClass=\"small-ui-menu\"\r\n    [style]=\"{ 'left.px': 0, 'top.px': 0 }\"\r\n    [model]=\"menuOptions\"\r\n    [popup]=\"true\" appendTo=\"body\"\r\n    (onShow)=\"onMenuShow()\" (onHide)=\"onMenuHide()\">\r\n</p-menu>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonComponent } from './components/button/button.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ButtonModule } from 'primeng/button';\r\n\r\n@NgModule({\r\n    declarations: [ButtonComponent],\r\n    exports: [ButtonComponent],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ButtonModule\r\n    ]\r\n})\r\nexport class WebemButtonModule {\r\n}\r\n","<input type=\"file\" hidden\r\n    *ngIf=\"options && options.fileUpload\"\r\n    [accept]=\"options.accept || '*/*'\"\r\n    [(ngModel)]=\"filePath\"\r\n    autocomplete=\"off\"\r\n    (change)=\"uploadFile($event)\"\r\n    #uploader />\r\n\r\n<p-button\r\n    [id]=\"id\"\r\n    [type]=\"type\"\r\n    [label]=\"model.label ? model.label : ''\"\r\n    [icon]=\"model.icon ? model.icon : ''\"\r\n    [iconPos]=\"!model.label ? 'left' : model.iconPosition || 'left'\"\r\n    [ngStyle]=\"styles\"\r\n    [styleClass]=\"classes\"\r\n    (onClick)=\"onClick($event)\"\r\n    (mousedown)=\"onMouseDown($event)\"\r\n    (mouseup)=\"onMouseUp($event)\"\r\n    (mouseout)=\"onMouseOut($event)\"\r\n    [title]=\"showTitle && model.title ? model.title : title\"\r\n    [disabled]=\"disabled\">\r\n</p-button>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { ButtonModel } from '../../model/button-model.definition';\r\nimport { ButtonOptions } from '../../model/button-options.definition';\r\nimport { ButtonEvent } from '../../model/button-event.definition';\r\nimport { ButtonTheme } from '../../model/button-theme.enum';\r\nimport { ButtonLength } from '../../model/button-length.enum';\r\nimport { ButtonThickness } from '../../model/button-thickness.enum';\r\n\r\n@Component({\r\n    selector: 'ui-webem-button',\r\n    templateUrl: './button.component.html',\r\n    styleUrls: ['./button.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ButtonComponent implements OnInit, OnChanges {\r\n    @Input() model: ButtonModel;\r\n    @Input() disabled = false;\r\n    @Input() showTitle = true;\r\n    @Input() title = '';\r\n    @Input() id = '';\r\n    @Input() options?: ButtonOptions;\r\n    @Input() type: string;\r\n    @Output() action = new EventEmitter<ButtonEvent>();\r\n    @Output() mousedown = new EventEmitter<MouseEvent>();\r\n    @Output() mouseup = new EventEmitter<MouseEvent>();\r\n    @Output() mouseout = new EventEmitter<MouseEvent>();\r\n\r\n    @ViewChild('uploader') uploader: ElementRef<HTMLInputElement>;\r\n\r\n    filePath: string;\r\n    styles = {};\r\n    classes = '';\r\n\r\n    ngOnInit(): void {\r\n        this.update();\r\n    }\r\n\r\n    ngOnChanges(): void {\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        this.setStyles();\r\n        this.setClasses();\r\n    }\r\n\r\n    setClasses() {\r\n        const classes: string[] = [\r\n            'custom-button',\r\n            this.model.theme || ButtonTheme.Default,\r\n            this.model.length || ButtonLength.Default,\r\n            this.model.thickness || ButtonThickness.Default\r\n        ];\r\n\r\n        if (this.options) {\r\n            const conditions: [string, boolean][] = [\r\n                ['no-horizontal-paddings', !!(this.options.forceWidth || this.options.noPaddings)],\r\n                ['no-vertical-paddings', !!(this.options.forceHeight || this.options.noPaddings)],\r\n                ['inherit-width', !!this.options.forceWidth],\r\n                ['inherit-height', !!this.options.forceHeight],\r\n                ['inherit-min-width', !!this.options.minWidth],\r\n                ['inherit-min-height', !!this.options.minHeight]\r\n            ];\r\n\r\n            conditions.filter(condition => condition[1]).forEach(([cl]) => classes.push(cl));\r\n        }\r\n\r\n        if (this.model.label && this.model.icon) {\r\n            const iconPositionClass = this.model.iconPosition === 'right' ? 'button-icon-right' : 'button-icon-left';\r\n            classes.push(iconPositionClass);\r\n        }\r\n\r\n        this.classes = classes.join(' ');\r\n    }\r\n\r\n    setStyles() {\r\n        this.styles['width'] = this.options && this.options.forceWidth ? this.options.forceWidth : 'auto';\r\n        this.styles['height'] = this.options && this.options.forceHeight ? this.options.forceHeight : 'auto';\r\n        this.styles['minWidth'] = this.options && this.options.minWidth ? this.options.minWidth : 0;\r\n        this.styles['minHeight'] = this.options && this.options.minHeight ? this.options.minHeight : 0;\r\n    }\r\n\r\n    onClick(event: MouseEvent): void {\r\n        if (this.disabled) return;\r\n\r\n        if (this.options) {\r\n            if (this.options.blur) this.blur(event);\r\n            if (this.options.fileUpload) return this.uploader.nativeElement.click();\r\n        }\r\n\r\n        return this.action.emit({ event });\r\n    }\r\n\r\n    onMouseDown(event: MouseEvent) {\r\n        if (this.disabled) {\r\n            event.stopPropagation();\r\n\r\n            return;\r\n        }\r\n\r\n        this.mousedown.emit(event);\r\n    }\r\n\r\n    onMouseUp(event: MouseEvent) {\r\n        if (this.disabled) {\r\n            event.stopPropagation();\r\n\r\n            return;\r\n        }\r\n\r\n        this.mouseup.emit(event);\r\n    }\r\n\r\n    onMouseOut(event: MouseEvent) {\r\n        if (this.disabled) {\r\n            event.stopPropagation();\r\n\r\n            return;\r\n        }\r\n\r\n        this.mouseout.emit(event);\r\n    }\r\n\r\n    uploadFile(event: Event): void {\r\n        this.filePath = '';\r\n        if (event && event.target) {\r\n            const input = event.target as HTMLInputElement;\r\n            if (input.files) {\r\n                this.action.emit({ file: input.files[0], event });\r\n            }\r\n        }\r\n    }\r\n\r\n    private blur(event: MouseEvent): void {\r\n        if (event.currentTarget) (event.currentTarget as HTMLElement).blur();\r\n    }\r\n\r\n}\r\n","export enum ButtonLength {\r\n    Default = '',\r\n    Short = 'ui-button-short',\r\n    ShortBigIcon = 'ui-button-short-big-icon',\r\n    Long = 'ui-button-long',\r\n}\r\n","export enum ButtonTheme {\r\n    Default = '',\r\n    Secondary = 'ui-button-secondary',\r\n    Accent = 'ui-button-accent',\r\n}\r\n","export enum ButtonThickness {\r\n    Default = '',\r\n    Thin = 'ui-button-thin',\r\n    Thick = 'ui-button-thick',\r\n}\r\n","<ui-webem-tile-tooltip tooltipTitleHeader=\"NRCELL ID\"\r\n                       [tooltipTitleValue]=\"model.basicCell.name\"\r\n                       [tooltipContent]=\"tooltipPanelContent\"\r\n                       [tooltipTileState]=\"tooltipPanelContentStatus\"\r\n>\r\n    <div [attr.data-nrcell-operational-state]=\"model.basicCell.operationalState\" class=\"tile-frame\"\r\n         [class.enabled]=\"model.basicCell.operationalState === OPERATIONAL_STATE.Enabled\"\r\n         [class.selected]=\"selected\"\r\n    >\r\n\r\n        <div class=\"tile-header\">\r\n            <div class=\"title\">\r\n            <span [attr.data-nrcell-id]=\"model.basicCell.name\" class=\"nrcell-id\">\r\n                {{ model.basicCell.name }}\r\n            </span>\r\n                <span [attr.data-nrcell-identity]=\"model.basicCell.nrCellIdentity\" class=\"nrcell-identity\"\r\n                      *ngIf=\"visibleParameters['nrCellIdentity']\">\r\n                &nbsp;/ {{ model.basicCell.nrCellIdentity | nullableValue }}\r\n            </span>\r\n            </div>\r\n            <div [attr.data-nrcell-administrative-state]=\"model.basicCell.administrativeState\" class=\"icons\">\r\n                <ui-webem-raised-alarms *ngIf=\"!!model.basicCell.alarms?.length\"\r\n                                        [alarms]=\"model.basicCell.alarms || [] | toActiveAlarms\"\r\n                                        [alarmSeverityType]=\"(model.basicCell.alarms || []) | getHighestAlarmSeverity\"\r\n                                        uiWebemToggleParentTooltip\r\n                >\r\n                </ui-webem-raised-alarms>\r\n                <div class=\"lock-icon mdi mdi-lock mdi-16px\" title=\"Locked\"\r\n                     *ngIf=\"model.basicCell.administrativeState === ADMINISTRATIVE_STATE.Locked; else unLock\"\r\n                >\r\n                </div>\r\n                <div *ngIf=\"!!model.barringStatus && isConfigVcu\"\r\n                     [ngClass]=\"['barring-icon', 'mdi', 'mdi-16px', model.barringStatus]\"\r\n                     [attr.title]=\"capitalize(model.barringStatus)\"\r\n                >\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"tile-description\">\r\n        <span [attr.data-nrcell-name]=\"model.basicCell.cellName\" *ngIf=\"visibleParameters['cellName']\" class=\"cell-name\">\r\n            {{ model.basicCell.cellName || '' }}\r\n        </span>\r\n            <div class=\"badges\">\r\n            <span class=\"ui-badge\" [attr.data-nrcell-technology]=\"model.basicCell.technology\"\r\n                  *ngIf=\"visibleParameters['technology']\">\r\n                {{ model.basicCell.technology }}\r\n            </span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"tile-content\">\r\n            <div class=\"cell-parameters\">\r\n                <ng-container *ngIf=\"visibleParameters['nrarfcn'] && model.basicCell.technology === TECHNOLOGY_TYPE.Tdd\"\r\n                              [ngTemplateOutlet]=\"parameterSpacer\">\r\n                </ng-container>\r\n                <span [attr.data-nrcell-physical-layer-cell-id]=\"model.basicCell.physicalLayerCellID\" *ngIf=\"visibleParameters['physicalLayerCellID']\">\r\n                    PCI: {{ model.basicCell.physicalLayerCellID | nullableValue }}\r\n            </span>\r\n                <span [attr.data-nrcell-type]=\"model.type\" *ngIf=\"visibleParameters['type']\">\r\n                    Cell type: {{ model.type | nullableValue }}\r\n            </span>\r\n                <ng-container [ngSwitch]=\"model.basicCell.technology\" *ngIf=\"visibleParameters['nrarfcn']\">\r\n                    <ng-container *ngSwitchCase=\"TECHNOLOGY_TYPE.Tdd\" [ngTemplateOutlet]=\"nrarfcnTdd\"></ng-container>\r\n                    <ng-container *ngSwitchCase=\"TECHNOLOGY_TYPE.Fdd\" [ngTemplateOutlet]=\"nrarfcnFdd\"></ng-container>\r\n                </ng-container>\r\n                <span [attr.data-nrcell-du-name]=\"model.duName\" *ngIf=\"visibleParameters['duName']\">\r\n                    Serving DU ID: {{ model.duName }}\r\n            </span>\r\n                <span [attr.data-nrcell-group-id]=\"model.basicCell.cellGroupId\" *ngIf=\"visibleParameters['cellGroupId']\">\r\n                Cell group ID: {{ model.basicCell.cellGroupId }}\r\n            </span>\r\n            </div>\r\n            <ui-webem-button-with-menu class=\"actions-button\"\r\n                                       *ngIf=\"visibleParameters['actions']\"\r\n                                       (click)=\"menuToggle.emit()\"\r\n                                       [buttonConfig]=\"ACTIONS_BUTTON_MODEL\"\r\n                                       [menuOptions]=\"model.basicCell.administrativeState === ADMINISTRATIVE_STATE.Locked ?\r\n                lockedCellActions : unlockedCellActions\"\r\n                                       [scrollableContainer]=\"container\"\r\n                                       uiWebemToggleParentTooltip\r\n            >\r\n            </ui-webem-button-with-menu>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #unLock>\r\n        <i class=\"unlocked\" title=\"Unlocked\"></i>\r\n    </ng-template>\r\n\r\n    <ng-template #nrarfcnTdd>\r\n    <span [attr.data-nrcell-nrarfcn]=\"model.basicCell.nrarfcn\">\r\n        NRARFCN: {{ model.basicCell.nrarfcn | nullableValue }}\r\n    </span>\r\n    </ng-template>\r\n\r\n    <ng-template #nrarfcnFdd>\r\n    <span [attr.data-nrcell-nrarfcn-dl]=\"model.basicCell.nrarfcnDl\">\r\n        DL NRARFCN: {{ model.basicCell.nrarfcnDl | nullableValue }}\r\n    </span>\r\n        <span [attr.data-nrcell-nrarfcn-ul]=\"model.basicCell.nrarfcnUl\">\r\n        UL NRARFCN: {{ model.basicCell.nrarfcnUl | nullableValue }}\r\n    </span>\r\n    </ng-template>\r\n\r\n    <ng-template #parameterSpacer>\r\n        <span>&nbsp;</span>\r\n    </ng-template>\r\n</ui-webem-tile-tooltip>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output\r\n} from '@angular/core';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { MenuAction } from '../../../button-with-menu/model/menu-action';\r\nimport { CellAdministrativeState, CellTechnologyType, CuCell, NullableOperationalState } from '@oam/cu-asm-api/models';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ButtonLength } from '../../../button/model/button-length.enum';\r\nimport { VisibleCuCellWidgetParameters } from '../../core/models/cell-tile-widget-parameters.definition';\r\nimport { TileTooltipContent } from '../../../tile-tooltip/models';\r\nimport { capitalize } from 'lodash';\r\nimport { NullableValuePipe } from '@oam/shared/lib/modules/webem-common';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { selectCommissioningFlagStatus } from '@oam/commissioning-flag-store/lib/core/selectors/select-commissioning-status';\r\nimport { RoleAccessForbiddenFlagEnum } from '@oam/core/lib/models/role-access/role-access-forbidden-flag.enmu';\r\nimport { VnfcSharedService } from '../../../../../../vnfc-shared/src/lib/vnfc-store/services/vnfc-shared.service';\r\n\r\n@Component({\r\n    selector: 'ui-webem-cell-tile',\r\n    templateUrl: './cell-tile.component.html',\r\n    styleUrls: ['./cell-tile.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CellTileComponent implements OnInit, OnChanges {\r\n    @Input() model: CuCell;\r\n    @Input() visibleParameters: VisibleCuCellWidgetParameters;\r\n    @Input() selected: boolean;\r\n    @Input() container?: ElementRef | HTMLDivElement;\r\n\r\n    @Output() lock = new EventEmitter<void>();\r\n    @Output() unlock = new EventEmitter<void>();\r\n    @Output() menuToggle = new EventEmitter<void>();\r\n    @Output() goToPe = new EventEmitter<void>();\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n    readonly OPERATIONAL_STATE = NullableOperationalState;\r\n    readonly ADMINISTRATIVE_STATE = CellAdministrativeState;\r\n    readonly TECHNOLOGY_TYPE = CellTechnologyType;\r\n    private commissioningSubscription: Subscription;\r\n    isCommissioningInProgress: boolean;\r\n    readonly ACTIONS_BUTTON_MODEL: ButtonModel = {\r\n        title: 'Actions',\r\n        icon: 'mdi mdi-dots-vertical',\r\n        theme: ButtonTheme.Secondary,\r\n        length: ButtonLength.Long\r\n    };\r\n\r\n    readonly GO_TO_PARAMETER_EDITOR_ACTION: MenuAction = {\r\n        label: 'Go to PE',\r\n        icon: 'mdi mdi-import',\r\n        command: () => this.goToPe.emit()\r\n    };\r\n\r\n    readonly capitalize = capitalize;\r\n\r\n    unlockedCellActions: MenuAction[];\r\n    lockedCellActions: MenuAction[];\r\n    tooltipPanelContent: TileTooltipContent[];\r\n    tooltipPanelContentStatus: TileTooltipContent[];\r\n    isConfigVcu: boolean;\r\n\r\n    constructor(\r\n      private readonly nullableValuePipe: NullableValuePipe,\r\n      private readonly store: Store,\r\n      private readonly vnfcSharedService: VnfcSharedService\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.isConfigVcu = this.vnfcSharedService.isVcu();\r\n        this.recalculateTooltipContent();\r\n        this.commissioningSubscription = this.store.pipe(\r\n          takeUntil(this.ngUnsubscribe),\r\n          select(selectCommissioningFlagStatus)\r\n        )\r\n          .subscribe(data => {\r\n              this.isCommissioningInProgress = data;\r\n              this.setMenu();\r\n          });\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.recalculateTooltipContent();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    private recalculateTooltipContent() {\r\n        const fddNrarfcn: TileTooltipContent[] = [\r\n            { title: 'Downlink NRARFCN', value: this.nullableValuePipe.transform(this.model.basicCell.nrarfcnDl) },\r\n            { title: 'Uplink NRARFCN', value: this.nullableValuePipe.transform(this.model.basicCell.nrarfcnUl) }\r\n        ];\r\n        const tddNrarfcn: TileTooltipContent[] = [{\r\n            title: 'NRARFCN',\r\n            value: this.nullableValuePipe.transform(this.model.basicCell.nrarfcn)\r\n        }];\r\n        const nrarfcn = this.model.basicCell.technology === CellTechnologyType.Fdd ? fddNrarfcn : tddNrarfcn;\r\n\r\n        this.tooltipPanelContent = [\r\n            { title: 'NR cell identity', value: this.nullableValuePipe.transform(this.model.basicCell.nrCellIdentity) },\r\n            { title: 'Cell name', value: this.nullableValuePipe.transform(this.model.basicCell.cellName) },\r\n            { title: 'Cell technology', value: this.model.basicCell.technology },\r\n            { title: 'PCI', value: this.model.basicCell.physicalLayerCellID },\r\n            { title: 'Cell type', value: this.nullableValuePipe.transform(this.model.type) },\r\n            ...nrarfcn,\r\n            { title: 'Serving DU ID', value: this.model.duName },\r\n            { title: 'Cell group ID', value: this.model.basicCell.cellGroupId }\r\n\r\n        ];\r\n        this.tooltipPanelContentStatus = [\r\n            { title: 'Operational state', value: capitalize(this.nullableValuePipe.transform(this.model.basicCell.operationalState)) },\r\n            { title: 'Administrative state', value: capitalize(this.model.basicCell.administrativeState) }\r\n        ];\r\n\r\n        if (this.vnfcSharedService.isVcu()) {\r\n            this.tooltipPanelContentStatus.push({ title: 'Barring status', value: capitalize(this.nullableValuePipe.transform(this.model.barringStatus)) });\r\n        }\r\n    }\r\n\r\n    setMenu(): void {\r\n        this.unlockedCellActions = [\r\n            {\r\n                label: 'Lock cell',\r\n                icon: 'mdi mdi-lock mdi-16px',\r\n                command: () => this.lock.emit(),\r\n                disabled: this.isCommissioningInProgress,\r\n                roleAccessFlag: RoleAccessForbiddenFlagEnum.LOCK_UNLOCK\r\n            },\r\n            this.GO_TO_PARAMETER_EDITOR_ACTION\r\n        ];\r\n        this.lockedCellActions = [\r\n            {\r\n                label: 'Unlock cell',\r\n                icon: 'mdi mdi-lock-open-variant-outline mdi-16px',\r\n                command: () => this.unlock.emit(),\r\n                disabled: this.isCommissioningInProgress,\r\n                roleAccessFlag: RoleAccessForbiddenFlagEnum.LOCK_UNLOCK\r\n            },\r\n            this.GO_TO_PARAMETER_EDITOR_ACTION\r\n        ];\r\n    }\r\n}\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnInit,\r\n    Output,\r\n    ElementRef,\r\n    OnDestroy\r\n} from '@angular/core';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { MenuAction } from '../../../button-with-menu/model/menu-action';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { selectCommissioningFlagStatus } from '@oam/commissioning-flag-store/lib/core/selectors/select-commissioning-status';\r\nimport { RoleAccessForbiddenFlagEnum } from '@oam/core/lib/models/role-access/role-access-forbidden-flag.enmu';\r\nimport { CuCell } from '@oam/cu-asm-api';\r\n\r\n@Component({\r\n    selector: 'ui-webem-group-tile',\r\n    templateUrl: './group-tile.component.html',\r\n    styleUrls: ['./group-tile.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GroupTileComponent implements OnInit, OnDestroy {\r\n    @Input() title: string;\r\n    @Input() container?: ElementRef;\r\n    @Input() cells: CuCell[];\r\n    @Input() isVdu: boolean;\r\n\r\n    @Output() lockAction = new EventEmitter<void>();\r\n    @Output() unlockAction = new EventEmitter<void>();\r\n    @Output() goToPe = new EventEmitter<void>();\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n    private commissioningSubscription: Subscription;\r\n    isCommissioningInProgress: boolean;\r\n    readonly optionModel: ButtonModel = {\r\n        title: 'Actions',\r\n        icon: 'mdi mdi-dots-vertical',\r\n        theme: ButtonTheme.Secondary\r\n    };\r\n\r\n    menuOptions: MenuAction[];\r\n\r\n    constructor(private readonly store: Store) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.commissioningSubscription = this.store.pipe(\r\n          takeUntil(this.ngUnsubscribe),\r\n          select(selectCommissioningFlagStatus)\r\n        )\r\n          .subscribe(data => {\r\n              this.isCommissioningInProgress = data;\r\n              this.setMenu();\r\n          });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    shouldButtonDisabled(administrativeState: 'Locked'|'Unlocked'): boolean {\r\n        return !this.isVdu && this.cells.every(cell => cell.basicCell.administrativeState === administrativeState);\r\n    }\r\n\r\n    setMenu(): void {\r\n        this.menuOptions = [\r\n            {\r\n                label: 'Lock cell group',\r\n                icon: 'mdi mdi-lock',\r\n                command: () => this.lockAction.emit(),\r\n                disabled: this.isCommissioningInProgress || this.shouldButtonDisabled('Locked'),\r\n                roleAccessFlag: RoleAccessForbiddenFlagEnum.LOCK_UNLOCK\r\n            },\r\n            {\r\n                label: 'Unlock cell group',\r\n                icon: 'mdi mdi-lock-open-variant-outline mdi-16px',\r\n                command: () => this.unlockAction.emit(),\r\n                disabled: this.isCommissioningInProgress || this.shouldButtonDisabled('Unlocked'),\r\n                roleAccessFlag: RoleAccessForbiddenFlagEnum.LOCK_UNLOCK\r\n            },\r\n            {\r\n                label: 'Go to PE',\r\n                icon: 'mdi mdi-import',\r\n                command: () => this.goToPe.emit()\r\n            }\r\n        ];\r\n    }\r\n}\r\n","<div class=\"group-tile-frame\">\r\n    <div class=\"group-title\">\r\n        <span>CG: {{title}}</span>\r\n    </div>\r\n    <ui-webem-button-with-menu\r\n        [buttonConfig]=\"optionModel\"\r\n        [menuOptions]=\"menuOptions\"\r\n        [scrollableContainer]=\"container\">\r\n    </ui-webem-button-with-menu>\r\n</div>\r\n","import { ChartOptions, ChartDataSets } from 'chart.js';\r\n\r\nexport const DEFAULT_LABEL_COLOR = '#98A2AE';\r\nconst FONT_COLOR = '#1B1B1B';\r\nconst NOKIA_FONT_FAMILY = 'Nokia Pure';\r\n\r\nexport const matchBackgroundColor = (context: any) => {\r\n    const index = context.dataIndex;\r\n    const backgroundColors = context.dataset && (context.dataset as ChartDataSets).backgroundColor;\r\n\r\n    return (backgroundColors && backgroundColors[index])\r\n        ? backgroundColors[index]\r\n        : DEFAULT_LABEL_COLOR;\r\n};\r\n\r\nexport const chartBarOptions: ChartOptions = {\r\n    plugins: {\r\n        datalabels: {\r\n            align: 'end',\r\n            anchor: 'end',\r\n            offset: -3,\r\n            color: matchBackgroundColor,\r\n            font: {\r\n                size: 10,\r\n                weight: 'bold',\r\n                family: NOKIA_FONT_FAMILY\r\n            }\r\n        }\r\n    },\r\n    layout: {\r\n        padding: {\r\n            top: -5,\r\n            left: 5,\r\n            right: 5\r\n        }\r\n    },\r\n    tooltips: {\r\n        enabled: false\r\n    },\r\n    title: {\r\n        position: 'top',\r\n        display: true,\r\n        text: '',\r\n        fontSize: 10,\r\n        fullWidth: true,\r\n        padding: 13,\r\n        fontFamily: NOKIA_FONT_FAMILY,\r\n        fontColor: FONT_COLOR\r\n    },\r\n    animation: {\r\n        duration: 2000\r\n    },\r\n    maintainAspectRatio: false,\r\n    responsive: true,\r\n    legend: {\r\n        display: false\r\n    },\r\n    scales: {\r\n        xAxes: [{\r\n            gridLines: {\r\n                tickMarkLength: 1,\r\n                display: false,\r\n                color: 'rgba(0, 0, 0, 0)'\r\n            },\r\n            ticks: {\r\n                beginAtZero: true,\r\n                fontSize: 9,\r\n                padding: 2,\r\n                fontFamily: NOKIA_FONT_FAMILY,\r\n                fontColor: FONT_COLOR\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            gridLines: {\r\n                display: false,\r\n                color: 'rgba(0, 0, 0, 0)'\r\n            },\r\n            display: false,\r\n            ticks: {\r\n                padding: 0,\r\n                beginAtZero: true,\r\n                fontFamily: NOKIA_FONT_FAMILY\r\n            }\r\n        }]\r\n    }\r\n};\r\n","import { Component, Input, OnChanges, OnInit, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\r\nimport { WebemChartData } from '../../../chart/model/webem-chart.data';\r\nimport { ChartDataSetConfig } from '../../../chart/model/chart-data-set.type';\r\nimport { chartBarOptions } from './chart-bar-options';\r\nimport { cloneDeep } from 'lodash';\r\n\r\n@Component({\r\n    selector: 'ui-webem-chart-bar-status-panel',\r\n    templateUrl: './chart-bar-status-panel.component.html',\r\n    styleUrls: ['./chart-bar-status-panel.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ChartBarStatusPanelComponent implements OnChanges, OnInit {\r\n    @Input() title: string;\r\n    @Input() data: WebemChartData[];\r\n    @Input() labels: string[] | string[][];\r\n    @Input() dataSetConfigs: ChartDataSetConfig[];\r\n\r\n    options = cloneDeep(chartBarOptions);\r\n    mappedDataSetConfigs: ChartDataSetConfig[];\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.title && this.options.title) this.options.title.text = this.title;\r\n        if (changes.dataSetConfigs) this.mappedDataSetConfigs = this.dataSetConfigs.map(this.mapDataSetConfigs);\r\n    }\r\n\r\n    private mapDataSetConfigs(dataSetConfig: ChartDataSetConfig) {\r\n        return (dataSetConfig.backgroundColor && !dataSetConfig.hoverBackgroundColor)\r\n            ? { ...dataSetConfig, hoverBackgroundColor: dataSetConfig.backgroundColor }\r\n            : dataSetConfig;\r\n    }\r\n}\r\n","<div class=\"chart-container rounded-block\">\r\n    <ui-webem-chart\r\n        type=\"bar\"\r\n        [data]=\"data\"\r\n        [labels]=\"labels\"\r\n        [options]=\"options\"\r\n        [dataSetConfigs]=\"mappedDataSetConfigs\">\r\n    </ui-webem-chart>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ChartComponent } from './components/chart/chart.component';\r\nimport { FileSaverModule } from 'ngx-filesaver';\r\n\r\n@NgModule({\r\n    declarations: [ChartComponent],\r\n    exports: [ChartComponent],\r\n    imports: [\r\n        CommonModule,\r\n        FileSaverModule\r\n    ]\r\n})\r\nexport class ChartModule {\r\n}\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport Chart, { ChartConfiguration, ChartData, ChartDataSets, ChartOptions, ChartType } from 'chart.js';\r\nimport { noop } from 'rxjs';\r\nimport { WebemChartData } from '../../model/webem-chart.data';\r\nimport { ChartDataSetConfig } from '../../model/chart-data-set.type';\r\nimport { FileSaverService } from 'ngx-filesaver';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\n\r\nexport interface GraphDrawEvent {\r\n    context: CanvasRenderingContext2D;\r\n    element: HTMLCanvasElement;\r\n}\r\n\r\n@Component({\r\n    selector: 'ui-webem-chart',\r\n    templateUrl: './chart.component.html',\r\n    styleUrls: ['./chart.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ChartComponent implements OnInit, OnChanges {\r\n    @Input() type: ChartType;\r\n    @Input() dataSetConfigs: Array<ChartDataSetConfig>;\r\n    @Input() data?: WebemChartData[];\r\n    @Input() labels: Array<string | string[]>;\r\n    @Input() options: ChartOptions;\r\n\r\n    @Output() drawGraph = new EventEmitter<GraphDrawEvent>();\r\n\r\n    configuration: ChartConfiguration;\r\n    context: CanvasRenderingContext2D | null;\r\n    chart?: Chart;\r\n\r\n    @ViewChild('chart', { static: true }) canvasElement: ElementRef<HTMLCanvasElement>;\r\n\r\n    emitChange = noop;\r\n\r\n    constructor(private readonly fileSaver: FileSaverService) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const chartDataSets = this.data ? this.createDataSets(this.data) : [];\r\n        const chartData: ChartData = { labels: this.labels, datasets: chartDataSets };\r\n        const configuration = { plugins: [ChartDataLabels], type: this.type, data: chartData, options: this.options };\r\n        this.context = this.canvasElement.nativeElement.getContext('2d');\r\n        if (this.context) {\r\n            this.emitChange = () => this.drawGraph.emit({\r\n                element: this.canvasElement.nativeElement,\r\n                context: this.context as CanvasRenderingContext2D\r\n            });\r\n\r\n            this.emitChange();\r\n            this.chart = new Chart(this.context, configuration);\r\n        }\r\n    }\r\n\r\n    @HostListener('window:resize', [])\r\n    onResize(): void {\r\n        if (this.chart) {\r\n            this.emitChange();\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.chart) {\r\n            if (changes.data) {\r\n                this.updateData(this.chart.data, changes.data.currentValue);\r\n            }\r\n\r\n            if (changes.labels) {\r\n                this.updateLabels(this.chart.data, changes.labels.currentValue);\r\n            }\r\n\r\n            if (changes.dataSetConfigs) {\r\n                this.updateDataSetConfig(this.chart.data, changes.dataSetConfigs.currentValue);\r\n            }\r\n\r\n            if (changes.options) {\r\n                this.updateOptions(this.chart.options, changes.options.currentValue);\r\n            }\r\n\r\n            if (changes.data || changes.labels || changes.dataSetConfigs || changes.options) {\r\n                this.chart.update({ lazy: true });\r\n            }\r\n        }\r\n    }\r\n\r\n    updateData(chartData: ChartData, source: WebemChartData[] | null): void {\r\n        if (!chartData.datasets || !source ||\r\n            chartData.datasets.length === 0 || chartData.datasets.length !== source.length) {\r\n            chartData.datasets = source ? this.createDataSets(source) : [];\r\n        } else if (chartData.datasets && source) {\r\n            this.updateDataSets(chartData.datasets, source);\r\n        }\r\n    }\r\n\r\n    updateOptions(options: ChartOptions, source: ChartOptions | null): void {\r\n        Object.assign(options, source);\r\n    }\r\n\r\n    updateLabels(chartData: ChartData, labels: Array<string | string[]>) {\r\n        chartData.labels = labels;\r\n    }\r\n\r\n    updateDataSetConfig(chartData: ChartData, dataSetConfigs: Array<ChartDataSetConfig>): void {\r\n        if (chartData.datasets) {\r\n            chartData.datasets.forEach((dataSet: ChartDataSets, index: number) => {\r\n                Object.assign(dataSet, dataSetConfigs[index]);\r\n            });\r\n        }\r\n    }\r\n\r\n    updateDataSets(chartDataSets: ChartDataSets[], source: WebemChartData[]): void {\r\n        source.forEach((chartData: WebemChartData, i: number) => {\r\n            chartDataSets[i].data = chartData.data;\r\n        });\r\n    }\r\n\r\n\r\n    createDataSets(source: WebemChartData[]): ChartDataSets[] {\r\n        return source.map(\r\n            (chartData: WebemChartData, index: number) => ({\r\n                ...this.dataSetConfigs ? this.dataSetConfigs[index] : {},\r\n                data: chartData.data\r\n            } as ChartDataSets)\r\n        );\r\n    }\r\n\r\n    saveChartAsPicture(fileName: string) {\r\n        if (this.context) {\r\n            this.context.save();\r\n            this.context.globalCompositeOperation = 'destination-over';\r\n            this.context.fillStyle = '#EDF2F5';\r\n            this.context.fillRect(0, 0, this.canvasElement.nativeElement.width, this.canvasElement.nativeElement.height);\r\n            this.canvasElement.nativeElement.toBlob((blob) => {\r\n                if (blob) {\r\n                    this.fileSaver.save(blob, fileName+'.png');\r\n                    if (this.context) {\r\n                        this.context.restore();\r\n                    }\r\n                }\r\n            }, 'image/png', 0.95);\r\n        }\r\n    }\r\n}\r\n","<div class=\"chart-container\">\r\n    <canvas #chart></canvas>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CheckBoxTableRowFilterComponent } from './components/check-box-table-row-filter/check-box-table-row-filter.component';\r\nimport { CheckboxVerticalListModule } from '../checkbox-vertical-list/checkbox-vertical-list.module';\r\nimport { MultiSelectModule } from 'primeng/multiselect';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n\r\n@NgModule({\r\n    declarations: [CheckBoxTableRowFilterComponent],\r\n    imports: [\r\n        CommonModule,\r\n        CheckboxVerticalListModule,\r\n        MultiSelectModule,\r\n        FormsModule\r\n    ],\r\n    exports: [CheckBoxTableRowFilterComponent]\r\n})\r\nexport class CheckBoxTableFilterModule {\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { ButtonLength } from '../../../button/model/button-length.enum';\r\nimport { ButtonThickness } from '../../../button/model/button-thickness.enum';\r\nimport { SelectItem } from 'primeng/api';\r\n\r\n@Component({\r\n    selector: 'ui-webem-check-box-table-row-filter',\r\n    templateUrl: './check-box-table-row-filter.component.html',\r\n    styleUrls: ['./check-box-table-row-filter.component.scss']\r\n})\r\n\r\nexport class CheckBoxTableRowFilterComponent {\r\n    @Input() column: any;\r\n    @Input() options:  SelectItem[];\r\n    @Input() selection: string[];\r\n    @Input() appendTo: string;\r\n    @Output() filterChanged = new EventEmitter<{ value: Array<string>; column: string; }>();\r\n    isFilterApplied: boolean;\r\n\r\n    readonly model: ButtonModel = {\r\n        label: 'Filter',\r\n        icon: 'mdi mdi-filter',\r\n        length: ButtonLength.Long,\r\n        thickness: ButtonThickness.Thin\r\n    };\r\n\r\n    onFilterChange(event: Array<string>): void {\r\n        setTimeout(() => {\r\n            this.filterChanged.emit({value: event, column: this.column});\r\n        });\r\n    }\r\n}\r\n","<p-multiSelect\r\n    [options]=\"options\"\r\n    [appendTo]=\"appendTo\"\r\n    defaultLabel=\"Select\"\r\n    [ngModel]=\"selection\"\r\n    (onChange)=\"onFilterChange($event.value)\"\r\n    class=\"table-context-filter\"\r\n    [panelStyle]=\"{'width': 'auto'}\"\r\n>\r\n</p-multiSelect>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CheckboxVerticalListComponent } from './components/checkbox-vertical-list/checkbox-vertical-list.component';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n    declarations: [CheckboxVerticalListComponent],\r\n    imports: [\r\n        CommonModule,\r\n        CheckboxModule,\r\n        FormsModule\r\n    ],\r\n    exports: [CheckboxVerticalListComponent]\r\n})\r\nexport class CheckboxVerticalListModule {\r\n}\r\n","<p-table\r\n    #table\r\n    class=\"crl-information-table\"\r\n    [value]=\"currentPageCrlInformation\"\r\n    selectionMode=\"single\"\r\n    (onRowSelect)=\"onSelectCrlCertificate($event)\"\r\n    (onRowUnselect)=\"onRowUnselect()\"\r\n    [resizableColumns]=\"true\"\r\n    [scrollable]=\"false\"\r\n    [autoLayout]=\"true\"\r\n    [loading]=\"(isLoadingCrlData$ | async)!\">\r\n    <ng-template pTemplate=\"header\">\r\n        <tr>\r\n            <th class=\"crl-issuer\" pResizableColumn>Issuer</th>\r\n            <th class=\"crl-time-column\" pResizableColumn>This update</th>\r\n            <th class=\"crl-time-column\" pResizableColumn>Next update</th>\r\n            <th class=\"crl-number-of-revocation\" pResizableColumn>Revoked certificates</th>\r\n            <th class=\"crl-uri\" pResizableColumn>Distribution point</th>\r\n            <th class=\"crl-distribution-point-source\" pResizableColumn>Distribution point type</th>\r\n            <th class=\"crl-reason\" pResizableColumn>Failure reason</th>\r\n        </tr>\r\n        <tr>\r\n            <th>\r\n                <ui-webem-filter-input\r\n                    [value]=\"filters.issuer\"\r\n                    (valueChange)=\"onFilterSet($event, 'issuer')\"\r\n                    id=\"filter-by-issuer\">\r\n                </ui-webem-filter-input>\r\n            </th>\r\n            <th></th>\r\n            <th></th>\r\n            <th>\r\n                <ui-webem-filter-input\r\n                    [value]=\"filters.numOfRevCert\"\r\n                    (valueChange)=\"onFilterSet($event, 'numOfRevCert')\"\r\n                    id=\"filter-by-numOfRevCert\">\r\n                </ui-webem-filter-input>\r\n            </th>\r\n            <th>\r\n                <ui-webem-filter-input\r\n                    [value]=\"filters.distributionPointURI\"\r\n                    (valueChange)=\"onFilterSet($event, 'distributionPointURI')\"\r\n                    id=\"filter-by-distributionPointURI\">\r\n                </ui-webem-filter-input>\r\n            </th>\r\n            <th class=\"muti-selector-container\">\r\n                <ui-webem-check-box-table-row-filter\r\n                    column=\"distributionPointType\"\r\n                    class=\"filter-row\"\r\n                    appendTo=\"body\"\r\n                    [options]=\"distributionPointTypeOptions\"\r\n                    (filterChanged)=\"onFilterSet($event.value, $event.column)\"\r\n                    [selection]=\"filters.distributionPointType\">\r\n                </ui-webem-check-box-table-row-filter>\r\n            </th>\r\n            <th>\r\n                <ui-webem-filter-input\r\n                    [value]=\"filters.updateFailureReason\"\r\n                    (valueChange)=\"onFilterSet($event, 'updateFailureReason')\"\r\n                    id=\"filter-by-failureReason\">\r\n                </ui-webem-filter-input>\r\n            </th>\r\n        </tr>\r\n        <tr *ngIf=\"isTableNoData()\">\r\n            <td colspan=\"7\" class=\"empty-table\">No data</td>\r\n        </tr>\r\n        <tr *ngIf=\"isTableEmpty()\">\r\n            <td colspan=\"7\">\r\n                <div class=\"empty-table-filter\">\r\n                    <i class=\"information-icon mdi mdi-information\"></i>\r\n                    <span>No data matching filter criteria</span>\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"body\" let-certificate>\r\n        <tr [pSelectableRow]=\"certificate\" [id]=\"certificate.crlinfoRId\">\r\n            <td [title]=\"certificate.issuer | nullableValue | formatTitle\" class=\"ui-resizable-column crl-issuer\">{{certificate.issuer | nullableValue}}</td>\r\n            <td [title]=\"certificate.thisUpdate | formatFromISO2GMTTime | formatTitle\" class=\"ui-resizable-column crl-time-column\">{{certificate.thisUpdate | formatFromISO2GMTTime}}</td>\r\n            <td [title]=\"certificate.nextUpdate | formatFromISO2GMTTime | formatTitle\" class=\"ui-resizable-column crl-time-column\">{{certificate.nextUpdate | formatFromISO2GMTTime}}</td>\r\n            <td [title]=\"certificate.numOfRevCert | nullableValue | formatTitle\" class=\"ui-resizable-column crl-number-of-revocation\">{{certificate.numOfRevCert | nullableValue}}</td>\r\n            <td [title]=\"certificate.distributionPointURI | nullableValue | formatTitle\" class=\"ui-resizable-column crl-uri\">{{certificate.distributionPointURI | nullableValue}}</td>\r\n            <td [title]=\"certificate.distributionPointType?.name | nullableValue | formatTitle\" class=\"ui-resizable-column crl-distribution-point-source\">\r\n                {{certificate.distributionPointType?.name | nullableValue}}</td>\r\n            <td [title]=\"mapReason(certificate.updateFailureReason | nullableValue  | formatTitle)\" class=\"ui-resizable-column crl-reason\">{{mapReason(certificate.updateFailureReason | nullableValue)}}</td>\r\n        </tr>\r\n    </ng-template>\r\n</p-table>\r\n<ui-webem-table-pagination\r\n    [itemsPerPage]=\"itemsPerPage\"\r\n    [totalNumberOfItems]=\"(totalNumberOfCrlInfo | async)!\"\r\n    (PageChange)=\"onPageChange($event)\"\r\n    [pageNumber]=\"pageNumber\"\r\n    *ngIf=\"!isTableEmpty() && !isTableNoData()\">\r\n</ui-webem-table-pagination>\r\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { Table } from 'primeng/table';\r\nimport { applyPrimeTablePatch } from '../../../prime-table-workaround/prime-table-workaround';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { includes, isEmpty, pickBy, isUndefined } from 'lodash';\r\nimport { CrlInfo } from '@oam/cu-trs-api/models/crl-info';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\ninterface CrlInformationFiltersInterface {\r\n    issuer: string;\r\n    numOfRevCert: string;\r\n    distributionPointURI: string;\r\n    distributionPointType: any;\r\n    updateFailureReason?: string;\r\n}\r\n\r\nconst LDAP_BIND_FAILED = 'LdapBindFailed';\r\nconst VISIBLE_LDAP_BIND_FAILED = 'LDAP Bind Failed';\r\n@Component({\r\n    selector: 'ui-webem-crl-information-table',\r\n    templateUrl: './crl-information-table.component.html',\r\n    styleUrls: ['./crl-information-table.component.scss']\r\n})\r\n\r\nexport class CrlInformationTableComponent implements OnInit, OnDestroy {\r\n    @Input() crlInformation: Observable<CrlInfo[]>;\r\n    @Input() set totalNumberOfCrl(value: number) {\r\n        this.totalNumberOfCrlInfo.next(value);\r\n    }\r\n    @Input() itemsPerPage$: Observable<number>;\r\n    @Input() filtersReceived: CrlInformationFiltersInterface;\r\n    @Input() isLoadingCrlData$: Observable<boolean>;\r\n\r\n    latestCrlInformation: CrlInfo[];\r\n    filteredCrlInformation: CrlInfo[];\r\n    currentPageCrlInformation: CrlInfo[];\r\n    totalNumberOfCrlInfo: BehaviorSubject<number> = new BehaviorSubject<number>(0);\r\n    distributionPointTypeOptions = [\r\n        {\r\n            label: 'Certificate_extension',\r\n            value: 0\r\n        },\r\n        {\r\n            label: 'Primary_manual',\r\n            value: 1\r\n        },\r\n        {\r\n            label: 'Secondary_manual',\r\n            value: 2\r\n        }\r\n    ];\r\n\r\n    filters: CrlInformationFiltersInterface;\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n    pageNumber = 1;\r\n    itemsPerPage: number;\r\n\r\n    @Output()\r\n    CrlCertificateSelected = new EventEmitter<number>();\r\n\r\n    @Output()\r\n    ClearSelection = new EventEmitter();\r\n\r\n    @Output()\r\n    SetFilters = new EventEmitter<CrlInformationFiltersInterface>();\r\n\r\n    @ViewChild('table', { static: true }) table: Table;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n        applyPrimeTablePatch(this.table);\r\n        this.filters = { ...this.filtersReceived };\r\n        this.crlInformation.pipe(takeUntil(this.ngUnsubscribe)).subscribe((crlInfo: CrlInfo[]) => {\r\n            this.latestCrlInformation = crlInfo;\r\n            this.filteredCrlInformation = [...crlInfo];\r\n            this.totalNumberOfCrlInfo.next(crlInfo.length);\r\n            this.onFilterChange();\r\n            this.onPageChange(this.pageNumber);\r\n        });\r\n        this.itemsPerPage$.pipe(takeUntil(this.ngUnsubscribe)).subscribe((numberPerPage: number) => {\r\n            this.itemsPerPage = numberPerPage;\r\n            this.onPageChange(this.pageNumber);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.SetFilters.emit(this.filters);\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    isTableEmpty() {\r\n        return this.latestCrlInformation.length > 0 && this.filteredCrlInformation.length === 0;\r\n    }\r\n\r\n    isTableNoData() {\r\n        return this.latestCrlInformation.length === 0;\r\n    }\r\n\r\n    onSelectCrlCertificate({ data }: { data: CrlInfo }) {\r\n        this.CrlCertificateSelected.emit(data.crlinfoRId);\r\n    }\r\n\r\n    onRowUnselect() {\r\n        this.ClearSelection.emit();\r\n    }\r\n\r\n    onPageChange(pageNumber: number) {\r\n        const start = (pageNumber - 1) * this.itemsPerPage;\r\n        this.pageNumber = pageNumber;\r\n        this.currentPageCrlInformation = [...this.filteredCrlInformation].splice(start, this.itemsPerPage);\r\n    }\r\n\r\n    onFilterSet(event: any, field: string) {\r\n        this.filters[field] = event;\r\n        this.onFilterChange();\r\n    }\r\n\r\n    mapReason(reason: string): string {\r\n        return reason === LDAP_BIND_FAILED ? VISIBLE_LDAP_BIND_FAILED : reason;\r\n    }\r\n\r\n    onFilterChange() {\r\n        const filterOptions = pickBy(this.filters, filterValue => !!filterValue);\r\n\r\n        if (!isEmpty(filterOptions)) {\r\n            this.filteredCrlInformation = this.latestCrlInformation.filter(certificate => {\r\n                return Object.keys(filterOptions).every(key => {\r\n                    if (key === 'distributionPointType' && filterOptions.distributionPointType) {\r\n                        if (!filterOptions.distributionPointType.length) return true;\r\n\r\n                        return includes(filterOptions.distributionPointType, certificate[key]?.value);\r\n                    }\r\n\r\n                    if (key === 'updateFailureReason' && !!filterOptions.updateFailureReason && certificate[key] === LDAP_BIND_FAILED) {\r\n                        return includes(VISIBLE_LDAP_BIND_FAILED.toLowerCase(), filterOptions.updateFailureReason.toString().toLowerCase());\r\n                    }\r\n\r\n                    return !isUndefined(certificate[key]) &&\r\n                        includes(certificate[key].toString().toLowerCase(), filterOptions[key].toString().toLowerCase());\r\n                });\r\n            });\r\n        } else {\r\n            this.filteredCrlInformation = [...this.latestCrlInformation];\r\n        }\r\n        this.onPageChange(1);\r\n        this.totalNumberOfCrlInfo.next(this.filteredCrlInformation.length);\r\n    }\r\n}\r\n","<div class=\"section-row\">\r\n    <div [title]=\"itemKey\" class=\"section-row-key\">\r\n        <span>{{itemKey}}:</span>\r\n    </div>\r\n    <div [title]=\"itemValue\" class=\"section-row-value\">\r\n        <span>{{ itemValue | nullableValue }}</span>\r\n        <div class=\"section-actions\" *ngIf=\"actionsMenu\">\r\n            <ui-webem-button-with-menu class=\"action-menu\"\r\n                [menuOptions]=\"actionsMenu.menuOptions\"\r\n                [buttonConfig]=\"actionsMenu.buttonConfig\"\r\n                [options]=\"buttonOptions\"\r\n                [scrollableContainer]=\"container\"\r\n            ></ui-webem-button-with-menu>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ActionsMenu, MenuAction } from '../../../../lib/button-with-menu/model/menu-action';\r\nimport { ButtonOptions } from '../../../button/model/button-options.definition';\r\n\r\n@Component({\r\n  selector: 'ui-webem-detail-data-row-with-actions-menu',\r\n  templateUrl: './detail-data-row-with-actions-menu.component.html',\r\n  styleUrls: ['./detail-data-row-with-actions-menu.component.scss']\r\n})\r\nexport class DetailDataRowWithActionsMenuComponent implements OnInit {\r\n    readonly buttonOptions: ButtonOptions  = {\r\n        forceHeight: '22px',\r\n        forceWidth: '26px'\r\n    };\r\n\r\n    @Input()\r\n    itemKey: string;\r\n\r\n    @Input()\r\n    itemValue: string;\r\n\r\n    @Input()\r\n    actionsMenu?: ActionsMenu;\r\n\r\n    @Input()\r\n    container?: ElementRef;\r\n\r\n    @Output()\r\n    menuAction = new EventEmitter<string>();\r\n\r\n    readonly emitAction = (action: string) => this.menuAction.emit(action);\r\n\r\n    initMenuActions(): MenuAction[] | undefined {\r\n        if (!this.actionsMenu) return;\r\n        this.actionsMenu.menuOptions.forEach((action: MenuAction) => action.command = () => this.emitAction(action.label));\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n        this.initMenuActions();\r\n  }\r\n\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ui-webem-detail-data-row',\r\n  templateUrl: './detail-data-row.component.html',\r\n  styleUrls: ['./detail-data-row.component.scss']\r\n})\r\nexport class DetailDataRowComponent {\r\n\r\n    @Input()\r\n    itemKey: string;\r\n\r\n    @Input()\r\n    itemValue: string;\r\n\r\n    constructor() { }\r\n\r\n}\r\n","<div class=\"section-row\">\r\n    <div [title]=\"itemKey\" class=\"section-row-key\">\r\n        <span>{{itemKey}}:</span>\r\n    </div>\r\n    <div [title]=\"itemValue | nullableValue | formatTitle\" class=\"section-row-value\">\r\n        <span>{{ itemValue | nullableValue }}</span>\r\n    </div>\r\n</div>\r\n","<div class=\"details-section\">\r\n    <div class=\"section-title\" [id]=\"id + '-title'\" *ngIf=\"title\">\r\n        {{title}}\r\n        <span *ngIf=\"subTitle\" class=\"details-panel-subtitle\">({{subTitle}})</span>\r\n    </div>\r\n    <div class=\"section-list\" [id]=\"id + '-list'\" *ngIf=\"listData\">\r\n        <ui-webem-detail-data-row *ngFor=\"let item of listData; trackBy: trackByFn\"\r\n                                  [itemKey]=\"item.key\"\r\n                                  [itemValue]=\"item.value\">\r\n        </ui-webem-detail-data-row>\r\n    </div>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\nimport { Section } from '../../model';\r\n\r\n@Component({\r\n    selector: 'ui-webem-details-section-list',\r\n    templateUrl: './details-section-list.component.html',\r\n    styleUrls: ['./details-section-list.component.scss']\r\n})\r\nexport class DetailsSectionListComponent {\r\n\r\n    @Input()\r\n    title: string;\r\n\r\n    @Input()\r\n    subTitle: string;\r\n\r\n    @Input()\r\n    id: string;\r\n\r\n    @Input()\r\n    listData: Section;\r\n\r\n    constructor() { }\r\n\r\n    trackByFn(index: number) {\r\n        return index;\r\n    }\r\n\r\n}\r\n","<div class=\"details-section\">\r\n    <div class=\"section-title\" [id]=\"id + '-title'\" *ngIf=\"title\">\r\n        {{title}}\r\n        <span *ngIf=\"subTitle\" class=\"details-panel-subtitle\">({{subTitle}})</span>\r\n    </div>\r\n    <div class=\"section-array-of-texts\" [id]=\"id + '-arrayOfTexts'\" *ngIf=\"text\">\r\n        <div [ngClass]=\"'array-of-texts-entry' + (withBorders ? ' with-borders' : '')\"\r\n             *ngFor=\"let entry of text\"\r\n             [title]=\"entry | nullableValue | formatTitle\">{{entry | nullableValue}}\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ui-webem-details-section-text',\r\n    templateUrl: './details-section-text.component.html',\r\n    styleUrls: ['./details-section-text.component.scss']\r\n})\r\nexport class DetailsSectionTextComponent {\r\n\r\n    @Input()\r\n    title: string;\r\n\r\n    @Input()\r\n    subTitle: string;\r\n\r\n    @Input()\r\n    id: string;\r\n\r\n    @Input()\r\n    text: string[];\r\n\r\n    @Input()\r\n    withBorders: boolean;\r\n\r\n    constructor() { }\r\n}\r\n","<div class=\"details-section\">\r\n    <div class=\"section-title\" [id]=\"id + '-title'\" *ngIf=\"title\">\r\n        {{title}}\r\n        <span *ngIf=\"subTitle\" class=\"details-panel-subtitle\">({{subTitle}})</span>\r\n    </div>\r\n    <div class=\"section-data\" [id]=\"id + '-table'\" *ngIf=\"data\">\r\n        <ui-webem-detail-data-row *ngFor=\"let item of data; trackBy: trackByFn\"\r\n            [itemKey]=\"item.key\"\r\n            [itemValue]=\"item.value\">\r\n        </ui-webem-detail-data-row>\r\n        <div *ngIf=\"!data.length\">{{emptyList}}</div>\r\n    </div>\r\n    <div class=\"section-data\" [id]=\"id + '-table'\" *ngIf=\"dataWithActionsMenu\">\r\n        <ui-webem-detail-data-row-with-actions-menu *ngFor=\"let item of dataWithActionsMenu; trackBy: trackByFn\"\r\n                                  [itemKey]=\"item.key\"\r\n                                  [itemValue]=\"item.value\"\r\n                                  [actionsMenu]=\"item.actionsMenu\"\r\n                                  [container]=\"container\"\r\n                                  (menuAction)=\"menuAction.emit($event)\">\r\n        </ui-webem-detail-data-row-with-actions-menu>\r\n    </div>\r\n    <div class=\"section-list\" [id]=\"id + '-list'\" *ngIf=\"list\">\r\n        <ul class=\"preformatted-text\" *ngFor=\"let element of list\">\r\n            <li>{{element}}</li>\r\n        </ul>\r\n        <ul class=\"preformatted-text\" *ngIf=\"!list.length\">\r\n            {{emptyList}}\r\n        </ul>\r\n    </div>\r\n    <div class=\"section-buttons\" [id]=\"id + '-buttons'\" *ngIf=\"buttons\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n</div>\r\n","import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Section } from '../../model';\r\nimport { DetailsButton } from '@oam/core/lib/models/buttons';\r\n\r\n@Component({\r\n    selector: 'ui-webem-details-section',\r\n    templateUrl: './details-section.component.html',\r\n    styleUrls: ['./details-section.component.scss'],\r\n})\r\nexport class DetailsSectionComponent {\r\n    // TODO: this component will be switched with details-section-custom\r\n    //  component when all panels in app will be replaced with new detail panel\r\n\r\n    @Input()\r\n    title: string;\r\n\r\n    @Input()\r\n    subTitle: string;\r\n\r\n    @Input()\r\n    id: string;\r\n\r\n    @Input()\r\n    data: Section;\r\n\r\n    @Input()\r\n    withCssClass = '';\r\n\r\n    @Input()\r\n    buttons: DetailsButton[];\r\n\r\n    @Input()\r\n    list: Array<string>;\r\n\r\n    @Input()\r\n    dataWithActionsMenu: Section;\r\n\r\n    @Input()\r\n    container?: ElementRef;\r\n\r\n    @Output()\r\n    menuAction = new EventEmitter<string>();\r\n\r\n    emptyList = '–';\r\n\r\n    constructor() {\r\n    }\r\n\r\n    trackByFn(index: number) {\r\n        return index;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { EMPTY_PLACEHOLDER } from '@oam/shared/lib/modules/webem-common/core/pipes/nullable-value.pipe';\r\n\r\nexport const EMPTY_PLACEHOLDER_TITLE = 'not available';\r\n\r\n@Pipe({\r\n    name: 'formatTitle',\r\n    pure: true\r\n})\r\nexport class FormatTitlePipe implements PipeTransform {\r\n\r\n    transform(title: string): string {\r\n        return title === EMPTY_PLACEHOLDER ? EMPTY_PLACEHOLDER_TITLE : title;\r\n    }\r\n\r\n}\r\n","import {\r\n    APP_SETTINGS_FILE_EXTENSION,\r\n    MAX_FILE_SIZE_FOR_SETTINGS_IN_KB\r\n} from '@oam/core/lib/models/app-settings.model';\r\n\r\nexport interface SupportedFile {\r\n    type: string\r\n    extension: string;\r\n    maxSizeKB: number;\r\n}\r\n\r\nexport const SUPPORTED_FILES: SupportedFile[] = [\r\n    {\r\n        type: 'settings',\r\n        extension: APP_SETTINGS_FILE_EXTENSION,\r\n        maxSizeKB: MAX_FILE_SIZE_FOR_SETTINGS_IN_KB\r\n    }\r\n];\r\n","import { Directive, Output, EventEmitter, HostListener } from '@angular/core';\r\nimport { get } from 'lodash';\r\nimport {\r\n    SIZE_LIMIT,\r\n    FILE_NOT_SUPPORTED,\r\n    MULTIPLE_FILES_NOT_ALLOWED,\r\n    EMPTY_FILE\r\n} from '../model/drop-errors-messages';\r\nimport { SUPPORTED_FILES, SupportedFile } from '../model/files-supported-by-drop';\r\nimport { KILOBYTE_BINARY } from '@oam/shared/lib/core/models/math-constants';\r\n\r\n\r\n@Directive({\r\n    selector: '[uiWebemDragDropFile]'\r\n})\r\nexport class DragDropUploadDirective {\r\n\r\n    @Output() fileDroppedAction = new EventEmitter<any>();\r\n\r\n    @HostListener('dragenter', ['$event']) onDragEnter(event: DragEvent) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    @HostListener('dragover', ['$event']) onDragOver(event: DragEvent) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    @HostListener('dragleave', ['$event']) onDragLeave(event: DragEvent) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    @HostListener('drop', ['$event']) onDrop(event: DragEvent) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        const files: FileList = get(event, 'dataTransfer.files');\r\n\r\n        if (files) this.handleFiles(files);\r\n    }\r\n\r\n    handleFiles(files: FileList): void {\r\n        switch (true) {\r\n            case files.length > 1 :\r\n                this.emitErrorMultipleFiles();\r\n                break;\r\n            case files.length === 1 : {\r\n                const file = files[0];\r\n                if (file) this.handleFile(file);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFile(file: File) {\r\n\r\n        const supported: SupportedFile | undefined = SUPPORTED_FILES.find((supportedFile) => file.name.endsWith(supportedFile.extension));\r\n\r\n        if (!supported) {\r\n            this.emitErrorNotSupported();\r\n\r\n            return;\r\n        }\r\n\r\n        if (!file.size) {\r\n            this.emitErrorEmptySize();\r\n\r\n            return;\r\n        }\r\n\r\n        file.size > supported.maxSizeKB * KILOBYTE_BINARY ? this.emitErrorToBig(supported) : this.emitFile(file);\r\n\r\n    }\r\n\r\n    emitFile(file: File): void {\r\n        this.fileDroppedAction.emit(file);\r\n    }\r\n\r\n    emitErrorToBig(supported: SupportedFile): void {\r\n        const errorMessage = `${SIZE_LIMIT} for ${supported.type} ${supported.maxSizeKB} KB`;\r\n        this.fileDroppedAction.emit(Error(errorMessage));\r\n    }\r\n\r\n    emitErrorNotSupported(): void {\r\n        const errorMessage = `${FILE_NOT_SUPPORTED}`;\r\n        this.fileDroppedAction.emit(Error(errorMessage));\r\n    }\r\n\r\n    emitErrorMultipleFiles(): void {\r\n        const errorMessage = `${MULTIPLE_FILES_NOT_ALLOWED}`;\r\n        this.fileDroppedAction.emit(Error(errorMessage));\r\n    }\r\n\r\n    emitErrorEmptySize(): void {\r\n        const errorMessage = `${EMPTY_FILE}`;\r\n        this.fileDroppedAction.emit(Error(errorMessage));\r\n    }\r\n\r\n}\r\n","export const SIZE_LIMIT = 'Size limit';\r\nexport const FILE_NOT_SUPPORTED = 'File not supported';\r\nexport const MULTIPLE_FILES_NOT_ALLOWED = 'Multiple files not allowed';\r\nexport const EMPTY_FILE = 'File is empty';\r\nexport const FILE_TOO_BIG = 'File too big';\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Du } from '@oam/cu-asm-api/models/du';\r\nimport { F1LinkStatus } from '@oam/cu-asm-api/models/f-1-link-status';\r\n\r\n@Pipe({\r\n  name: 'getDuClass',\r\n  pure: true\r\n})\r\nexport class GetDuClassPipe implements PipeTransform {\r\n\r\n  transform(du: Du, isSelected: boolean): string {\r\n\r\n      let duClass = (du.f1LinkStatus === F1LinkStatus.Available ? 'green' : 'gray');\r\n      if (isSelected) duClass += ' selected';\r\n\r\n      return duClass;\r\n  }\r\n\r\n}\r\n","<ui-webem-tile-tooltip tooltipTitleHeader=\"NRDU ID\"\r\n                       [tooltipTitleValue]=\"du.name\"\r\n                       [tooltipContent]=\"tooltipPanelContent\"\r\n                       [tooltipTileState]=\"tooltipPanelContentStatus\"\r\n>\r\n    <div [attr.data-du-name]=\"du.name\" class=\"du-component\" [ngClass]=\"du | getDuClass:isDuSelected\">\r\n        <div class=\"inner-radius\">\r\n            <div class=\"du-header\">\r\n                <ng-container>\r\n                <span class=\"du-id\">\r\n                    <span>{{du.name}}</span>\r\n                    <span *ngIf=\"visibleDuParameters.id\">&nbsp;/&nbsp;</span>\r\n                    <ng-container *ngIf=\"visibleDuParameters.id; then du_Id\"></ng-container>\r\n                </span>\r\n                </ng-container>\r\n                <ng-container>\r\n                <span class=\"du-icons\">\r\n                    <ui-webem-raised-alarms *ngIf=\"du | hasAlarms\"\r\n                                            [alarms]=\"du.alarms | toActiveAlarms\"\r\n                                            [alarmSeverityType]=\"highestSeverityAlarm\"\r\n                                            uiWebemToggleParentTooltip\r\n                    >\r\n                    </ui-webem-raised-alarms>\r\n                    <i *ngIf=\"isLocked; else unLock\" title=\"Locked\" class=\"lock-icon mdi mdi-lock mdi-16px\"></i>\r\n                </span>\r\n                </ng-container>\r\n            </div>\r\n            <ng-container *ngIf=\"visibleDuParameters.gnbDuName; then duName\"></ng-container>\r\n\r\n            <div class=\"du-body\">\r\n            <span class=\"du-body-left\" *ngIf=\"visibleDuParameters.cellsSummary\">\r\n                {{ totalNumberOfCellsInGivenDu }}\r\n            </span>\r\n                <span class=\"du-body-middle\" *ngIf=\"visibleDuParameters.cellsSummary\">\r\n                <ng-container *ngIf=\"isCellSummaryInOneRow; then summaryInOneRow; else summaryInTwoRows\"></ng-container>\r\n            </span>\r\n                <ng-container *ngIf=\"visibleDuParameters.Actions; then operationsButton\"></ng-container>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #unLock>\r\n        <i class=\"unlocked\" title=\"Unlocked\"></i>\r\n    </ng-template>\r\n\r\n    <ng-template #du_Id>\r\n        <span>{{du.gnbDuId}}</span>\r\n    </ng-template>\r\n\r\n    <ng-template #duName>\r\n        <div class=\"du-name\">\r\n            <span>{{ du.gnbDuName || '' }}</span>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <ng-template #operationsButton>\r\n        <div class=\"operations-button-container du-body-right\">\r\n            <ui-webem-button-with-menu\r\n                [buttonConfig]=\"optionModel\"\r\n                [menuOptions]=\"duMenuItems\"\r\n                [scrollableContainer]=\"container\"\r\n                (click)=\"emitToggleAction()\"\r\n                uiWebemToggleParentTooltip\r\n            >\r\n            </ui-webem-button-with-menu>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <ng-template #summaryInTwoRows>\r\n    <span class=\"du-body-middle-item\" style=\"margin-bottom: 4px;\">\r\n        <span class=\"operational-state-enabled\">\r\n            {{du.cellsSummary.basicCellsSummary.operationalState.enabled}}\r\n        </span>\r\n        <span class=\"operational-state-disabled\">\r\n            {{du.cellsSummary.basicCellsSummary.operationalState.disabled}}\r\n        </span>\r\n    </span>\r\n        <span class=\"du-body-middle-item\">\r\n        <span class=\"administrative-state-unlocked\">\r\n            {{du.cellsSummary.basicCellsSummary.administrativeState.unlocked}}\r\n        </span>\r\n        <span class=\"administrative-state-locked\">\r\n            {{du.cellsSummary.basicCellsSummary.administrativeState.locked}}\r\n        </span>\r\n    </span>\r\n    </ng-template>\r\n\r\n    <ng-template #summaryInOneRow>\r\n    <span class=\"du-body-middle-item in-one-row\">\r\n        <span class=\"operational-state-enabled\">\r\n            {{du.cellsSummary.basicCellsSummary.operationalState.enabled}}\r\n        </span>\r\n        <span class=\"operational-state-disabled\">\r\n            {{du.cellsSummary.basicCellsSummary.operationalState.disabled}}\r\n        </span>\r\n        <ui-webem-vertical-html-line class=\"separator\"></ui-webem-vertical-html-line>\r\n        <span class=\"administrative-state-unlocked\">\r\n            {{du.cellsSummary.basicCellsSummary.administrativeState.unlocked}}\r\n        </span>\r\n        <span class=\"administrative-state-locked\">\r\n            {{du.cellsSummary.basicCellsSummary.administrativeState.locked}}\r\n        </span>\r\n    </span>\r\n    </ng-template>\r\n</ui-webem-tile-tooltip>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges, OnDestroy,\r\n    OnInit,\r\n    Output, SimpleChanges\r\n} from '@angular/core';\r\nimport { AlarmSeverityType } from '../../../alarm-severity-icon/model';\r\nimport { Du } from '@oam/cu-asm-api/models/du';\r\nimport { AdministrativeState } from '@oam/cu-asm-api/models/administrative-state';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { VisibleDuWidgetParameters } from '../../model/du-widget-parameters.definition';\r\nimport { ButtonLength } from '../../../button/model/button-length.enum';\r\nimport { GetHighestAlarmSeverityPipe } from '../../../alarm-severity-icon/pipes/get-highest-alarm-severity.pipe';\r\nimport { TileTooltipContent } from '../../../tile-tooltip/models';\r\nimport { capitalize } from 'lodash';\r\nimport { NullableValuePipe } from '@oam/shared/lib/modules/webem-common';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { selectCommissioningFlagStatus } from '@oam/commissioning-flag-store/lib/core/selectors/select-commissioning-status';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MenuAction } from '../../../button-with-menu/model/menu-action';\r\nimport { RoleAccessForbiddenFlagEnum } from '@oam/core/lib/models/role-access/role-access-forbidden-flag.enmu';\r\n\r\n@Component({\r\n    selector: 'ui-webem-du',\r\n    templateUrl: './du.component.html',\r\n    styleUrls: ['./du.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DuComponent implements OnInit, OnChanges, OnDestroy {\r\n    private static readonly getHighestAlarmSeverityPipe = new GetHighestAlarmSeverityPipe();\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    @Input() du: Du;\r\n    @Input() isRedirectionToCellViewAvailable: boolean;\r\n    @Input() visibleDuParameters: VisibleDuWidgetParameters;\r\n    @Input() isDuSelected: boolean;\r\n    @Input() container?: ElementRef;\r\n    @Input() isCellSummaryInOneRow = false;\r\n\r\n    @Output() lockDu = new EventEmitter<void>();\r\n    @Output() unlockDu = new EventEmitter<void>();\r\n    @Output() showCells = new EventEmitter<void>();\r\n    @Output() goToPe = new EventEmitter<void>();\r\n    @Output() toggleMenu = new EventEmitter<void>();\r\n\r\n    duMenuItems: MenuAction[];\r\n    highestSeverityAlarm?: AlarmSeverityType;\r\n    totalNumberOfCellsInGivenDu: number;\r\n    isLocked: boolean;\r\n    tooltipPanelContent: TileTooltipContent[];\r\n    tooltipPanelContentStatus: TileTooltipContent[];\r\n    private commissioningSubscription: Subscription;\r\n    isCommissioningInProgress: boolean;\r\n\r\n    readonly optionModel: ButtonModel = {\r\n        title: 'Actions',\r\n        icon: 'mdi mdi-dots-vertical',\r\n        theme: ButtonTheme.Secondary,\r\n        length: ButtonLength.Long\r\n    };\r\n\r\n    constructor(\r\n      private readonly nullableValuePipe: NullableValuePipe,\r\n      private readonly store: Store\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.recalculateStateForDu();\r\n        this.recalculateTooltipContent();\r\n        this.commissioningSubscription = this.store.pipe(\r\n            takeUntil(this.ngUnsubscribe),\r\n            select(selectCommissioningFlagStatus)\r\n        )\r\n        .subscribe(data => {\r\n            this.isCommissioningInProgress = data;\r\n            this.setMenu();\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.recalculateStateForDu();\r\n        this.recalculateTooltipContent();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    private checkAdministrativeState() {\r\n        this.isLocked = this.du.administrativeState === AdministrativeState.Locked;\r\n    }\r\n\r\n    private setMenu() {\r\n        const lockUnlockOption = this.getLockUnlockOption();\r\n        this.duMenuItems = [\r\n            lockUnlockOption,\r\n            ...this.isRedirectionToCellViewAvailable ? [\r\n                {\r\n                    label: 'Show cells',\r\n                    icon: 'mdi mdi-hexagon-multiple-outline',\r\n                    command: () => this.showCells.emit()\r\n                }\r\n            ] : [],\r\n            {\r\n                label: 'Go to PE',\r\n                icon: 'mdi mdi-import',\r\n                command: () => this.goToPe.emit()\r\n            }\r\n        ];\r\n    }\r\n\r\n    protected recalculateStateForDu() {\r\n        this.checkAdministrativeState();\r\n        this.setMenu();\r\n        this.highestSeverityAlarm = DuComponent.getHighestAlarmSeverityPipe.transform(this.du.alarms || []);\r\n        this.totalNumberOfCellsInGivenDu = this.getTotalNumberOfCellsInGivenDu();\r\n    }\r\n\r\n    private getLockUnlockOption(): MenuAction {\r\n        if (this.isLocked) {\r\n            return {\r\n                label: 'Unlock DU',\r\n                icon: 'mdi mdi-lock-open-variant-outline mdi-16px',\r\n                command: () => this.unlockDu.emit(),\r\n                disabled: this.isCommissioningInProgress,\r\n                roleAccessFlag: RoleAccessForbiddenFlagEnum.LOCK_UNLOCK\r\n            };\r\n        }\r\n\r\n        return {\r\n            label: 'Lock DU',\r\n            icon: 'mdi mdi-lock mdi-16px',\r\n            command: () => this.lockDu.emit(),\r\n            disabled: this.isCommissioningInProgress,\r\n            roleAccessFlag: RoleAccessForbiddenFlagEnum.LOCK_UNLOCK\r\n        };\r\n    }\r\n\r\n    private getTotalNumberOfCellsInGivenDu() {\r\n        return this.du.cellsSummary.basicCellsSummary.administrativeState.locked\r\n            + this.du.cellsSummary.basicCellsSummary.administrativeState.unlocked;\r\n    }\r\n\r\n    private recalculateTooltipContent() {\r\n        const { enabled, disabled } = this.du.cellsSummary.basicCellsSummary.operationalState;\r\n        const { locked, unlocked } = this.du.cellsSummary.basicCellsSummary.administrativeState;\r\n\r\n        this.tooltipPanelContent = [\r\n            { title: 'gNB DU ID', value: this.du.gnbDuId },\r\n            { title: 'DU Name', value: this.nullableValuePipe.transform(this.du.gnbDuName) },\r\n            { title: 'Total Cells', value: this.totalNumberOfCellsInGivenDu },\r\n            { title: 'Cells enabled/disabled', value: `${enabled}/${disabled}` },\r\n            { title: 'Cells unlocked/locked', value: `${unlocked}/${locked}` }\r\n        ];\r\n\r\n        this.tooltipPanelContentStatus = [\r\n            { title: 'F1 Link status', value: capitalize(this.nullableValuePipe.transform(this.du.f1LinkStatus)) },\r\n            { title: 'Administrative state', value: capitalize(this.du.administrativeState) }\r\n        ];\r\n    }\r\n\r\n    emitToggleAction() {\r\n        this.toggleMenu.emit();\r\n    }\r\n}\r\n","<div class=\"filter-input\" [ngClass]=\"{disabled: disabled}\">\r\n    <div class=\"ui-inputgroup\">\r\n        <div class=\"ui-inputgroup-addon\" (click)=\"onValueChange()\" [ngClass]=\"{disabled: disabled}\">\r\n            <i class=\"mdi mdi-filter\"></i>\r\n        </div>\r\n        <input pInputText\r\n               [placeholder]=\"placeholder\"\r\n               class=\"search-input-field\"\r\n               type=\"text\"\r\n               autocomplete=\"off\"\r\n               [id]=\"'filter-input-field-' + id\"\r\n               (keyup)=\"onValueChange()\"\r\n               [(ngModel)]=\"value\"\r\n               [disabled]=\"disabled\">\r\n        <ui-webem-input-clear *ngIf=\"!!value\" (buttonClicked)=\"resetValue($event)\" [isDisabled]=\"disabled\" [ngClass]=\"{disabled: disabled}\">\r\n        </ui-webem-input-clear>\r\n    </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\n\r\n@Component({\r\n    selector: 'ui-webem-filter-input',\r\n    templateUrl: './filter-input.component.html',\r\n    styleUrls: ['./filter-input.component.scss']\r\n})\r\nexport class FilterInputComponent implements OnInit, OnDestroy {\r\n    @Output()\r\n    valueChange: EventEmitter<string> = new EventEmitter<string>();\r\n    @Input()\r\n    value = '';\r\n    @Input()\r\n    disabled = false;\r\n    @Input()\r\n    placeholder = '';\r\n    @Input()\r\n    debounceTime = 200;\r\n    @Input()\r\n    id = '';\r\n\r\n    changeValueSubject: Subject<void>;\r\n    filterIconModel: ButtonModel;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.changeValueSubject = new Subject<void>();\r\n        this.changeValueSubject\r\n            .pipe(debounceTime(this.debounceTime))\r\n            .subscribe(() => this.valueChange.emit(this.value));\r\n        this.filterIconModel = {\r\n            icon: 'mdi mdi-filter'\r\n        };\r\n    }\r\n\r\n    onValueChange(): void {\r\n        this.changeValueSubject.next();\r\n    }\r\n\r\n    resetValue(event: MouseEvent) {\r\n        this.value = '';\r\n        this.changeValueSubject.next();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.changeValueSubject.complete();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FilterInputComponent } from './components/filter-input/filter-input.component';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { WebemButtonModule } from '../button/button.module';\r\nimport { InputClearModule } from '../input-clear/components/input-clear.module';\r\n\r\n@NgModule({\r\n    declarations: [FilterInputComponent],\r\n    exports: [FilterInputComponent],\r\n    imports: [\r\n        CommonModule,\r\n        InputTextModule,\r\n        FormsModule,\r\n        WebemButtonModule,\r\n        InputClearModule\r\n    ]\r\n})\r\nexport class FilterInputModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GoToPeTableButtonComponent } from './components/go-to-pe-table-button/go-to-pe-table-button.component';\r\nimport { WebemButtonModule } from '../button/button.module';\r\n\r\n\r\n@NgModule({\r\n    declarations: [GoToPeTableButtonComponent],\r\n    exports: [GoToPeTableButtonComponent],\r\n    imports: [\r\n        CommonModule,\r\n        WebemButtonModule\r\n    ]\r\n})\r\nexport class GoToPeTableButtonModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { InputClearComponent } from './input-clear/input-clear.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n    declarations: [InputClearComponent],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [InputClearComponent]\r\n})\r\nexport class InputClearModule {\r\n}\r\n","import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ui-webem-input-clear',\r\n    templateUrl: './input-clear.component.html',\r\n    styleUrls: ['./input-clear.component.scss']\r\n})\r\nexport class InputClearComponent {\r\n    @Input() isDisabled: boolean;\r\n\r\n    @HostBinding('class') class = 'ui-inputgroup-addon';\r\n\r\n    @Output()\r\n    buttonClicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n\r\n    constructor() { }\r\n\r\n    onClickEvent(event: MouseEvent): void {\r\n        this.buttonClicked.emit(event);\r\n    }\r\n\r\n}\r\n","<span class=\"clear-button\" (click)=\"onClickEvent($event)\" [ngClass]=\"{disabled: isDisabled}\">\r\n    <i id=\"clear-input\" class=\"mdi mdi-close\"></i>\r\n</span>\r\n\r\n","import { createAction, props } from '@ngrx/store';\r\n\r\nexport const getLegalNoticeMessage = createAction(\r\n    '[LegalNoticeModal] Get Legal Notice Modal'\r\n);\r\n\r\nexport const setLegalNoticeMessage = createAction(\r\n    '[LegalNoticeModal] Set Legal Notice Modal',\r\n    props<{ securityNotice: string, confirmButtonVisible?: boolean, okButtonVisible?: boolean, logoutButtonVisible?: boolean, icon?: string }>()\r\n);\r\n\r\nexport const showLegalNoticeModal = createAction(\r\n    '[LegalNoticeModal] Show Legal Notice Modal'\r\n);\r\n\r\nexport const openLegalNoticeModal = createAction(\r\n    '[LegalNoticeModal] Open Legal Notice Modal before redirect'\r\n);\r\n\r\nexport const submitLegalNoticeModal = createAction(\r\n    '[User][LegalNoticeModal] Submit Legal Notice Modal'\r\n);\r\n\r\nexport const denyLegalNoticeModal = createAction(\r\n    '[User][LegalNoticeModal] Deny Legal Notice Modal'\r\n);\r\n","<div class=\"spinner-area\" *ngIf=\"loading\">\r\n    <ui-webem-spinner class=\"data-loading-spinner embedded\"></ui-webem-spinner>\r\n</div>\r\n\r\n<div *ngIf=\"!isChartEmpty\" class=\"chart-container\">\r\n    <ui-webem-chart #chart\r\n                    type=\"line\"\r\n                    [options]=\"options\"\r\n                    [data]=\"filteredData\"\r\n                    [labels]=\"labels\"\r\n                    [dataSetConfigs]=\"filteredDataSetConfigs\">\r\n    </ui-webem-chart>\r\n    <div class=\"custom-legend-wrapper\">\r\n        <ng-container\r\n            [ngTemplateOutlet]=\"customLegend\">\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #customLegend let-overMaxItems>\r\n    <div class=\"custom-legend-container\">\r\n        <ng-container\r\n            *ngFor=\"let item of customLegendItems; let i = index;\"\r\n            [ngTemplateOutlet]=\"customLegendItem\"\r\n            [ngTemplateOutletContext]=\"{ $implicit: item, i: i }\">\r\n        </ng-container>\r\n    </div>\r\n    <ui-webem-button class=\"toggle\"\r\n        [disabled]=\"dataSetConfigs.length <= maxItems\"\r\n        [model]=\"expanded ? collapseButtonModel : expandButtonModel\"\r\n        (action)=\"expanded = !expanded\">\r\n    </ui-webem-button>\r\n</ng-template>\r\n\r\n<ng-template #customLegendItem let-item let-i=\"i\">\r\n    <div class=\"custom-legend-item selectable\"\r\n        [ngClass]=\"{ 'crossed': !item.visible }\"\r\n        *ngIf=\"!maxItems || expanded || i < maxItems\"\r\n        (click)=\"toggleVisibility(item)\">\r\n        <i class=\"mdi mdi-square\" [style.color]=\"item.color\"></i>\r\n        <span title=\"{{item.label}}\">{{ item.label }}</span>\r\n    </div>\r\n</ng-template>\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy, ViewChild } from '@angular/core';\r\nimport { ChartDataSetConfig } from '../../../chart/model/chart-data-set.type';\r\nimport { WebemChartData } from '../../../chart/model/webem-chart.data';\r\nimport { isEmpty } from 'lodash';\r\nimport { ChartOptions } from 'chart.js';\r\nimport { CustomLegendItem } from '../../core/models/custom-legend-item.definition';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ButtonThickness } from '../../../button/model/button-thickness.enum';\r\nimport { ChartComponent } from '../../../chart/components/chart/chart.component';\r\n\r\n@Component({\r\n    selector: 'ui-webem-line-chart',\r\n    templateUrl: './line-chart.component.html',\r\n    styleUrls: ['./line-chart.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LineChartComponent implements OnChanges {\r\n    @Input() dataSetConfigs: ChartDataSetConfig[];\r\n    @Input() data: WebemChartData[];\r\n    @Input() options: ChartOptions;\r\n    @Input() maxItems: number;\r\n    @Input() labels: string[];\r\n    @Input() loading: boolean;\r\n    @ViewChild('chart') chart: ChartComponent;\r\n\r\n    expandButtonModel: ButtonModel = {\r\n        icon: 'mdi mdi-chevron-up',\r\n        theme: ButtonTheme.Secondary,\r\n        thickness: ButtonThickness.Thin,\r\n        title: 'Show full legend'\r\n    };\r\n    collapseButtonModel: ButtonModel = {\r\n        icon: 'mdi mdi-chevron-down',\r\n        theme: ButtonTheme.Secondary,\r\n        thickness: ButtonThickness.Thin,\r\n        title: 'Hide full legend'\r\n    };\r\n    expanded = false;\r\n    customLegendItems: CustomLegendItem[] = [];\r\n    filteredDataSetConfigs: ChartDataSetConfig[] = [];\r\n    filteredData: WebemChartData[] = [];\r\n    isChartEmpty: boolean;\r\n\r\n    constructor() { }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.dataSetConfigs && this.didDataSetConfigsChange(changes.dataSetConfigs.previousValue, this.dataSetConfigs)) {\r\n                this.updateChartInfo();\r\n            }\r\n\r\n        if (changes.dataSetConfigs || changes.data) {\r\n            this.filterData();\r\n            this.isChartEmpty = isEmpty(this.data);\r\n        }\r\n    }\r\n\r\n    toggleVisibility(item: CustomLegendItem) {\r\n        item.visible = !item.visible;\r\n        this.filterData();\r\n    }\r\n\r\n    savePmChartAsPicture(fileName: string) {\r\n        this.chart.saveChartAsPicture(fileName);\r\n    }\r\n\r\n    filterData() {\r\n        const visibleItemsIndices = this.customLegendItems\r\n            .filter(item => item.visible)\r\n            .map(item => item.index);\r\n\r\n        this.filteredData = this.data.filter((value, index) => visibleItemsIndices.includes(index));\r\n        this.filteredDataSetConfigs = this.dataSetConfigs.filter((value, index) => visibleItemsIndices.includes(index));\r\n    }\r\n\r\n    private updateChartInfo(): void {\r\n        this.filteredData = this.data;\r\n        this.filteredDataSetConfigs = this.dataSetConfigs;\r\n        this.customLegendItems = this.generateCustomLegendItems(this.dataSetConfigs);\r\n    }\r\n\r\n    private didDataSetConfigsChange(previous: undefined | ChartDataSetConfig[], current: ChartDataSetConfig[]): boolean {\r\n        return !previous || previous.map(dsc => dsc.label).join('') !== current.map(dsc => dsc.label).join('');\r\n    }\r\n\r\n    private generateCustomLegendItems(dataSetConfigs: ChartDataSetConfig[]): CustomLegendItem[] {\r\n        return dataSetConfigs.map((dataSetConfig, index) => ({\r\n            color: dataSetConfig.borderColor as string,\r\n            label: dataSetConfig.label as string,\r\n            visible: true,\r\n            index\r\n        }));\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LineChartComponent } from './components/line-chart/line-chart.component';\r\nimport { ChartModule } from '../chart/chart.module';\r\nimport { WebemButtonModule } from '../button/button.module';\r\nimport { SpinnerModule } from '@oam/cu-ui/lib/spinner/spinner.module';\r\n\r\n@NgModule({\r\n    declarations: [LineChartComponent],\r\n    exports: [LineChartComponent],\r\n    imports: [\r\n        CommonModule,\r\n        WebemButtonModule,\r\n        ChartModule,\r\n        SpinnerModule\r\n    ]\r\n})\r\nexport class LineChartModule {\r\n}\r\n","<ng-container *ngTemplateOutlet=\"infoBarTemplate\"></ng-container>\r\n","import { Component, ContentChild, OnInit, TemplateRef } from '@angular/core';\r\nimport { InfoBarDirective } from '../../directives/info-bar.directive';\r\n\r\n@Component({\r\n    selector: 'ui-webem-module-info-bar',\r\n    templateUrl: './module-info-bar.component.html',\r\n    styleUrls: ['./module-info-bar.component.scss']\r\n})\r\nexport class ModuleInfoBarComponent implements OnInit {\r\n    @ContentChild(InfoBarDirective, {read: TemplateRef, static: true}) infoBarTemplate: TemplateRef<any>;\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n","import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[uiWebemSharedInfoBar]'\r\n})\r\nexport class InfoBarDirective {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ui-webem-no-selected-message',\r\n    templateUrl: './no-selected-message.component.html',\r\n    styleUrls: ['./no-selected-message.component.scss']\r\n})\r\nexport class NoSelectedMessageComponent implements OnInit, OnChanges {\r\n    @Input() message: string;\r\n    @Input() isLoading: boolean;\r\n\r\n    iconClasses: string[];\r\n\r\n    readonly CLASSES = {\r\n        INFO: 'mdi-information',\r\n        LOADING: 'mdi-loading',\r\n        SPIN: 'mdi-spin'\r\n    };\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.isLoading = changes.isLoading?.currentValue;\r\n        this.iconClasses = this.isLoading\r\n            ? [this.CLASSES.LOADING, this.CLASSES.SPIN]\r\n            : [this.CLASSES.INFO];\r\n    }\r\n}\r\n","<div class=\"no-selected\">\r\n    <i class=\"information-icon mdi\" [ngClass]=\"iconClasses\"></i>\r\n    <span>\r\n        {{message}}\r\n    </span>\r\n</div>\r\n","<div [ngSwitch]=\"cuResetState\">\r\n\r\n    <ui-webem-button\r\n        [oamRoleAccessControl]=\"'VCU_RESET_SITE'\"\r\n        [hostInstance]=\"btn\"\r\n        #btn\r\n        *ngSwitchCase=\"cuResetStateEnum.ENABLED\"\r\n        [model]=\"resetButtonEnabledModel\"\r\n        (action)=\"onResetClick()\">\r\n    </ui-webem-button>\r\n\r\n    <ui-webem-button\r\n        *ngSwitchCase=\"cuResetStateEnum.ONGOING\"\r\n        [model]=\"resetButtonOngoingModel\"\r\n        [disabled]=\"true\">\r\n    </ui-webem-button>\r\n\r\n</div>\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { CuResetButtonState } from '../../model/cu-reset-button-state';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ButtonLength } from '../../../button/model/button-length.enum';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\n\r\n@Component({\r\n    selector: 'ui-webem-reset-button',\r\n    templateUrl: './reset-button.component.html',\r\n    styleUrls: ['./reset-button.component.scss']\r\n})\r\nexport class ResetButtonComponent implements OnInit {\r\n    @Input() enabledButtonTitle: string;\r\n    @Input() ongoingButtonTitle: string;\r\n\r\n    @Input() cuResetState: CuResetButtonState;\r\n    @Output() resetClick = new EventEmitter<void>();\r\n\r\n    cuResetStateEnum = CuResetButtonState;\r\n\r\n    resetButtonEnabledModel: ButtonModel;\r\n    resetButtonOngoingModel: ButtonModel;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.resetButtonEnabledModel = {\r\n            theme: ButtonTheme.Secondary,\r\n            icon: 'mdi mdi-refresh mdi-flip-h',\r\n            title: this.enabledButtonTitle,\r\n            length: ButtonLength.Long\r\n        };\r\n\r\n        this.resetButtonOngoingModel = {\r\n            theme: ButtonTheme.Secondary,\r\n            icon: 'mdi mdi-loading mdi-spin',\r\n            title: this.ongoingButtonTitle,\r\n            length: ButtonLength.Long,\r\n        };\r\n    }\r\n\r\n    onResetClick() {\r\n        this.resetClick.emit();\r\n    }\r\n}\r\n","<div [ngSwitch]=\"saveConfigurationState\">\r\n\r\n    <ui-webem-button\r\n        *ngSwitchCase=\"saveConfigurationStateEnum.ENABLED\"\r\n        [model]=\"saveButtonEnabledModel\"\r\n        (action)=\"onSaveClick()\">\r\n    </ui-webem-button>\r\n\r\n    <ui-webem-button\r\n        *ngSwitchCase=\"saveConfigurationStateEnum.DISABLED\"\r\n        [model]=\"saveButtonDisabledModel\"\r\n        [disabled]=\"true\">\r\n    </ui-webem-button>\r\n\r\n    <ui-webem-button\r\n        *ngSwitchCase=\"saveConfigurationStateEnum.ONGOING\"\r\n        [model]=\"saveButtonOngoingModel\"\r\n        [disabled]=\"true\">\r\n    </ui-webem-button>\r\n\r\n</div>\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ButtonLength } from '../../../button/model/button-length.enum';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { SaveConfigurationState } from '../../model/save-button-state';\r\n\r\n@Component({\r\n    selector: 'ui-webem-save-button',\r\n    templateUrl: './save-button.component.html',\r\n    styleUrls: ['./save-button.component.scss']\r\n})\r\nexport class SaveButtonComponent implements OnInit {\r\n    @Input() enabledButtonTitle: string;\r\n    @Input() ongoingButtonTitle: string;\r\n    @Input() disabledButtonTitle: string;\r\n\r\n    @Input() saveConfigurationState: SaveConfigurationState;\r\n    @Output() saveClick = new EventEmitter<void>();\r\n\r\n    saveConfigurationStateEnum = SaveConfigurationState;\r\n\r\n    saveButtonEnabledModel: ButtonModel;\r\n    saveButtonDisabledModel: ButtonModel;\r\n    saveButtonOngoingModel: ButtonModel;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.saveButtonEnabledModel = {\r\n            theme: ButtonTheme.Secondary,\r\n            icon: 'mdi mdi-content-save',\r\n            title: this.enabledButtonTitle,\r\n            length: ButtonLength.Long\r\n        };\r\n\r\n        this.saveButtonDisabledModel = {\r\n            theme: ButtonTheme.Secondary,\r\n            icon: 'mdi mdi-content-save',\r\n            title: this.disabledButtonTitle,\r\n            length: ButtonLength.Long\r\n        };\r\n\r\n        this.saveButtonOngoingModel = {\r\n            theme: ButtonTheme.Secondary,\r\n            icon: 'mdi mdi-loading mdi-spin',\r\n            title: this.ongoingButtonTitle,\r\n            length: ButtonLength.Long\r\n        };\r\n    }\r\n\r\n    onSaveClick() {\r\n        this.saveClick.emit();\r\n    }\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ButtonLength } from '../../../button/model/button-length.enum';\r\n\r\n@Component({\r\n    selector: 'ui-webem-lock-button',\r\n    templateUrl: './lock-button.component.html',\r\n    styleUrls: ['./lock-button.component.scss']\r\n})\r\nexport class LockButtonComponent implements OnInit {\r\n\r\n    @Input() buttonTitle: string;\r\n    @Input() disabled = false;\r\n    @Output() lockClick = new EventEmitter<void>();\r\n\r\n    buttonModel: ButtonModel;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.buttonModel = {\r\n            theme: ButtonTheme.Secondary,\r\n            icon: 'mdi mdi-lock',\r\n            title: this.buttonTitle,\r\n            length: ButtonLength.Long\r\n        };\r\n    }\r\n\r\n}\r\n","<ui-webem-button\r\n    [oamRoleAccessControl]=\"'LOCK_UNLOCK'\"\r\n    [hostInstance]=\"btn\"\r\n    #btn\r\n    [model]=\"buttonModel\"\r\n    [disabled]=\"disabled\"\r\n    (action)=\"lockClick.emit()\">\r\n</ui-webem-button>\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { ButtonLength } from '../../../button/model/button-length.enum';\r\n\r\n@Component({\r\n    selector: 'ui-webem-lock-open-button',\r\n    templateUrl: './lock-open-button.component.html',\r\n    styleUrls: ['./lock-open-button.component.scss']\r\n})\r\nexport class LockOpenButtonComponent implements OnInit {\r\n\r\n    @Input() buttonTitle: string;\r\n    @Input() disabled: boolean;\r\n    @Output() lockOpenClick = new EventEmitter<void>();\r\n\r\n    buttonModel: ButtonModel;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.buttonModel = {\r\n            theme: ButtonTheme.Secondary,\r\n            icon: 'mdi mdi-lock-open-variant-outline',\r\n            title: this.buttonTitle,\r\n            length: ButtonLength.Long\r\n        };\r\n    }\r\n\r\n}\r\n","<ui-webem-button\r\n    [oamRoleAccessControl]=\"'LOCK_UNLOCK'\"\r\n    [hostInstance]=\"btn\"\r\n    #btn\r\n    [model]=\"buttonModel\"\r\n    [disabled]=\"disabled\"\r\n    (action)=\"lockOpenClick.emit()\">\r\n</ui-webem-button>\r\n","<div class=\"operations-panel-container\">\r\n\r\n    <div class=\"operations-panel-left\">\r\n        <div class=\"operations-panel-row\">\r\n            <div class=\"label\">\r\n                CU\r\n            </div>\r\n            <div class=\"buttons-group\">\r\n                <ui-webem-reset-button\r\n                    enabledButtonTitle=\"Reset CU\"\r\n                    ongoingButtonTitle=\"Resetting CU...\"\r\n                    [cuResetState]=\"cuResetState\"\r\n                    (resetClick)=\"resetCuClicked.emit()\">\r\n                </ui-webem-reset-button>\r\n\r\n                <ui-webem-save-button\r\n                    enabledButtonTitle=\"Save configuration\"\r\n                    disabledButtonTitle=\"Configuration not available\"\r\n                    ongoingButtonTitle=\"Saving configuration...\"\r\n                    [saveConfigurationState]=\"saveConfigurationState\"\r\n                    (saveClick)=\"saveConfigurationClicked.emit()\">\r\n                </ui-webem-save-button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"operations-panel-row\">\r\n            <div class=\"label\">\r\n                DUs\r\n            </div>\r\n            <div class=\"buttons-group\">\r\n                <ui-webem-lock-button\r\n                    (lockClick)=\"duLockClicked.emit()\"\r\n                    [disabled]=\"isCommissioningInProgress\"\r\n                    buttonTitle=\"Lock DU(s)\">\r\n                </ui-webem-lock-button>\r\n                <ui-webem-lock-open-button\r\n                    (lockOpenClick)=\"duLockOpenClicked.emit()\"\r\n                    [disabled]=\"isCommissioningInProgress\"\r\n                    buttonTitle=\"Unlock DU(s)\">\r\n                </ui-webem-lock-open-button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"operations-panel-row\">\r\n            <div class=\"label\">\r\n                Cell Groups / Cells\r\n            </div>\r\n            <div class=\"buttons-group\">\r\n                <ui-webem-lock-button\r\n                    (lockClick)=\"cellsLockClicked.emit()\"\r\n                    [disabled]=\"isCommissioningInProgress\"\r\n                    buttonTitle=\"Lock cell(s)\">\r\n                </ui-webem-lock-button>\r\n                <ui-webem-lock-open-button\r\n                    (lockOpenClick)=\"cellsLockOpenClicked.emit()\"\r\n                    [disabled]=\"isCommissioningInProgress\"\r\n                    buttonTitle=\"Unlock cell(s)\">\r\n                </ui-webem-lock-open-button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"operations-panel-row\">\r\n            <div class=\"label\">\r\n                X2 links\r\n            </div>\r\n            <div class=\"buttons-group\">\r\n                <ui-webem-lock-button\r\n                    (lockClick)=\"x2LinksLockClicked.emit()\"\r\n                    [disabled]=\"isCommissioningInProgress\"\r\n                    buttonTitle=\"Lock X2 link(s)\">\r\n                </ui-webem-lock-button>\r\n                <ui-webem-lock-open-button\r\n                    (lockOpenClick)=\"x2LinksLockOpenClicked.emit()\"\r\n                    [disabled]=\"isCommissioningInProgress\"\r\n                    buttonTitle=\"Unlock X2 link(s)\">\r\n                </ui-webem-lock-open-button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"operations-panel-right\" *ngIf=\"isXnNgNsOperationsDisplay\">\r\n        <div class=\"operations-panel-row\">\r\n            <div class=\"label\">\r\n                Xn links\r\n            </div>\r\n            <div class=\"buttons-group\">\r\n                <ui-webem-lock-button\r\n                    (lockClick)=\"xnLinksLockClicked.emit()\"\r\n                    [disabled]=\"isCommissioningInProgress\"\r\n                    buttonTitle=\"Lock Xn link(s)\">\r\n                </ui-webem-lock-button>\r\n                <ui-webem-lock-open-button\r\n                    (lockOpenClick)=\"xnLinksLockOpenClicked.emit()\"\r\n                    [disabled]=\"isCommissioningInProgress\"\r\n                    buttonTitle=\"Unlock Xn link(s)\">\r\n                </ui-webem-lock-open-button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"operations-panel-row\">\r\n            <div class=\"label\">\r\n                NG links\r\n            </div>\r\n            <div class=\"buttons-group\">\r\n                <ui-webem-lock-button\r\n                    (lockClick)=\"ngLinksLockClicked.emit()\"\r\n                    [disabled]=\"isCommissioningInProgress\"\r\n                    buttonTitle=\"Lock NG link(s)\">\r\n                </ui-webem-lock-button>\r\n                <ui-webem-lock-open-button\r\n                    (lockOpenClick)=\"ngLinksLockOpenClicked.emit()\"\r\n                    [disabled]=\"isCommissioningInProgress\"\r\n                    buttonTitle=\"Unlock NG link(s)\">\r\n                </ui-webem-lock-open-button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"operations-panel-row\">\r\n            <div class=\"label\">\r\n                Network slicing\r\n            </div>\r\n            <div class=\"buttons-group\">\r\n                <ui-webem-lock-button\r\n                    (lockClick)=\"networkSlicingLockClicked.emit()\"\r\n                    [disabled]=\"isCommissioningInProgress\"\r\n                    buttonTitle=\"Lock network slicing\">\r\n                </ui-webem-lock-button>\r\n                <ui-webem-lock-open-button\r\n                    (lockOpenClick)=\"networkSlicingLockOpenClicked.emit()\"\r\n                    [disabled]=\"isCommissioningInProgress\"\r\n                    buttonTitle=\"Unlock network slicing\">\r\n                </ui-webem-lock-open-button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { CuResetButtonState } from '../../model/cu-reset-button-state';\r\nimport { SaveConfigurationState } from '../../model/save-button-state';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { selectCommissioningFlagStatus } from '@oam/commissioning-flag-store/lib/core/selectors/select-commissioning-status';\r\nimport { VnfcSharedService } from '../../../../../../vnfc-shared/src/lib/vnfc-store/services/vnfc-shared.service';\r\n\r\n@Component({\r\n    selector: 'ui-webem-operations-control-panel',\r\n    templateUrl: './operations-control-panel.component.html',\r\n    styleUrls: ['./operations-control-panel.component.scss']\r\n})\r\nexport class OperationsControlPanelComponent implements OnInit {\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    @Input() cuResetState: CuResetButtonState;\r\n    @Input() saveConfigurationState: SaveConfigurationState;\r\n\r\n    @Output() resetCuClicked = new EventEmitter<void>();\r\n    @Output() saveConfigurationClicked = new EventEmitter<void>();\r\n    @Output() duLockClicked = new EventEmitter<void>();\r\n    @Output() duLockOpenClicked = new EventEmitter<void>();\r\n    @Output() cellsLockClicked = new EventEmitter<void>();\r\n    @Output() cellsLockOpenClicked = new EventEmitter<void>();\r\n    @Output() x2LinksLockClicked = new EventEmitter<void>();\r\n    @Output() x2LinksLockOpenClicked = new EventEmitter<void>();\r\n    @Output() xnLinksLockClicked = new EventEmitter<void>();\r\n    @Output() xnLinksLockOpenClicked = new EventEmitter<void>();\r\n    @Output() ngLinksLockClicked = new EventEmitter<void>();\r\n    @Output() ngLinksLockOpenClicked = new EventEmitter<void>();\r\n    @Output() networkSlicingLockClicked = new EventEmitter<void>();\r\n    @Output() networkSlicingLockOpenClicked = new EventEmitter<void>();\r\n\r\n    private commissioningSubscription: Subscription;\r\n    isCommissioningInProgress: boolean;\r\n    isXnNgNsOperationsDisplay: boolean;\r\n\r\n    constructor(private readonly store: Store,\r\n                vnfcSharedService: VnfcSharedService) {\r\n        this.isXnNgNsOperationsDisplay = vnfcSharedService.isVcu();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.commissioningSubscription = this.store.pipe(\r\n          takeUntil(this.ngUnsubscribe),\r\n          select(selectCommissioningFlagStatus)\r\n        )\r\n          .subscribe(data => {\r\n              this.isCommissioningInProgress = data;\r\n          });\r\n    }\r\n\r\n}\r\n","export enum CuResetButtonState {\r\n    ENABLED = 'enabled',\r\n    ONGOING = 'ongoing',\r\n}\r\n","export enum SaveConfigurationState {\r\n    ENABLED = 'enabled',\r\n    DISABLED = 'disabled',\r\n    ONGOING = 'ongoing'\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { OverlayPanel } from 'primeng/overlaypanel';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { ButtonOptions } from '../../../button/model/button-options.definition';\r\n\r\n@Component({\r\n    selector: 'ui-webem-overlay-menu-bar',\r\n    templateUrl: './overlay-menu-bar.component.html',\r\n    styleUrls: ['./overlay-menu-bar.component.scss']\r\n})\r\nexport class OverlayMenuBarComponent implements OnInit {\r\n    @Input() model: ButtonModel;\r\n    @Input() options?: ButtonOptions;\r\n    @Input() appendTo: string | HTMLDivElement;\r\n    @Input() disabled: boolean;\r\n    @Input() buttonId: string;\r\n    @Input() styleClass?: string;\r\n    @Input() title = '';\r\n    @Input() roleAccessFlag?: string;\r\n    @Input() componentsToHideBeforeOverlayPanel: object[] = [];\r\n    @Output() visibilityChange = new EventEmitter<boolean>();\r\n    @ViewChild(OverlayPanel, { static: true }) private readonly overlayPanel: OverlayPanel;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    toggle(event: Event) {\r\n        this.overlayPanel.toggle(event);\r\n        this.visibilityChange.emit(this.isOverlayVisible());\r\n    }\r\n\r\n    hide() {\r\n        if (this.isOverlayVisible()) {\r\n            this.overlayPanel.hide();\r\n            this.visibilityChange.emit(false);\r\n        }\r\n    }\r\n\r\n    isOverlayVisible() {\r\n        return this.overlayPanel.overlayVisible;\r\n    }\r\n\r\n    onHide() {\r\n        this.componentsToHideBeforeOverlayPanel.forEach((component: any) => {\r\n            if (!!component && !!component.overlayVisible) {\r\n                component.overlayVisible = false;\r\n            }\r\n        });\r\n    }\r\n}\r\n","<span>\r\n    <div class=\"overlay-panel-target\" #overlayPanelTarget></div>\r\n    <p-overlayPanel [dismissable]=\"true\"\r\n                    showTransitionOptions=\"0ms\"\r\n                    hideTransitionOptions=\"0ms\"\r\n                    [showCloseIcon]=\"false\"\r\n                    [appendTo]=\"appendTo ? appendTo : overlayPanelTarget\"\r\n                    [styleClass]=\"styleClass ? styleClass : ''\"\r\n                    (onHide)=\"onHide()\"\r\n    >\r\n        <ng-content></ng-content>\r\n    </p-overlayPanel>\r\n    <ui-webem-button [oamRoleAccessControl]=\"roleAccessFlag\"\r\n                     [hostInstance]=\"btn\"\r\n                     #btn\r\n                     [id]=\"buttonId\"\r\n                     [model]=\"model\"\r\n                     [options]=\"options\"\r\n                     [disabled]=\"disabled\"\r\n                     [title]=\"title\"\r\n                     (action)=\"toggle($event.event)\">\r\n    </ui-webem-button>\r\n</span>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { OverlayPanelModule } from 'primeng/overlaypanel';\r\nimport { ClickOutsideModule } from 'ng-click-outside';\r\nimport { WebemButtonModule } from '../button/button.module';\r\nimport { OverlayMenuBarComponent } from './components/overlay-menu-bar/overlay-menu-bar.component';\r\nimport { RoleAccessModule } from '@oam/role-access-ng/lib/role-access.module';\r\n\r\n\r\n@NgModule({\r\n    declarations: [OverlayMenuBarComponent],\r\n    imports: [\r\n        CommonModule,\r\n        OverlayPanelModule,\r\n        ClickOutsideModule,\r\n        WebemButtonModule,\r\n        RoleAccessModule\r\n    ],\r\n    exports: [OverlayMenuBarComponent]\r\n})\r\nexport class OverlayMenuBarModule { }\r\n","<ui-webem-overlay-menu-bar\r\n    [model]=\"model\"\r\n    [disabled]=\"disabled ? disabled : false\"\r\n    [options]=\"options\"\r\n    [buttonId]=\"buttonId\"\r\n    [appendTo]=\"appendTo\"\r\n    [styleClass]=\"styleClass\"\r\n>\r\n    <div class=\"menu-label menu-bold-label\" *ngIf=\"description\">{{description}}</div>\r\n    <ng-content></ng-content>\r\n</ui-webem-overlay-menu-bar>\r\n","import { Component, Input } from '@angular/core';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { ButtonOptions } from '../../../button/model/button-options.definition';\r\n\r\n@Component({\r\n    selector: 'ui-webem-overlay-panel-menu-bar',\r\n    templateUrl: './overlay-panel-menu-bar.component.html',\r\n    styleUrls: ['./overlay-panel-menu-bar.component.scss']\r\n})\r\nexport class OverlayPanelMenuBarComponent {\r\n    @Input() model: ButtonModel;\r\n    @Input() options?: ButtonOptions;\r\n    @Input() description: string;\r\n    @Input() buttonId: string;\r\n    @Input() disabled?: boolean;\r\n    @Input() appendTo?: any;\r\n    @Input() styleClass?: string;\r\n\r\n    constructor() {\r\n    }\r\n}\r\n","import { TokenType } from '@oam/core/lib/store/user-state';\r\n\r\nexport function isUserAuthenticated() {\r\n    const tokenName = `${TokenType.BEARER}`;\r\n\r\n    return !!sessionStorage.getItem(tokenName);\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { SplitAreaDirective } from '../directives/split-area/split-area.directive';\r\nimport { CurledUpAreaMap } from '../model/curled-up-area-map-type';\r\n\r\n@Pipe({\r\n    name: 'sizeBiggerThanMinSize',\r\n    pure: false\r\n})\r\nexport class SizeBiggerThanMinSizePipe implements PipeTransform {\r\n    transform(marker: SplitAreaDirective, curledUpAreaMap: CurledUpAreaMap): boolean {\r\n        return marker.context.size === '*' || marker.context.size > marker.context.minSize || !curledUpAreaMap[marker.context.id];\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { SplitAreaDirective } from '../directives/split-area/split-area.directive';\r\nimport { CurledUpAreaMap } from '../model/curled-up-area-map-type';\r\n\r\n@Pipe({\r\n    name: 'isCurledUpArea',\r\n    pure: false\r\n})\r\nexport class IsCurledUpAreaPipe implements PipeTransform {\r\n    transform(marker: SplitAreaDirective, curledUpAreaMap: CurledUpAreaMap): boolean {\r\n        return marker.context.size !== '*' && marker.context.size === marker.context.minSize && !!curledUpAreaMap[marker.context.id];\r\n    }\r\n}\r\n","<as-split unit=\"pixel\" [direction]=\"splitDirection\" [gutterSize]=\"1\" [gutterStep]=\"1\" class=\"split-area\"\r\n          [useTransition]=\"true\"\r\n          (gutterClick)=\"gutterClick($event)\"\r\n          (dragEnd)=\"dragEnd($event)\"\r\n          (transitionEnd)=\"transitionEnd.emit()\">\r\n    <div\r\n        as-split-area\r\n        [minSize]=\"marker.context.minSize\"\r\n        [maxSize]=\"marker.context.maxSize\"\r\n        [size]=\"marker.context.size\"\r\n        [ngClass]=\"{'hide-split-gutter': marker.context.hideGutter}\"\r\n        *ngFor=\"let marker of markers.toArray(); trackBy: trackMarker\">\r\n        <ng-container *ngIf=\"marker | sizeBiggerThanMinSize: curledUpAreaMap\">\r\n            <ng-template [ngTemplateOutlet]=\"marker.template\"></ng-template>\r\n        </ng-container>\r\n\r\n        <ng-container\r\n            *ngIf=\"marker | isCurledUpArea: curledUpAreaMap\">\r\n            <ng-template [ngTemplateOutlet]=\"curledUpAreaMap[marker.context.id].template\"></ng-template>\r\n        </ng-container>\r\n    </div>\r\n</as-split>\r\n","import {\r\n    AfterContentInit,\r\n    Component,\r\n    ContentChildren,\r\n    OnInit,\r\n    QueryList,\r\n    Input, AfterViewInit, Output, EventEmitter\r\n} from '@angular/core';\r\nimport { SplitAreaDirective } from '../../directives/split-area/split-area.directive';\r\nimport { IOutputData } from 'angular-split/lib/interface';\r\nimport { CurledUpAreaDirective } from '../../directives/curled-up-area/curled-up-area.directive';\r\nimport { CurledUpAreaMap } from '../../model/curled-up-area-map-type';\r\n\r\n@Component({\r\n    selector: 'ui-webem-panel-split-area',\r\n    templateUrl: './panel-split-area.component.html',\r\n    styleUrls: ['./panel-split-area.component.scss']\r\n})\r\nexport class PanelSplitAreaComponent implements OnInit, AfterContentInit {\r\n\r\n    @Output() transitionEnd = new EventEmitter<void>();\r\n\r\n    @ContentChildren(SplitAreaDirective, { descendants: true }) markers: QueryList<SplitAreaDirective>;\r\n    @ContentChildren(CurledUpAreaDirective) curledUpArea: QueryList<CurledUpAreaDirective>;\r\n\r\n    curledUpAreaMap: CurledUpAreaMap = {};\r\n    @Input()\r\n    splitDirection: ('horizontal' | 'vertical') = 'horizontal';\r\n\r\n    constructor() {\r\n    }\r\n\r\n    gutterClick(data: IOutputData) {\r\n        const markers = this.markers.toArray();\r\n        const curledUpAraForGutter = this.curledUpArea.toArray()[data.gutterNum - 1];\r\n        const forId = curledUpAraForGutter && curledUpAraForGutter.context && curledUpAraForGutter.context.forId;\r\n        const rightMarker = markers.find((marker) => marker.context.id === forId);\r\n\r\n        if (rightMarker) {\r\n            if (rightMarker.context.size === rightMarker.context.maxSize || rightMarker.context.size >= rightMarker.context.defaultSize) {\r\n                rightMarker.context.size = rightMarker.context.minSize;\r\n            } else {\r\n                rightMarker.context.size = rightMarker.context.defaultSize || rightMarker.context.maxSize;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    dragEnd(data: IOutputData) {\r\n        this.markers.toArray().forEach((marker: SplitAreaDirective, index: number) => {\r\n            marker.context.size = data.sizes[index];\r\n        });\r\n    }\r\n\r\n    trackMarker(index: number) {\r\n        return index;\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        this.curledUpArea.toArray().forEach((curledUpAreaDirective) => {\r\n            if (curledUpAreaDirective.context) {\r\n                this.curledUpAreaMap[curledUpAreaDirective.context.forId] = curledUpAreaDirective;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef } from '@angular/core';\r\n\r\nexport class CurledUpAreaContext {\r\n    forId: number;\r\n}\r\n\r\n@Directive({\r\n    selector: '[uiWebemCurledUpArea]'\r\n})\r\nexport class CurledUpAreaDirective {\r\n\r\n    context = new CurledUpAreaContext();\r\n\r\n    constructor(public template: TemplateRef<any>) {\r\n    }\r\n\r\n    @Input()\r\n    set uiWebemCurledUpArea(value: CurledUpAreaContext) {\r\n        Object.assign(this.context, value);\r\n    }\r\n}\r\n","import { ContentChild, Directive, Input, OnInit, TemplateRef } from '@angular/core';\r\nimport { CurledUpAreaDirective } from '../curled-up-area/curled-up-area.directive';\r\n\r\nexport class SplitAreaDirectiveContext {\r\n    minSize?: any;\r\n    maxSize?: any;\r\n    size: any;\r\n    defaultSize?: any;\r\n    id: number;\r\n    hideGutter?: boolean;\r\n}\r\n\r\n@Directive({\r\n    selector: '[uiWebemSplitArea]'\r\n})\r\nexport class SplitAreaDirective implements OnInit {\r\n    public context = new SplitAreaDirectiveContext();\r\n    @ContentChild(CurledUpAreaDirective, { static: true }) curledArea: CurledUpAreaDirective;\r\n\r\n    @Input()\r\n    set uiWebemSplitArea(value: SplitAreaDirectiveContext | null) {\r\n        Object.assign(this.context, value);\r\n    }\r\n\r\n    constructor(public template: TemplateRef<any>) {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n\r\n}\r\n","<as-split class=\"split-area\"\r\n          [gutterSize]=\"1\"\r\n          [gutterStep]=\"1\"\r\n          [unit]=\"unit\"\r\n          [direction]=\"direction\"\r\n          [useTransition]=\"useTransition\"\r\n          (dragStart)=\"dragStart.emit()\"\r\n          (dragEnd)=\"dragEnd.emit()\"\r\n          (transitionEnd)=\"transitionEnd.emit()\">\r\n\r\n    <ng-container *ngFor=\"let panelToggle of panelToggles.toArray(); trackBy: trackIndex\">\r\n        <div class=\"split-panel-toggle-container\"\r\n             [style.order]=\"panelToggle.configuration.order\">\r\n            <div [class]=\"'split-panel-toggle-wrapper' +\r\n                ' align-' + panelToggle.configuration.align +\r\n                ' position-' + panelToggle.configuration.position\">\r\n                <ng-container [ngTemplateOutlet]=\"panelToggle.template\"></ng-container>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngFor=\"let splitPanel of splitPanels.toArray(); index as i; trackBy: trackIndex\">\r\n        <div as-split-area\r\n             [visible]=\"splitPanel.visible && splitPanel.configuration.size !== 0\"\r\n             [size]=\"splitPanel.configuration.size\"\r\n             [minSize]=\"splitPanel.configuration.minSize ? splitPanel.configuration.minSize : null\"\r\n             [maxSize]=\"splitPanel.configuration.maxSize ? splitPanel.configuration.maxSize : null\"\r\n             [ngStyle]=\"splitPanel.configuration.style ? splitPanel.configuration.style : null\"\r\n             [order]=\"i\">\r\n            <ng-container\r\n                [ngTemplateOutlet]=\"splitPanel.template\">\r\n            </ng-container>\r\n        </div>\r\n    </ng-container>\r\n\r\n</as-split>\r\n","import {\r\n    Component,\r\n    ContentChildren,\r\n    OnInit,\r\n    QueryList,\r\n    Input,\r\n    EventEmitter,\r\n    Output\r\n} from '@angular/core';\r\nimport { SplitPanelDirective } from '../../directives/split-panel/split-panel.directive';\r\nimport { PanelToggleDirective } from '../../directives/panel-toggle/panel-toggle.directive';\r\n\r\n@Component({\r\n    selector: 'ui-webem-panel-split',\r\n    templateUrl: './panel-split.component.html',\r\n    styleUrls: ['./panel-split.component.scss']\r\n})\r\nexport class PanelSplitComponent implements OnInit {\r\n    @Input() direction: 'horizontal' | 'vertical' = 'horizontal';\r\n    @Input() useTransition = true;\r\n    @Input() unit: 'pixel' | 'percent' = 'pixel';\r\n    @Output() transitionEnd = new EventEmitter<void>();\r\n    @Output() dragStart = new EventEmitter<void>();\r\n    @Output() dragEnd = new EventEmitter<void>();\r\n\r\n    @ContentChildren(SplitPanelDirective) splitPanels: QueryList<SplitPanelDirective>;\r\n    @ContentChildren(PanelToggleDirective) panelToggles: QueryList<PanelToggleDirective>;\r\n\r\n    constructor() {}\r\n\r\n    ngOnInit() {}\r\n\r\n    trackIndex(index: number) {\r\n        return index;\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef } from '@angular/core';\r\n\r\nexport interface PanelToggleConfiguration {\r\n    position: 'start' | 'center' | 'end';\r\n    align: 'start' | 'center' | 'end';\r\n    order: number;\r\n}\r\n\r\nconst DEFAULT_CONFIGURATION: PanelToggleConfiguration = {\r\n    position: 'start',\r\n    align: 'center',\r\n    order: 1,\r\n};\r\n\r\n@Directive({\r\n    selector: '[uiWebemPanelToggle]'\r\n})\r\nexport class PanelToggleDirective {\r\n    configuration: PanelToggleConfiguration = DEFAULT_CONFIGURATION;\r\n    @Input() set uiWebemPanelToggle(configuration: PanelToggleConfiguration) {\r\n        this.configuration = configuration;\r\n    }\r\n\r\n    constructor(\r\n        public template: TemplateRef<any>,\r\n    ) {}\r\n}\r\n","import { Directive, Input, TemplateRef } from '@angular/core';\r\n\r\nexport interface SplitPanelConfiguration {\r\n    minSize?: number;\r\n    maxSize?: number;\r\n    style?: any;\r\n    size: any;\r\n    id?: number;\r\n}\r\n\r\nconst DEFAULT_CONFIGURATION: SplitPanelConfiguration = {\r\n    size: '*',\r\n};\r\n\r\n@Directive({\r\n    selector: '[uiWebemSplitPanel]'\r\n})\r\nexport class SplitPanelDirective {\r\n    @Input() visible = true;\r\n    @Input() set uiWebemSplitPanel(configuration: SplitPanelConfiguration) {\r\n        this.configuration = configuration;\r\n    }\r\n    configuration = DEFAULT_CONFIGURATION;\r\n\r\n    constructor(\r\n        public template: TemplateRef<any>,\r\n    ) {}\r\n}\r\n","<div class=\"panel-component\">\r\n    <div class=\"panel-header-wrapper\" [ngClass]=\"{'disabled': disabled, 'no-header-splitter': noHeaderSplitter}\">\r\n        <div *ngIf=\"header\" class=\"panel-header\" [ngClass]=\"{'disabled': disabled}\">\r\n            <ng-container [ngTemplateOutlet]=\"header\" ></ng-container>\r\n        </div>\r\n    </div>\r\n    <div class=\"panel-content\" [ngClass]=\"{'loading': loading}\">\r\n        <div class=\"spinner-wrapper\" *ngIf=\"loading\">\r\n            <ui-webem-spinner></ui-webem-spinner>\r\n        </div>\r\n        <div class=\"content-wrapper\">\r\n            <ng-container *ngIf=\"content\" [ngTemplateOutlet]=\"content\"></ng-container>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, ContentChild, OnInit, TemplateRef, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ui-webem-panel',\r\n    templateUrl: './panel.component.html',\r\n    styleUrls: ['./panel.component.scss']\r\n})\r\nexport class PanelComponent implements OnInit {\r\n    @Input() loading = false;\r\n    @Input() disabled = false;\r\n    @Input() noHeaderSplitter = false;\r\n\r\n    @ContentChild('header', { static: true }) header: TemplateRef<any>;\r\n    @ContentChild('content', { static: true }) content: TemplateRef<any>;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","<ui-webem-panel [loading]=\"loading\" [noHeaderSplitter]='!templateTitle'>\r\n    <ng-template #header>\r\n        <div class=\"rich-panel-header-wrapper\">\r\n            <span class=\"title\">\r\n                <ng-container [ngTemplateOutlet]=\"templateTitle\"></ng-container>\r\n            </span>\r\n            <span class=\"operations\">\r\n                <ng-container [ngTemplateOutlet]=\"templateOperations\"></ng-container>\r\n                <ng-container *ngIf=\"!!redirectLink\"\r\n                    [ngTemplateOutlet]=\"redirectButton\"\r\n                    [ngTemplateOutletContext]=\"{ $implicit: redirectLink }\">\r\n                </ng-container>\r\n            </span>\r\n        </div>\r\n    </ng-template>\r\n    <ng-template #content>\r\n        <ng-container [ngTemplateOutlet]=\"templateContent\"></ng-container>\r\n    </ng-template>\r\n</ui-webem-panel>\r\n\r\n<ng-template #redirectButton let-redirectLink>\r\n    <ui-webem-button uiWebemStopPropagation\r\n        [model]=\"redirectButtonModel\"\r\n        (action)=\"redirect(redirectLink)\">\r\n    </ui-webem-button>\r\n</ng-template>\r\n","import { Component, ContentChild, OnInit, TemplateRef, Input, Output, EventEmitter } from '@angular/core';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { Store } from '@ngrx/store';\r\nimport { redirect } from '@oam/core/lib/actions/router.actions';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { ButtonThickness } from '../../../button/model/button-thickness.enum';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'ui-webem-rich-panel',\r\n    templateUrl: './rich-panel.component.html',\r\n    styleUrls: ['./rich-panel.component.scss']\r\n})\r\nexport class RichPanelComponent implements OnInit {\r\n    @Input() loading = false;\r\n    @Input() redirectLink?: RouterLink;\r\n    @Output() beforeRedirect = new EventEmitter<void>();\r\n    @ContentChild('title', { static: true }) templateTitle: TemplateRef<any>;\r\n    @ContentChild('content', { static: true }) templateContent: TemplateRef<any>;\r\n    @ContentChild('operations', { static: true }) templateOperations: TemplateRef<any>;\r\n\r\n    redirectButtonModel: ButtonModel = {\r\n        icon: 'mdi mdi-logout-variant',\r\n        title: 'Redirect to view',\r\n        theme: ButtonTheme.Secondary,\r\n        thickness: ButtonThickness.Thin\r\n    };\r\n\r\n    constructor(private readonly store: Store, private readonly activatedRoute: ActivatedRoute) { }\r\n\r\n    ngOnInit() { }\r\n\r\n    redirect(link: RouterLink) {\r\n        this.beforeRedirect.emit();\r\n\r\n        this.store.dispatch(redirect({routerLink: link, activatedRoute: this.activatedRoute}));\r\n    }\r\n}\r\n","import { Directive, HostListener, OnInit } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uiWebemStopPropagation]'\r\n})\r\nexport class StopPropagationDirective implements OnInit {\r\n    @HostListener('mousedown', ['$event']) onMouseDown(event: MouseEvent) {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    @HostListener('touchstart', ['$event']) onTouchStart(event: MouseEvent) {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() { }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ParametersTreeComponent } from './components/parameters-tree/parameters-tree.component';\r\nimport { TreeModule } from '@circlon/angular-tree-component';\r\nimport { ParameterContainerToTreeModelPipe } from './pipes/parameter-container-to-tree-model.pipe';\r\nimport { WebemCommonModule } from '@oam/shared/lib/modules/webem-common';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\n\r\n@NgModule({\r\n    declarations: [ParametersTreeComponent, ParameterContainerToTreeModelPipe],\r\n    imports: [\r\n        TreeModule,\r\n        CommonModule,\r\n        TooltipModule,\r\n        WebemCommonModule\r\n    ],\r\n    exports: [ParametersTreeComponent]\r\n})\r\nexport class ParametersTreeModule {\r\n}\r\n","import { ChartPluginsOptions } from 'chart.js';\r\nconst TextFontColor = '#1B1B1B';\r\nconst fontColor = 'rgba(27, 27, 27, 1)';\r\nconst fontFamily = 'Nokia Pure';\r\nconst whiteColor = 'rgba(255, 255, 255, 1)';\r\n\r\nconst colors = [\r\n    '#124191', '#DA1914', '#FFCC00', '#28C94C', '#00A1CC', '#898683', '#9340F4', '#EF7A11', '#13D8E2', '#E83ADC',\r\n    '#2D2D2C', '#60EF03', '#0D562A', '#B7B6B6', '#FF8080', '#F9E746', '#7C4503', '#E882E5', '#87BBF9', '#AE7DF4'\r\n];\r\n\r\nexport const PM_CHART_CONSTANTS: PmChartConstants = {\r\n    COLORS: colors,\r\n    OPTIONS: {\r\n        elements: {\r\n            line: {\r\n                borderWidth: 1,\r\n                fill: false\r\n            },\r\n            point: {\r\n                radius: 2\r\n            }\r\n        },\r\n        plugins: {\r\n            datalabels: {\r\n                display: false\r\n            }\r\n        } as ChartPluginsOptions,\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        tooltips: {\r\n            enabled: true,\r\n            backgroundColor: whiteColor,\r\n            titleFontFamily: fontFamily,\r\n            titleFontColor: TextFontColor,\r\n            titleFontSize: 11,\r\n            titleMarginBottom: 10,\r\n            bodyFontColor: TextFontColor,\r\n            bodyFontFamily: fontFamily,\r\n            bodyFontSize: 10\r\n        },\r\n        legend: {\r\n            display: false\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                gridLines: {},\r\n                ticks: {\r\n                    autoSkip: true,\r\n                    fontSize: 9,\r\n                    maxTicksLimit: 5,\r\n                    fontColor,\r\n                    padding: 0,\r\n                    fontFamily\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                gridLines: {},\r\n                display: true,\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    padding: 0,\r\n                    autoSkip: true,\r\n                    maxTicksLimit: 10,\r\n                    fontColor,\r\n                    fontSize: 9,\r\n                    fontFamily\r\n                }\r\n            }]\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport interface PmChartConstants {\r\n    COLORS: string[];\r\n    OPTIONS: any;\r\n}\r\n","import {\r\n    ChangeDetectionStrategy, ChangeDetectorRef,\r\n    Component,\r\n    Input,\r\n    OnChanges,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { ChartOptions } from 'chart.js';\r\nimport { getAllTimestamps } from '../utils/timestamp.utils';\r\nimport { PM_CHART_CONSTANTS } from '../pm-chart/pm-chart-constants';\r\nimport { PmCounter } from '../models/counters.interface';\r\nimport { WebemChartData } from '../../chart/model/webem-chart.data';\r\nimport { ChartDataSetConfig } from '../../chart/model/chart-data-set.type';\r\nimport { sortPmCounterValuesByStartTime, compareStartTimesAscendant } from '../utils/pm-data.utils';\r\nimport { LineChartComponent } from '../../line-chart/components/line-chart/line-chart.component';\r\n\r\n@Component({\r\n    selector: 'ui-webem-pm-chart',\r\n    templateUrl: './pm-chart.component.html',\r\n    styleUrls: ['./pm-chart.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class PmChartComponent implements  OnChanges {\r\n    @Input() pmCounters: PmCounter[];\r\n    @Input() selectCounterDialogStatus: boolean;\r\n    @Input() loading: boolean;\r\n    @ViewChild('lineChart') lineChart: LineChartComponent;\r\n    options: ChartOptions = PM_CHART_CONSTANTS.OPTIONS;\r\n    chartData: WebemChartData[];\r\n    timestamps: string[];\r\n    dataSetConfigs: ChartDataSetConfig[] = [];\r\n\r\n    constructor(public readonly _changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if(changes.selectCounterDialogStatus && !changes.selectCounterDialogStatus.firstChange){\r\n            changes.selectCounterDialogStatus?.currentValue? this._changeDetectorRef.detach(): this._changeDetectorRef.reattach();\r\n        }\r\n        if (changes.pmCounters) {\r\n            this.updateChartInfo();\r\n        }\r\n    }\r\n\r\n    private updateChartInfo(): void {\r\n        this.dataSetConfigs = [];\r\n        this.chartData = [];\r\n        const sortedPmData = sortPmCounterValuesByStartTime('asc', this.pmCounters);\r\n        this.chartData = sortedPmData.map((counter: PmCounter, index: number) => {\r\n            const label = `${counter.dimensionDistName}/${counter.measurementAbbreviation}/${counter.counterId} (${counter.counterAbbreviation})`;\r\n            this.addDataSetConfigForCounter(index, label);\r\n\r\n            return this.computeChartDataForCounter(counter);\r\n        });\r\n        this.timestamps = getAllTimestamps(sortedPmData).sort(compareStartTimesAscendant);\r\n    }\r\n\r\n    private addDataSetConfigForCounter(index: number, label: string): void {\r\n        const nbOfColorsDefined = PM_CHART_CONSTANTS.COLORS.length;\r\n        const colorToBeUsed = PM_CHART_CONSTANTS.COLORS[index % nbOfColorsDefined];\r\n        const dataSetConfig: ChartDataSetConfig = {\r\n            borderColor: colorToBeUsed,\r\n            backgroundColor: colorToBeUsed,\r\n            label\r\n        };\r\n        this.dataSetConfigs.push(dataSetConfig);\r\n    }\r\n\r\n    private computeChartDataForCounter(counter: PmCounter):  WebemChartData {\r\n        const dataForChart = counter.counterValues.map(counterValue => {\r\n            return {\r\n                x: counterValue.startTime,\r\n                y: counterValue.value\r\n            };\r\n        });\r\n\r\n        return { data: dataForChart };\r\n    }\r\n\r\n    savePmChartAsPicture(fileName: string) {\r\n        this.lineChart.savePmChartAsPicture(fileName);\r\n    }\r\n}\r\n","<ui-webem-line-chart #lineChart\r\n                type=\"line\"\r\n                [options]=\"options\"\r\n                [data]=\"chartData\"\r\n                [labels]=\"timestamps\"\r\n                [maxItems]=\"9\"\r\n                [dataSetConfigs]=\"dataSetConfigs\"\r\n                [loading]=\"loading\">\r\n</ui-webem-line-chart>\r\n","import {\r\n    PmTableColumn,\r\n    PmTableRow,\r\n    PmTableRowValues\r\n} from '../models/pm-table.interface';\r\nimport { mapValues, keyBy } from 'lodash';\r\nimport { getAllTimestamps } from '../../utils/timestamp.utils';\r\nimport { PmCounter, PmCounterValue } from '../../models/counters.interface';\r\nimport { compareStartTimesAscendant, compareStartTimesDescendant } from '../../utils/pm-data.utils';\r\n\r\nexport function getScrollableColumns(pmCounters: PmCounter[]): PmTableColumn[] {\r\n    return pmCounters.map((pmCounter: PmCounter) => ({\r\n        field: getKeyForCounters(pmCounter),\r\n        header: `${pmCounter.counterId} (${pmCounter.counterAbbreviation})`\r\n    }));\r\n}\r\n\r\nexport function getFrozenRows(pmCounters: PmCounter[]): PmTableRow[] {\r\n    return [\r\n        { counterId: 'Full Path', ...getAllFullPaths(pmCounters) },\r\n        { counterId: 'Unit', ...getAllUnits(pmCounters) }\r\n    ];\r\n}\r\n\r\nexport function getScrollableRows(pmCounters: PmCounter[], order: string): PmTableRow[] {\r\n    const timestampsSorter = order === 'asc' ? compareStartTimesAscendant : compareStartTimesDescendant;\r\n    const timestamps = getAllTimestamps(pmCounters).sort(timestampsSorter);\r\n\r\n    return timestamps.map((timestamp: string) => ({\r\n        counterId: timestamp,\r\n        ...getAllCountersValueAtTimestamp(pmCounters, timestamp)\r\n    }));\r\n}\r\n\r\nfunction getKeyForCounters(pmCounter: PmCounter) {\r\n    return `${pmCounter.dimensionDistName}/${pmCounter.counterId}/${pmCounter.measurementAbbreviation}`;\r\n}\r\n\r\nfunction getAllFullPaths(pmCounters: PmCounter[]): PmTableRowValues {\r\n    const countersUniqueKeys = keyBy(pmCounters, getKeyForCounters);\r\n\r\n    return mapValues(countersUniqueKeys, (pmCounter: PmCounter) =>\r\n        `${pmCounter.dimensionDistName}/${pmCounter.measurementAbbreviation}`\r\n    );\r\n}\r\n\r\nfunction getAllUnits(pmCounters: PmCounter[]): PmTableRowValues  {\r\n    const countersUniqueKeys = keyBy(pmCounters, getKeyForCounters);\r\n\r\n    return mapValues(countersUniqueKeys, (pmCounter: PmCounter) =>\r\n        pmCounter.counterUnit\r\n    );\r\n}\r\n\r\nfunction getAllCountersValueAtTimestamp(countersTableModels: PmCounter[], timestamp: string): PmTableRowValues {\r\n    const countersUniqueKeys = keyBy(countersTableModels, getKeyForCounters);\r\n\r\n    return mapValues(countersUniqueKeys, (pmCounter: PmCounter) => {\r\n        const timestampsObject = pmCounter.counterValues.find((value: PmCounterValue) => value.startTime === timestamp);\r\n\r\n        return timestampsObject && timestampsObject.value || '-';\r\n    });\r\n}\r\n","<p-table #pTable\r\n         *ngIf=\"scrollableColumns.length\"\r\n         [columns]=\"scrollableColumns\"\r\n         [frozenColumns]=\"frozenColumns\"\r\n         [frozenValue]=\"frozenRows\"\r\n         id=\"pmTable\"\r\n         [value]=\"scrollableRows\"\r\n         [scrollable]=\"true\"\r\n         [loading]=\"loading\"\r\n         frozenWidth=\"135px\"\r\n         columnResizeMode=\"expand\">\r\n    <ng-template pTemplate=\"colgroup\" let-columns>\r\n        <colgroup>\r\n            <col *ngFor=\"let col of columns\" class=\"colgroup\">\r\n        </colgroup>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"frozenrows\" let-rowData let-columns=\"columns\">\r\n        <tr>\r\n            <td *ngFor=\"let col of columns\" class=\"column\">\r\n                <b title=\"{{rowData[col.field]}}\">{{rowData[col.field]}}</b>\r\n            </td>\r\n        </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"header\" let-columns>\r\n        <tr>\r\n            <th *ngFor=\"let col of columns\" pResizableColumn title=\"{{col.header}}\">\r\n                <b>{{col.header}}</b>\r\n            </th>\r\n        </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n        <tr>\r\n            <td *ngFor=\"let col of columns\" class=\"p-resizable-column\">\r\n                {{rowData[col.field]}}\r\n            </td>\r\n        </tr>\r\n    </ng-template>\r\n</p-table>\r\n","import {\r\n    AfterViewChecked,\r\n    ChangeDetectionStrategy, ChangeDetectorRef,\r\n    Component,\r\n    Input, NgZone,\r\n    OnChanges,\r\n    OnInit,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { Table } from 'primeng/table';\r\nimport { PmTableColumn, PmTableRow } from './models/pm-table.interface';\r\nimport { getFrozenRows, getScrollableColumns, getScrollableRows } from './utils/pm-table.utils';\r\nimport { sortPmCounterValuesByStartTime } from '../utils/pm-data.utils';\r\nimport { ngxCsv } from 'ngx-csv/ngx-csv';\r\nimport { PmCounter } from '../models/counters.interface';\r\n\r\n@Component({\r\n    selector: 'ui-webem-pm-table',\r\n    templateUrl: './pm-table.component.html',\r\n    styleUrls: ['./pm-table.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class PmTableComponent implements OnInit, OnChanges, AfterViewChecked {\r\n    @Input() pmCounters: PmCounter[];\r\n    @Input() loading: boolean;\r\n    @Input() selectCounterDialogStatus: boolean;\r\n    @ViewChild('pTable') pmTable: Table;\r\n\r\n    readonly frozenColumns: PmTableColumn[];\r\n    scrollableColumns: PmTableColumn[];\r\n    frozenRows: PmTableRow[];\r\n    scrollableRows: PmTableRow[];\r\n    isTableEmpty: boolean;\r\n    animation: number;\r\n\r\n    constructor(private readonly zone: NgZone,public readonly _changeDetectorRef: ChangeDetectorRef ) {\r\n        this.scrollableColumns = [];\r\n        this.isTableEmpty = true;\r\n        this.frozenColumns = [{ field: 'counterId', header: 'Counter' }];\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.updateValues();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if(changes.selectCounterDialogStatus && !changes.selectCounterDialogStatus.firstChange){\r\n            changes.selectCounterDialogStatus?.currentValue? this._changeDetectorRef.detach(): this._changeDetectorRef.reattach();\r\n        }\r\n        if (changes.pmCounters || changes.filterValue || changes.filterCaseSensitive || changes.filterKey) {\r\n            this.updateValues();\r\n        }\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (this.pmTable) {\r\n            this.zone.runOutsideAngular(() => {\r\n                if (this.animation) window.cancelAnimationFrame(this.animation);\r\n                this.animation = window.requestAnimationFrame(() => this.modifyTableHeight());\r\n            });\r\n        }\r\n    }\r\n\r\n    public exportToCsv(fileName: string): ngxCsv {\r\n        const tableHeader = this.frozenColumns.concat(this.scrollableColumns).reduce((obj, item) => {\r\n            obj[item.field] = item.header;\r\n\r\n            return obj;\r\n        }, {});\r\n        const tableData = this.frozenRows.concat(this.scrollableRows);\r\n\r\n        return new ngxCsv([tableHeader].concat(tableData), fileName);\r\n    }\r\n\r\n    private updateValues() {\r\n        const sortedPmData = sortPmCounterValuesByStartTime('desc', this.pmCounters);\r\n\r\n        this.isTableEmpty = !sortedPmData.length;\r\n        this.frozenRows = getFrozenRows(sortedPmData);\r\n        this.scrollableColumns = getScrollableColumns(sortedPmData);\r\n        this.scrollableRows = getScrollableRows(sortedPmData, 'desc');\r\n    }\r\n\r\n    private modifyTableHeight() {\r\n        const pmTableNativeElem = this.pmTable.containerViewChild.nativeElement;\r\n        const elementToBeModified = pmTableNativeElem.getElementsByClassName('p-datatable-scrollable-view p-datatable-unfrozen-view')[0];\r\n        const elementToBeModifiedHeight =\r\n            pmTableNativeElem.getElementsByClassName('p-datatable-scrollable-view p-datatable-frozen-view')[0];\r\n        const scrollableBody = pmTableNativeElem.getElementsByClassName('p-datatable-scrollable-body')[1];\r\n        const scrollWidth = scrollableBody.offsetWidth - scrollableBody.clientWidth;\r\n        const scrollHeight = scrollableBody.offsetHeight - scrollableBody.clientHeight;\r\n\r\n        if ((elementToBeModified && elementToBeModified.classList) ||\r\n            (elementToBeModifiedHeight && elementToBeModifiedHeight.classHeight)) {\r\n            const scrollWidthClass = Array.from(elementToBeModified.classList)\r\n                .find((className: string) => className.includes('scroll-width'));\r\n            const scrollHeightClass = Array.from(elementToBeModifiedHeight.classList)\r\n                .find((className: string) => className.includes('scroll-height'));\r\n\r\n\r\n            elementToBeModified.classList.remove(scrollWidthClass);\r\n            elementToBeModifiedHeight.classList.remove(scrollHeightClass);\r\n\r\n            if (scrollWidth) {\r\n                elementToBeModified.classList.add(`scroll-width-${scrollWidth.toString()}`);\r\n            }\r\n\r\n            if (scrollHeight) {\r\n                elementToBeModifiedHeight.classList.add(`scroll-height-${scrollHeight.toString()}`);\r\n            }\r\n        }\r\n\r\n        if (scrollableBody.offsetHeight <= scrollableBody.clientHeight) {\r\n            elementToBeModified.classList.add('horizontal-scroll-not-in-table');\r\n        } else {\r\n            elementToBeModified.classList.remove('horizontal-scroll-not-in-table');\r\n        }\r\n\r\n        if (scrollableBody.offsetWidth > scrollableBody.clientWidth) {\r\n            elementToBeModified.classList.add('vertical-scroll-in-table');\r\n        } else {\r\n            elementToBeModified.classList.remove('vertical-scroll-in-table');\r\n        }\r\n    }\r\n}\r\n","export class DynamicFlatNode {\r\n    constructor(public item: string,\r\n                public level = 1,\r\n                public expandable = false,\r\n                public isExpanded = false,\r\n                public isChecked = false,\r\n                public isIndeterminate = false) {\r\n    }\r\n}\r\n","import { DynamicFlatNode } from './dynamic-flat-node';\r\nimport { CountersFilter } from '../pm-tree.component';\r\n\r\nexport class DynamicDatabase {\r\n    private readonly DISTNAME_SEPARATOR = '/';\r\n    private readonly DELIMITER = '*-*';\r\n    dataMap: Map<string, string[]>;\r\n    rootLevelNodes: string[];\r\n\r\n    constructor() {}\r\n\r\n    setDatabase(database: Map<string, string[]>) {\r\n        if (database.size) {\r\n            this.dataMap = database;\r\n            this.rootLevelNodes = Array.from(database)\r\n                .map((item: any) => item[0])\r\n                .filter((item: any) => !(item.includes(this.DELIMITER) ||\r\n                    item.includes(this.DISTNAME_SEPARATOR))\r\n                );\r\n        } else {\r\n            this.dataMap = new Map<string, string[]>();\r\n            this.rootLevelNodes = [];\r\n        }\r\n    }\r\n\r\n    initialData(): DynamicFlatNode[] {\r\n        return (this.rootLevelNodes || []).map(name => {\r\n            const children = this.getChildren(name);\r\n            const hasChildren = children && !!children.length;\r\n\r\n            return new DynamicFlatNode(name, 0, hasChildren);\r\n        });\r\n    }\r\n\r\n    initialDataExtendedByFilter(filter: CountersFilter): DynamicFlatNode[] {\r\n        const nodesList: DynamicFlatNode[] = [];\r\n        (this.rootLevelNodes || []).forEach(name => this.addNode(name, 0, filter, nodesList));\r\n\r\n        return nodesList;\r\n    }\r\n\r\n    addNode(name: string, level: number, filter: CountersFilter, nodesList: DynamicFlatNode[]) {\r\n        const shortName = this.getNodeShortName(name);\r\n        const nodeShortNameType = this.getNodeShortNameType(shortName, name);\r\n        const isMatchingFilter = this.isRawNodeMatchingFilter(nodeShortNameType, shortName, filter);\r\n\r\n        const children = this.getChildren(name) || [];\r\n        const hasChildren = children && !!children.length;\r\n        nodesList.push(new DynamicFlatNode(name, level, hasChildren, !isMatchingFilter));\r\n\r\n        if (!isMatchingFilter) {\r\n            children.forEach((child: string) => this.addNode(child, level + 1, filter, nodesList));\r\n        }\r\n    }\r\n\r\n    private getNodeShortNameType(node: string, name: string): string {\r\n        const partTypes = ['distName', 'measurementAbbreviation', 'counterId'];\r\n        if (name.includes(this.DELIMITER)) {\r\n            const parts = name.split(this.DELIMITER);\r\n\r\n            return partTypes[parts.indexOf(node)];\r\n        }\r\n\r\n        return partTypes[0];\r\n    }\r\n\r\n    private isRawNodeMatchingFilter(nodeShortNameType: string, node: string, filterValue: CountersFilter): boolean {\r\n        if (filterValue[nodeShortNameType] && node) {\r\n            if (!nodeShortNameType.toLowerCase().includes(this.getLastTypeWithValueFromFilter(filterValue).toLowerCase())) {\r\n                return false;\r\n            }\r\n\r\n            return node.toLowerCase().includes(filterValue[nodeShortNameType].toLowerCase());\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getLastTypeWithValueFromFilter(filterValue: CountersFilter): string {\r\n        let lastValue = '';\r\n\r\n        Object.entries(filterValue).forEach(item => {\r\n            if (item[1]) {\r\n                lastValue = item[0];\r\n            }\r\n        });\r\n\r\n        return lastValue;\r\n    }\r\n\r\n    getNodeShortName(name: string): string {\r\n        if (name.includes(this.DELIMITER)) {\r\n            const parts = name.split(this.DELIMITER);\r\n\r\n            return parts[parts.length - 1];\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    getChildren(node: string): string[] | undefined {\r\n        return this.dataMap.get(node);\r\n    }\r\n\r\n    getParentId(node: string): string | undefined {\r\n        const index = node.lastIndexOf(this.DELIMITER);\r\n        if (index > 0) {\r\n            return node.slice(0, index);\r\n        } else {\r\n            const distnameSeparatorIndex = node.lastIndexOf(this.DISTNAME_SEPARATOR);\r\n            if (distnameSeparatorIndex > 0) {\r\n                return node.slice(0, distnameSeparatorIndex);\r\n            }\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    isExpandable(node: string): boolean {\r\n        return this.dataMap.has(node);\r\n    }\r\n}\r\n","import { CollectionViewer, DataSource } from '@angular/cdk/collections';\r\nimport { DynamicFlatNode } from './dynamic-flat-node';\r\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\r\nimport { DynamicDatabase } from './dynamic-database';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport class DynamicDataSource implements DataSource<DynamicFlatNode> {\r\n    dataChange = new BehaviorSubject<DynamicFlatNode[]>([]);\r\n\r\n    get data(): DynamicFlatNode[] {\r\n        return this.dataChange.value;\r\n    }\r\n\r\n    set data(value: DynamicFlatNode[]) {\r\n        this.dataChange.next(value);\r\n    }\r\n\r\n    constructor(private readonly _database: DynamicDatabase) {\r\n    }\r\n\r\n    unsubscribe() {\r\n        this.dataChange.unsubscribe();\r\n    }\r\n\r\n    connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\r\n        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\r\n    }\r\n\r\n    disconnect() {\r\n        this.dataChange.unsubscribe();\r\n    }\r\n\r\n    toggleNode(node: DynamicFlatNode): DynamicFlatNode[] {\r\n        const children = this._database.getChildren(node.item);\r\n        const index = this.data.indexOf(node);\r\n\r\n        if (!children || index < 0) return [];\r\n\r\n        node.isExpanded = !node.isExpanded;\r\n        let nodesAdded: DynamicFlatNode[] = [];\r\n        if (node.isExpanded) {\r\n            const nodes = children.map(name =>\r\n                new DynamicFlatNode(name, node.level + 1, this._database.isExpandable(name)));\r\n            this.data.splice(index + 1, 0, ...nodes);\r\n\r\n            nodesAdded = nodes;\r\n        } else {\r\n            let count = 0;\r\n            for (let i = index + 1; i < this.data.length\r\n            && this.data[i].level > node.level; i++) {\r\n                count++;\r\n            }\r\n            this.data.splice(index + 1, count);\r\n        }\r\n\r\n        this.dataChange.next(this.data);\r\n\r\n        return nodesAdded;\r\n    }\r\n\r\n    collapseAll() {\r\n        this.data = this.data.filter(node => {\r\n            if (node.level !== 0) return false;\r\n\r\n            node.isExpanded = false;\r\n\r\n            return true;\r\n        });\r\n\r\n        this.dataChange.next(this.data);\r\n    }\r\n\r\n    getNodeById(nodeId: string): DynamicFlatNode | undefined {\r\n        return this.data.find((node: DynamicFlatNode) => node.item === nodeId);\r\n    }\r\n}\r\n","<div class=\"spinner-wrapper\" *ngIf=\"isLoading\">\r\n    <ui-webem-spinner></ui-webem-spinner>\r\n</div>\r\n<cdk-virtual-scroll-viewport\r\n    class=\"virtual-scroll-container\"\r\n    [ngClass]=\"{'spinner-background': isLoading}\"\r\n    itemSize=\"24\"\r\n    minBufferPx=\"480\"\r\n    maxBufferPx=\"480\">\r\n    <ng-container *cdkVirtualFor=\"let node of dataSource\">\r\n        <div\r\n            class=\"node\"\r\n            [style.padding-left]=\"node.level * 24 + 'px'\"\r\n            *ngIf=\"hasChildren(node.item); else leafNode\"\r\n            [ngClass] = \"{'disabled-node': isParentNodeDisabled(node)}\"\r\n            title=\"{{isParentNodeDisabled(node) ? disabledMessage : node.item | formatNodeName}}\">\r\n            <span (click)=\"toggle(node)\" [ngClass]=\"[isExpanded(node)  ? 'caret caret-down' : 'caret']\"></span>\r\n            <input\r\n                type=\"checkbox\"\r\n                autocomplete=\"off\"\r\n                class=\"tree-node-checkbox\"\r\n                [ngClass] = \"{'indeterminate': node.isIndeterminate,\r\n                               'checked': node.isChecked,\r\n                               'disabled-node': isParentNodeDisabled(node)}\"\r\n                (click)=\"parentItemSelectionToggle(node)\">\r\n             <div\r\n                 class=\"node-label\"\r\n                 (click)=\"parentItemSelectionToggle(node)\">\r\n                 {{ node.item | formatNodeName }}\r\n             </div>\r\n         </div>\r\n        <ng-template #leafNode>\r\n          <div\r\n              class=\"node\"\r\n              [style.padding-left]=\"node.level * 24 + 'px'\"\r\n              [ngClass] = \"{'disabled-node': isLeafNodeDisabled(node)}\"\r\n              title=\"{{isLeafNodeDisabled(node) ? disabledMessage : node.item | formatNodeName: true }}\">\r\n            <p-checkbox\r\n              [ngModel]=\"node.isChecked\"\r\n              [disabled]=\"isLeafNodeDisabled(node)\"\r\n              (onChange)=\"leafItemSelectionToggle(node)\"\r\n              [binary]=\"true\">\r\n            </p-checkbox>\r\n              <div\r\n                  class=\"node-label\"\r\n                  (click)=\"leafItemSelectionToggle(node)\">\r\n                  {{ node.item | formatNodeName: true }}\r\n              </div>\r\n            </div>\r\n        </ng-template>\r\n    </ng-container>\r\n</cdk-virtual-scroll-viewport>\r\n","import {\r\n    Component,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    SimpleChanges,\r\n    ChangeDetectionStrategy,\r\n    Output,\r\n    EventEmitter,\r\n    OnDestroy,\r\n    ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { take } from 'rxjs/operators';\r\nimport { isArray, uniq } from 'lodash';\r\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\r\nimport { TreeNodeData } from '../models/pm-tree.interface';\r\nimport { getIdFromNodesData } from '../utils/pm-tree-nodes.utils';\r\nimport { DynamicFlatNode } from '../utils/dynamic-flat-node';\r\nimport { DynamicDatabase } from '../utils/dynamic-database';\r\nimport { DynamicDataSource } from '../utils/dynamic-data-source';\r\nimport { CountersFilter } from '../pm-tree.component';\r\n\r\n@Component({\r\n    selector: 'ui-webem-dynamic-tree',\r\n    templateUrl: 'dynamic-tree.component.html',\r\n    styleUrls: ['dynamic-tree.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class DynamicTreeComponent implements OnInit, OnChanges, OnDestroy {\r\n    @Input() data: Map<string, string[]>;\r\n    @Input() filter: CountersFilter;\r\n    @Input() selectedCounters: TreeNodeData[] = [];\r\n    @Input() expandedNodes: string[] = [];\r\n\r\n    @Output() selectionChange: EventEmitter<TreeNodeData[]> = new EventEmitter();\r\n    @Output() expansionChange: EventEmitter<string[]> = new EventEmitter();\r\n\r\n    dataSource: DynamicDataSource;\r\n    isLoading$: Observable<boolean>;\r\n    private database: DynamicDatabase;\r\n    private treeControl: FlatTreeControl<DynamicFlatNode>;\r\n    private readonly treeLoading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\r\n    private readonly rawExpandedNodes = new Set<string>();\r\n    private readonly checkListSelection = new Set<string>();\r\n    private readonly DELIMITER = '*-*';\r\n    private readonly ABBREV_DELIMITER = '__';\r\n    private readonly MAXIMUM_SELECTED_NODES = 20;\r\n    readonly disabledMessage = `Maximum limit of ${this.MAXIMUM_SELECTED_NODES} selected counters has been reached`;\r\n    isLoading = true;\r\n    private counterLoadingSubscription: Subscription;\r\n    constructor(private readonly cd: ChangeDetectorRef) {}\r\n\r\n    ngOnInit() {\r\n        this.counterLoadingSubscription = this.treeLoading$.subscribe(value => {\r\n            this.isLoading = value;\r\n            this.cd.markForCheck();\r\n        });\r\n\r\n        this.executeWithLoading(() => this.setup(), true);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.data && this.dataSource) {\r\n            this.executeWithLoading(() => this.initializeTree(), changes.data.firstChange);\r\n        }\r\n\r\n        if (changes.filter && this.dataSource) {\r\n            this.executeWithLoading(() => this.filterNodes(this.filter), changes.filter.firstChange);\r\n        }\r\n\r\n        if (changes.selectedCounters && this.dataSource) {\r\n            const nodesToSelect: string[] = changes.selectedCounters.currentValue\r\n                .map((counter: TreeNodeData) => getIdFromNodesData(counter))\r\n                .filter((counterId: string) => !this.checkListSelection.has(counterId));\r\n\r\n            if (nodesToSelect.length) {\r\n                this.selectNode(nodesToSelect, false);\r\n                this.applySelection();\r\n                this.makeNodesVisibile(nodesToSelect);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.expansionChange.emit(Array.from(this.rawExpandedNodes));\r\n\r\n        if (this.counterLoadingSubscription) {\r\n            this.counterLoadingSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    getSelectionLimit() {\r\n        return this.MAXIMUM_SELECTED_NODES;\r\n    }\r\n\r\n    clearSelection() {\r\n        this.dataSource.data.forEach((node: DynamicFlatNode) => {\r\n            node.isChecked = false;\r\n            node.isIndeterminate = false;\r\n        });\r\n        this.checkListSelection.clear();\r\n    }\r\n\r\n    collapseAll() {\r\n        this.dataSource.collapseAll();\r\n        this.rawExpandedNodes.clear();\r\n        this.expansionChange.emit([]);\r\n    }\r\n\r\n    hasChildren(node: string) {\r\n        return !!this.database.getChildren(node);\r\n    }\r\n\r\n    toggle(node: DynamicFlatNode) {\r\n        this.expandOrCollapseNode(node.item);\r\n        this.toggleNodeAndSetState(node);\r\n    }\r\n\r\n    isExpanded(node: DynamicFlatNode) {\r\n        return node.isExpanded;\r\n    }\r\n\r\n    leafItemSelectionToggle(node: DynamicFlatNode): void {\r\n        if (this.checkIsSelected(node.item)) {\r\n            node.isChecked = false;\r\n            this.deselectNode(node.item);\r\n        } else {\r\n            node.isChecked = true;\r\n            this.selectNode(node.item);\r\n        }\r\n\r\n        this.applySelectionToParents(node);\r\n    }\r\n\r\n    parentItemSelectionToggle(node: DynamicFlatNode): void {\r\n        if (!this.isExpanded(node)) this.toggle(node);\r\n\r\n        this.dataSource.dataChange.pipe(take(1)).subscribe(() => {\r\n            const directDescendants = this.getRawDirectChildren(node);\r\n\r\n            if (!directDescendants || !directDescendants.length) return;\r\n\r\n            if (node.expandable && this.descendantsPartiallySelected(node.item) || this.descendantsAllSelected(node.item)) {\r\n                this.deselectParentNodeAndDirectDescendants(node, directDescendants);\r\n                this.applySelectionToParents(node);\r\n                this.changeSelection();\r\n            } else {\r\n                const numberOfLeafsSelected = this.checkListSelection.size;\r\n\r\n                if (numberOfLeafsSelected < this.MAXIMUM_SELECTED_NODES) {\r\n                    const remainingItemsToSelect = this.MAXIMUM_SELECTED_NODES - numberOfLeafsSelected;\r\n                    this.selectLeafTypeDescendants(directDescendants, remainingItemsToSelect);\r\n                    this.applySelectionToParents(node);\r\n                } else {\r\n                    return;\r\n                }\r\n\r\n                this.toggleParentTypeDescendants(directDescendants);\r\n            }\r\n\r\n            this.setStateForNode(node);\r\n        });\r\n    }\r\n\r\n    isParentNodeDisabled(node: DynamicFlatNode): boolean {\r\n        return this.isMaxLimitReached() && !this.descendantsPartiallySelected(node.item) && !this.descendantsAllSelected(node.item);\r\n    }\r\n\r\n    isLeafNodeDisabled(node: DynamicFlatNode): boolean {\r\n        return !this.checkIsSelected(node.item) && this.isMaxLimitReached();\r\n    }\r\n\r\n    private isMaxLimitReached(): boolean {\r\n        return this.checkListSelection.size >= this.MAXIMUM_SELECTED_NODES;\r\n    }\r\n\r\n    private readonly getLevel = (node: DynamicFlatNode) => node.level;\r\n\r\n    private readonly isExpandable = (node: DynamicFlatNode) => node.expandable;\r\n\r\n    private makeNodesVisibile(nodesList: string[]) {\r\n        const parentsList: string[] = [];\r\n        nodesList.forEach((nodeId: string) => {\r\n            let parentId = this.database.getParentId(nodeId);\r\n            while (parentId) {\r\n                parentsList.push(parentId);\r\n                parentId = this.database.getParentId(parentId);\r\n            }\r\n        });\r\n        this.expandedNodes = uniq(parentsList).sort();\r\n        this.initializeExpandedNodes();\r\n    }\r\n\r\n    private checkIsExpanded(node: string) {\r\n        return this.rawExpandedNodes.has(node);\r\n    }\r\n\r\n    private selectNode(node: string | string[], notify = true) {\r\n        if (isArray(node)) {\r\n            node.forEach(n => {\r\n                this.checkListSelection.add(n);\r\n            });\r\n        } else {\r\n            this.checkListSelection.add(node);\r\n        }\r\n\r\n        if (notify) this.changeSelection();\r\n    }\r\n\r\n    private deselectNode(node: string | string[], notify = true) {\r\n        if (isArray(node)) {\r\n            node.forEach(n => {\r\n                this.checkListSelection.delete(n);\r\n            });\r\n        } else {\r\n            this.checkListSelection.delete(node);\r\n        }\r\n\r\n        if (notify) this.changeSelection();\r\n    }\r\n\r\n    private checkIsSelected(node: string) {\r\n        return this.checkListSelection.has(node);\r\n    }\r\n\r\n    private expandNode(node: string) {\r\n        this.rawExpandedNodes.add(node);\r\n    }\r\n\r\n    private collapseNode(node: string) {\r\n        this.rawExpandedNodes.delete(node);\r\n    }\r\n\r\n    private expandOrCollapseNode(node: string) {\r\n        if (this.checkIsExpanded(node)) {\r\n            this.collapseNode(node);\r\n        } else {\r\n            this.expandNode(node);\r\n        }\r\n    }\r\n\r\n    private executeWithLoading(longAction: () => void, firstLoading = false) {\r\n        this.treeLoading$.next(true);\r\n        setTimeout(() => {\r\n            longAction();\r\n            if (!firstLoading || this.data.size) {\r\n                this.treeLoading$.next(false);\r\n            }\r\n        }, 10);\r\n    }\r\n    private setup() {\r\n        this.treeControl = new FlatTreeControl<DynamicFlatNode>(this.getLevel, this.isExpandable);\r\n        this.database = new DynamicDatabase();\r\n        this.dataSource = new DynamicDataSource(this.database);\r\n\r\n        if (this.data.size) {\r\n            this.initializeTree();\r\n        }\r\n    }\r\n\r\n    private initializeExpandedNodes() {\r\n        this.rawExpandedNodes.clear();\r\n\r\n        if (this.expandedNodes.length && this.dataSource.data.length) {\r\n            this.expandedNodes.forEach((nodeToExpand: string) => {\r\n                const node = this.dataSource.data.find((n: DynamicFlatNode) => n.item === nodeToExpand);\r\n                if (node) {\r\n                    this.toggleNodeAndSetState(node);\r\n                    this.rawExpandedNodes.add(node.item);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private changeSelection() {\r\n        const nodesToEmit: TreeNodeData[] = Array.from(this.checkListSelection).map(item => this.mapNodeRawToNodeData(item));\r\n        this.selectionChange.emit(nodesToEmit);\r\n    }\r\n\r\n    private mapNodeRawToNodeData(node: string): TreeNodeData {\r\n        const nodeParts = node.split(this.DELIMITER);\r\n        const measurementParts = nodeParts[1].includes(this.ABBREV_DELIMITER) ? nodeParts[1].split(this.ABBREV_DELIMITER) : [nodeParts[1]];\r\n        const counterParts = nodeParts[2].includes(this.ABBREV_DELIMITER) ? nodeParts[2].split(this.ABBREV_DELIMITER) : [nodeParts[2]];\r\n\r\n        return {\r\n            dimensionDistName: nodeParts[0] || '',\r\n            measurementId: measurementParts[0] || '',\r\n            measurementAbbreviation: measurementParts[1] || '',\r\n            counterId: counterParts[0] || '',\r\n            counterAbbreviation: counterParts[1] || ''\r\n        };\r\n    }\r\n\r\n    private applySelection() {\r\n        this.dataSource.data.forEach((node: DynamicFlatNode) => {\r\n            this.setStateForNode(node);\r\n        });\r\n    }\r\n\r\n    private isChildOfNode(node: DynamicFlatNode, child: DynamicFlatNode): boolean {\r\n        return this.treeControl.getLevel(node) < this.treeControl.getLevel(child);\r\n    }\r\n\r\n    private initializeTree() {\r\n        const selectedRawCounters = this.selectedCounters.map(\r\n            (counter: TreeNodeData) => getIdFromNodesData(counter));\r\n        this.selectNode(selectedRawCounters, false);\r\n        if (this.filter && Object.values(this.filter).some(item => !!item)) {\r\n            this.filterNodes(this.filter);\r\n        } else {\r\n            this.database.setDatabase(this.data);\r\n            this.dataSource.data = this.database.initialData();\r\n            this.applySelection();\r\n            this.initializeExpandedNodes();\r\n        }\r\n    }\r\n\r\n    private setStateForNode(node: DynamicFlatNode): void {\r\n        if (node.expandable) {\r\n            node.isChecked = this.descendantsAllSelected(node.item);\r\n            node.isIndeterminate = this.descendantsPartiallySelected(node.item);\r\n        } else {\r\n            node.isChecked = this.checkIsSelected(node.item);\r\n        }\r\n    }\r\n\r\n    private descendantsPartiallySelected(node: string): boolean {\r\n        const descendants: string[] = this.database.dataMap.get(node) || [];\r\n        const result = descendants.some(child => {\r\n            return this.checkIsSelected(child)\r\n                || this.descendantsPartiallySelected(child)\r\n                || this.descendantsAllSelected(child);\r\n        });\r\n\r\n        return result && !this.descendantsAllSelected(node);\r\n    }\r\n\r\n    private descendantsAllSelected(node: string): boolean {\r\n        const descendants: string[] = this.database.dataMap.get(node) || [];\r\n\r\n        if (!descendants || !descendants.length) return false;\r\n\r\n        return descendants.every(child =>\r\n            this.checkIsSelected(child) || this.descendantsAllSelected(child));\r\n    }\r\n\r\n    private filterNodes(filterValue: CountersFilter) {\r\n        if (Object.values(filterValue).some(item => !!item)) {\r\n            this.database.setDatabase(this.filterMap(this.data, filterValue));\r\n            this.dataSource.data = this.database.initialDataExtendedByFilter(this.filter);\r\n            this.applySelection();\r\n        } else {\r\n            this.database.setDatabase(this.data);\r\n            this.dataSource.data = this.database.initialData();\r\n            this.applySelection();\r\n\r\n            const nodesToSelect: string[] = this.selectedCounters\r\n                .map((counter: TreeNodeData) => getIdFromNodesData(counter));\r\n\r\n            this.makeNodesVisibile(nodesToSelect);\r\n        }\r\n    }\r\n\r\n    private filterMap(map: Map<string, string[]>, filter: CountersFilter): Map<string, string[]> {\r\n        const filteredMap = new Map<string, string[]>();\r\n        for (const [key, value] of map) {\r\n            const children = value.filter((child) => {\r\n                return this.isRawNodeMatchingFilter(child, filter);\r\n            });\r\n\r\n            if (children.length) {\r\n                filteredMap.set(key, children);\r\n                this.includeParents(key, filteredMap);\r\n            }\r\n        }\r\n\r\n        return filteredMap;\r\n    }\r\n\r\n    private isRawNodeMatchingFilter(node: string, filterValue: CountersFilter): boolean {\r\n        const nodeParts = node.toLowerCase().split(this.DELIMITER);\r\n\r\n        const nodeObject = {\r\n            distName: nodeParts[0] || null,\r\n            measurementAbbreviation: nodeParts[1] || null,\r\n            counterId: nodeParts[2] || null\r\n        };\r\n\r\n        return Object.entries(nodeObject).every(item => {\r\n            if (filterValue[item[0]] && item[1]) {\r\n                return item[1].includes(filterValue[item[0]].toLowerCase());\r\n            } else return !!(!filterValue[item[0]] && item[1]);\r\n        });\r\n    }\r\n\r\n    private includeParents(node: string, map: Map<string, string[]>) {\r\n        let child = node;\r\n        let parentId = this.database.getParentId(node);\r\n        while (parentId) {\r\n            const nodeSiblings = map.get(parentId) || [];\r\n            map.set(parentId, uniq([...nodeSiblings, child]));\r\n            child = parentId;\r\n            parentId = this.database.getParentId(parentId);\r\n        }\r\n    }\r\n\r\n    private applySelectionToParents(node: DynamicFlatNode): void {\r\n        let parent = this.getParentNode(node);\r\n\r\n        while (parent) {\r\n            this.setStateForNode(parent);\r\n            parent = this.getParentNode(parent);\r\n        }\r\n    }\r\n\r\n    private getParentNode(node: DynamicFlatNode): DynamicFlatNode | null {\r\n        if (node.level < 1) return null;\r\n\r\n        const parentId = this.database.getParentId(node.item);\r\n        if (!parentId) return null;\r\n\r\n        return this.dataSource.getNodeById(parentId) || null;\r\n    }\r\n\r\n    private toggleNodeAndSetState(node: DynamicFlatNode) {\r\n        const nodesAdded = this.dataSource.toggleNode(node);\r\n        nodesAdded.forEach((nodeObject: DynamicFlatNode) => {\r\n            this.setStateForNode(nodeObject);\r\n        });\r\n    }\r\n\r\n    private selectLeafTypeDescendants(descendents: DynamicFlatNode[], numberToSelect: number): void {\r\n        const leafDescendants = descendents.filter(n => !n.expandable).slice(0, numberToSelect);\r\n        this.selectNode(leafDescendants.map((leaf: DynamicFlatNode) => leaf.item));\r\n        leafDescendants.forEach(n => {\r\n            n.isChecked = true;\r\n        });\r\n    }\r\n\r\n    private deselectParentNodeAndDirectDescendants(node: DynamicFlatNode, descendents: DynamicFlatNode[]): void {\r\n        node.isChecked = false;\r\n        node.isIndeterminate = false;\r\n        const directDescendentsLeafs = descendents.filter(n => !n.expandable);\r\n        this.deselectNode(directDescendentsLeafs.map(n => n.item), false);\r\n        directDescendentsLeafs.forEach(n => {\r\n            n.isChecked = false;\r\n        });\r\n\r\n        descendents.forEach((descendant: DynamicFlatNode) => {\r\n            if (descendant.expandable && (descendant.isChecked || descendant.isIndeterminate)) {\r\n                if (!this.isExpanded(descendant)) this.toggle(descendant);\r\n                const directDescendants = this.getRawDirectChildren(descendant);\r\n                this.deselectParentNodeAndDirectDescendants(descendant, directDescendants);\r\n            }\r\n        });\r\n    }\r\n\r\n    private toggleParentTypeDescendants(descendents: DynamicFlatNode[]): void {\r\n        descendents.forEach((descendant: DynamicFlatNode) => {\r\n            if (descendant.expandable && this.checkListSelection.size < this.MAXIMUM_SELECTED_NODES) {\r\n                this.parentItemSelectionToggle(descendant);\r\n            }\r\n        });\r\n    }\r\n\r\n    private getRawDirectChildren(node: DynamicFlatNode) {\r\n        const startIndex = this.dataSource.data.indexOf(node);\r\n        const results = [];\r\n\r\n        for (let i = startIndex + 1; i < this.dataSource.data.length && this.isChildOfNode(node, this.dataSource.data[i]); i++) {\r\n            if (this.treeControl.getLevel(node) === this.treeControl.getLevel(this.dataSource.data[i]) - 1) {\r\n                results.push(this.dataSource.data[i]);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'formatNodeName'\r\n})\r\nexport class FormatNodeNamePipe implements PipeTransform {\r\n    transform(value: any, isCounter = false): string {\r\n        let nodeName = '';\r\n        if (value) {\r\n            if (value.includes('/') && !value.includes('*-*')) {\r\n                const splitedValues: string[] = value.split('/');\r\n                nodeName = splitedValues[splitedValues.length - 1];\r\n            } else {\r\n                const splitedValues: string[] = value.split('*-*');\r\n                nodeName = splitedValues[splitedValues.length - 1];\r\n                if (nodeName.includes('__')) {\r\n                    const abbreviationNameValues: string[] = nodeName.split('__');\r\n                    const lastIndexOfName = abbreviationNameValues.length - 1;\r\n                    if (isCounter) {\r\n                        nodeName = `${abbreviationNameValues[lastIndexOfName - 1]} (${abbreviationNameValues[lastIndexOfName]})`;\r\n                    } else {\r\n                        nodeName = abbreviationNameValues[lastIndexOfName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return nodeName;\r\n    }\r\n}\r\n","<div *ngIf=\"hideTreePanel; else showTreePanel\"></div>\r\n<ng-template #showTreePanel>\r\n    <div class=\"content\" id=\"pmTree\">\r\n        <div class=\"header\">\r\n            <div class=\"header-content\">\r\n                <span class=\"label\">Counters</span>\r\n                <div class=\"filter\">\r\n                    <div class=\"filter-overlay-target\"\r\n                         #filterOverlayTarget>\r\n                    </div>\r\n                    <ui-webem-overlay-menu-bar [model]=\"filterButton.model\"\r\n                                               [options]=\"filterButton.options\"\r\n                                               [appendTo]=\"filterOverlayTarget\"\r\n                                               [disabled]=\"shouldDisableButtons\"\r\n                                               [ngClass]=\"{'filter_filled': isSavedFilterActive}\"\r\n                                               buttonId=\"filter-button\"\r\n                                               class=\"overlay-menu\"\r\n                                               (visibilityChange)=\"visibilityChange($event)\">\r\n                        <div class=\"p-dialog filter-panel\">\r\n                            <div class=\"p-dialog-content\">\r\n\r\n                                <div class=\"content-header\">\r\n                                    <div class=\"menu-label menu-bold-label\">\r\n                                        <b>Filter by:</b>\r\n                                    </div>\r\n\r\n                                    <ui-webem-button\r\n                                        [disabled]=\"isFilterEmpty\"\r\n                                        [model]=\"clearAllButton\"\r\n                                        [options]=\"buttonOptions\"\r\n                                        (action)=\"clearAllAction()\"\r\n                                        class=\"clear-all-button\">\r\n                                    </ui-webem-button>\r\n                                </div>\r\n                                <ui-webem-vertical-labeled-input\r\n                                    id=\"filterByMO\"\r\n                                    [value]=\"filterContent.distName\"\r\n                                    (keyupValueChanged)=\"setFilterDistName($event)\"\r\n                                    inputLabel=\"Tree object:\"></ui-webem-vertical-labeled-input>\r\n                                <ui-webem-vertical-labeled-input\r\n                                    id=\"filterByMeasurement\"\r\n                                    [value]=\"filterContent.measurementAbbreviation\"\r\n                                    (keyupValueChanged)=\"setFilterMeasurementAbbreviation($event)\"\r\n                                    inputLabel=\"Measurement abbreviation name:\"></ui-webem-vertical-labeled-input>\r\n                                <ui-webem-vertical-labeled-input\r\n                                    id=\"filterByCounter\"\r\n                                    [value]=\"filterContent.counterId\"\r\n                                    (keyupValueChanged)=\"setFilterCounterId($event)\"\r\n                                    inputLabel=\"Counter ID or counter name abbreviation:\"></ui-webem-vertical-labeled-input>\r\n                            </div>\r\n\r\n                            <div class=\"p-dialog-footer\">\r\n                                <p-footer>\r\n                                    <ui-webem-button\r\n                                        [model]=\"createButton\"\r\n                                        [disabled]=\"isSubmitButtonDisabled()\"\r\n                                        [options]=\"buttonOptions\"\r\n                                        (action)=\"submitAction()\"\r\n                                        class=\"submit-button\">\r\n                                    </ui-webem-button>\r\n                                    <ui-webem-button\r\n                                        [model]=\"cancelButton\"\r\n                                        [options]=\"buttonOptions\"\r\n                                        (action)=\"cancelAction()\"\r\n                                        class=\"cancel-button\">\r\n                                    </ui-webem-button>\r\n                                </p-footer>\r\n                            </div>\r\n                        </div>\r\n                    </ui-webem-overlay-menu-bar>\r\n                </div>\r\n                <p-button\r\n                    class=\"button\"\r\n                    icon=\"mdi mdi-18px mdi-arrow-collapse\"\r\n                    title=\"Collapse all\"\r\n                    styleClass=\"ui-button-secondary  ui-button-long\"\r\n                    [disabled]=\"shouldDisableButtons\"\r\n                    (onClick)=\"collapseAll()\">\r\n                </p-button>\r\n                <ui-webem-button-with-menu\r\n                    class=\"pm-tree-dots\"\r\n                    [buttonConfig]=\"optionModel\"\r\n                    [menuOptions]=\"pmTreeMenuItems\">\r\n                </ui-webem-button-with-menu>\r\n                <input #importSelectionInput autocomplete=\"off\" hidden type=\"file\" accept=\".json\" (change)=\"onImportCountersSelection($event)\">\r\n            </div>\r\n        </div>\r\n        <div class=\"pm-tree-container\">\r\n            <ui-webem-dynamic-tree\r\n                #tree\r\n                class=\"p-tree\"\r\n                [filter]=\"filter\"\r\n                [data]=\"newNodesMap\"\r\n                [selectedCounters]=\"selectedCounters\"\r\n                [expandedNodes]=\"expandedNodes\"\r\n                (selectionChange)=\"selectCounters($event)\"\r\n                (expansionChange)=\"expandNodes($event)\">\r\n            </ui-webem-dynamic-tree>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { getIdFromNodesData, getNodesData, getParentIdFromNodesData } from './utils/pm-tree-nodes.utils';\r\nimport { PmMeasurement } from '../models/measurement.interface';\r\nimport { saveAs } from 'file-saver';\r\nimport { ButtonTheme } from '../../button/model/button-theme.enum';\r\nimport { ButtonLength } from '../../button/model/button-length.enum';\r\nimport { ButtonModel } from '../../button/model/button-model.definition';\r\nimport { MenuAction } from '../../button-with-menu/model/menu-action';\r\nimport { CounterNode } from '@oam/pm-shared/lib/measurement-store/models/counters-selection.interface';\r\nimport { ToastMessage } from '@oam/core/lib/actions/toast-message';\r\nimport {\r\n    IMPORT_SUCCESS_MESSAGE,\r\n    EXPORT_SUCCESS_MESSAGE,\r\n    IMPORT_WARNING_PARTIALLY_MESSAGE,\r\n    IMPORT_ERROR_FILE_CORRUPTED_MESSAGE,\r\n    IMPORT_ERROR_NO_COMPATIBLE_COUNTERS_MESSAGE,\r\n    IMPORT_ERROR_NO_COUNTERS_MESSAGE,\r\n    IMPORT_ERROR_READING_FILE_MESSAGE\r\n} from './utils/pm-tree-toast-messages';\r\nimport { DynamicTreeComponent } from './mat-tree/dynamic-tree.component';\r\nimport { isEqual } from 'lodash';\r\nimport { ExportService } from '@oam/core/lib/services';\r\nimport { ButtonOptions } from '../../button/model/button-options.definition';\r\nimport { OverlayMenuBarComponent } from '../../overlay-menu-bar/components/overlay-menu-bar/overlay-menu-bar.component';\r\nimport { TreeNodeData } from './models/pm-tree.interface';\r\n\r\nexport interface CountersFilter {\r\n    distName: string;\r\n    measurementAbbreviation: string;\r\n    counterId: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'ui-webem-pm-tree',\r\n    templateUrl: './pm-tree.component.html',\r\n    styleUrls: ['./pm-tree.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class UiWebemPmTreeComponent implements OnChanges {\r\n    @Input() pmMeasurements: PmMeasurement[] = [];\r\n    @Input() selectedCounters: CounterNode[] = [];\r\n    @Input() expandedNodes: string[] = [];\r\n    @Input() filter: CountersFilter;\r\n    @Input() hideTreePanel: boolean;\r\n    @Output() filterChange: EventEmitter<CountersFilter> = new EventEmitter();\r\n    @Output() selectionChange: EventEmitter<TreeNodeData[]> = new EventEmitter();\r\n    @Output() expansionChange: EventEmitter<string[]> = new EventEmitter();\r\n    @Output() importSelectionToaster: EventEmitter<{ payload: ToastMessage }> = new EventEmitter();\r\n    @ViewChild('tree') treeComponent: DynamicTreeComponent;\r\n    @ViewChild('importSelectionInput') importSelectionInput: ElementRef;\r\n    @ViewChild(OverlayMenuBarComponent) overlayPanel: OverlayMenuBarComponent;\r\n\r\n    shouldDisableButtons = true;\r\n    readonly optionModel: ButtonModel = {\r\n        title: 'Operations',\r\n        icon: 'mdi mdi-16px mdi-dots-vertical',\r\n        theme: ButtonTheme.Secondary,\r\n        length: ButtonLength.Long\r\n    };\r\n\r\n    readonly filterButton = {\r\n        model: {\r\n            icon: 'mdi mdi-16px mdi-filter-menu',\r\n            title: 'Filter by',\r\n            theme: ButtonTheme.Secondary,\r\n            length: ButtonLength.Long\r\n        } as ButtonModel,\r\n        options: {\r\n            minWidth: '32px',\r\n            minHeight: '26px'\r\n        }\r\n    };\r\n    readonly buttonOptions: ButtonOptions = { forceWidth: '70px' };\r\n    readonly clearAllButton: ButtonModel = {\r\n        label: 'Clear All'\r\n    };\r\n    readonly createButton: ButtonModel = {\r\n        label: 'Ok',\r\n        theme: ButtonTheme.Accent\r\n    };\r\n    readonly cancelButton: ButtonModel = {\r\n        label: 'Cancel'\r\n    };\r\n    filterContent = {\r\n        distName: '',\r\n        measurementAbbreviation: '',\r\n        counterId: ''\r\n    };\r\n    isFilterEmpty = true;\r\n    isSavedFilterActive = false;\r\n    isClearAllAction = false;\r\n    pmTreeMenuItems: MenuAction[];\r\n    importedFile: File;\r\n    newNodesMap: Map<string, string[]>;\r\n\r\n    constructor(private readonly exportService: ExportService) {\r\n    }\r\n\r\n    setPmTreeMenuItems(): void {\r\n        this.pmTreeMenuItems = [\r\n            {\r\n                label: 'Clear selection',\r\n                icon: 'mdi mdi-eraser',\r\n                command: () => this.clearSelection(),\r\n                disabled: !this.areCountersSelected() || this.shouldDisableButtons\r\n            },\r\n            {\r\n                label: 'Export selection',\r\n                icon: 'mdi mdi-file-export',\r\n                command: () => this.onExportCountersSelection(),\r\n                disabled: !this.areCountersSelected() || this.shouldDisableButtons\r\n            },\r\n            {\r\n                label: 'Import selection',\r\n                icon: 'mdi mdi-file-import',\r\n                command: () => this.importSelectionInput.nativeElement.click(),\r\n                disabled: this.shouldDisableButtons\r\n            }];\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.pmMeasurements) {\r\n            this.updateNodes();\r\n            this.setPmTreeMenuItems();\r\n        }\r\n\r\n        if (changes.filter) {\r\n            this.filterContent = { ...this.filter };\r\n            this.setFilterState();\r\n        }\r\n    }\r\n\r\n    clearSelection() {\r\n        if (this.treeComponent) {\r\n            this.treeComponent.clearSelection();\r\n        }\r\n        this.selectedCounters = [];\r\n        this.selectionChange.emit([]);\r\n        this.setPmTreeMenuItems();\r\n    }\r\n\r\n    collapseAll() {\r\n        if (this.treeComponent) {\r\n            this.treeComponent.collapseAll();\r\n        }\r\n    }\r\n\r\n    selectCounters(counters: TreeNodeData[]) {\r\n        this.selectionChange.emit(counters);\r\n        this.selectedCounters = counters as CounterNode[];\r\n        this.setPmTreeMenuItems();\r\n    }\r\n\r\n    expandNodes(counters: string[]) {\r\n        this.expansionChange.emit(counters);\r\n    }\r\n\r\n    changeFilter(filter: CountersFilter) {\r\n        this.filter = filter;\r\n        this.filterChange.emit(filter);\r\n    }\r\n\r\n    onExportCountersSelection() {\r\n        const blob: Blob = new Blob([JSON.stringify(this.selectedCounters)], { type: 'application/json' });\r\n        saveAs(blob, this.exportService.getExportFilenameWithExtension('Counters_Selection', 'json'));\r\n        this.fireToastMessage(EXPORT_SUCCESS_MESSAGE);\r\n    }\r\n\r\n    onImportCountersSelection($event: any): void {\r\n        this.importedFile = $event.currentTarget.files[0];\r\n        if (this.importedFile.size === 0) {\r\n            this.fireToastMessage(IMPORT_ERROR_NO_COUNTERS_MESSAGE);\r\n\r\n            return;\r\n        }\r\n        this.readFileContent(this.importedFile, this.setCountersSelection.bind(this));\r\n        this.importSelectionInput.nativeElement.value = null;\r\n    }\r\n\r\n    private updateNodes() {\r\n        const newMeasurements = getNodesData(this.pmMeasurements);\r\n        if (!isEqual(newMeasurements, this.newNodesMap)) {\r\n            this.shouldDisableButtons = !newMeasurements.size;\r\n            if (newMeasurements.size) {\r\n                this.rectifySelection(newMeasurements);\r\n                this.rectifyExpandedState(newMeasurements);\r\n            }\r\n            this.newNodesMap = newMeasurements;\r\n            this.setPmTreeMenuItems();\r\n        }\r\n    }\r\n\r\n    private rectifySelection(map: Map<string, string[]>) {\r\n        if (this.selectedCounters && this.selectedCounters.length) {\r\n            const existingSelectedCounters = this.filterExistingCounters(this.selectedCounters, map);\r\n            if (existingSelectedCounters.length !== this.selectedCounters.length) {\r\n                if (this.treeComponent) {\r\n                    this.treeComponent.clearSelection();\r\n                }\r\n                this.selectedCounters = existingSelectedCounters;\r\n                setTimeout(() => this.selectionChange.emit(this.selectedCounters), 5);\r\n            }\r\n        }\r\n    }\r\n\r\n    private rectifyExpandedState(map: Map<string, string[]>) {\r\n        if (this.expandedNodes && this.expandedNodes.length) {\r\n            const existingExpandedNodes = this.expandedNodes\r\n                .filter((nodeId: string) => map.has(nodeId));\r\n            if (existingExpandedNodes.length !== this.expandedNodes.length) {\r\n                this.expandedNodes = existingExpandedNodes;\r\n                setTimeout(() => this.expansionChange.emit(this.expandedNodes), 5);\r\n            }\r\n        }\r\n    }\r\n\r\n    private readFileContent(file: File | undefined, processingFunction: any): void {\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onerror = () => {\r\n                reader.abort();\r\n                this.fireToastMessage(IMPORT_ERROR_READING_FILE_MESSAGE);\r\n            };\r\n            reader.onload = processingFunction;\r\n\r\n            reader.readAsText(file);\r\n        }\r\n    }\r\n\r\n    private setCountersSelection($event: ProgressEvent): void {\r\n        const target: any = $event.target;\r\n        if (target && target.result) {\r\n            const fileContent = target.result as string;\r\n            let selectedCounters: CounterNode[] = [];\r\n            try {\r\n                selectedCounters = JSON.parse(fileContent);\r\n            } catch (e) {\r\n                this.fireToastMessage(IMPORT_ERROR_FILE_CORRUPTED_MESSAGE, this.importedFile.name);\r\n\r\n                return;\r\n            }\r\n            this.setCountersOnTree(selectedCounters);\r\n            this.setPmTreeMenuItems();\r\n        }\r\n    }\r\n\r\n    private setCountersOnTree(selectedCounters: CounterNode[]) {\r\n        let existingSelectedCounters: CounterNode[] = [];\r\n        if (selectedCounters.length) {\r\n            existingSelectedCounters = this.filterExistingCounters(selectedCounters, this.newNodesMap);\r\n            if (existingSelectedCounters.length) {\r\n                this.treeComponent.clearSelection();\r\n                this.treeComponent.collapseAll();\r\n                this.selectedCounters = existingSelectedCounters.slice(0, this.treeComponent.getSelectionLimit());\r\n                this.selectionChange.emit(this.selectedCounters);\r\n                if (selectedCounters.length <= existingSelectedCounters.length &&\r\n                    existingSelectedCounters.length <= this.treeComponent.getSelectionLimit()) {\r\n                    this.fireToastMessage(IMPORT_SUCCESS_MESSAGE);\r\n                } else {\r\n                    this.fireToastMessage(IMPORT_WARNING_PARTIALLY_MESSAGE);\r\n                }\r\n            } else {\r\n                this.fireToastMessage(IMPORT_ERROR_NO_COMPATIBLE_COUNTERS_MESSAGE);\r\n            }\r\n        } else {\r\n            this.fireToastMessage(IMPORT_ERROR_NO_COUNTERS_MESSAGE);\r\n        }\r\n    }\r\n\r\n    private fireToastMessage(message: ToastMessage, fileName?: string) {\r\n        this.importSelectionToaster.emit({\r\n            payload: {\r\n                detail: fileName ? `${fileName}${message.detail}` : message.detail,\r\n                severity: message.severity,\r\n                summary: message.summary\r\n            } as ToastMessage\r\n        });\r\n    }\r\n\r\n    private areCountersSelected(): boolean {\r\n        return this.selectedCounters && !!this.selectedCounters.length;\r\n    }\r\n\r\n    private filterExistingCounters(countersFromImportedFile: CounterNode[], map: Map<string, string[]>): CounterNode[] {\r\n        return countersFromImportedFile.filter((counter: CounterNode) => {\r\n            const counterParentId = getParentIdFromNodesData(counter);\r\n            const counterToBeChecked = getIdFromNodesData(counter);\r\n\r\n            return map.has(counterParentId) && map.get(counterParentId)?.find((counterName) => counterName.includes(counterToBeChecked));\r\n        });\r\n    }\r\n\r\n    setFilterDistName({ value }: { value: string }) {\r\n        this.filterContent = { ...this.filterContent, distName: value };\r\n        this.setFilterState();\r\n    }\r\n\r\n    setFilterMeasurementAbbreviation({ value }: { value: string }) {\r\n        this.filterContent = { ...this.filterContent, measurementAbbreviation: value };\r\n        this.setFilterState();\r\n    }\r\n\r\n    setFilterCounterId({ value }: { value: string }) {\r\n        this.filterContent = { ...this.filterContent, counterId: value };\r\n        this.setFilterState();\r\n    }\r\n\r\n    submitAction() {\r\n        this.filterChange.emit(this.filterContent);\r\n        this.isClearAllAction = false;\r\n        this.overlayPanel.hide();\r\n    }\r\n\r\n    cancelAction() {\r\n        this.filterContent = { ...this.filter };\r\n        this.setFilterState();\r\n        this.isClearAllAction = false;\r\n        this.overlayPanel.hide();\r\n    }\r\n\r\n    clearAllAction() {\r\n        this.filterContent = {\r\n            distName: '',\r\n            measurementAbbreviation: '',\r\n            counterId: ''\r\n        };\r\n        this.isClearAllAction = true;\r\n        this.setFilterState();\r\n    }\r\n\r\n    setFilterState() {\r\n        this.isSavedFilterActive = this.filter && Object.values(this.filter).some(item => !!item);\r\n        this.isFilterEmpty = Object.values(this.filterContent).every(item => !item);\r\n    }\r\n\r\n    isSubmitButtonDisabled(): boolean {\r\n        return (this.isSavedFilterActive && isEqual(this.filter, this.filterContent)) ||\r\n            (this.isFilterEmpty && isEqual(this.filter, this.filterContent)) &&\r\n            !this.isClearAllAction;\r\n    }\r\n\r\n    visibilityChange(isVisible: boolean) {\r\n        if (!isVisible) {\r\n            this.filterContent = {\r\n                distName: '',\r\n                measurementAbbreviation: '',\r\n                counterId: ''\r\n            };\r\n        } else {\r\n            this.filterContent = { ...this.filter };\r\n        }\r\n\r\n        this.setFilterState();\r\n    }\r\n}\r\n","import { TreeNodeData } from '../models/pm-tree.interface';\r\nimport { PmMeasurement } from '../../models/measurement.interface';\r\nimport { CounterNode } from '@oam/pm-shared/lib/measurement-store/models/counters-selection.interface';\r\n\r\nconst DELIMITER = '*-*';\r\nconst ABBREV_DELIMITER = '__';\r\nconst DISTNAME_DELIMITER = '/';\r\n\r\nexport interface CounterIdElements {\r\n    id: string,\r\n    dimensionDistName: string,\r\n    measurementId: string\r\n}\r\nexport type CounterObjectNode = {\r\n    id: string,\r\n    parentId?: string;\r\n    object?: CounterNode,\r\n    children: CounterObjectNode[],\r\n    name: string,\r\n    isExpanded: boolean,\r\n    isGroup: boolean,\r\n};\r\n\r\nexport function getNodesData(pmMeasurements: PmMeasurement[]): Map<string, string[]> {\r\n    const nodesMap = new Map<string, string[]>();\r\n\r\n    pmMeasurements.forEach((measurement: PmMeasurement) => {\r\n        const parentObjectDN = measurement.dimensionDistName;\r\n\r\n        if (parentObjectDN) {\r\n            const measurementNodeData: TreeNodeData = {\r\n                dimensionDistName: parentObjectDN,\r\n                measurementId: measurement.id,\r\n                measurementAbbreviation: measurement.abbreviation\r\n            };\r\n            const measurementId = getIdFromNodesData(measurementNodeData);\r\n            addDistnameNodes(parentObjectDN, nodesMap, measurementId);\r\n\r\n            measurement.counters.forEach((counter) => {\r\n                const counterNodeData: TreeNodeData = {\r\n                    dimensionDistName: parentObjectDN,\r\n                    measurementId: measurement.id,\r\n                    measurementAbbreviation: measurement.abbreviation,\r\n                    counterId: counter.counterId,\r\n                    counterAbbreviation: counter.counterAbbreviation\r\n                };\r\n                const counterNodeId = getIdFromNodesData(counterNodeData);\r\n                const measurementIds = nodesMap.get(measurementId);\r\n\r\n                nodesMap.set(measurementId, !measurementIds ?\r\n                    [counterNodeId] : [...measurementIds, counterNodeId]);\r\n            });\r\n        }\r\n    });\r\n\r\n    return nodesMap;\r\n}\r\n\r\nfunction addDistnameNodes(parentObjectDN: string, nodesMap: Map<string, string[]>, measurementId: string) {\r\n    let parentDistname = parentObjectDN;\r\n    let current = parentDistname.split(DISTNAME_DELIMITER)[0];\r\n\r\n    while (parentDistname.includes(DISTNAME_DELIMITER)) {\r\n        const parts = parentDistname.split(DISTNAME_DELIMITER);\r\n        const newCurrent = current + DISTNAME_DELIMITER + parts[1];\r\n        const currentNodeChildren = nodesMap.get(current);\r\n        if (currentNodeChildren) {\r\n            if (!currentNodeChildren.includes(newCurrent)) {\r\n                nodesMap.set(current, [...currentNodeChildren, newCurrent]);\r\n            }\r\n        } else {\r\n            nodesMap.set(current, [newCurrent]);\r\n        }\r\n\r\n        current = newCurrent;\r\n        parentDistname = parentDistname.substring(parentDistname.indexOf(DISTNAME_DELIMITER) + 1);\r\n    }\r\n\r\n    const currentNodes = nodesMap.get(current);\r\n    nodesMap.set(current, !currentNodes ?\r\n        [measurementId] : [...currentNodes, measurementId]);\r\n}\r\n\r\nexport function hasSelectChild(children: CounterObjectNode[], selectedCounters: CounterNode[]): boolean {\r\n    return children?.some((child: { id: string; children: any; }) => {\r\n        return selectedCounters.some(selectedCounter => {\r\n            return getCounterUniqueId(selectedCounter) === child.id;\r\n        }) || hasSelectChild(child.children, selectedCounters);\r\n    });\r\n}\r\n\r\nexport function getCounterUniqueId(counter: CounterNode): string {\r\n    return `${counter.counterId}:${counter.dimensionDistName}`;\r\n}\r\n\r\nexport function getCounterIdElementsFromId(id: string): CounterIdElements {\r\n    const [counterId, dimensionDistName] = id.split(':');\r\n    const measurementId = counterId.split('C')[0].slice(1);\r\n\r\n    return {\r\n        id: counterId,\r\n        dimensionDistName,\r\n        measurementId\r\n    };\r\n}\r\n\r\nexport function getIdFromNodesData(nodeData: TreeNodeData): string {\r\n    const counterId = nodeData.counterId ? `${DELIMITER}${nodeData.counterId}` : '';\r\n    const counterPart = nodeData.counterAbbreviation ? `${counterId}${ABBREV_DELIMITER}${nodeData.counterAbbreviation}` : counterId;\r\n    const measurementId = nodeData.measurementId ? `${DELIMITER}${nodeData.measurementId}` : '';\r\n    const measurementPart = nodeData.measurementAbbreviation ?\r\n        `${measurementId}${ABBREV_DELIMITER}${nodeData.measurementAbbreviation}` : measurementId;\r\n\r\n    return `${nodeData.dimensionDistName}${measurementPart}${counterPart}`;\r\n}\r\n\r\nexport function getParentIdFromNodesData(nodeData: TreeNodeData): string {\r\n    const measurementId = nodeData.measurementId ? `${DELIMITER}${nodeData.measurementId}` : '';\r\n    const measurementPart = nodeData.measurementAbbreviation ?\r\n        `${measurementId}${ABBREV_DELIMITER}${nodeData.measurementAbbreviation}` : measurementId;\r\n\r\n    return `${nodeData.dimensionDistName}${measurementPart}`;\r\n}\r\n","import { ToastMessage } from '@oam/core/lib/actions/toast-message';\r\n\r\nexport const EXPORT_SUCCESS_MESSAGE: ToastMessage = {\r\n    detail: 'File successfully exported',\r\n    severity: 'success',\r\n    summary: 'Export selection'\r\n};\r\n\r\nexport const EXPORT_FAILURE_MESSAGE: ToastMessage = {\r\n    detail: 'File could not be exported',\r\n    severity: 'error',\r\n    summary: 'Export selection failure'\r\n};\r\n\r\nexport const IMPORT_SUCCESS_MESSAGE: ToastMessage = {\r\n    detail: 'File successfully imported',\r\n    severity: 'success',\r\n    summary: 'Import selection'\r\n};\r\n\r\nexport const IMPORT_WARNING_PARTIALLY_MESSAGE: ToastMessage = {\r\n    detail: 'Some counters could not be selected',\r\n    severity: 'warning',\r\n    summary: 'Counters partially selected'\r\n};\r\n\r\nexport const IMPORT_ERROR_READING_FILE_MESSAGE: ToastMessage = {\r\n    detail: 'Error during reading the file',\r\n    severity: 'error',\r\n    summary: 'File not imported'\r\n};\r\n\r\nexport const IMPORT_ERROR_NO_COMPATIBLE_COUNTERS_MESSAGE: ToastMessage = {\r\n    detail: 'No compatible counters present in the selected file',\r\n    severity: 'error',\r\n    summary: 'File not imported'\r\n};\r\n\r\nexport const IMPORT_ERROR_NO_COUNTERS_MESSAGE: ToastMessage = {\r\n    detail: 'No counters present in the selected file',\r\n    severity: 'error',\r\n    summary: 'File not imported'\r\n};\r\n\r\nexport const IMPORT_SUCCESSFUL_MESSAGE: ToastMessage = {\r\n    detail: 'File successfully imported',\r\n    severity: 'success',\r\n    summary: 'Performance counters import'\r\n};\r\n\r\nexport const IMPORT_ERROR_WRONG_FILE_TYP_MESSAGE: ToastMessage = {\r\n    detail: 'Error - wrong file type',\r\n    severity: 'error',\r\n    summary: 'Performance counters import'\r\n};\r\n\r\nexport const IMPORT_ERROR_FILE_SYNTAX_CONTENT: ToastMessage = {\r\n    detail: 'Error - file syntax/content error',\r\n    severity: 'error',\r\n    summary: 'Performance counters import'\r\n};\r\n\r\nexport const IMPORT_ERROR_MULTIPLE_FILES_MESSAGE: ToastMessage = {\r\n    detail: 'Error - multiple files import not supported',\r\n    severity: 'error',\r\n    summary: 'Performance counters import'\r\n};\r\n\r\nexport const IMPORT_ERROR_EMPTY_FILE_MESSAGE: ToastMessage = {\r\n    detail: 'Error - empty file',\r\n    severity: 'error',\r\n    summary: 'Performance counters import'\r\n};\r\n\r\nexport const IMPORT_ERROR_FILE_TOO_BIG_MESSAGE: ToastMessage = {\r\n    detail: 'Error - maximum file size (100kB) exceeded ',\r\n    severity: 'error',\r\n    summary: 'Performance counters import'\r\n};\r\n\r\nexport const IMPORT_ERROR_FILE_CORRUPTED_MESSAGE: ToastMessage = {\r\n    detail: ' was not imported',\r\n    severity: 'error',\r\n    summary: 'File corrupted'\r\n};\r\n\r\nexport const IMPORT_ERROR_ALL_COUNTERS_UNAVAILABLE: ToastMessage = {\r\n    detail: 'File successfully imported. Imported counters do not exist in available counters base.',\r\n    severity: 'warning',\r\n    summary: 'Performance counters import'\r\n};\r\n\r\nexport const IMPORT_ERROR_SOME_COUNTERS_UNAVAILABLE: ToastMessage = {\r\n    detail: 'File successfully imported. Some of imported counters do not exist in available counters base.',\r\n    severity: 'warning',\r\n    summary: 'Performance counters import'\r\n};\r\n\r\nexport const IMPORT_ERROR_TOO_MANY_COUNTERS: ToastMessage = {\r\n    detail: 'Maximum supported number of counters (20) exceeded in counters file. Only first 20 counters loaded.',\r\n    severity: 'warning',\r\n    summary: 'Performance counters import'\r\n};\r\n","import { PmCounter, PmCounterValue } from '../models/counters.interface';\r\n\r\nexport function getFilteredPmData(\r\n    pmCounters: PmCounter[],\r\n    filterKey: string[],\r\n    filterValue: string\r\n): PmCounter[] {\r\n    const filterValueCaseSensitive = filterValue.toLowerCase();\r\n\r\n    return pmCounters.filter((counter: PmCounter) =>\r\n        filterKey.some((key: string) => checkFilterValue(counter, key, filterValueCaseSensitive))\r\n    );\r\n}\r\n\r\nexport function sortPmCounterValuesByStartTime(order: 'asc' | 'desc', pmCounters: PmCounter[]): PmCounter[] {\r\n    return pmCounters.map((pmCounter: PmCounter) => {\r\n        pmCounter.counterValues = getSortedValuesByTimestamp(order, pmCounter.counterValues);\r\n\r\n        return pmCounter;\r\n    });\r\n}\r\n\r\nfunction getSortedValuesByTimestamp(order: 'asc' | 'desc', counterValues: PmCounterValue[]): PmCounterValue[] {\r\n    return counterValues.slice().sort((counter1: PmCounterValue, counter2: PmCounterValue) => {\r\n        const startTime1 = counter1.startTime.split('/').reverse().join('');\r\n        const startTime2 = counter2.startTime.split('/').reverse().join('');\r\n\r\n        return order === 'desc' ? compareStartTimesDescendant(startTime1, startTime2) :\r\n            compareStartTimesAscendant(startTime1, startTime2);\r\n    });\r\n}\r\n\r\nexport function compareStartTimesAscendant(startTime1: string, startTime2: string): -1 | 0 | 1 {\r\n    return startTime1 > startTime2 ? 1 : startTime1 < startTime2 ? -1 : 0;\r\n}\r\n\r\nexport function compareStartTimesDescendant(startTime1: string, startTime2: string): -1 | 0 | 1 {\r\n    return startTime1 < startTime2 ? 1 : startTime1 > startTime2 ? -1 : 0;\r\n}\r\n\r\nfunction checkFilterValue(pmCounter: PmCounter, filterKey: string, filterValue: string): boolean {\r\n    if (filterKey === 'measurementAbbreviation' || filterKey === 'dimensionDistName') {\r\n        return checkFilterForFullPath(pmCounter, filterValue);\r\n    }\r\n    if (filterKey === 'counterValues') {\r\n        return pmCounter.counterValues.some((pmCounterValue: PmCounterValue) => {\r\n            const valueToSearch = pmCounterValue.value.toLowerCase();\r\n            const timestampsToSearch = pmCounterValue.startTime.toLowerCase();\r\n\r\n            return valueToSearch.toString().includes(filterValue) || timestampsToSearch.includes(filterValue);\r\n        });\r\n    }\r\n    const modelValueForKey = computeModelValueForKey(filterKey, pmCounter);\r\n    if (modelValueForKey) {\r\n        return modelValueForKey.includes(filterValue);\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction checkFilterForFullPath(pmCounter: PmCounter, filterValue: string): boolean {\r\n    const modelValueForKey: string = `${pmCounter.dimensionDistName}/${pmCounter.measurementAbbreviation}`.toLowerCase();\r\n\r\n    if (modelValueForKey) {\r\n        return modelValueForKey.includes(filterValue);\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction computeModelValueForKey(filterKey: string, pmCounter: PmCounter): string {\r\n    return filterKey === 'counter' ?\r\n        `${pmCounter.counterId} (${pmCounter.counterAbbreviation})`.toLowerCase() :\r\n        pmCounter[filterKey] && (pmCounter[filterKey]).toLowerCase();\r\n}\r\n","import { union } from 'lodash';\r\nimport { PmCounter, PmCounterValue } from '../models/counters.interface';\r\n\r\nexport function getAllTimestamps(countersModel: PmCounter[]): string[] {\r\n    return union(...\r\n        countersModel.map((counterModel: PmCounter) =>\r\n            counterModel.counterValues.map((value: PmCounterValue) => value.startTime)\r\n        )\r\n    );\r\n}\r\n","import { Table } from 'primeng/table';\r\n\r\nexport { applyPrimeTablePatch };\r\n\r\nfunction applyPrimeTablePatch(table: Table, containerPadding = 55) {\r\n\r\n    table.onColumnResizeBegin = (event: MouseEvent) => {\r\n        table.lastResizerHelperX = (event.pageX - containerPadding + table.containerViewChild.nativeElement.scrollLeft);\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    };\r\n\r\n    table.onColumnResize = (event: MouseEvent) => {\r\n        table.resizeHelperViewChild.nativeElement.style.height = table.containerViewChild.nativeElement.offsetHeight + 'px';\r\n        table.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\r\n        table.resizeHelperViewChild.nativeElement.style.left =\r\n            (event.pageX - containerPadding + table.containerViewChild.nativeElement.scrollLeft) + 'px';\r\n        table.resizeHelperViewChild.nativeElement.style.display = 'block';\r\n\r\n        event.stopPropagation();\r\n    };\r\n}\r\n","<ui-webem-alarm-severity-icon\r\n    *ngIf=\"alarmSeverityType\"\r\n    [iconClass]=\"iconClass\"\r\n    [type]=\"alarmSeverityType\"\r\n    [hideTitle]=\"true\"\r\n    (mouseenter)=\"raisedAlarmsList.toggle($event)\"\r\n    (mouseleave)=\"raisedAlarmsList.toggle($event)\">\r\n</ui-webem-alarm-severity-icon>\r\n\r\n<!-- Default position styles fix PrimeNG panel position calculation -->\r\n<p-overlayPanel styleClass=\"raised-alarms-overlay-panel\" appendTo=\"body\" [style]=\"{ 'left.px': 0, 'top.px': 0 }\" #raisedAlarmsList>\r\n    <div class=\"alarms-tooltip-alarm-info\">\r\n        <ng-container *ngFor=\"let alarm of alarms\">\r\n            <div class=\"alarm-row\">\r\n                <div class=\"alarm-icon\">\r\n                    <ui-webem-alarm-severity-icon [iconClass]=\"iconClass\" [type]=\"alarmSeverityMap[alarm.severity]\"\r\n                                                  [hideTitle]=\"true\"></ui-webem-alarm-severity-icon>\r\n                </div>\r\n                <div class=\"properties\">\r\n                    <span id=\"alarm-title\">Alarm:</span> <span id=\"alarm-description\">{{alarm.alarmId}} / {{alarm.alarmName}}</span>\r\n                </div>\r\n                <div class=\"properties\">\r\n                    <span id=\"fault-title\">Fault:</span> <span id=\"fault-description\">{{alarm.faultId}} / {{alarm.faultName}}</span>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</p-overlayPanel>\r\n","import { Component, Input } from '@angular/core';\r\nimport { AlarmSeverityType } from '../../../alarm-severity-icon/model/alarm-severity-type.definition';\r\nimport { alarmSeverity } from '../../../alarm-severity-icon/model/alarm-severity.definitions';\r\nimport { RaisedAlarm } from '../../model/raised-alarm';\r\n\r\n\r\n@Component({\r\n  selector: 'ui-webem-raised-alarms',\r\n  templateUrl: './raised-alarms.component.html',\r\n  styleUrls: ['./raised-alarms.component.scss']\r\n})\r\nexport class RaisedAlarmsComponent {\r\n    @Input() alarms: Array<RaisedAlarm>;\r\n    @Input() alarmSeverityType?: AlarmSeverityType;\r\n    @Input() iconClass: string;\r\n\r\n    alarmSeverityMap = alarmSeverity;\r\n}\r\n","<button class=\"alarm-counter ui-corner-all ui-button-secondary p-button ui-state-default\" (click)=\"navigateToAlarms.emit()\">\r\n    <i class=\"mdi mdi-bell mdi-lg mdi-14px\"></i>\r\n    <span class=\"counter\" [ngClass]=\"{'no-alarms': alarmsNumber === null || alarmsNumber <= 0}\">\r\n        <ui-webem-spinner class=\"spinner\" *ngIf=\"alarmsNumber !== null && alarmsNumber < 0\"></ui-webem-spinner>\r\n        {{ alarmsNumber !== null ? (alarmsNumber >= 0 ? alarmsNumber : '') : NO_ALARMS_PLACEHOLDER }}\r\n    </span>\r\n</button>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { EMPTY_PLACEHOLDER } from '@oam/shared/lib/modules/webem-common/core/pipes/nullable-value.pipe';\r\n\r\n@Component({\r\n    selector: 'ui-webem-alarm-counter',\r\n    templateUrl: './alarm-counter.component.html',\r\n    styleUrls: ['./alarm-counter.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AlarmCounterComponent implements OnInit {\r\n    @Input() alarmsNumber: number | null;\r\n\r\n    @Output() navigateToAlarms = new EventEmitter<void>();\r\n\r\n    readonly NO_ALARMS_PLACEHOLDER = EMPTY_PLACEHOLDER;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n","<ng-container *ngFor=\"let item of items; let i = index\">\r\n    <ui-webem-button\r\n        [model]=\"item\"\r\n        blur=\"true\"\r\n        (click)=\"itemClickHandler(item.routerLink)\">\r\n    </ui-webem-button>\r\n    <ui-webem-alarm-counter *ngIf=\"i === 1\"\r\n        [alarmsNumber]=\"numberOfAlarms\"\r\n        [title]=\"getAlarmsTitle()\"\r\n        (navigateToAlarms)=\"navigateToAlarmsHandler()\">\r\n    </ui-webem-alarm-counter>\r\n</ng-container>\r\n","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { RoutedMenuItem } from '../../model/routed-menu-item.definition';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\nimport { QuickMenuAlarms } from '@oam/navigation/lib/navigation/core/models/quick-menu-alarms.interface';\r\n\r\n@Component({\r\n    selector: 'ui-webem-routed-menu',\r\n    templateUrl: './routed-menu.component.html',\r\n    styleUrls: ['./routed-menu.component.scss']\r\n})\r\nexport class RoutedMenuComponent implements OnInit, OnDestroy {\r\n    @Input() items: RoutedMenuItem[];\r\n    @Output() menuAction = new EventEmitter<RouterLink>();\r\n    @Output() navigateToAlarms = new EventEmitter<void>();\r\n    @Input() model: QuickMenuAlarms;\r\n    @Input() numberOfAlarms: number;\r\n\r\n    clickAction = new Subject<RouterLink>();\r\n    clickActionSubscription: Subscription;\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n        this.clickActionSubscription = this.clickAction.pipe(\r\n            debounceTime(120)\r\n        ).subscribe((route) => this.menuAction.emit(route));\r\n    }\r\n\r\n    itemClickHandler(route: RouterLink) {\r\n        this.clickAction.next(route);\r\n    }\r\n\r\n    navigateToAlarmsHandler() {\r\n        this.navigateToAlarms.next();\r\n    }\r\n\r\n    getAlarmsTitle(): string {\r\n        return this.numberOfAlarms !== null &&\r\n            this.numberOfAlarms >= 0 &&\r\n            this.numberOfAlarms !== this.model.initialState.numberOfAlarms\r\n                ? `Active alarms: ${this.numberOfAlarms}`\r\n                : 'Active alarms';\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.clickActionSubscription.unsubscribe();\r\n    }\r\n}\r\n","<p-table\r\n    #table\r\n    class=\"sessions-table\"\r\n    [value]=\"sessions\"\r\n    [customSort]=\"true\"\r\n    (onRowSelect)=\"onSessionSelect($event)\"\r\n    (onRowUnselect)=\"onRowUnselect()\"\r\n    [resizableColumns]=\"true\"\r\n    [autoLayout]=\"true\"\r\n    [lazy]=\"true\"\r\n    [loadingIcon]=\"SPINNER_CLASS\"\r\n    (onLazyLoad)=\"onLoadNewPage($event)\"\r\n    [paginator]=\"false\"\r\n    [totalRecords]=\"sessions.length\"\r\n    [loading]=\"(isLoadingSessionsData$ | async)!\"\r\n    dataKey=\"SessionID\"\r\n    [sortField]=\"'SessionID'\"\r\n    [scrollable]=\"true\"\r\n    scrollHeight=\"409px\">\r\n    <ng-template pTemplate=\"colgroup\">\r\n        <colgroup>\r\n            <col style=\"width:10%\">\r\n            <col style=\"width:14%\">\r\n            <col style=\"width:10%\">\r\n            <col style=\"width:32%\">\r\n            <col style=\"width:17%\">\r\n            <col style=\"width:17%\">\r\n        </colgroup>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"header\">\r\n        <tr>\r\n            <th pResizableColumn>Session ID</th>\r\n            <th pResizableColumn>User</th>\r\n            <th pResizableColumn>Read-only</th>\r\n            <th pResizableColumn>IP address</th>\r\n            <th pResizableColumn>Creation time</th>\r\n            <th pResizableColumn>Expiration time</th>\r\n        </tr>\r\n        <tr  *ngIf=\"isTableEmpty()\">\r\n            <td colspan=\"6\" class=\"empty-table\">No data</td>\r\n        </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"body\" let-session>\r\n        <tr>\r\n            <td>{{session?.SessionID | nullableValue}}</td>\r\n            <td>{{session?.User | nullableValue}}</td>\r\n            <td>{{formatReadOnly(session?.ReadOnlyMode)}}</td>\r\n            <td>{{session?.ClientIP | nullableValue}}</td>\r\n            <td>{{formatDate(session?.CreationTime)}}</td>\r\n            <td>{{formatDate(session?.ExpirationTime)}}</td>\r\n        </tr>\r\n    </ng-template>\r\n</p-table>\r\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, OnChanges } from '@angular/core';\r\nimport { Table } from 'primeng/table';\r\nimport { applyPrimeTablePatch } from '../../../prime-table-workaround/prime-table-workaround';\r\nimport { SPINNER_CLASS } from '@oam/cu-ui/lib/spinner/models/spinner-class-constants';\r\nimport { Observable } from 'rxjs';\r\nimport { DatetimeService } from '@oam/core';\r\nimport { EMPTY_PLACEHOLDER } from '@oam/shared/lib/modules/webem-common/core/pipes/nullable-value.pipe';\r\nimport { SessionInfo } from '@oam/cu-api-gw-api';\r\nimport { isBoolean, sortBy } from 'lodash';\r\n\r\n@Component({\r\n    selector: 'ui-webem-sessions-table',\r\n    templateUrl: './sessions-table.component.html',\r\n    styleUrls: ['./sessions-table.component.scss']\r\n})\r\nexport class SessionsTableComponent implements OnInit, OnChanges {\r\n    @Input() sessions: SessionInfo[];\r\n    @Input() isLoadingSessionsData$: Observable<boolean>;\r\n    @Input() itemsPerPage: number;\r\n\r\n    @ViewChild('table', { static: true }) table: Table;\r\n\r\n    @Output()\r\n    PageChanged = new EventEmitter();\r\n\r\n    @Output()\r\n    SessionSelected = new EventEmitter<SessionInfo>();\r\n\r\n    @Output()\r\n    clearSelection = new EventEmitter();\r\n    readonly SPINNER_CLASS = SPINNER_CLASS;\r\n\r\n    constructor(private readonly datetimeService: DatetimeService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        applyPrimeTablePatch(this.table);\r\n    }\r\n\r\n    ngOnChanges() {\r\n        this.sessions = sortBy(this.sessions, (a) => this.formatDate(a.CreationTime));\r\n    }\r\n\r\n    onSessionSelect({ data }: { data: SessionInfo }) {\r\n        this.SessionSelected.emit(data);\r\n    }\r\n\r\n    onRowUnselect() {\r\n        this.clearSelection.emit();\r\n    }\r\n\r\n    onLoadNewPage($event: any) {\r\n        this.PageChanged.emit($event);\r\n    }\r\n\r\n    isTableEmpty(): boolean {\r\n        return !this.sessions.length;\r\n    }\r\n\r\n    formatDate(timestamp: string): string {\r\n        timestamp = timestamp?.replace(/\\s[A-Z]+(?=\\s[0-9]+$)/, '');\r\n\r\n        return timestamp ? this.datetimeService.getFormattedDateTime(timestamp, false) : EMPTY_PLACEHOLDER;\r\n    }\r\n\r\n    formatReadOnly(mode: boolean) {\r\n\r\n        return isBoolean(mode) ? mode : EMPTY_PLACEHOLDER;\r\n    }\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ButtonThickness } from '../../../button/model/button-thickness.enum';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\n\r\n@Component({\r\n    selector: 'ui-webem-show-password-button',\r\n    templateUrl: './show-password-button.component.html',\r\n    styleUrls: ['./show-password-button.component.scss']\r\n})\r\nexport class ShowPasswordButtonComponent {\r\n\r\n    @Input() disabled: boolean;\r\n    @Output() isPasswordVisible = new EventEmitter<boolean>();\r\n    isVisible = false;\r\n\r\n    eyeButton = {\r\n        icon: 'mdi mdi-eye',\r\n        thickness: ButtonThickness.Thin,\r\n        theme: ButtonTheme.Secondary\r\n    } as ButtonModel;\r\n\r\n    crossedEyeButton = {\r\n        icon: 'mdi mdi-eye-off',\r\n        thickness: ButtonThickness.Thin,\r\n        theme: ButtonTheme.Secondary\r\n    } as ButtonModel;\r\n\r\n    constructor() {}\r\n\r\n    showPassword() {\r\n        this.isVisible = true;\r\n        this.isPasswordVisible.emit(this.isVisible);\r\n    }\r\n\r\n    hidePassword() {\r\n        this.isVisible = false;\r\n        this.isPasswordVisible.emit(this.isVisible);\r\n    }\r\n\r\n}\r\n","<ui-webem-button\r\n    [model]=\"isVisible ? crossedEyeButton : eyeButton\"\r\n    (mousedown)=\"showPassword()\"\r\n    (mouseup)=\"hidePassword()\"\r\n    (mouseout)=\"hidePassword()\"\r\n    [type]=\"'button'\"\r\n    [disabled]=\"disabled\">\r\n</ui-webem-button>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ShowPasswordButtonComponent } from './components/show-password-button/show-password-button.component';\r\nimport { WebemButtonModule } from '../button/button.module';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ShowPasswordButtonComponent\r\n    ],\r\n    exports: [\r\n        ShowPasswordButtonComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        WebemButtonModule,\r\n    ],\r\n})\r\nexport class ShowPasswordButtonModule { }\r\n","<div class=\"side-bar-container\">\r\n    <ng-container [ngTemplateOutlet]=\"collapsed\"></ng-container>\r\n    <ng-container [ngTemplateOutlet]=\"expanded\"></ng-container>\r\n</div>\r\n\r\n<ng-template #collapsed>\r\n    <div class=\"side-bar-collapsed side-bar\">\r\n        <div>\r\n            <a class=\"side-bar-icon-menu\"\r\n               *ngFor=\"let item of model.items; let itemId = index\"\r\n               [ngClass]=\"{'side-bar-menu-active': menuSelectionModel.selectedGroupId === itemId, 'side-bar-icon-menu-action': !item.items.length}\"\r\n               (mouseenter)=\"showFloatMenu(itemId)\"\r\n               (mouseleave)=\"onSideBarIconMouseLeave($event)\"\r\n               (click)=\"selectGroupAndNavigateToFirstTab(item, itemId)\"\r\n               [tabIndex]=\"-1\">\r\n                <ng-container [ngSwitch]=\"item.iconType\">\r\n                    <img *ngSwitchCase=\"'image-icon'\" [src]=\"item.icon\" class=\"collapsed-menu-image-icon\"/>\r\n                    <i *ngSwitchDefault [ngClass]=\"item.icon\" class=\"side-bar-icon mdi-16px\"></i>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"floatMenuState.isFloatMenuVisible && floatMenuState.groupId === itemId\"\r\n                              [ngTemplateOutlet]=\"floatMenu\"\r\n                              [ngTemplateOutletContext]=\"{$implicit:  {data: item, groupId: itemId}}\">\r\n                </ng-container>\r\n            </a>\r\n        </div>\r\n        <ng-container [ngTemplateOutlet]=\"sideBarExpand\"></ng-container>\r\n    </div>\r\n\r\n</ng-template>\r\n\r\n<ng-template #expanded>\r\n    <div class=\"side-bar-expanded side-bar\" *ngIf=\"isExpanded\">\r\n        <div class=\"side-bar-container-expanded\">\r\n            <div class=\"side-bar-menu side-bar-menu-grid\" *ngFor=\"let item of model.items; let groupIndex = index\">\r\n                <div class=\"side-bar-menu-title\"\r\n                     [ngClass]=\"{'side-bar-menu-title-active': groupIndex === menuSelectionModel.selectedGroupId}\">\r\n                     <ng-container [ngSwitch]=\"item.iconType\">\r\n                        <img *ngSwitchCase=\"'image-icon'\" [src]=\"item.icon\" class=\"expanded-menu-image-icon\"/>\r\n                        <i *ngSwitchDefault [ngClass]=\"item.icon\" class=\"side-bar-icon mdi-18px\"></i>\r\n                    </ng-container>\r\n                    <span>{{item.label}}</span>\r\n                </div>\r\n\r\n                <a class=\"side-bar-item-menu expanded-third-menu\"\r\n                   *ngFor=\"let subItem of item.items; let itemId = index\"\r\n                   [ngClass]=\"{'side-bar-menu-active': !hasChildren(subItem) && isSelectedItem(itemId, groupIndex),\r\n                   'secondary-menu-active': hasChildren(subItem) && isSelectedItem(itemId, groupIndex)}\"\r\n                   (click)=\"selectMenuItemAndCollapse(-1, itemId, groupIndex, subItem)\"\r\n                   [tabIndex]=\"-1\">\r\n                    <span class=\"expanded-parent-menu\">\r\n                        {{subItem.label}} <span *ngIf=\"subItem.keyboardShortcut && shortcutsEnabled\" class=\"keyboard-shortcut-text\">({{subItem.keyboardShortcut}})</span>\r\n                    </span>\r\n                    <ng-container *ngIf=\"hasChildren(subItem)\">\r\n                        <div class=\"side-bar-menu third-menu-grid\">\r\n                            <a class=\"side-bar-item-menu expanded-third-item-menu\"\r\n                               *ngFor=\"let child of subItem.children; let childId = index\"\r\n                               [ngClass]=\"{'expanded-third-menu-active': isThirdMenuItemActived(itemId, groupIndex, childId)}\"\r\n                               (click)=\"selectMenuItemAndCollapse(childId, itemId, groupIndex, child)\"\r\n                               [tabIndex]=\"-1\">\r\n                                {{child.label}} <span *ngIf=\"child.keyboardShortcut && shortcutsEnabled\" class=\"keyboard-shortcut-text\">({{child.keyboardShortcut}})</span>\r\n                            </a>\r\n                        </div>\r\n                    </ng-container>\r\n                </a>\r\n\r\n                <a class=\"side-bar-item-menu\"\r\n                   *ngIf=\"item.items.length === 0\"\r\n                   [ngClass]=\"{'side-bar-menu-active': groupIndex === menuSelectionModel.selectedGroupId}\"\r\n                   (click)=\"selectGroupAndNavigateToFirstTab(item, groupIndex)\"\r\n                   [tabIndex]=\"-1\">\r\n                    {{item.label}}\r\n                </a>\r\n            </div>\r\n        </div>\r\n        <ng-container [ngTemplateOutlet]=\"sideBarExpand\"></ng-container>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #floatMenu let-item>\r\n    <div class=\"side-bar-float-menu\">\r\n        <div class=\"side-bar-float-menu-title\"\r\n             [ngClass]=\"{'sidebar-float-menu-header': item.data.items.length, 'side-bar-float-menu-title-active': item.groupId === menuSelectionModel.selectedGroupId}\">\r\n            <span>{{item.data.label}}</span>\r\n        </div>\r\n        <nav class=\"third-menu-grid\">\r\n            <a class=\"side-bar-item-menu\"\r\n               *ngFor=\"let subItem of item.data.items; let itemId = index\"\r\n               [ngClass]=\"{'side-bar-float-menu-active': !hasChildren(subItem) && isSelectedItem(itemId, item.groupId),\r\n               'secondary-menu-active': hasChildren(subItem) && isSelectedItem(itemId, item.groupId)}\"\r\n               (mouseenter)=\"showThirdFloatMenu(itemId)\"\r\n               (click)=\"selectMenuItem(-1, itemId, item.groupId, subItem, $event)\"\r\n               [tabIndex]=\"-1\">\r\n                {{subItem.label}} <span *ngIf=\"subItem.keyboardShortcut && shortcutsEnabled\" class=\"keyboard-shortcut-text\">({{subItem.keyboardShortcut}})</span>\r\n                <ng-container *ngIf='hasChildren(subItem)'>\r\n                    <i class=\"mdi mdi-chevron-right chevron-right-icon\"></i>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"thirdfloatMenuState.isFloatMenuVisible && thirdfloatMenuState.groupId === itemId && subItem?.children?.length\"\r\n                              [ngTemplateOutlet]=\"lastLayer\"\r\n                              [ngTemplateOutletContext]=\"{$implicit:  {data: subItem, itemId: itemId, groupId: item.groupId}}\">\r\n                </ng-container>\r\n            </a>\r\n        </nav>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #lastLayer let-item>\r\n    <div class=\"third-float-menu\">\r\n        <nav class=\"third-menu-grid\">\r\n            <a class=\"third-item-menu\"\r\n               *ngFor=\"let thirdItem of item.data.children; let itemId = index\"\r\n               [ngClass]=\"{'third-menu-active': isThirdMenuItemActived(item.itemId, item.groupId , itemId)}\"\r\n               (click)=\"selectMenuItem(itemId, item.itemId, item.groupId, thirdItem, $event)\"\r\n               [tabIndex]=\"-1\">\r\n                {{thirdItem.label}} <span *ngIf=\"thirdItem.keyboardShortcut && shortcutsEnabled\" class=\"keyboard-shortcut-text\">({{thirdItem.keyboardShortcut}})</span>\r\n            </a>\r\n        </nav>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #sideBarExpand>\r\n    <div class=\"side-bar-expand\">\r\n        <ui-webem-button\r\n            class=\"side-bar-expand-button\"\r\n            [model]=\"expandCollapseMenuButton\"\r\n            (action)=\"expandMenuStateAction()\">\r\n        </ui-webem-button>\r\n    </div>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { isEmpty } from 'lodash';\r\nimport { SideBarMenuGroup, SideBarMenuItem, SideBarMenuModel, ThirdMenuItem } from '../../model/side-bar-menu-model';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { debounceTime, takeUntil } from 'rxjs/operators';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { areKeyboardShortcutsEnabled } from '@oam/keyboard-shortcuts/lib/core/selectors/keyboard-shortcuts.selectors';\r\nimport { forceRedirect } from '@oam/core/lib/actions/router.actions';\r\n\r\ninterface SelectionModel {\r\n    selectedGroupId: number;\r\n    selectedItemId: number;\r\n    selectedChildId: number;\r\n}\r\n\r\ninterface FloatMenuState {\r\n    isFloatMenuVisible: boolean;\r\n    groupId: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'ui-webem-side-bar-menu',\r\n    templateUrl: './side-bar-menu.component.html',\r\n    styleUrls: ['./side-bar-menu.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SideBarMenuComponent implements OnInit, OnDestroy {\r\n    @Input() model: SideBarMenuModel;\r\n    @Input() isExpanded = false;\r\n    @Output() menuAction = new EventEmitter<SideBarMenuItem>();\r\n    @Output() expandAction = new EventEmitter<boolean>();\r\n\r\n    clickAction = new Subject<SideBarMenuItem>();\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n    keyboardShortcutsState$: Observable<any>;\r\n    shortcutsEnabled: boolean;\r\n\r\n    menuSelectionModel: SelectionModel = { selectedGroupId: -1, selectedItemId: -1, selectedChildId: -1 };\r\n\r\n    floatMenuState: FloatMenuState = { groupId: -1, isFloatMenuVisible: false };\r\n    thirdfloatMenuState: FloatMenuState = { groupId: -1, isFloatMenuVisible: false };\r\n\r\n    expandMenuButtonModel: ButtonModel = {\r\n        title: 'Expand',\r\n        icon: 'mdi mdi-chevron-right-circle-outline',\r\n        theme: ButtonTheme.Secondary\r\n    };\r\n\r\n    collapseMenuButtonModel: ButtonModel = {\r\n        title: 'Collapse',\r\n        icon: 'mdi mdi-chevron-left-circle-outline',\r\n        theme: ButtonTheme.Secondary\r\n    };\r\n\r\n    expandCollapseMenuButton: ButtonModel;\r\n    keyboardShortcutsEnabled$: Observable<boolean>;\r\n\r\n    constructor(private readonly store: Store) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.keyboardShortcutsEnabled$ = this.store.pipe(select(areKeyboardShortcutsEnabled));\r\n        this.menuSelectionModel = this.model.items.reduce((selectionModel: SelectionModel, groupItem: SideBarMenuGroup, itemId: number) => {\r\n            if (groupItem.isActive) {\r\n                selectionModel.selectedGroupId = itemId;\r\n                selectionModel.selectedItemId = groupItem.items.findIndex(({ isActive }) => isActive);\r\n                const selectedChildrenGroup = groupItem.items[selectionModel.selectedItemId].children as ThirdMenuItem[];\r\n                if (!isEmpty(selectedChildrenGroup)) {\r\n                    selectionModel.selectedChildId = selectedChildrenGroup.findIndex(({ isActive }) => isActive);\r\n                }\r\n            }\r\n\r\n            return selectionModel;\r\n        }, this.menuSelectionModel);\r\n\r\n        this.expandCollapseMenuButton = this.isExpanded ? this.collapseMenuButtonModel : this.expandMenuButtonModel;\r\n\r\n        this.clickAction.pipe(\r\n            takeUntil(this.ngUnsubscribe),\r\n            debounceTime(120)\r\n        ).subscribe((item) => this.menuAction.emit(item));\r\n\r\n        this.keyboardShortcutsState$ = this.store.pipe(\r\n            select(areKeyboardShortcutsEnabled)\r\n        );\r\n\r\n        this.keyboardShortcutsState$\r\n            .pipe(takeUntil(this.ngUnsubscribe))\r\n            .subscribe((keyboardShortcutsState) => {\r\n                this.shortcutsEnabled = keyboardShortcutsState;\r\n            });\r\n    }\r\n\r\n    isThirdMenuItemActived(itemId: number, groupId: number, childId: number) {\r\n        return this.menuSelectionModel.selectedChildId === childId\r\n            && groupId === this.menuSelectionModel.selectedGroupId\r\n            && itemId === this.menuSelectionModel.selectedItemId;\r\n    }\r\n\r\n    hasChildren(item: SideBarMenuItem) {\r\n        return !isEmpty(item.children);\r\n    }\r\n\r\n    onSideBarIconMouseLeave(event: MouseEvent) {\r\n        if (event.currentTarget) (event.currentTarget as HTMLElement).blur();\r\n\r\n        this.hideFloatMenu();\r\n    }\r\n\r\n    showFloatMenu(itemId: number) {\r\n        this.floatMenuState.groupId = itemId;\r\n        this.floatMenuState.isFloatMenuVisible = true;\r\n    }\r\n\r\n    showThirdFloatMenu(thirdItemId: number) {\r\n        this.thirdfloatMenuState.groupId = thirdItemId;\r\n        this.thirdfloatMenuState.isFloatMenuVisible = true;\r\n    }\r\n\r\n    hideFloatMenu() {\r\n        this.floatMenuState.isFloatMenuVisible = false;\r\n        this.thirdfloatMenuState.isFloatMenuVisible = false;\r\n    }\r\n\r\n    selectGroupAndNavigateToFirstTab(item: SideBarMenuGroup, groupId: number) {\r\n        if (item.items.length === 0) {\r\n            this.selectMenuItem(-1, -1, groupId, item);\r\n        }\r\n        this.store.dispatch(forceRedirect({routerLink: item.data}));\r\n    }\r\n\r\n    selectMenuItem(childId: number, itemId: number, groupId: number, item: SideBarMenuItem, event?: MouseEvent) {\r\n        this.menuSelectionModel.selectedItemId = itemId;\r\n        this.menuSelectionModel.selectedGroupId = groupId;\r\n        if (childId === -1 && !isEmpty(item?.children)) {\r\n            this.menuSelectionModel.selectedChildId = item.children ? item.children.findIndex(({ isActive }) => isActive) : -1;\r\n        } else {\r\n            this.menuSelectionModel.selectedChildId = childId;\r\n        }\r\n\r\n        this.clickAction.next(item);\r\n        event?.stopPropagation();\r\n    }\r\n\r\n    selectMenuItemAndCollapse(childId: number, itemId: number, groupId: number, item: SideBarMenuItem) {\r\n        if (item.children?.length) return;\r\n\r\n        this.selectMenuItem(childId, itemId, groupId, item);\r\n\r\n        if (this.isExpanded) {\r\n            this.expandMenuStateAction();\r\n        }\r\n    }\r\n\r\n    expandMenuStateAction() {\r\n        this.isExpanded = !this.isExpanded;\r\n        this.expandCollapseMenuButton = this.isExpanded ? this.collapseMenuButtonModel : this.expandMenuButtonModel;\r\n\r\n        this.expandAction.emit(this.isExpanded);\r\n    }\r\n\r\n    isSelectedItem(itemId: number, groupId: number) {\r\n        return this.menuSelectionModel.selectedItemId === itemId && this.menuSelectionModel.selectedGroupId === groupId ;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n}\r\n","export interface SideBarMenuModel {\r\n    items: SideBarMenuGroup[];\r\n}\r\n\r\nexport interface SideBarMenuItem {\r\n    label: string;\r\n    isActive?: boolean;\r\n    data?: any;\r\n    keyboardShortcut?: string;\r\n    children?: ThirdMenuItem[];\r\n}\r\n\r\nexport interface SideBarMenuAction extends SideBarMenuItem {\r\n    foo?: any\r\n}\r\n\r\nexport interface SideBarMenuGroup extends SideBarMenuItem {\r\n    items: SideBarMenuAction[];\r\n    icon: string;\r\n    iconType: IconTypes;\r\n}\r\n\r\nexport enum IconTypes {\r\n    IMAGE_ICON = 'image-icon',\r\n    MATERIAL_ICON = 'material_icon'\r\n}\r\n\r\n\r\nexport interface ThirdMenuItem {\r\n    label: string;\r\n    isActive?: boolean;\r\n    data: any;\r\n    keyboardShortcut?: string;\r\n}\r\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { SPINNER_CLASS } from '../../models/spinner-class-constants';\r\n\r\n@Component({\r\n    selector: 'ui-webem-spinner',\r\n    templateUrl: './spinner.component.html',\r\n    styleUrls: ['./spinner.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SpinnerComponent implements OnInit {\r\n    readonly SPINNER_CLASS = SPINNER_CLASS;\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n","<i class=\"{{SPINNER_CLASS}} spinner-icon\"></i>\r\n","export const SPINNER_CLASS = 'mdi mdi-loading mdi-spin';\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SpinnerComponent } from './components/spinner/spinner.component';\r\n\r\n@NgModule({\r\n    declarations: [SpinnerComponent],\r\n    exports: [SpinnerComponent],\r\n    imports: [\r\n        CommonModule\r\n    ]\r\n})\r\nexport class SpinnerModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ui-webem-status-bar',\r\n    templateUrl: './status-bar.component.html',\r\n    styleUrls: ['./status-bar.component.scss']\r\n})\r\nexport class StatusBarComponent implements OnInit {\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n}\r\n","<div class=\"flex-grow-1 status-bar-content-container\">\r\n    <ng-content></ng-content>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { StatusBarComponent } from './components/status-bar/status-bar.component';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FlexLayoutModule\r\n    ],\r\n    declarations: [\r\n        StatusBarComponent\r\n    ],\r\n    exports: [\r\n        StatusBarComponent\r\n    ],\r\n    providers: [],\r\n    entryComponents: []\r\n})\r\nexport class StatusBarModule {}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { StatusIconType } from '@oam/shared/lib/core/models/status-icon-color.definition';\r\nimport { get } from 'lodash';\r\n\r\ntype CircleType = { [key: string]: string };\r\n\r\nconst mapping: CircleType = {\r\n    [StatusIconType.Light1]: 'pi-circle-off',\r\n    [StatusIconType.Light2]: 'pi-circle-off'\r\n};\r\n\r\n@Pipe({\r\n    name: 'getCircleType',\r\n    pure: true\r\n})\r\nexport class GetCircleTypePipe implements PipeTransform {\r\n\r\n    transform(statusIcon: StatusIconType): string {\r\n\r\n        return get(mapping, statusIcon, 'pi-circle-on');\r\n    }\r\n\r\n}\r\n","<i class=\"pi status-icon\"\r\n   *ngIf=\"title; else noStatusIcon\"\r\n    [ngClass]=\"[ type, type | getCircleType ]\"\r\n    [title]=\"title\">\r\n</i>\r\n\r\n<ng-template #noStatusIcon>\r\n    <span title=\"No status\">{{ NO_DATA_TEXT }}</span>\r\n</ng-template>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { StatusIconType } from '@oam/shared/lib/core/models/status-icon-color.definition';\r\nimport { EMPTY_PLACEHOLDER } from '@oam/shared/lib/modules/webem-common/core/pipes/nullable-value.pipe';\r\n\r\n@Component({\r\n    selector: 'ui-webem-status-icon',\r\n    templateUrl: './status-icon.component.html',\r\n    styleUrls: ['./status-icon.component.scss']\r\n})\r\nexport class StatusIconComponent implements OnInit {\r\n    @Input() type: StatusIconType = StatusIconType.Unknown;\r\n    @Input() title: string;\r\n    readonly STATUS_ICON_TYPE = StatusIconType;\r\n    readonly NO_DATA_TEXT = EMPTY_PLACEHOLDER;\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n","import { Component, OnInit, Input, OnChanges, AfterViewInit, SimpleChanges, ElementRef } from '@angular/core';\r\nimport { MenuItem } from 'primeng/api';\r\nimport _ from 'lodash';\r\n\r\nconst P_STEPS_ITEM = '.p-steps-item';\r\nconst UI_STATE_COMPLETE = 'ui-state-complete';\r\n\r\n@Component({\r\n    selector: 'ui-webem-stepper',\r\n    templateUrl: './stepper.component.html',\r\n    styleUrls: ['./stepper.component.scss']\r\n})\r\nexport class StepperComponent implements OnChanges, AfterViewInit {\r\n\r\n    @Input() areStepsFailed: boolean;\r\n    @Input() activeIndex: number;\r\n    @Input() steps: MenuItem[];\r\n    @Input() freeze: boolean;\r\n\r\n    constructor(private host: ElementRef) {\r\n    }\r\n\r\n    ngOnChanges(changes: any) {\r\n        if (changes.activeIndex) {\r\n            const previousValue = changes.activeIndex.previousValue;\r\n            const currentValue = changes.activeIndex.currentValue;\r\n            if (currentValue < previousValue) {\r\n                this.resetCompletedSteps();\r\n                this.addClassesToCompletedSteps(this.activeIndex);\r\n            } else {\r\n                this.addClassesToCompletedSteps(this.activeIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.addClassesToCompletedSteps(this.activeIndex);\r\n    }\r\n\r\n    resetCompletedSteps() {\r\n        const steps = this.host.nativeElement.querySelectorAll(P_STEPS_ITEM);\r\n        _.forEach(steps, (step) => {\r\n            step.classList.remove(UI_STATE_COMPLETE);\r\n        });\r\n    }\r\n\r\n    addClassesToCompletedSteps(completedSteps: number) {\r\n        const steps = this.host.nativeElement.querySelectorAll(P_STEPS_ITEM);\r\n        _.times(completedSteps, index => {\r\n            if (steps[index] && !steps[index].classList.contains(UI_STATE_COMPLETE)) {\r\n                steps[index].classList.add(UI_STATE_COMPLETE);\r\n            }\r\n        });\r\n    }\r\n}\r\n","<div class=\"stepper-container\">\r\n  <p-steps class=\"stepper\"\r\n      [model]=\"steps\"\r\n      [activeIndex]=\"activeIndex\"\r\n      [ngClass]=\"{\r\n        'steps-failed': areStepsFailed,\r\n        'freeze-steps': freeze\r\n      }\">\r\n  </p-steps>\r\n</div>\r\n","import { NavigationService } from '@oam/navigation/lib/navigation/service/navigation.service';\r\nimport { Directive, Injectable } from '@angular/core';\r\nimport { chain } from 'lodash';\r\nimport { MenuItem } from 'primeng/api';\r\nimport { RouterLink } from '@oam/navigation/lib/navigation/core/models/router-link';\r\n\r\n@Directive()\r\nexport abstract class NavigationSubmenuDirective {\r\n\r\n    constructor(private navigationService: NavigationService) {\r\n    }\r\n\r\n    menuItemsMap: { [key: string]: MenuItem };\r\n\r\n    protected setMenuItemsMap(tabRouterLinks: RouterLink[]): void {\r\n\r\n        this.menuItemsMap = chain(this.navigationService\r\n            .getAvailableNavigations())\r\n            .filter(navigation =>\r\n                tabRouterLinks.some(routerLink => navigation.routerLink === routerLink))\r\n            .map(({ label, routerLink }) => ({\r\n                id: routerLink,\r\n                label: label,\r\n                routerLink: routerLink\r\n            }))\r\n            .keyBy('routerLink')\r\n            .value();\r\n    }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { MenuItem } from 'primeng/api';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'ui-webem-submenu',\r\n  templateUrl: './submenu.component.html',\r\n  styleUrls: ['./submenu.component.scss']\r\n})\r\nexport class SubmenuComponent implements OnInit {\r\n    @Input() menuItemsMap: { [key: string]: MenuItem };\r\n    menuItems: MenuItem[];\r\n\r\n    constructor(private readonly router: Router) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.menuItems = Object.values(this.menuItemsMap);\r\n\r\n        this.selectCurrentItem(this.router.url);\r\n    }\r\n\r\n    selectCurrentItem(href: string): void {\r\n        this.clearPreviousSelected();\r\n\r\n        const currentItem = this.menuItemsMap[href];\r\n\r\n        if (currentItem) {\r\n            currentItem.styleClass = 'active-menu-item';\r\n        }\r\n    }\r\n\r\n    private clearPreviousSelected() {\r\n        this.menuItems.forEach((item) => delete item.styleClass);\r\n    }\r\n\r\n}\r\n","<p-menubar class=\"submenu\" [model]=\"menuItems\"></p-menubar>\r\n","<div *ngIf=\"totalNumberOfItems\" class=\"pagination-container\">\r\n    <form [formGroup]=\"form\" class=\"form-container\">\r\n        <button pButton type=\"button\"\r\n                (click)=\"goToFirstPage()\"\r\n                [disabled]=\"isFirstPage()\"\r\n                title=\"First page\"\r\n                class=\"go-to-first-page\"\r\n                icon=\"mdi mdi-page-first\">\r\n        </button>\r\n        <button pButton type=\"button\"\r\n                (click)=\"goToPreviousPage()\"\r\n                [disabled]=\"isFirstPage()\"\r\n                title=\"Previous page\"\r\n                class=\"pagination-previous go-to-previous-page\"\r\n                icon=\"mdi mdi-chevron-left\">\r\n        </button>\r\n        <div class=\"pagination-page-number\">\r\n            <div class=\"pagination-current-page\">\r\n                <input type=\"number\" pInputText step=\"1\"\r\n                       autocomplete=\"off\"\r\n                       class=\"current-page-input pagination-page-number\"\r\n                       formControlName=\"currentPage\"\r\n                       (change)=\"onCurrentPageChange()\">\r\n            </div>\r\n            / {{ totalNumberOfPages }}\r\n        </div>\r\n        <button pButton type=\"button\"\r\n                (click)=\"goToNextPage()\"\r\n                [disabled]=\"isLastPage()\"\r\n                title=\"Next page\"\r\n                class=\"pagination-next go-to-next-page\"\r\n                icon=\"mdi mdi-chevron-right\">\r\n        </button>\r\n        <button pButton type=\"button\"\r\n                (click)=\"goToLastPage()\"\r\n                [disabled]=\"isLastPage()\"\r\n                title=\"Last page\"\r\n                class=\"first-last-page go-to-last-page\"\r\n                icon=\"mdi mdi-page-last\">\r\n        </button>\r\n    </form>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'ui-webem-table-pagination',\r\n    templateUrl: './table-pagination.component.html',\r\n    styleUrls: ['./table-pagination.component.scss']\r\n})\r\nexport class TablePaginationComponent implements OnInit, OnChanges {\r\n    totalNumberOfPages: number;\r\n    firstPageNumber = 1;\r\n    form: FormGroup;\r\n    @Input() totalNumberOfItems: number;\r\n    @Input() itemsPerPage: number;\r\n    @Input() pageNumber: number;\r\n\r\n    @Output() PageChange = new EventEmitter<number>();\r\n\r\n    constructor(private readonly formBuilder: FormBuilder) {\r\n        this.form = this.formBuilder.group({\r\n            currentPage: [this.firstPageNumber, Validators.compose([\r\n                Validators.required,\r\n                Validators.pattern('^[0-9]+$')])]\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n            this.totalNumberOfPages = this.totalNumberOfItems ?\r\n                Math.ceil(this.totalNumberOfItems / this.itemsPerPage) : 1;\r\n            if (this.form.controls['currentPage'].value > this.totalNumberOfPages) {\r\n                this.goToFirstPage();\r\n            }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.pageNumber) {\r\n            const value = changes.pageNumber.currentValue;\r\n            this.form.setValue({currentPage: value});\r\n        }\r\n\r\n        if (changes.totalNumberOfItems || changes.itemsPerPage) {\r\n            this.totalNumberOfPages = this.totalNumberOfItems ?\r\n                Math.ceil(this.totalNumberOfItems / this.itemsPerPage) : 1;\r\n        }\r\n        if (this.form.controls['currentPage'].value > this.totalNumberOfPages) {\r\n            this.goToLastPage();\r\n        }\r\n    }\r\n\r\n    goToPreviousPage(): void {\r\n        const changedPage = this.form.controls['currentPage'].value;\r\n        this.setCurrentPage(changedPage - 1);\r\n    }\r\n\r\n    goToNextPage(): void {\r\n        const changedPage = this.form.controls['currentPage'].value;\r\n        this.setCurrentPage(changedPage + 1);\r\n    }\r\n\r\n    goToFirstPage(): void {\r\n        this.setCurrentPage(this.firstPageNumber);\r\n    }\r\n\r\n    goToLastPage(): void {\r\n        this.setCurrentPage(this.totalNumberOfPages);\r\n    }\r\n\r\n    isLastPage(): boolean {\r\n        return this.form.controls['currentPage'].value === this.totalNumberOfPages;\r\n    }\r\n\r\n    isFirstPage(): boolean {\r\n        return this.form.controls['currentPage'].value === this.firstPageNumber;\r\n    }\r\n\r\n    onCurrentPageChange(): void {\r\n        const changedPage = this.form.controls['currentPage'].value;\r\n\r\n        if (changedPage > this.totalNumberOfPages) {\r\n            this.setCurrentPage(this.totalNumberOfPages);\r\n        } else if (changedPage < this.firstPageNumber) {\r\n            this.setCurrentPage(this.firstPageNumber);\r\n        } else {\r\n            this.setCurrentPage(changedPage);\r\n        }\r\n    }\r\n\r\n    setCurrentPage(currentPage: number): void {\r\n        this.form.controls['currentPage'].setValue(currentPage);\r\n        this.PageChange.emit(currentPage);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TablePaginationComponent } from './components/table-pagination/table-pagination.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\n\r\n@NgModule({\r\n    declarations: [TablePaginationComponent],\r\n    exports: [TablePaginationComponent],\r\n    imports: [\r\n        CommonModule,\r\n        ButtonModule,\r\n        InputTextModule,\r\n        FormsModule,\r\n        ReactiveFormsModule\r\n    ]\r\n})\r\nexport class TablePaginationModule {\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { GroupableTableViewColumn } from '../models/table-view-column.definition';\r\nimport { ParameterVisibilityMap } from '../../core/models/parameter-visibility-map.definition';\r\n\r\n@Pipe({\r\n    name: 'filterInvisibleColumns',\r\n    pure: true\r\n})\r\nexport class FilterInvisibleColumnsPipe implements PipeTransform {\r\n    transform<T extends string = string>(\r\n        columns: GroupableTableViewColumn<T>[],\r\n        visibleParameters?: ParameterVisibilityMap<T> | null\r\n    ): GroupableTableViewColumn<T>[] {\r\n        if (!visibleParameters) return columns;\r\n\r\n        return columns.filter(column =>\r\n            !column.parameterGroup || !!visibleParameters[column.parameterGroup]\r\n        );\r\n    }\r\n}\r\n","<!-- Percentage values for scrollHeight make scrolling \"jumpy\" in Chrome, unless given enough virtualScrollDelay -->\r\n<p-table #pTable class=\"table-component\"\r\n    [columns]=\"columns\"\r\n    [value]=\"items\"\r\n    [dataKey]=\"dataKey ? dataKey : ''\" selectionMode=\"single\" [(selection)]=\"selectedItem\"\r\n    [resizableColumns]=\"true\" [rowTrackBy]=\"rowTrackBy\"\r\n    [scrollable]=\"scrollable\"\r\n    [virtualScroll]=\"virtualScroll\"\r\n    [virtualRowHeight]=\"27\"\r\n    [totalRecords]=\"items ? items.length : 0\"\r\n    [scrollHeight]=\"scrollHeight\"\r\n    [loading]=\"loading\"\r\n    [loadingIcon]=\"SPINNER_CLASS\"\r\n    [rows]=\"minBuffer\"\r\n    [minBufferPx]=\"1000\"\r\n    [maxBufferPx]=\"1300\"\r\n    sharedFixTableColumnsResize\r\n>\r\n    <ng-template pTemplate=\"colgroup\" let-cols>\r\n        <colgroup>\r\n            <col *ngFor=\"let col of cols | filterInvisibleColumns:visibleParameterGroupColumns\"\r\n                [ngStyle]=\"{ 'width': col.width || 'auto' }\"\r\n                [ngClass]=\"col.class ? col.class : ''\">\r\n        </colgroup>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"header\" let-cols>\r\n        <tr>\r\n            <th *ngFor=\"let col of cols | filterInvisibleColumns:visibleParameterGroupColumns\"\r\n                pResizableColumn [pResizableColumnDisabled]=\"!!col.fixed\"\r\n                [ngStyle]=\"{ 'min-width': col.minWidth || '0' }\"\r\n                [ngClass]=\"col.class ? col.class : ''\">\r\n                {{ col.name }}\r\n            </th>\r\n        </tr>\r\n        <tr *ngIf=\"supportNoDataShow && isTableEmpty()\">\r\n            <td [attr.colspan]=\"(cols | filterInvisibleColumns:visibleParameterGroupColumns).length\" class=\"empty-table\">\r\n                <ui-webem-no-selected-message message=\"{{ noDataMessage }}\"></ui-webem-no-selected-message>\r\n            </td>\r\n        </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"body\" let-item>\r\n        <tr [pSelectableRow]=\"item\" [pSelectableRowDisabled]=\"pSelectableRowDisabled\">\r\n            <ng-container [ngTemplateOutlet]=\"row\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-container>\r\n        </tr>\r\n    </ng-template>\r\n</p-table>\r\n","import {\r\n    Component,\r\n    Input,\r\n    OnInit,\r\n    ContentChild,\r\n    TemplateRef,\r\n    Output,\r\n    EventEmitter,\r\n    SimpleChanges,\r\n    OnChanges,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    ViewChild, ElementRef, OnDestroy, AfterViewInit, NgZone\r\n} from '@angular/core';\r\nimport { Table } from 'primeng/table';\r\nimport { TableViewColumn, GroupableTableViewColumn } from '../../core/models/table-view-column.definition';\r\nimport { ParameterVisibilityMap } from '../../core/models/parameter-visibility-map.definition';\r\nimport { SPINNER_CLASS } from '@oam/cu-ui/lib/spinner/models/spinner-class-constants';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nimport { get, isEmpty } from 'lodash';\r\n\r\n@Component({\r\n    selector: 'ui-webem-table-view',\r\n    templateUrl: './table-view.component.html',\r\n    styleUrls: ['./table-view.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TableViewComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {\r\n    @ViewChild('pTable') pTable: Table;\r\n    @ContentChild('row', { static: true }) row: TemplateRef<any>;\r\n\r\n    private _selectedItem?: any;\r\n    get selectedItem(): any | null {\r\n        return this._selectedItem || null;\r\n    }\r\n\r\n    set selectedItem(item: any | null) {\r\n        this._selectedItem = item;\r\n        this.selectedChange.emit(item);\r\n    }\r\n\r\n    @Input() items: any[] = [];\r\n    @Input() columns: (TableViewColumn | GroupableTableViewColumn<any>)[];\r\n    @Input() visibleParameterGroupColumns?: ParameterVisibilityMap<any>;\r\n    @Input() minBuffer = 40;\r\n    @Input() dataKey?: string;\r\n    @Input() selected?: any;\r\n    @Input() pSelectableRowDisabled = false;\r\n    @Input() virtual = false;\r\n    @Input() loading: boolean;\r\n    @Input() supportNoDataShow = false;\r\n    @Input() scrollable = true;\r\n    @Input() virtualScroll = true;\r\n    @Input() noDataMessage = 'No Data';\r\n    @Output() selectedChange = new EventEmitter<any>();\r\n    private observer: ResizeObserver;\r\n\r\n    itemsSlice: any[] = [];\r\n    scrollHeight = '';\r\n    tableScrollHeight: any;\r\n    readonly SPINNER_CLASS = SPINNER_CLASS;\r\n\r\n    constructor(private readonly cdr: ChangeDetectorRef, public readonly elementRef: ElementRef,private ngZone: NgZone) {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.observer = new ResizeObserver((entries: any) => {\r\n\r\n            this.ngZone.runOutsideAngular(() => {\r\n                this.tableScrollHeight = get(entries,'[0].contentRect.height');\r\n\r\n                const newHeight = this.calculateScrollHeight(this.items);\r\n\r\n                if (newHeight === this.scrollHeight) return;\r\n\r\n                this.scrollHeight = newHeight;\r\n\r\n                this.cdr.detectChanges();\r\n            });\r\n        });\r\n\r\n        this.observer.observe(this.elementRef.nativeElement);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.observer.unobserve(this.elementRef.nativeElement);\r\n    }\r\n\r\n    isTableEmpty(): boolean {\r\n        return isEmpty(this.items);\r\n    }\r\n\r\n    calculateScrollHeight(items: any[]) {\r\n        if (!items || !this.tableScrollHeight) return '0px';\r\n\r\n        const offsetWidth = document.documentElement.offsetWidth;\r\n        const scrollWidth = document.documentElement.scrollWidth;\r\n\r\n        const pTableBottomPadding = 15;\r\n        const browserScrollbarHeight = 17;\r\n        const pTableHeaderHeight = 27;\r\n        const pTableBodyHeight = this.tableScrollHeight - pTableHeaderHeight - pTableBottomPadding;\r\n\r\n        const height = (offsetWidth === scrollWidth) ? pTableBodyHeight : (pTableBodyHeight - browserScrollbarHeight);\r\n\r\n        const rowsHeight = items.length * 27;\r\n        let rowsHeightWithScrollbar = rowsHeight;\r\n        const virtualScrollElement = this.elementRef.nativeElement.getElementsByTagName('cdk-virtual-scroll-viewport')[0];\r\n        if (virtualScrollElement?.offsetWidth < virtualScrollElement?.scrollWidth) {\r\n            rowsHeightWithScrollbar = rowsHeight + browserScrollbarHeight;\r\n        }\r\n        const finalHeight = rowsHeight > height ? height : rowsHeightWithScrollbar;\r\n\r\n        return `${finalHeight}px`;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.selected?.currentValue) this._selectedItem = this.selected;\r\n    }\r\n\r\n    ngAfterContentChecked() {\r\n        this.scrollHeight = this.calculateScrollHeight(this.items);\r\n    }\r\n\r\n    rowTrackBy = (index: number, item: any): any => {\r\n        return this.dataKey ? get(item, this.dataKey) : item;\r\n    };\r\n}\r\n","import { Directive, EventEmitter, HostListener, Output } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[uiWebemToggleTooltipByChildTooltip]'\r\n})\r\nexport class ToggleTooltipByChildTooltipDirective {\r\n\r\n    @Output() hideTooltip = new EventEmitter();\r\n    @Output() showTooltip = new EventEmitter();\r\n\r\n    @HostListener('hideParentTooltip', ['$event']) onHide(event: Event) {\r\n        event.stopPropagation();\r\n        this.hideTooltip.emit();\r\n    }\r\n\r\n    @HostListener('showParentTooltip', ['$event']) onShow(event: Event) {\r\n        event.stopPropagation();\r\n        this.showTooltip.emit();\r\n    }\r\n\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    Component,\r\n    Input,\r\n    OnInit,\r\n    ContentChildren,\r\n    QueryList,\r\n    ViewChild,\r\n    OnChanges\r\n} from '@angular/core';\r\nimport { TileTooltipAllowedValue, TileTooltipContent } from '../../models';\r\nimport { ToggleParentTooltipDirective } from '../../directives/toggle-parent-tooltip/toggle-parent-tooltip.directive';\r\nimport { Tooltip } from 'primeng/tooltip';\r\nimport { NullableValuePipe } from '@oam/shared/lib/modules/webem-common';\r\nimport { ToggleTooltipByChildTooltipDirective } from '@oam/cu-ui/lib/tile-tooltip/directives/toggle-tooltip/toggle-tooltip-by-child-tooltip.directive';\r\n\r\n@Component({\r\n    selector: 'ui-webem-tile-tooltip',\r\n    templateUrl: './tile-tooltip.component.html',\r\n    styleUrls: ['./tile-tooltip.component.scss']\r\n})\r\nexport class TileTooltipComponent implements OnInit, OnChanges, AfterViewInit {\r\n    @Input() tooltipTitleHeader: string;\r\n    @Input() tooltipTitleValue: string;\r\n    @Input() tooltipContent?: TileTooltipContent[];\r\n    @Input() tooltipTileState?: TileTooltipContent[];\r\n\r\n    @ViewChild(Tooltip, { static: true }) private readonly tooltipRef: Tooltip;\r\n\r\n    @ContentChildren(ToggleParentTooltipDirective, { descendants: true })\r\n    toggleParentTooltipDirectives: QueryList<ToggleParentTooltipDirective>;\r\n\r\n    @ContentChildren(ToggleTooltipByChildTooltipDirective, { descendants: true })\r\n    toggleTooltipByChildTooltipDirectives: QueryList<ToggleTooltipByChildTooltipDirective>;\r\n\r\n    tooltipText: string;\r\n\r\n    constructor(private readonly nullableValuePipe: NullableValuePipe) {}\r\n\r\n    ngOnInit(): void {\r\n        this.generateTooltip();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (!this.tooltipRef.active) {\r\n            this.tooltipRef.hide();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        [...this.toggleParentTooltipDirectives, ...this.toggleTooltipByChildTooltipDirectives].forEach(element => {\r\n            element.hideTooltip.subscribe(() => this.tooltipRef.hide());\r\n            element.showTooltip.subscribe(() => this.tooltipRef.show());\r\n        });\r\n    }\r\n\r\n    onLeaveHideTooltip() {\r\n        this.tooltipRef.hide();\r\n    }\r\n\r\n    onEnterGenerateTooltip() {\r\n        this.generateTooltip();\r\n    }\r\n\r\n    generateTooltip() {\r\n        if (!this.tooltipContent && !this.tooltipTileState) return;\r\n        this.tooltipText = this.getTooltipRowHtml(this.tooltipTitleHeader, this.tooltipTitleValue);\r\n        if (this.tooltipContent) {\r\n            this.tooltipText += '<br/>';\r\n            this.mapContentArrayToString(this.tooltipContent);\r\n        }\r\n        if (this.tooltipTileState) {\r\n            this.tooltipText += '<br/>';\r\n            this.mapContentArrayToString(this.tooltipTileState);\r\n        }\r\n    }\r\n\r\n    private mapContentArrayToString(contentArray: TileTooltipContent[]) {\r\n        contentArray.forEach((content, index) => {\r\n            this.tooltipText += this.getTooltipRowHtml(content.title, content.value);\r\n        });\r\n    }\r\n\r\n    private getTooltipRowHtml(title: string, value: TileTooltipAllowedValue): string {\r\n        return `<div data-title=\"${this.formatTooltipRowData(title)}\" class=\"tooltip-row\">\r\n                <div class=\"name-column\">${title}:</div>\r\n                <div class=\"value-column\">${this.nullableValuePipe.transform(value)}</div>\r\n            </div>`;\r\n    }\r\n\r\n    private formatTooltipRowData(str: string): string {\r\n        return str.replace(/\\W+/g, '-').toLowerCase();\r\n    }\r\n}\r\n","<div class=\"full-height\"\r\n     [pTooltip]=\"tooltipText\"\r\n     tooltipPosition=\"right\"\r\n     positionStyle=\"fixed\"\r\n     tooltipStyleClass=\"tile-tooltip\"\r\n     [escape]=\"false\"\r\n     [showDelay]=\"300\"\r\n     (mouseenter)=onEnterGenerateTooltip()\r\n     (mouseleave)=onLeaveHideTooltip()>\r\n    <ng-content></ng-content>\r\n</div>\r\n","import { Directive, EventEmitter, HostListener, Output } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uiWebemToggleParentTooltip]'\r\n})\r\nexport class ToggleParentTooltipDirective {\r\n    @Output() hideTooltip = new EventEmitter();\r\n    @Output() showTooltip = new EventEmitter();\r\n\r\n    @HostListener('mouseenter') onMouseEnter() {\r\n        this.hideTooltip.emit();\r\n    }\r\n\r\n    @HostListener('mouseleave') onMouseLeave() {\r\n        this.showTooltip.emit();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TileTooltipComponent } from './components/tile-tooltip/tile-tooltip.component';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\nimport { ToggleParentTooltipDirective } from './directives/toggle-parent-tooltip/toggle-parent-tooltip.directive';\r\nimport { SendToggleParentTooltipRequestFromChildDirective } from './directives/toogle-parent-tooltip-by-ng-content/send-toggle-parent-tooltip-request-from-child.directive';\r\nimport { ToggleTooltipByChildTooltipDirective } from './directives/toggle-tooltip/toggle-tooltip-by-child-tooltip.directive';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        TileTooltipComponent,\r\n        ToggleParentTooltipDirective,\r\n        SendToggleParentTooltipRequestFromChildDirective,\r\n        ToggleTooltipByChildTooltipDirective\r\n    ],\r\n    exports: [\r\n        TileTooltipComponent,\r\n        ToggleParentTooltipDirective,\r\n        SendToggleParentTooltipRequestFromChildDirective,\r\n        ToggleTooltipByChildTooltipDirective\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        TooltipModule\r\n    ]\r\n})\r\nexport class TileTooltipModule {\r\n}\r\n","import { Directive, EventEmitter, HostListener, Output } from '@angular/core';\r\n\r\n@Directive(\r\n    { selector: '[uiWebemCapsLock]' }\r\n)\r\n\r\nexport class TrackCapsLockDirective {\r\n    @Output('uiWebemCapsLock') capsLock = new EventEmitter<boolean>();\r\n\r\n    capsLockKeyCode = 'CapsLock';\r\n\r\n    @HostListener('window:keydown', ['$event'])\r\n    onKeyDown(event: KeyboardEvent): void {\r\n        if (event.code === this.capsLockKeyCode) {\r\n            this.capsLock.emit(event.getModifierState && event.getModifierState('CapsLock'));\r\n        }\r\n    }\r\n    @HostListener('window:keyup', ['$event'])\r\n    onKeyUp(event: KeyboardEvent): void {\r\n        if (event.code === this.capsLockKeyCode) {\r\n            this.capsLock.emit(event.getModifierState && event.getModifierState('CapsLock'));\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TrackCapsLockDirective } from './directives/track-caps-lock.directive';\r\n\r\n@NgModule({\r\n    declarations: [TrackCapsLockDirective],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [TrackCapsLockDirective]\r\n})\r\nexport class TrackCapsLockModule { }\r\n","export interface PasswordValidationOptions {\r\n    minLength: number;\r\n    maxLength: number;\r\n    minNumberOfDigits: number;\r\n    minNonAlphaNumerical: number;\r\n}\r\nexport interface UsernameValidationOptions {\r\n    minLength: number;\r\n    maxLength: number;\r\n}\r\n\r\nexport type ValidationStatus = {\r\n    password: {\r\n        [key in PasswordValidationRulesType]?: boolean;\r\n    };\r\n    passwordOptions: PasswordValidationOptions,\r\n    username: {\r\n        [key in UsernameValidationRulesType]?: boolean;\r\n    };\r\n    usernameOptions: UsernameValidationOptions;\r\n};\r\n\r\nexport interface UserInformationChange {\r\n    username: string;\r\n    password: string;\r\n    newUsername: string;\r\n    newPassword: string;\r\n    activeStatus?: 'active' | 'deactive';\r\n    roleType?: 'systemUserAccessMode' | 'secUserAccessMode' | 'appUserAccessMode' | 'readOnlyUserAccessMode';\r\n}\r\n\r\nexport interface UserInformationChangeStatus {\r\n    status: InformationChangeStatusTypes,\r\n    reason: string\r\n}\r\n\r\nexport enum InformationChangeStatusTypes {\r\n    IN_PROGRESS = 'IN_PROGRESS',\r\n    SUCCESSFUL = 'SUCCESSFUL',\r\n    FAILED = 'FAILED',\r\n    NONE = 'NONE'\r\n}\r\n\r\nexport enum ValidationRules {\r\n    PASSWORDS_MATCH = 'PASSWORDS_MATCH',\r\n    PASSWORD_NOT_SAME_AS_USERNAME = 'PASSWORD_NOT_SAME_AS_USERNAME',\r\n    PASSWORD_NOT_CONTAIN_USERNAME = 'PASSWORD_NOT_CONTAIN_USERNAME',\r\n    MAX_LENGTH = 'MAX_LENGTH',\r\n    MIN_LENGTH = 'MIN_LENGTH',\r\n    CONSECUTIVE_CHAR = 'CONSECUTIVE_CHAR',\r\n    DIGIT_NUMBER = 'DIGIT_NUMBER',\r\n    LOWER_UPPER_CASE = 'LOWER_UPPER_CASE',\r\n    UPPER_CASE = 'UPPER_CASE',\r\n    LOWER_CASE = 'LOWER_CASE',\r\n    DISALLOWED_ASCII = 'DISALLOWED_ASCII',\r\n    NON_ALPHA_NUMBER = 'NON_ALPHA_NUMBER',\r\n}\r\n\r\nexport enum FormParameters {\r\n    USERNAME = 'username',\r\n    PASSWORD = 'password',\r\n    NEW_PASSWORD = 'newPassword',\r\n    ACTIVATION_STATUS = 'activationStatus',\r\n    ROLE_NAME = 'roleName',\r\n    CONFIRM_PASSWORD = 'confirmPassword'\r\n}\r\n\r\nexport enum UserInformationChangeOptions {\r\n    PASSWORD_ONLY = 'Password',\r\n    USERNAME_ONLY = 'Username',\r\n    NO_OPTION_SELECTED = 'No Option Selected',\r\n    PASSWORD_AND_USERNAME = 'Password and Username',\r\n    PASSWORD_EXPIRATION_CHANGE = 'Expired password',\r\n    PASSWORD_SERVICE = 'Password Service',\r\n    ACTIVE_STATUS = 'Active status'\r\n}\r\n\r\nexport enum AccountActiveOptions {\r\n    systemUserAccessMode = 'BTS System Administrator',\r\n    secUserAccessMode = 'BTS Security Administrator',\r\n    appUserAccessMode = 'BTS Application Administrator',\r\n    readOnlyUserAccessMode = 'BTS Read-Only user'\r\n}\r\n\r\nexport enum ActiveStatusChangeOptions {\r\n    ACTIVE = 'active',\r\n    INACTIVE = 'inactive'\r\n}\r\n\r\ntype UsernameValidationRulesType = ValidationRules.MAX_LENGTH |\r\n    ValidationRules.MIN_LENGTH |\r\n    ValidationRules.DISALLOWED_ASCII;\r\n\r\ntype PasswordValidationRulesType = ValidationRules.MAX_LENGTH |\r\n    ValidationRules.MIN_LENGTH |\r\n    ValidationRules.CONSECUTIVE_CHAR |\r\n    ValidationRules.DIGIT_NUMBER |\r\n    ValidationRules.LOWER_UPPER_CASE |\r\n    ValidationRules.UPPER_CASE |\r\n    ValidationRules.LOWER_CASE |\r\n    ValidationRules.DISALLOWED_ASCII |\r\n    ValidationRules.NON_ALPHA_NUMBER |\r\n    ValidationRules.PASSWORD_NOT_SAME_AS_USERNAME |\r\n    ValidationRules.PASSWORD_NOT_CONTAIN_USERNAME;\r\n","import {\r\n    FormParameters,\r\n    UserInformationChangeOptions\r\n} from '../interface/user-information-change.interface';\r\n\r\nexport const FIELDS_DESCRIPTION = {\r\n    [FormParameters.USERNAME]: [\r\n        UserInformationChangeOptions.PASSWORD_AND_USERNAME,\r\n        UserInformationChangeOptions.PASSWORD_SERVICE,\r\n        UserInformationChangeOptions.USERNAME_ONLY\r\n    ],\r\n    [FormParameters.PASSWORD]: [\r\n        UserInformationChangeOptions.PASSWORD_AND_USERNAME,\r\n        UserInformationChangeOptions.PASSWORD_SERVICE,\r\n        UserInformationChangeOptions.PASSWORD_ONLY,\r\n        UserInformationChangeOptions.USERNAME_ONLY,\r\n        UserInformationChangeOptions.PASSWORD_EXPIRATION_CHANGE\r\n    ],\r\n    [FormParameters.NEW_PASSWORD]: [\r\n        UserInformationChangeOptions.PASSWORD_AND_USERNAME,\r\n        UserInformationChangeOptions.PASSWORD_SERVICE,\r\n        UserInformationChangeOptions.PASSWORD_ONLY,\r\n        UserInformationChangeOptions.PASSWORD_EXPIRATION_CHANGE\r\n    ],\r\n    [FormParameters.CONFIRM_PASSWORD]: [\r\n        UserInformationChangeOptions.PASSWORD_AND_USERNAME,\r\n        UserInformationChangeOptions.PASSWORD_SERVICE,\r\n        UserInformationChangeOptions.PASSWORD_ONLY,\r\n        UserInformationChangeOptions.PASSWORD_EXPIRATION_CHANGE\r\n    ],\r\n};\r\n\r\nexport const CURRENT_PASSWORD_TOOLTIP_CONTENT = 'Current password is not required for georesiliency user';\r\n","<div class=\"ui-g local-user-container\">\r\n    <div class=\"form-container\">\r\n        <form [formGroup]=\"updateAccountForm\" (ngSubmit)=\"onSubmit()\" (uiWebemCapsLock)=\"setAllCapsLockStates($event)\">\r\n\r\n\r\n            <div class=\"form-field\" id=\"select-to-change\" *ngIf=\"isConfigVmCu && changeOptions.length > 1\">\r\n                <label>Select to change:</label>\r\n                <p-dropdown id=\"user-information\"\r\n                    class=\"user-information-dropdown\"\r\n                    [options]=\"selectToChangeOptions\"\r\n                    (onChange)=\"updateDisabledFields($event.value)\">\r\n                </p-dropdown>\r\n            </div>\r\n\r\n\r\n            <div class=\"form-field\" id=\"select-to-update\" *ngIf=\"isRoleDropdownShow\">\r\n                <label>Select to update:</label>\r\n                <p-dropdown id=\"role-information\"\r\n                            class=\"user-information-dropdown\"\r\n                            formControlName=\"roleName\"\r\n                            [options]=\"availableRoles\"\r\n                            (onChange)=\"updateRoleName($event.value)\">\r\n                </p-dropdown>\r\n            </div>\r\n\r\n            <div class=\"form-field\" id=\"select-to-activate\" *ngIf=\"isActivationStatusShow\">\r\n                <label>Activation status:</label>\r\n                <p-dropdown id=\"active-information\"\r\n                            class=\"user-information-dropdown\"\r\n                            formControlName=\"activationStatus\"\r\n                            [options]=\"availableActivationStatus\"\r\n                            (onChange)=\"updateActivateStatus($event.value)\">\r\n                </p-dropdown>\r\n            </div>\r\n\r\n            <div class=\"form-field\" *ngIf=\"isUserNameShow\">\r\n                <label [ngClass]=\"{'label-disabled': disabledFields.username}\">Username:</label>\r\n                <input type=\"text\" pInputText\r\n                       class=\"ui-inputtext\"\r\n                       id=\"username\"\r\n                       formControlName=\"username\"\r\n                       [placeholder]=\"username\"\r\n                       autocomplete=\"off\"\r\n                       [attr.disabled]=\"disabledFields.username\">\r\n            </div>\r\n\r\n            <div class=\"form-field password-field\" *ngIf=\"isCurrentPasswordShow\">\r\n                <span [pTooltip]=\"tooltipContent\"\r\n                      [tooltipDisabled]=\"!isGeoresiliencyUser\"\r\n                      tooltipStyleClass=\"current-password-tooltip\"\r\n                      positionStyle=\"fixed\"\r\n                      tooltipPosition=\"right\">\r\n                    <label [ngClass]=\"{'label-disabled': disabledFields.password || isGeoresiliencyUser}\">Current password:</label>\r\n                    <input [type]=\"showCurrentPassword ? 'text' : 'password'\"\r\n                        class=\"ui-inputtext\"\r\n                        id=\"current-password\"\r\n                        formControlName=\"password\"\r\n                        autocomplete=\"new-password\"\r\n                        [attr.disabled]=\"disabledFields.password || isGeoresiliencyUser || null\"\r\n                        (click)=\"setCurrentPasswordCapsLockState($event)\">\r\n                </span>\r\n                <ui-webem-show-password-button\r\n                    class=\"eye-class\"\r\n                    [disabled]=\"!updateAccountForm.get('password')?.value\"\r\n                    (isPasswordVisible)=\"setCurrentPasswordVisible($event)\">\r\n                </ui-webem-show-password-button>\r\n\r\n                <div class=\"capslock-indicator\">\r\n                    <ng-container *ngIf=\"currentPasswordCapsLockOn\">\r\n                        <span>Caps Lock on</span>\r\n                    </ng-container>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"form-field password-field\">\r\n                <label [ngClass]=\"{'label-disabled': disabledFields.newPassword}\">New password:</label>\r\n                <input class=\"ui-inputtext\"\r\n                       id=\"new-password\"\r\n                       [type]=\"showNewPassword ? 'text' : 'password'\"\r\n                       formControlName=\"newPassword\"\r\n                       autocomplete=\"new-password\"\r\n                       [attr.disabled]=\"disabledFields.newPassword\"\r\n                       (click)=\"setNewPasswordCapsLockState($event)\">\r\n\r\n                <ui-webem-show-password-button\r\n                    class=\"eye-class\"\r\n                    [disabled]=\"!updateAccountForm.get('newPassword')?.value\"\r\n                    (isPasswordVisible)=\"setNewPasswordVisible($event)\">\r\n                </ui-webem-show-password-button>\r\n\r\n                <div class=\"capslock-indicator\">\r\n                    <ng-container *ngIf=\"newPasswordCapsLockOn\">\r\n                        <span>Caps Lock on</span>\r\n                    </ng-container>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"form-field form-confirm-password\">\r\n                <label [ngClass]=\"{'label-disabled': disabledFields.confirmPassword}\">Confirm password:</label>\r\n                <i class=\"mdi mdi-alert red-alert icon-class-alert\"\r\n                   aria-hidden=\"true\"\r\n                   *ngIf=\"isPasswordMatchError$ | async\">\r\n                </i>\r\n                <input [type]=\"showConfirmPassword ? 'text' : 'password'\"\r\n                       class=\"ui-inputtext\"\r\n                       id=\"confirm-password\"\r\n                       formControlName=\"confirmPassword\"\r\n                       autocomplete=\"new-password\"\r\n                       [attr.disabled]=\"disabledFields.confirmPassword\"\r\n                       (click)=\"setConfirmPasswordCapsLockState($event)\">\r\n\r\n                <ui-webem-show-password-button\r\n                    class=\"eye-class\"\r\n                    [disabled]=\"!updateAccountForm.get('confirmPassword')?.value\"\r\n                    (isPasswordVisible)=\"setConfirmPasswordVisible($event)\">\r\n                </ui-webem-show-password-button>\r\n\r\n                <div class=\"validation-container\">\r\n                    <div class=\"errors\">\r\n                        <div class=\"fade show\" *ngIf=\"isPasswordMatchError$ | async\">\r\n                            Confirm password must be identical with the new password\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"capslock-indicator\">\r\n                        <ng-container *ngIf=\"confirmPasswordCapsLockOn\">\r\n                            <span>Caps Lock on</span>\r\n                        </ng-container>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"submit-container\">\r\n                <ui-webem-button\r\n                    id=\"save-password\"\r\n                    type=\"submit\"\r\n                    [model]=\"inProgress ? buttonModelInProgress: buttonModel\"\r\n                    [options]=\"buttonOptions\"\r\n                    [disabled]=\"inProgress || !(canChangeInformation$ | async)\">\r\n                </ui-webem-button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { debounceTime, distinctUntilChanged, map, share, tap } from 'rxjs/operators';\r\nimport {\r\n    FormParameters,\r\n    InformationChangeStatusTypes,\r\n    PasswordValidationOptions,\r\n    UserInformationChange,\r\n    UserInformationChangeOptions,\r\n    UserInformationChangeStatus,\r\n    UsernameValidationOptions,\r\n    ValidationRules,\r\n    ValidationStatus\r\n} from './interface/user-information-change.interface';\r\nimport { UserInformationValidator } from './validators/user-information.validator';\r\nimport { isNull, filter } from 'lodash';\r\nimport { CURRENT_PASSWORD_TOOLTIP_CONTENT, FIELDS_DESCRIPTION } from './constants/user-information-change.constants';\r\nimport { SelectItem } from 'primeng/api';\r\nimport { ButtonLength } from '../button/model/button-length.enum';\r\nimport { ButtonModel } from '../button/model/button-model.definition';\r\nimport { ButtonOptions } from '../button/model/button-options.definition';\r\nimport { ButtonTheme } from '../button/model/button-theme.enum';\r\nimport { ServiceUserTypePropertie } from '@oam/cu-asm-api';\r\nimport { VnfcSharedService } from '../../../../vnfc-shared/src/lib/vnfc-store/services/vnfc-shared.service';\r\nimport {\r\n    ACTIVE_DEACTIVE, DEACTIVE_ACTIVE, ACTIVE, ROLE_USERNAME_MAPPING\r\n} from '@oam/shared/lib/constants/role-access-constants';\r\nimport {\r\n    judgeForActionStatusChangeOrNot,\r\n    judgeForCurrentPassword,\r\n    judgeForUsernameAndCurrentPassword\r\n} from './utils/validation.utils';\r\n\r\n@Component({\r\n    selector: 'ui-webem-user-information-change',\r\n    templateUrl: './user-information-change.component.html',\r\n    styleUrls: ['./user-information-change.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class UserInformationChangeComponent implements OnInit, OnChanges, OnDestroy {\r\n    private static readonly DISABLED = 'disabled';\r\n    private static readonly SUBMIT = 'Save';\r\n\r\n    @Input() passwordValidationOptions$: Observable<PasswordValidationOptions>;\r\n    @Input() usernameValidationOptions: UsernameValidationOptions;\r\n    @Input() username: string;\r\n    @Input() isDisabled: boolean;\r\n    @Input() usersList: Array<ServiceUserTypePropertie>;\r\n\r\n    @Input() isRoleOperationPage = false;\r\n    @Input() isRoleDropdownShow = false;\r\n    @Input() isActivationStatusShow = false;\r\n    @Input() isUserNameShow = true;\r\n    @Input() isCurrentPasswordShow = true;\r\n    @Input() isActivationStatusChange: boolean;\r\n    @Input() availableRoles: string[];\r\n    @Input() availableActivationStatus: string[];\r\n    @Input() selectRoleName: string;\r\n    @Input() currentRoleActivationStatus: string;\r\n    @Input() selectActivationStatus: string;\r\n\r\n    @Input() changeStatus: UserInformationChangeStatus;\r\n    @Input() changeOptions: UserInformationChangeOptions[];\r\n    @Output() validationChange: EventEmitter<ValidationStatus> = new EventEmitter();\r\n    @Output() informationChange: EventEmitter<UserInformationChange> = new EventEmitter();\r\n    @Output() clearInformationResponse: EventEmitter<any> = new EventEmitter();\r\n    @Output() changeOptionSelectionChange: EventEmitter<UserInformationChangeOptions> = new EventEmitter();\r\n\r\n    @Output() roleNameChange: EventEmitter<string> = new EventEmitter();\r\n    @Output() activationStatusChange: EventEmitter<string> = new EventEmitter();\r\n\r\n    passwordValidationOptions: PasswordValidationOptions;\r\n    passwordValidationOptionsSubscription: Subscription;\r\n    updateAccountForm: FormGroup;\r\n    isPasswordMatchError$: Observable<boolean>;\r\n    canChangeInformation$: Observable<boolean>;\r\n    inProgress: boolean;\r\n    disabledFields: { [field in FormParameters]: string | null};\r\n    selectToChangeOptions: SelectItem[];\r\n    isOptionSelected = false;\r\n    showCurrentPassword: boolean;\r\n    showNewPassword: boolean;\r\n    showConfirmPassword: boolean;\r\n    submitButtonLabel = UserInformationChangeComponent.SUBMIT;\r\n    currentPasswordCapsLockOn: boolean;\r\n    newPasswordCapsLockOn: boolean;\r\n    confirmPasswordCapsLockOn: boolean;\r\n    tooltipContent = CURRENT_PASSWORD_TOOLTIP_CONTENT;\r\n    isGeoresiliencyUser = false;\r\n\r\n    isConfigVmCu: boolean;\r\n\r\n    readonly  buttonOptions: ButtonOptions = {\r\n        forceWidth: '76px'\r\n    };\r\n    readonly buttonModel: ButtonModel = {\r\n        theme: ButtonTheme.Accent,\r\n        label: this.submitButtonLabel,\r\n        length: ButtonLength.Long\r\n    };\r\n\r\n    readonly buttonModelInProgress: ButtonModel = {\r\n        icon: 'mdi mdi-loading mdi-spin',\r\n        theme: ButtonTheme.Accent,\r\n        length: ButtonLength.Long\r\n    };\r\n    private selectedOption: UserInformationChangeOptions;\r\n\r\n    constructor(private readonly vnfcSharedService: VnfcSharedService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.isConfigVmCu = this.vnfcSharedService.isVmcu();\r\n\r\n        this.selectToChangeOptions = this.changeOptions.map((option: UserInformationChangeOptions) => ({\r\n            label: option,\r\n            value: option\r\n        }));\r\n        this.updateAccountForm = new FormGroup({\r\n            [FormParameters.USERNAME]: this.isServiceAccountOption(this.changeOptions) ?\r\n                new FormControl('', [Validators.required]) :\r\n                new FormControl('', [\r\n                    Validators.required,\r\n                    UserInformationValidator.minLength(this.usernameValidationOptions.minLength),\r\n                    UserInformationValidator.maxLength(this.usernameValidationOptions.maxLength),\r\n                    UserInformationValidator.disallowedUserNameAsciiCharacters(),\r\n                ]),\r\n            [FormParameters.PASSWORD]: new FormControl('', [ Validators.required ]),\r\n            [FormParameters.NEW_PASSWORD]: new FormControl('', []),\r\n            [FormParameters.ACTIVATION_STATUS]: new FormControl('', []),\r\n            [FormParameters.ROLE_NAME]: new FormControl('', []),\r\n            [FormParameters.CONFIRM_PASSWORD]: new FormControl('', [ Validators.required ])\r\n        }, [\r\n            UserInformationValidator.passwordsMatch(),\r\n            control => UserInformationValidator.passwordNotSameAsUsername(this.username)(control),\r\n            control => UserInformationValidator.passwordNotContainUsername(this.username)(control)\r\n        ]);\r\n        this.passwordValidationOptionsSubscription = this.passwordValidationOptions$\r\n            .subscribe((passwordValidationOptions: PasswordValidationOptions) => {\r\n                this.setValidatorsForPassword(passwordValidationOptions);\r\n            });\r\n        const valueChange$ = this.updateAccountForm.valueChanges.pipe(\r\n            debounceTime(100),\r\n            distinctUntilChanged(),\r\n            tap(() => this.emitValidationStatus()),\r\n            tap((formInputs: any) => {\r\n                if ( formInputs.username ) {\r\n                    this.setGeoresiliencyUser(formInputs.username);\r\n                }\r\n                if ( formInputs.username || formInputs.password  || formInputs.newPassword || formInputs.confirmPassword ) {\r\n                    this.clearInformationResponse.emit();\r\n                }\r\n            }),\r\n            share()\r\n        );\r\n        this.isPasswordMatchError$ = valueChange$.pipe(map(() => this.doesPasswordMatch()));\r\n        this.canChangeInformation$ = valueChange$.pipe(map(() => this.isFormValid()));\r\n        this.emitValidationStatus();\r\n        this.initFormFields(this.changeOptions[0]);\r\n\r\n        if (!this.isConfigVmCu && this.isRoleOperationPage) {\r\n            if (this.isUserNameShow) {\r\n                this.changeOptionSelectionChange.emit(UserInformationChangeOptions.PASSWORD_AND_USERNAME);\r\n            } else {\r\n                this.changeOptionSelectionChange.emit(UserInformationChangeOptions.PASSWORD_ONLY);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.changeStatus && this.changeStatus) {\r\n            this.inProgress = this.changeStatus.status === InformationChangeStatusTypes.IN_PROGRESS;\r\n\r\n            // we want all inputs to be disabled after password changed successful when password expires\r\n            if (this.changeStatus.status === InformationChangeStatusTypes.SUCCESSFUL\r\n                && this.changeOptions[0] === UserInformationChangeOptions.PASSWORD_EXPIRATION_CHANGE) {\r\n                this.changeOptions = [];\r\n                this.updateDisabledFields(this.changeOptions[0]);\r\n            }\r\n\r\n            if (this.changeStatus.status === InformationChangeStatusTypes.SUCCESSFUL) {\r\n                this.updateAccountForm?.controls?.roleName.setValue(this.selectRoleName);\r\n            }\r\n        }\r\n\r\n        if (changes.changeStatus && changes.changeStatus.currentValue) {\r\n            this.submitButtonLabel = changes.changeStatus.currentValue.isOperationInProgress ? '' :\r\n                UserInformationChangeComponent.SUBMIT;\r\n        }\r\n\r\n        if (this.isGeoresiliencyUser) {\r\n            const password = this.updateAccountForm?.get(FormParameters.PASSWORD)?.value;\r\n            if (password) {\r\n                this.updateAccountForm.controls[FormParameters.PASSWORD].setValue('');\r\n            }\r\n        }\r\n\r\n        if ((changes.currentRoleActivationStatus && changes.currentRoleActivationStatus.currentValue) ||\r\n            (changes.isActivationStatusChange && !changes.isActivationStatusChange.currentValue)\r\n            || changes.selectRoleName) {\r\n            this.updateAccountForm?.controls?.activationStatus.setValue(this.currentRoleActivationStatus);\r\n        }\r\n\r\n        if (changes.isActivationStatusChange && changes.isActivationStatusChange.currentValue) {\r\n            this.updateAccountForm?.controls?.activationStatus.setValue(this.selectActivationStatus);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.passwordValidationOptionsSubscription?.unsubscribe();\r\n    }\r\n\r\n    onSubmit(): void {\r\n        const username = (this.updateAccountForm.get(FormParameters.USERNAME) as AbstractControl).value;\r\n        const password = (this.updateAccountForm.get(FormParameters.PASSWORD) as AbstractControl).value;\r\n        const newPassword = (this.updateAccountForm.get(FormParameters.NEW_PASSWORD) as AbstractControl).value;\r\n\r\n        this.informationChange.emit({\r\n            username: this.username,\r\n            password,\r\n            newPassword,\r\n            newUsername: username\r\n        });\r\n        this.updateAccountForm.reset({\r\n            [FormParameters.USERNAME]: '',\r\n            [FormParameters.PASSWORD]: '',\r\n            [FormParameters.NEW_PASSWORD]: '',\r\n            [FormParameters.CONFIRM_PASSWORD]: ''\r\n        });\r\n\r\n        // reset user name, so that isGeoresiliencyUser is setting to false\r\n        this.setGeoresiliencyUser('');\r\n    }\r\n\r\n    setAllCapsLockStates(capsLockState: boolean): void {\r\n        this.currentPasswordCapsLockOn = capsLockState;\r\n        this.newPasswordCapsLockOn = capsLockState;\r\n        this.confirmPasswordCapsLockOn = capsLockState;\r\n    }\r\n\r\n    setCurrentPasswordCapsLockState(event: MouseEvent): void {\r\n        this.currentPasswordCapsLockOn = event.getModifierState('CapsLock');\r\n    }\r\n\r\n    setNewPasswordCapsLockState(event: MouseEvent): void {\r\n        this.newPasswordCapsLockOn = event.getModifierState('CapsLock');\r\n    }\r\n\r\n    setConfirmPasswordCapsLockState(event: MouseEvent): void {\r\n        this.confirmPasswordCapsLockOn = event.getModifierState('CapsLock');\r\n    }\r\n\r\n    updateRoleName(roleName: string): void {\r\n        this.updateAccountForm.reset({\r\n            [FormParameters.USERNAME]: '',\r\n            [FormParameters.PASSWORD]: '',\r\n            [FormParameters.NEW_PASSWORD]: '',\r\n            [FormParameters.CONFIRM_PASSWORD]: ''\r\n        });\r\n        this.username = ROLE_USERNAME_MAPPING[roleName];\r\n        const newRoles: string[] = filter(this.availableRoles, (itemRoleName) => {\r\n            return itemRoleName !== roleName;\r\n        });\r\n        this.availableRoles = [roleName, ...newRoles];\r\n        this.roleNameChange.emit(roleName);\r\n    }\r\n\r\n    updateActivateStatus(activeStatus: string): void {\r\n        this.availableActivationStatus = activeStatus === ACTIVE ?\r\n            ACTIVE_DEACTIVE : DEACTIVE_ACTIVE;\r\n        this.activationStatusChange.emit(activeStatus);\r\n    }\r\n\r\n    updateDisabledFields(selectedOption: UserInformationChangeOptions): void {\r\n        this.disabledFields = {\r\n            [FormParameters.USERNAME]: FIELDS_DESCRIPTION[FormParameters.USERNAME].includes(selectedOption) ?\r\n                null :\r\n                UserInformationChangeComponent.DISABLED,\r\n            [FormParameters.PASSWORD]: FIELDS_DESCRIPTION[FormParameters.PASSWORD].includes(selectedOption) ?\r\n                null :\r\n                UserInformationChangeComponent.DISABLED,\r\n            [FormParameters.ACTIVATION_STATUS]: null,\r\n            [FormParameters.ROLE_NAME]: null,\r\n            [FormParameters.NEW_PASSWORD]: FIELDS_DESCRIPTION[FormParameters.NEW_PASSWORD].includes(selectedOption) ?\r\n                null :\r\n                UserInformationChangeComponent.DISABLED,\r\n            [FormParameters.CONFIRM_PASSWORD]: FIELDS_DESCRIPTION[FormParameters.CONFIRM_PASSWORD].includes(selectedOption) ?\r\n                null :\r\n                UserInformationChangeComponent.DISABLED\r\n        };\r\n\r\n        if (!this.isConfigVmCu && this.isRoleOperationPage) {\r\n            this.disabledFields = {\r\n                [FormParameters.USERNAME]: null,\r\n                [FormParameters.PASSWORD]: null,\r\n                [FormParameters.ACTIVATION_STATUS]: null,\r\n                [FormParameters.ROLE_NAME]: null,\r\n                [FormParameters.NEW_PASSWORD]: null,\r\n                [FormParameters.CONFIRM_PASSWORD]: null\r\n            };\r\n        }\r\n\r\n        this.selectedOption = selectedOption;\r\n        this.updateAccountForm.reset({\r\n            [FormParameters.USERNAME]: '',\r\n            [FormParameters.PASSWORD]: '',\r\n            [FormParameters.NEW_PASSWORD]: '',\r\n            [FormParameters.CONFIRM_PASSWORD]: ''\r\n        });\r\n        this.changeOptionSelectionChange.emit(selectedOption);\r\n    }\r\n\r\n    private initFormFields(selectedOption: UserInformationChangeOptions): void {\r\n        this.isOptionSelected = true;\r\n        this.clearInformationResponse.emit();\r\n        this.updateDisabledFields(selectedOption);\r\n    }\r\n\r\n    private setValidatorsForPassword(passwordValidationOptions: PasswordValidationOptions) {\r\n        this.passwordValidationOptions = passwordValidationOptions;\r\n        (this.updateAccountForm.get(FormParameters.NEW_PASSWORD) as AbstractControl).setValidators([\r\n            Validators.required,\r\n            UserInformationValidator.minLength(this.passwordValidationOptions.minLength),\r\n            UserInformationValidator.maxLength(this.passwordValidationOptions.maxLength),\r\n            UserInformationValidator.minimumDigitNumbers(this.passwordValidationOptions.minNumberOfDigits),\r\n            UserInformationValidator.minNonAlphaNumerical(this.passwordValidationOptions.minNonAlphaNumerical),\r\n            UserInformationValidator.noConsecutiveCharacters(),\r\n            UserInformationValidator.upperCase(),\r\n            UserInformationValidator.lowerCase(),\r\n            UserInformationValidator.disallowedPasswordAsciiCharacters()\r\n        ]);\r\n        (this.updateAccountForm.get(FormParameters.NEW_PASSWORD) as AbstractControl).updateValueAndValidity();\r\n    }\r\n\r\n    private emitValidationStatus() {\r\n        const username = this.updateAccountForm.get(FormParameters.USERNAME) as AbstractControl;\r\n        const password = this.updateAccountForm.get(FormParameters.NEW_PASSWORD) as AbstractControl;\r\n        const formErrors = this.updateAccountForm.errors;\r\n        const validationStatus: ValidationStatus = {\r\n            username: username.errors || {},\r\n            usernameOptions: this.usernameValidationOptions,\r\n            password: password.errors || formErrors ?\r\n                {\r\n                    ...password.errors,\r\n                    ...formErrors\r\n                } :\r\n                {},\r\n            passwordOptions: this.passwordValidationOptions\r\n        };\r\n        this.validationChange.emit(validationStatus);\r\n    }\r\n\r\n    judgeStatusForSave(username: AbstractControl,\r\n                       newPassword: AbstractControl,\r\n                       currentPassword: AbstractControl,\r\n                       isUsernameValid: boolean,\r\n                       isPasswordValid: boolean,\r\n                       confirmPassword: AbstractControl) {\r\n        if (this.isUserNameShow && this.isCurrentPasswordShow) {\r\n            return judgeForUsernameAndCurrentPassword(username, newPassword, confirmPassword,\r\n                currentPassword, isUsernameValid, isPasswordValid);\r\n        } else if (!this.isUserNameShow && this.isCurrentPasswordShow) {\r\n            return judgeForCurrentPassword(this.selectRoleName, newPassword, confirmPassword, isPasswordValid, currentPassword,\r\n                this.isActivationStatusShow, this.isActivationStatusChange);\r\n        } else if (!this.isUserNameShow && !this.isCurrentPasswordShow) {\r\n            return judgeForActionStatusChangeOrNot(newPassword, confirmPassword, isPasswordValid,\r\n                this.isActivationStatusChange);\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    private isFormValid(): boolean {\r\n        const username = this.updateAccountForm.get(FormParameters.USERNAME) as AbstractControl;\r\n        const currentPassword = this.updateAccountForm.get(FormParameters.PASSWORD) as AbstractControl;\r\n        const newPassword = this.updateAccountForm.get(FormParameters.NEW_PASSWORD) as AbstractControl;\r\n        const confirmPassword = this.updateAccountForm.get(FormParameters.CONFIRM_PASSWORD) as AbstractControl;\r\n        const newPasswordErrors = newPassword.errors;\r\n        const usernameErrors = username.errors;\r\n        const formErrors = this.updateAccountForm.errors;\r\n        const isUsernameValid = username.value && this.isGeoresiliencyUser ? true : currentPassword.value && isNull(usernameErrors);\r\n        const isPasswordValid = newPassword.value && confirmPassword.value && isNull(newPasswordErrors) && isNull(formErrors);\r\n\r\n        if (!this.isConfigVmCu && this.isRoleOperationPage) {\r\n            return this.judgeStatusForSave(username, newPassword, currentPassword,\r\n                isUsernameValid, isPasswordValid, confirmPassword);\r\n        } else {\r\n            return this.isOptionSelected && (\r\n                this.isPasswordAndUserNameFormValid(isUsernameValid, isPasswordValid) ||\r\n                this.isPasswordOnlyFormValid(isPasswordValid, currentPassword.value) ||\r\n                this.isUserNameOnlyFormValid(isUsernameValid) ||\r\n                this.isPasswordServiceFormValid(isUsernameValid, isPasswordValid) ||\r\n                this.isPasswordExpirationFormValid(isPasswordValid, currentPassword.valid)\r\n            );\r\n        }\r\n    }\r\n\r\n    private isPasswordAndUserNameFormValid(isUsernameValid: boolean, isPasswordValid: boolean) {\r\n        return this.selectedOption === UserInformationChangeOptions.PASSWORD_AND_USERNAME && isUsernameValid && isPasswordValid;\r\n    }\r\n\r\n    private isPasswordOnlyFormValid(isPasswordValid: boolean, currentPassword: boolean) {\r\n        return this.selectedOption === UserInformationChangeOptions.PASSWORD_ONLY && isPasswordValid && currentPassword;\r\n    }\r\n\r\n    private isUserNameOnlyFormValid(isUsernameValid: boolean) {\r\n        return this.selectedOption === UserInformationChangeOptions.USERNAME_ONLY && isUsernameValid;\r\n    }\r\n\r\n    private isPasswordExpirationFormValid(isPasswordValid: boolean, isCurrentPasswordValid: boolean) {\r\n        return this.selectedOption === UserInformationChangeOptions.PASSWORD_EXPIRATION_CHANGE && isPasswordValid && isCurrentPasswordValid;\r\n    }\r\n\r\n    private isPasswordServiceFormValid(isUsernameValid: boolean, isPasswordValid: boolean) {\r\n        return this.selectedOption === UserInformationChangeOptions.PASSWORD_SERVICE && isUsernameValid && isPasswordValid;\r\n    }\r\n\r\n    private doesPasswordMatch(): boolean {\r\n        const formErrors = this.updateAccountForm.errors;\r\n\r\n        return formErrors && formErrors[ValidationRules.PASSWORDS_MATCH];\r\n    }\r\n\r\n    setCurrentPasswordVisible(isVisible: boolean) {\r\n        this.showCurrentPassword = isVisible;\r\n    }\r\n\r\n    setNewPasswordVisible(isVisible: boolean) {\r\n        this.showNewPassword = isVisible;\r\n    }\r\n\r\n    setConfirmPasswordVisible(isVisible: boolean) {\r\n        this.showConfirmPassword = isVisible;\r\n    }\r\n\r\n    private isServiceAccountOption(changeOptions: any): boolean {\r\n         return changeOptions.length === 1 && changeOptions[0] === UserInformationChangeOptions.PASSWORD_SERVICE;\r\n    }\r\n\r\n    setGeoresiliencyUser(username: string): void {\r\n        this.isGeoresiliencyUser = !!this.usersList?.find(user => user?.username === username && user?.UserType === 'Georesiliency');\r\n    }\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\nimport { BTS_SECURITY_ADMINISTRATOR } from '@oam/shared/lib/constants/role-access-constants';\r\n\r\nexport const SPECIAL_USERNAME_ALLOWCHARACTERS = '._-'.split('');\r\nexport const SPECIAL_PASSWORD_ALLOWCHARACTERS = '!#$%&\\'()*+,-.;=?@[]_~/'.split('');\r\n\r\nexport function hasSmallerLengthThanMax(value: string, maxLength: number): boolean {\r\n    return value.length <= maxLength;\r\n}\r\n\r\nexport function hasBiggerLengthThanMin(value: string, minLength: number): boolean {\r\n    return value.length >= minLength;\r\n}\r\n\r\nexport function hasTwoSameConsecutiveChar(value: string): boolean {\r\n    const sameConsecutiveCharacterExpression = new RegExp(/(.)\\1/, 'g');\r\n\r\n    return sameConsecutiveCharacterExpression.test(value);\r\n}\r\n\r\nexport function hasMinimumDigitNumbers(value: string, minNumberOfDigits: number): boolean {\r\n    const digitNumberExpression = new RegExp(/\\d/, 'g');\r\n    const arrayOfDigits = value.match(digitNumberExpression) || [];\r\n\r\n    return arrayOfDigits.length >= minNumberOfDigits;\r\n}\r\n\r\nexport function hasUpperAndLowerCase(value: string): boolean {\r\n    return value !== value.toLowerCase() && value !== value.toUpperCase();\r\n}\r\n\r\nexport function hasUpperCase(value: string): boolean {\r\n    return value !== value.toLowerCase();\r\n}\r\n\r\nexport function hasLowerCase(value: string): boolean {\r\n    return value !== value.toUpperCase();\r\n}\r\n\r\nexport function isInWhiteList(specialAllowCharacters: string[], value: string): boolean {\r\n    const pwdArray = value.split('');\r\n\r\n    const isInWhiteListResult = pwdArray.every((char) => {\r\n        if (isFromAtoZ(char) || isFromatoz(char) || isFrom0to9(char) ||\r\n            isSpecialAllowCharacters(char)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    });\r\n\r\n    function isFromAtoZ(char: string): boolean {\r\n        return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90;\r\n    }\r\n\r\n    function isFromatoz(char: string): boolean {\r\n        return char.charCodeAt(0) >= 97 && char.charCodeAt(0) <= 122;\r\n    }\r\n\r\n    function isFrom0to9(char: string): boolean {\r\n        return char.charCodeAt(0) >= 48 && char.charCodeAt(0) <= 57;\r\n    }\r\n\r\n    function isSpecialAllowCharacters(char: string): boolean {\r\n        return specialAllowCharacters.includes(char);\r\n    }\r\n\r\n    return isInWhiteListResult;\r\n}\r\n\r\nexport function hasDisallowedSpecialAsciiChar(value: string): boolean {\r\n    const charsArray = value.split('');\r\n\r\n    const isSpecialAllowCharacters = charsArray.some((char) => {\r\n        return !(/^[\\x21\\x23-\\x7E]*$/.test(char));\r\n    });\r\n\r\n    return isSpecialAllowCharacters;\r\n}\r\n\r\nexport function hasDisallowedUserNameAsciiChar(value: string): boolean {\r\n    return !isInWhiteList(SPECIAL_USERNAME_ALLOWCHARACTERS, value);\r\n}\r\n\r\nexport function hasDisallowedPasswordAsciiChar(value: string): boolean {\r\n    return !isInWhiteList(SPECIAL_PASSWORD_ALLOWCHARACTERS, value);\r\n}\r\n\r\nexport function hasMinNonAlphanumericChar(value: string, minNonAlphaNumericChar: number): boolean {\r\n    if (minNonAlphaNumericChar === 0) return true;\r\n\r\n    const minNonAlphaNumericalExpression = new RegExp(`(?=(.*(_|[^\\\\w])){${minNonAlphaNumericChar}}).+`, 'g');\r\n\r\n    return minNonAlphaNumericalExpression.test(value);\r\n}\r\n\r\nexport function isPasswordNotSameAsUserName(password: string, username: string): boolean {\r\n    const reversedUsername = username.split('').reverse().join('');\r\n\r\n    return password.toLowerCase() !== username.toLowerCase() &&\r\n        password.toLowerCase() !== reversedUsername.toLowerCase();\r\n}\r\n\r\nexport function isUserNameNotIncludedInPassword(password: string, username: string): boolean {\r\n    if (!isPasswordNotSameAsUserName(password, username)) {\r\n        return true;\r\n    }\r\n\r\n    const reversedUsername = username.split('').reverse().join('');\r\n\r\n    return !password.toLowerCase().includes(username.toLowerCase()) &&\r\n        !password.toLowerCase().includes(reversedUsername.toLowerCase());\r\n}\r\n\r\nexport function judgeForActionStatusChangeOrNot(newPassword: AbstractControl, confirmPassword: AbstractControl,\r\n                                                isPasswordValid: boolean,\r\n                                                isActivationStatusChange: boolean) {\r\n\r\n    return (newPassword.value || confirmPassword.value) ? isPasswordValid : isActivationStatusChange;\r\n}\r\n\r\nexport function judgeForCurrentPassword(selectRoleName: string,\r\n                                        newPassword: AbstractControl,\r\n                                        confirmPassword: AbstractControl,\r\n                                        isPasswordValid: boolean,\r\n                                        currentPassword: AbstractControl,\r\n                                        isActivationStatusShow: boolean,\r\n                                        isActivationStatusChange: boolean) {\r\n\r\n    const isSecurityAccount = selectRoleName === BTS_SECURITY_ADMINISTRATOR;\r\n\r\n    if (isSecurityAccount && isActivationStatusShow &&\r\n        isActivationStatusChange\r\n        && !newPassword.value && !confirmPassword.value\r\n        && !currentPassword.value) {\r\n        return true;\r\n    }\r\n\r\n    if (!currentPassword.value || !currentPassword.valid) {\r\n        return false;\r\n    }\r\n\r\n    if (isActivationStatusShow && isActivationStatusChange) {\r\n        return (newPassword.value || confirmPassword.value) ? isPasswordValid\r\n            : !isSecurityAccount;\r\n    } else {\r\n        return isPasswordValid;\r\n    }\r\n\r\n}\r\n\r\nexport function judgeForUsernameAndCurrentPassword(username: AbstractControl, newPassword: AbstractControl,\r\n                                                   confirmPassword: AbstractControl,\r\n                                                   currentPassword: AbstractControl, isUsernameValid: boolean,\r\n                                                   isPasswordValid: boolean): boolean {\r\n    if (!currentPassword.value || !currentPassword.valid) {\r\n        return false;\r\n    }\r\n\r\n    if (!newPassword.value && !confirmPassword.value) {\r\n        return isUsernameValid;\r\n    } else {\r\n        return username.value ? isUsernameValid && isPasswordValid : isPasswordValid;\r\n    }\r\n\r\n}\r\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport {\r\n    FormParameters,\r\n    ValidationRules\r\n} from '../interface/user-information-change.interface';\r\nimport {\r\n    hasBiggerLengthThanMin, hasDisallowedUserNameAsciiChar,\r\n    hasDisallowedPasswordAsciiChar,\r\n    hasDisallowedSpecialAsciiChar,\r\n    hasMinimumDigitNumbers,\r\n    hasMinNonAlphanumericChar,\r\n    hasSmallerLengthThanMax, hasTwoSameConsecutiveChar, hasUpperAndLowerCase,\r\n    isPasswordNotSameAsUserName, isUserNameNotIncludedInPassword, hasUpperCase, hasLowerCase\r\n} from '../utils/validation.utils';\r\n\r\nexport class UserInformationValidator {\r\n    static passwordsMatch(): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const password = (control.get(FormParameters.NEW_PASSWORD) as AbstractControl).value;\r\n            const confirmPassword = (control.get(FormParameters.CONFIRM_PASSWORD) as AbstractControl).value;\r\n\r\n            return password && confirmPassword && password !== confirmPassword ?\r\n                { [ValidationRules.PASSWORDS_MATCH]: true } :\r\n                null;\r\n        };\r\n    }\r\n\r\n    static passwordNotSameAsUsername(currentUsername: string): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const password = (control.get(FormParameters.NEW_PASSWORD) as AbstractControl).value;\r\n            const username = (control.get(FormParameters.USERNAME) as AbstractControl).value;\r\n            const usernameToCheck = username || currentUsername;\r\n\r\n            return password && usernameToCheck && !isPasswordNotSameAsUserName(password, usernameToCheck) || !password ?\r\n                { [ValidationRules.PASSWORD_NOT_SAME_AS_USERNAME]: true } :\r\n                null;\r\n        };\r\n    }\r\n\r\n    static passwordNotContainUsername(currentUsername: string): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const password = (control.get(FormParameters.NEW_PASSWORD) as AbstractControl).value;\r\n            const username = (control.get(FormParameters.USERNAME) as AbstractControl).value;\r\n            const usernameToCheck = username || currentUsername;\r\n\r\n            return password && usernameToCheck && !isUserNameNotIncludedInPassword(password, usernameToCheck) || !password ?\r\n                { [ValidationRules.PASSWORD_NOT_CONTAIN_USERNAME]: true } :\r\n                null;\r\n        };\r\n    }\r\n\r\n    static minLength(minLength: number): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const value = control.value;\r\n\r\n            return !hasBiggerLengthThanMin(value, minLength) || !value ?\r\n                { [ValidationRules.MIN_LENGTH]: true} :\r\n                null;\r\n        };\r\n    }\r\n\r\n    static maxLength(maxLength: number): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const value = control.value;\r\n\r\n            return !hasSmallerLengthThanMax(value, maxLength) || !value ?\r\n                { [ValidationRules.MAX_LENGTH]: true } :\r\n                null;\r\n        };\r\n    }\r\n\r\n    static noConsecutiveCharacters(): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const value = control.value;\r\n\r\n            return hasTwoSameConsecutiveChar(value) || !value ?\r\n                { [ValidationRules.CONSECUTIVE_CHAR]: true } :\r\n                null;\r\n        };\r\n    }\r\n\r\n    static minimumDigitNumbers(minNumberOfDigit: number): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const value = control.value;\r\n\r\n            return !hasMinimumDigitNumbers(value, minNumberOfDigit) || !value ?\r\n                { [ValidationRules.DIGIT_NUMBER]: true } :\r\n                null;\r\n        };\r\n    }\r\n\r\n    static upperCaseAndLowerCase(): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const value = control.value;\r\n\r\n            return !hasUpperAndLowerCase(value) || !value ?\r\n                { [ValidationRules.LOWER_UPPER_CASE]: true } :\r\n                null;\r\n        };\r\n    }\r\n\r\n    static upperCase(): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const value = control.value;\r\n\r\n            return !hasUpperCase(value) || !value ?\r\n                { [ValidationRules.UPPER_CASE]: true } :\r\n                null;\r\n        };\r\n    }\r\n\r\n    static lowerCase(): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const value = control.value;\r\n\r\n            return !hasLowerCase(value) || !value ?\r\n                { [ValidationRules.LOWER_CASE]: true } :\r\n                null;\r\n        };\r\n    }\r\n\r\n    static disallowedUserNameAsciiCharacters(): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const value = control.value;\r\n\r\n            return hasDisallowedUserNameAsciiChar(value) || !value ?\r\n                { [ValidationRules.DISALLOWED_ASCII]: true } :\r\n                null;\r\n        };\r\n    }\r\n\r\n    static disallowedPasswordAsciiCharacters(): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const value = control.value;\r\n\r\n            return hasDisallowedPasswordAsciiChar(value) || !value ?\r\n                { [ValidationRules.DISALLOWED_ASCII]: true } :\r\n                null;\r\n        };\r\n    }\r\n\r\n    static minNonAlphaNumerical(minNonAlphaNumerical: number): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const value = control.value;\r\n\r\n            return !hasMinNonAlphanumericChar(value, minNonAlphaNumerical) || !value ?\r\n                { [ValidationRules.NON_ALPHA_NUMBER]: true } :\r\n                null;\r\n        };\r\n    }\r\n\r\n    static disallowedSpecialAsciiCharacters(): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const value = control.value;\r\n\r\n            return hasDisallowedSpecialAsciiChar(value) || !value ?\r\n                { [ValidationRules.DISALLOWED_ASCII]: true } :\r\n                null;\r\n        };\r\n    }\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\n\r\nexport const startCountingSessionTime = createAction(\r\n    '[SessionTokenTime] Start counting session time'\r\n);\r\n\r\nexport const startCountingSeconds = createAction(\r\n    '[SessionTokenTime] Start counting seconds'\r\n);\r\n\r\nexport const sessionTokenExpired = createAction(\r\n    '[User] [SessionTokenTime] Session token has expired'\r\n);\r\n\r\nexport const stopCountingSeconds = createAction(\r\n    '[SessionTokenTime] Stop counting seconds'\r\n);\r\n\r\nexport const setRemainingTime = createAction(\r\n    '[SessionTokenTime] Set remaining session time',\r\n    props<{ remainingTime?: number }>()\r\n);\r\n\r\nexport const setRemainingSeconds = createAction(\r\n    '[SessionTokenTime] Set remaining seconds session time',\r\n    props<{ remainingSeconds: string | null }>()\r\n);\r\n","import { Action, createFeatureSelector, createReducer, createSelector, on } from '@ngrx/store';\r\nimport {\r\n    setRemainingSeconds,\r\n    setRemainingTime\r\n} from '../actions/session-token-time.actions';\r\n\r\n\r\nexport const sessionTokenTimeFeatureKey = 'sessionTokenTime';\r\n\r\nexport interface RemainingTimeState {\r\n    remainingTime?: number\r\n    remainingSeconds?: string | null;\r\n    startCountingSeconds: boolean;\r\n}\r\n\r\nexport const initialState: RemainingTimeState = {\r\n    startCountingSeconds: false,\r\n};\r\n\r\n\r\nexport const reducer = createReducer(\r\n  initialState,\r\n    on(setRemainingTime, (state, { remainingTime }) => ({ ...state, remainingTime })),\r\n    on(setRemainingSeconds, (state, { remainingSeconds }) => ({ ...state, remainingSeconds }))\r\n);\r\n\r\nconst selectSessionTime = createFeatureSelector<RemainingTimeState>(sessionTokenTimeFeatureKey);\r\n\r\nexport const selectRemainingTime = createSelector(selectSessionTime, state => state.remainingTime);\r\nexport const selectRemainingSeconds = createSelector(selectSessionTime, state => state.remainingSeconds);\r\n\r\n","<form [formGroup]=\"form\" *ngIf=\"loginStatus$ | async as loginStatus\">\r\n    <div class=\"p-dialog-content\">\r\n        <div>\r\n            <div class=\"dialog-information\">\r\n                <i class=\"information-icon mdi mdi-information\"></i>\r\n                <span>Enter your password to renew current session</span>\r\n            </div>\r\n            <div class=\"input-container\">\r\n                <span>Password:</span>\r\n                <div class=\"password\">\r\n                    <input class=\"login-input\"\r\n                           pInputText\r\n                           [type]=\"showPassword ? 'text' : 'password'\"\r\n                           formControlName=\"password\"\r\n                           autocomplete=\"off\"\r\n                           id=\"renew-session-password\">\r\n                    <span *ngIf=\"loginStatus.failed\" class=\"validation-error-icon\">\r\n                        <i class=\"mdi mdi-alert error-icon\"></i>\r\n                    </span>\r\n                    <span class=\"renew-fail-reason\">{{loginStatus.failedReason}}</span>\r\n                    <ui-webem-show-password-button\r\n                        class=\"eye-class\"\r\n                        [disabled]=\"!form.get('password')?.value\"\r\n                        (isPasswordVisible)=\"setPasswordVisible($event)\">\r\n                    </ui-webem-show-password-button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"p-dialog-footer\">\r\n        <p-footer>\r\n            <ui-webem-button\r\n                [model]=\"okButtonModel\"\r\n                (action)=\"renewSessionToken()\"\r\n                [disabled]=\"!form.valid\">\r\n            </ui-webem-button>\r\n            <ui-webem-button\r\n                (action)=\"closeDialog()\"\r\n                [model]=\"cancelButtonModel\">\r\n            </ui-webem-button>\r\n        </p-footer>\r\n    </div>\r\n</form>\r\n","import { Observable } from 'rxjs';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { DynamicDialogConfig, DynamicDialogRef } from 'primeng/dynamicdialog';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { BaseDialogComponent } from '@oam/shared/lib/components/base-dialog/base-dialog-component';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { selectUsername } from '@oam/core/lib/user/core/reducers/user-reducer';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { OperationStatus } from '@oam/core/lib/models/operation.interface';\r\nimport {\r\n    getLoginStatus,\r\n    selectLoginInProgress,\r\n    selectTokenRenewalSuccessful\r\n} from '@oam/auth/lib/auth/core/reducers/login.reducer';\r\nimport { renewSessionToken } from '@oam/core/lib/actions/user.actions';\r\nimport { resetOperationStatus, setLoginInitialValues } from '@oam/auth/lib/auth/core/actions/login.actions';\r\n\r\n@Component({\r\n    selector: 'ui-webem-renew-session-dialog',\r\n    templateUrl: './renew-session-dialog.component.html',\r\n    styleUrls: ['./renew-session-dialog.component.scss']\r\n})\r\nexport class RenewSessionDialogComponent extends BaseDialogComponent implements OnInit, OnDestroy {\r\n    readonly okButtonModel: ButtonModel = {\r\n        label: 'OK',\r\n        theme: ButtonTheme.Accent\r\n    };\r\n    readonly cancelButtonModel: ButtonModel = {\r\n        label: 'Cancel'\r\n    };\r\n    showPassword: boolean;\r\n    form: FormGroup;\r\n    username: string;\r\n    loginStatus$: Observable<OperationStatus>;\r\n\r\n    constructor(protected store: Store,\r\n                private readonly formBuilder: FormBuilder,\r\n                public config: DynamicDialogConfig,\r\n                ref: DynamicDialogRef) {\r\n        super(store, ref);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.showPassword = false;\r\n        super.ngOnInit();\r\n\r\n        this.form = this.formBuilder.group({\r\n            password: ['', Validators.required]\r\n        });\r\n        this.store.select(selectUsername)\r\n            .pipe(takeUntil(this.ngUnsubscribe))\r\n            .subscribe(username => this.username = username);\r\n        this.loginStatus$ = this.store.pipe(select(getLoginStatus));\r\n        this.store.select(selectLoginInProgress)\r\n            .pipe(takeUntil(this.ngUnsubscribe))\r\n            .subscribe(inProgress => {\r\n                inProgress ? this.form.disable() : this.form.enable();\r\n            });\r\n\r\n    }\r\n\r\n    closeDialog(): void {\r\n        this.store.dispatch(setLoginInitialValues());\r\n        super.closeDialog();\r\n    }\r\n\r\n    renewSessionToken(): void {\r\n        this.store.dispatch(renewSessionToken(\r\n            {\r\n                username: this.username,\r\n                password: this.form.value.password,\r\n                shouldStartOperation: false\r\n            }\r\n        ));\r\n        this.store.select(selectTokenRenewalSuccessful)\r\n            .pipe(takeUntil(this.ngUnsubscribe))\r\n            .subscribe(isRenewalSuccessful => {\r\n                if (isRenewalSuccessful?.status) {\r\n                    this.closeDialog();\r\n                    this.store.dispatch(resetOperationStatus());\r\n                }\r\n            });\r\n    }\r\n\r\n    setPasswordVisible(isVisible: boolean): void {\r\n        this.showPassword = isVisible;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n}\r\n","export const MILI_SECONDS_IN_MINUTE = 60000;\r\nexport const MILI_SECONDS_IN_HOUR = 3600000;\r\n","<div class=\"notification\" *ngIf=\"notification\">\r\n    <span\r\n        [ngClass]=\"{\r\n            'icon mdi': true,\r\n            'mdi-information': notification.severity === 'info',\r\n            'mdi-alert': notification.severity === 'error',\r\n            'mdi-check-circle': notification.severity === 'success',\r\n            'mdi-alert-circle': notification.severity === 'warning'\r\n        }\"\r\n    ></span>\r\n    <span class=\"notification-content\">\r\n        <div class=\"summary\">{{ notification.summary }}</div>\r\n        <div class=\"detail\" [innerHTML]=\"notification.detail\"></div>\r\n        <div class=\"date\">\r\n            <span *ngIf=\"sinceOccurred.h\">{{ sinceOccurred.h }} h </span>\r\n            <span>{{ sinceOccurred.min }}  min ago ({{ notification.date  | date:'shortTime' }})</span>\r\n        </div>\r\n    </span>\r\n</div>\r\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Notification } from '@oam/core/lib/models/notification.type';\r\nimport { MILI_SECONDS_IN_MINUTE, MILI_SECONDS_IN_HOUR } from './notification-const';\r\n\r\ntype SinceOccurred = {\r\n    h: number;\r\n    min: number;\r\n};\r\n\r\n@Component({\r\n  selector: 'ui-webem-notification',\r\n  templateUrl: './notification.component.html',\r\n  styleUrls: ['./notification.component.scss']\r\n})\r\nexport class NotificationComponent implements OnChanges {\r\n    @Input() notification: Notification;\r\n    @Input() openDate: Date;\r\n    icon: string;\r\n    sinceOccurred: SinceOccurred = {\r\n        h: 0,\r\n        min: 0\r\n    };\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.openDate && changes.openDate.currentValue) {\r\n            const difference = Math.max(changes.openDate.currentValue.getTime() - this.notification.date.getTime(), 0);\r\n            this.sinceOccurred = {\r\n                h: Math.floor(difference / MILI_SECONDS_IN_HOUR),\r\n                min: Math.floor(difference % MILI_SECONDS_IN_HOUR / MILI_SECONDS_IN_MINUTE)\r\n            };\r\n        }\r\n    }\r\n}\r\n","<div class=\"notification-panel\">\r\n    <div class=\"title\">Notifications</div>\r\n    <hr class=\"title-separator\"/>\r\n    <div class=\"notifications\" *ngIf=\"notifications && notifications.length; else noNotification\">\r\n        <div *ngFor=\"let notification of notifications;\">\r\n            <ui-webem-notification\r\n                [notification]=\"notification\"\r\n                [openDate]=\"openDate\"\r\n            >\r\n            </ui-webem-notification>\r\n            <hr class=\"notifications-separator\"/>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #noNotification>\r\n        <span class=\"no-notification\">\r\n            <i class=\"information-icon mdi mdi-information\"></i>\r\n            <span class=\"information-text\">No notifications during this browser session</span>\r\n        </span>\r\n    </ng-template>\r\n</div>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { Notification } from '@oam/core/lib/models/notification.type';\r\n\r\n@Component({\r\n    selector: 'ui-webem-notification-panel',\r\n    templateUrl: './notification-panel.component.html',\r\n    styleUrls: ['./notification-panel.component.scss']\r\n})\r\nexport class NotificationPanelComponent implements OnInit {\r\n    @Input() notifications: Notification[];\r\n    @Input() openDate: Date;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n","<span\r\n    (clickOutside)=\"hide()\"\r\n    [exclude]=\"'.p-overlaypanel-content'\"\r\n    [excludeBeforeClick]=\"true\">\r\n    <p-overlayPanel\r\n        styleClass=\"notification-center-overlay\"\r\n        [dismissable]=\"false\"\r\n        showTransitionOptions=\"0ms\"\r\n        hideTransitionOptions=\"0ms\"\r\n        [showCloseIcon]=\"false\"\r\n        [appendTo]=\"'body'\">\r\n        <ui-webem-notification-panel\r\n            [notifications]=\"notifications\"\r\n            [openDate]=\"openDate\">\r\n        </ui-webem-notification-panel>\r\n    </p-overlayPanel>\r\n    <p-button\r\n        id=\"notification-center\"\r\n        class=\"button\"\r\n        [label]=\"''\"\r\n        [styleClass]=\"buttonClasses\"\r\n        title=\"Notifications\"\r\n        (click)=\"toggle($event)\"\r\n    >\r\n        <div class=\"user-icon-component-container\">\r\n            <img class=\"user-icon\" [src]=\"'assets/svg-icons/envelope_icon.svg'\" alt=\"Envelope Icon\"/>\r\n            <svg *ngIf=\"notifications.length\" class=\"user-status\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"10\" viewBox=\"0 0 10 10\">\r\n                <circle class=\"outer-circle\" cx='5' cy='5' r=\"5\"></circle>\r\n                <circle class=\"inner-circle\" cx='5' cy='5' r=\"3\"></circle>\r\n            </svg>\r\n        </div>\r\n    </p-button>\r\n</span>\r\n","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { Notification } from '@oam/core/lib/models/notification.type';\r\nimport { OverlayPanel } from 'primeng/overlaypanel';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { selectNotifications } from '@oam/core/lib/selectors/toast-message.selectors';\r\nimport { Subject } from 'rxjs';\r\nimport { DateTime } from '@oam/core/lib/classes/date-time';\r\n\r\n@Component({\r\n    selector: 'ui-webem-user-menu-overlay',\r\n    templateUrl: './user-menu-overlay.component.html',\r\n    styleUrls: ['./user-menu-overlay.component.scss']\r\n})\r\nexport class UserMenuOverlayComponent implements OnInit, OnDestroy {\r\n    @ViewChild(OverlayPanel, { static: true }) private readonly overlayPanel: OverlayPanel;\r\n\r\n    notifications: Notification[];\r\n    openDate: Date;\r\n    buttonClasses = 'user-menu-overlay-button ui-button-secondary custom-button ui-button-long';\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    constructor(private readonly store: Store) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.store.pipe(\r\n            takeUntil(this.ngUnsubscribe),\r\n            select(selectNotifications)\r\n        ).subscribe(notifications => {\r\n            if (!notifications) return;\r\n\r\n            this.notifications = [...notifications].reverse();\r\n        });\r\n    }\r\n\r\n    toggle(event: MouseEvent) {\r\n        this.overlayPanel.toggle(event);\r\n        if (this.isOverlayVisible()) {\r\n            this.openDate = new DateTime();\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        if (this.isOverlayVisible()) {\r\n            this.overlayPanel.hide();\r\n        }\r\n    }\r\n\r\n    isOverlayVisible() {\r\n        return this.overlayPanel.overlayVisible;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n}\r\n","<span class=\"counter\"\r\n      *ngIf=\"remainingMinutes || remainingSeconds\"\r\n      [ngClass]=\"{'no-badge':  remainingMinutes === null || remainingSeconds === null}\"\r\n      [ngStyle]=\"{'background-color': badgeStyle}\">\r\n    {{remainingMinutes || remainingSeconds}}\r\n</span>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport {\r\n    sessionTokenExpired,\r\n    startCountingSeconds,\r\n    startCountingSessionTime,\r\n    stopCountingSeconds\r\n} from './core/actions/session-token-time.actions';\r\nimport {\r\n    selectRemainingSeconds,\r\n    selectRemainingTime\r\n} from '@oam/cu-ui/lib/user-menu/components/session-time/core/reducers/session-token-time.reducer';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { isNil } from 'lodash';\r\n\r\n@Component({\r\n    selector: 'ui-webem-app-session-time',\r\n    templateUrl: './session-time.component.html',\r\n    styleUrls: ['./session-time.component.scss']\r\n})\r\nexport class SessionTimeComponent implements OnInit, OnDestroy {\r\n    private readonly ngUnsubscribe = new Subject<void>();\r\n    remainingMinutes?: string | null;\r\n    remainingSeconds?: string | null;\r\n    badgeStyle: string;\r\n\r\n    constructor(private readonly store: Store) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.store.dispatch(startCountingSessionTime());\r\n        this.countMinutes();\r\n    }\r\n\r\n    countMinutes() {\r\n        this.store.select(selectRemainingTime).pipe(\r\n            takeUntil(this.ngUnsubscribe),\r\n            filter(time => !!time)\r\n        ).subscribe((time) => {\r\n                if (!time || time < 0) return;\r\n                if (time > 30) this.remainingMinutes = null;\r\n                if (time <= 30) {\r\n                    this.remainingMinutes = `${time} min`;\r\n                    this.badgeStyle = '#000000'; // $nokiaUiBlackColor\r\n                }\r\n                if (time <= 10) this.badgeStyle = '#DA1914'; // $nokiaAlarmRedColor\r\n                if (time > 1) this.store.dispatch(stopCountingSeconds());\r\n                if (time <= 1) {\r\n                    this.remainingMinutes = undefined;\r\n                    this.store.dispatch(startCountingSeconds());\r\n                    this.countSeconds();\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    countSeconds() {\r\n        this.store.select(selectRemainingSeconds)\r\n            .pipe(\r\n                takeUntil(this.ngUnsubscribe))\r\n            .subscribe(seconds => {\r\n                if (seconds === null) this.store.dispatch(sessionTokenExpired());\r\n                if (isNil(seconds)) return this.remainingSeconds = null;\r\n\r\n                this.remainingSeconds = seconds;\r\n            });\r\n\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n}\r\n","<div class=\"user-dropdown-menu\">\r\n    <ui-webem-user-menu-overlay></ui-webem-user-menu-overlay>\r\n\r\n    <ui-webem-overlay-menu-bar\r\n        [model]=\"model\"\r\n        [buttonId]=\"'user-settings'\"\r\n        [appendTo]=\"'body'\"\r\n        title=\"Session info\">\r\n        <div class=\"user-settings\">\r\n            <div class=\"user-info\">\r\n                <div class=\"user-name\">\r\n                    <i class=\"mdi mdi-account-outline user-name-icon\"></i>\r\n                    <div class=\"user-name-info\">\r\n                        <span class=\"user-name-text\">{{ userName }}</span>\r\n                        <span class=\"role-text\" *ngIf=\"currentRole\">({{currentRole}}{{readOnlyMode ? ' - Read Only' : ''}})</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"info\">\r\n                    <span class=\"attribute\">Last log-in time:</span>\r\n                    <span class=\"value\" [title]=\"lastLoginTime\">{{ lastLoginTime }}</span>\r\n                </div>\r\n                <div class=\"info\">\r\n                    <span class=\"attribute\">Token expiration time:</span>\r\n                    <span class=\"value\" [title]=\"tokenExpirationTime\">{{ tokenExpirationTime }}</span>\r\n                    <ui-webem-button\r\n                        class=\"renew-session-button\"\r\n                        [model]=\"refreshButtonModel\"\r\n                        (action)=\"openRenewPasswordDialog()\">\r\n                    </ui-webem-button>\r\n                </div>\r\n                <div class=\"info\">\r\n                    <span class=\"attribute\">Password expiration time:</span>\r\n                    <span class=\"value\" [title]=\"passwordExpirationDate | formatFromISO2GMTTime\">{{ passwordExpirationDate | formatFromISO2GMTTime }}</span>\r\n                </div>\r\n                <div class=\"info\">\r\n                    <span class=\"attribute\">Invalid log-in attempts:</span>\r\n                    <span class=\"value\" [title]=\"invalidLoginAttempts\">{{ invalidLoginAttempts }}</span>\r\n                </div>\r\n            </div>\r\n            <div class=\"horizontal-bar\"></div>\r\n            <div class=\"user-actions\">\r\n                <div class=\"action\" (click)=\"onHelpClick()\">\r\n                    <i class=\"mdi mdi-file-question-outline mdi-18px action-icon\"></i>\r\n                    <span class=\"action-name\">Download help file</span>\r\n                </div>\r\n                <div class=\"action\" (click)=\"onLogOutClick()\">\r\n                    <i class=\"mdi mdi-power mdi-18px action-icon\"></i>\r\n                    <span class=\"action-name\">Sign out</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ui-webem-overlay-menu-bar>\r\n    <ui-webem-app-session-time></ui-webem-app-session-time>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { ButtonTheme } from '../../../button/model/button-theme.enum';\r\nimport { ButtonLength } from '../../../button/model/button-length.enum';\r\nimport { openDialog } from '../../../webem-overlay/core/actions/overlay.actions';\r\nimport { RenewSessionDialogComponent } from '../renew-session-dialog/renew-session-dialog.component';\r\nimport { Store } from '@ngrx/store';\r\nimport { ROLE_NAME_MAPPING } from '@oam/shared/lib/constants/role-access-constants';\r\nimport { Userrole } from '@oam/cu-asm-api/models';\r\nimport { UserInformationService } from '@oam/core/lib/services/user-information.service';\r\n\r\n@Component({\r\n    selector: 'ui-webem-user-menu',\r\n    templateUrl: './user-menu.component.html',\r\n    styleUrls: ['./user-menu.component.scss']\r\n})\r\n\r\nexport class UserMenuComponent implements OnInit, OnChanges {\r\n    @Input() userName: string;\r\n    @Input() lastLoginTime: string;\r\n    @Input() passwordExpirationDate: string;\r\n    @Input() invalidLoginAttempts: string;\r\n    @Input() tokenExpirationTime: string;\r\n\r\n    @Output() userAccountManagementClick = new EventEmitter<void>();\r\n    @Output() settingsClick = new EventEmitter<void>();\r\n    @Output() helpClick = new EventEmitter<void>();\r\n    @Output() logOutClick = new EventEmitter<void>();\r\n\r\n    model: ButtonModel;\r\n    refreshButtonModel: ButtonModel;\r\n    currentRole: string;\r\n    readOnlyMode: boolean | undefined;\r\n\r\n    constructor(private readonly store: Store,\r\n                private readonly userInformationService: UserInformationService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.createButtonModel();\r\n        this.setRoleAndReadOnlyMode();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.userName) {\r\n            this.createButtonModel();\r\n        }\r\n    }\r\n\r\n    onUserAccountManagementClick() {\r\n        this.userAccountManagementClick.emit();\r\n    }\r\n\r\n    onSettingsClick() {\r\n        this.settingsClick.emit();\r\n    }\r\n\r\n    onHelpClick() {\r\n        this.helpClick.emit();\r\n    }\r\n\r\n    onLogOutClick() {\r\n        this.logOutClick.emit();\r\n    }\r\n\r\n    openRenewPasswordDialog() {\r\n        this.store.dispatch(openDialog({\r\n            componentType: RenewSessionDialogComponent,\r\n            config: {\r\n                header: 'Session token renewal',\r\n                closable: false,\r\n            }\r\n        }));\r\n    }\r\n\r\n    private createButtonModel() {\r\n        this.model = {\r\n            label: this.userName,\r\n            icon: 'mdi mdi-account-outline mdi-21px-bold',\r\n            theme: ButtonTheme.Secondary,\r\n            length: ButtonLength.ShortBigIcon\r\n        };\r\n\r\n        this.refreshButtonModel = {\r\n            theme: ButtonTheme.Secondary,\r\n            icon: 'mdi mdi-autorenew',\r\n            title: 'Renew session',\r\n            length: ButtonLength.Long\r\n        };\r\n    }\r\n\r\n    private setRoleAndReadOnlyMode(): void {\r\n        const { role, readOnlyMode } = this.userInformationService.getRoleAndReadOnlyMode();\r\n        this.currentRole = ROLE_NAME_MAPPING[role];\r\n        this.readOnlyMode = role === Userrole.ReadOnlyUserAccessMode ? false : readOnlyMode;\r\n    };\r\n}\r\n","export enum InputValueType {\r\n    TEXT = 'TEXT',\r\n    NUMBER = 'NUMBER'\r\n}\r\n","<span [ngClass]=\"getClass()\">\r\n    <ng-container *ngIf=\"message\">\r\n        {{message}}\r\n    </ng-container>\r\n</span>\r\n","import { Component, Input } from '@angular/core';\r\n\r\nexport enum MessageDisplay {\r\n    SHOW_MESSAGE = 'showMessage',\r\n    HIDE_MESSAGE_SHOW_PADDING = 'hideMessageShowPadding',\r\n    HIDE_MESSAGE_AND_PADDING = 'hideMessageAndPadding',\r\n    HIDE_MESSAGE_AND_GROUP = 'hideMessageAndGroup'\r\n}\r\n\r\n@Component({\r\n    selector: 'ui-webem-form-validation-message',\r\n    templateUrl: './form-validation-message.component.html',\r\n    styleUrls: ['./form-validation-message.component.scss']\r\n})\r\nexport class FormValidationMessageComponent {\r\n    @Input() message: string;\r\n    @Input() displayOption: MessageDisplay = MessageDisplay.SHOW_MESSAGE;\r\n\r\n    getClass() {\r\n        return {\r\n            [MessageDisplay.SHOW_MESSAGE]: 'validation-message',\r\n            [MessageDisplay.HIDE_MESSAGE_SHOW_PADDING]: 'no-validation-message',\r\n            [MessageDisplay.HIDE_MESSAGE_AND_GROUP]: 'no-validation-message-grouped',\r\n            [MessageDisplay.HIDE_MESSAGE_AND_PADDING]: ' '\r\n        } [this.displayOption] || 'validation-message';\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ui-webem-vertical-html-line',\r\n    templateUrl: './vertical-html-line.component.html',\r\n    styleUrls: ['./vertical-html-line.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class VerticalHtmlLineComponent implements OnInit {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","<div class=\"vertical-line\"></div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { VerticalLabeledInputComponent } from './components/vertical-labeled-input/vertical-labeled-input.component';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\n\r\n@NgModule({\r\n    declarations: [VerticalLabeledInputComponent],\r\n    imports: [\r\n        CommonModule,\r\n        InputTextModule\r\n    ],\r\n    exports: [VerticalLabeledInputComponent]\r\n})\r\nexport class VerticalLabeledInputModule {\r\n}\r\n"," <p-overlayPanel\r\n    #overlayPanel\r\n    [dismissable]=\"dismissable\"\r\n    [showCloseIcon]=\"showCloseIcon\"\r\n    [style]=\"style\"\r\n    [styleClass]=\"styleClass ? styleClass : ''\"\r\n    [appendTo]=\"appendTo\"\r\n    [baseZIndex]=\"baseZIndex\"\r\n    [autoZIndex]=\"autoZIndex\"\r\n    [showTransitionOptions]=\"showTransitionOptions\"\r\n    [hideTransitionOptions]=\"hideTransitionOptions\"\r\n    (onHide)=\"onHide($event)\"\r\n>\r\n    <div class=\"p-dialog\" #pDialog>\r\n        <div *ngIf=\"header\" class=\"p-dialog-titlebar\">\r\n            <b>{{header}}</b>\r\n        </div>\r\n        <ng-content></ng-content>\r\n    </div>\r\n</p-overlayPanel>\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    Output,\r\n    ViewChild,\r\n    ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { OverlayPanel } from 'primeng/overlaypanel';\r\n\r\n@Component({\r\n    selector: 'ui-webem-overlay-panel',\r\n    templateUrl: './overlay-panel.component.html'\r\n})\r\nexport class OverlayPanelComponent {\r\n    @ViewChild('overlayPanel', { static: true }) overlayPanel: OverlayPanel;\r\n    @ViewChild('pDialog') pDialog: ElementRef;\r\n    @Input() dismissable = true;\r\n    @Input() showCloseIcon = false;\r\n    @Input() style: string | null = null;\r\n    @Input() styleClass: string | null\t= null;\r\n    @Input() appendTo: any = 'body';\r\n    @Input() baseZIndex\t= 0;\r\n    @Input() autoZIndex = true;\r\n    @Input() showTransitionOptions = '225ms ease-out';\r\n    @Input() hideTransitionOptions\t= '195ms ease-in';\r\n    @Input() header: string;\r\n    @Input() componentsToHideBeforeOverlayPanel: object[] = [];\r\n\r\n    constructor(\r\n        public changeDetectorRef: ChangeDetectorRef) {\r\n    }\r\n\r\n    @Output() hideEvent = new EventEmitter();\r\n    show($event: any, target?: any) {\r\n        this.overlayPanel.show($event, target);\r\n    }\r\n\r\n    toggle($event: any) {\r\n        this.overlayPanel.toggle($event);\r\n    }\r\n\r\n    hide() {\r\n        this.overlayPanel.hide();\r\n    }\r\n\r\n    onHide(event: any) {\r\n        this.hideEvent.emit(event);\r\n        this.componentsToHideBeforeOverlayPanel.forEach((component: any) => {\r\n            if (component.overlayVisible) {\r\n                component.overlayVisible = false;\r\n            }\r\n        });\r\n        this.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n}\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { DynamicMessageDialogConfig } from '../../core/models';\r\nimport { Type } from '@angular/core';\r\nimport { Confirmation } from 'primeng/api';\r\nimport { DynamicDialogConfig } from 'primeng/dynamicdialog';\r\n\r\nexport enum OverlayActionTypes {\r\n    OpenDialog = '[Dialog] [Effect] Open dialog',\r\n    CloseDialog = '[Dialog] [Effect] Close dialog',\r\n    CloseDialogsByName = '[Dialog] [Effect] Close specified dialogs',\r\n    ShowMessage = '[MessageDialog] [Effect] Show message',\r\n    ConfirmDialog = '[ConfirmDialog] [Effect] Show confirmation dialog',\r\n    closeAllDialogs = '[Dialog] [Effect] Close All dialog',\r\n}\r\n\r\nexport const openDialog = createAction(\r\n    OverlayActionTypes.OpenDialog,\r\n    props<{componentType: Type<any>, config: DynamicDialogConfig}>()\r\n);\r\n\r\nexport const closeOutdatedDeltaPlanDialog = createAction(\r\n    OverlayActionTypes.CloseDialog\r\n);\r\n\r\nexport const closeDialogsByName = createAction(\r\n    OverlayActionTypes.CloseDialogsByName,\r\n    props<{closedComponent: any}>()\r\n);\r\n\r\nexport const closeAllDialogs= createAction(\r\n    OverlayActionTypes.closeAllDialogs,\r\n);\r\n\r\nexport const showMessage = createAction(\r\n    OverlayActionTypes.ShowMessage,\r\n    props<DynamicMessageDialogConfig>()\r\n);\r\n\r\nexport const confirmDialog = createAction(\r\n    OverlayActionTypes.ConfirmDialog,\r\n    props<Confirmation>()\r\n);\r\n","export enum WebemMessageDialogSeverity {\r\n    INFO = 'info',\r\n    WARNING = 'warning',\r\n    ERROR = 'error'\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ButtonModel } from '../../../button/model/button-model.definition';\r\nimport { DynamicMessageDialogConfig } from '../../core/models';\r\nimport { DynamicDialogConfig, DynamicDialogRef } from 'primeng/dynamicdialog';\r\n\r\n@Component({\r\n    selector: 'ui-webem-dynamic-message-dialog',\r\n    templateUrl: './dynamic-message-dialog.component.html'\r\n})\r\nexport class DynamicMessageDialogComponent implements OnInit {\r\n    readonly okButtonModel: ButtonModel = {\r\n        label: 'OK'\r\n    };\r\n\r\n    header?: string;\r\n    message = '';\r\n\r\n    constructor(private readonly ref: DynamicDialogRef, private readonly config: DynamicDialogConfig) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        const props = this.config as DynamicMessageDialogConfig;\r\n        this.header = props.header;\r\n        this.message = props.message;\r\n    }\r\n\r\n    close() {\r\n        this.ref.close();\r\n    }\r\n\r\n}\r\n","<div class=\"p-dialog-content\">{{message}}</div>\r\n<div class=\"p-dialog-footer\">\r\n    <p-footer>\r\n        <ui-webem-button\r\n            (action)=\"close()\"\r\n            [model]=\"okButtonModel\"\r\n        >\r\n        </ui-webem-button>\r\n    </p-footer>\r\n</div>\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { DynamicMessageDialogConfig, WebemMessageDialogSeverity } from '../models';\r\nimport { DynamicMessageDialogComponent } from '../../components/dynamic-message-dialog/dynamic-message-dialog.component';\r\nimport { ConfirmationService, Confirmation } from 'primeng/api';\r\nimport { DialogService, DynamicDialogComponent, DynamicDialogConfig } from 'primeng/dynamicdialog';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class WebemOverlayService {\r\n\r\n    constructor(\r\n        private readonly dialogService: DialogService,\r\n        private readonly confirmationService: ConfirmationService\r\n    ) {}\r\n\r\n    openDialog(componentType: Type<any>, config: DynamicDialogConfig) {\r\n        const DIALOG_DEFAULTS = {\r\n            contentStyle: {\r\n                margin: 0,\r\n                padding: 0\r\n            }\r\n        };\r\n\r\n        const newConfig = {\r\n            ...DIALOG_DEFAULTS,\r\n            ...config,\r\n            contentStyle: {...DIALOG_DEFAULTS.contentStyle, ...config.contentStyle}\r\n        };\r\n\r\n        this.dialogService.open(componentType, newConfig);\r\n    }\r\n\r\n    showMessage(config: DynamicMessageDialogConfig) {\r\n        const MESSAGE_DIALOG_DEFAULTS = {\r\n            dismissableMask: true,\r\n            width: '280px',\r\n            contentStyle: {\r\n                margin: 0,\r\n                padding: 0\r\n            },\r\n            styleClass: '',\r\n            closable: false,\r\n            severity: WebemMessageDialogSeverity.INFO\r\n        };\r\n\r\n        const newConfig = {\r\n            ...MESSAGE_DIALOG_DEFAULTS,\r\n            ...config,\r\n            contentStyle: {...MESSAGE_DIALOG_DEFAULTS.contentStyle, ...config.contentStyle}\r\n        };\r\n        newConfig.styleClass += ` ui-message-dialog-${newConfig.severity}`;\r\n\r\n        this.dialogService.open(DynamicMessageDialogComponent, newConfig);\r\n    }\r\n\r\n    confirm(confirmation: Confirmation) {\r\n        const defaultConfirmation: Confirmation = {\r\n            header: 'Confirmation',\r\n            acceptVisible: true,\r\n            rejectVisible: true,\r\n            acceptLabel: 'OK',\r\n            rejectLabel: 'Cancel'\r\n        };\r\n\r\n        const confirmationModel: Confirmation = Object.assign({}, defaultConfirmation, confirmation);\r\n        this.confirmationService.confirm(confirmationModel);\r\n    }\r\n\r\n    closeDialogsByName(closedComponent: any): void {\r\n        const dialogs = this.dialogService.dialogComponentRefMap;\r\n        dialogs.forEach(function(componentRef, dynamicDialogRef) {\r\n            if (componentRef.instance.childComponentType === closedComponent) {\r\n                dynamicDialogRef.close();\r\n            }\r\n        });\r\n    }\r\n\r\n    closeAllDialogs(): void {\r\n        const dialogs = this.dialogService.dialogComponentRefMap;\r\n        dialogs.forEach((componentRef, dynamicDialogRef) =>\r\n                dynamicDialogRef.close()\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport {\r\n    confirmDialog,\r\n    openDialog,\r\n    showMessage,\r\n    closeDialogsByName,\r\n    closeAllDialogs\r\n} from '../actions/overlay.actions';\r\nimport { WebemOverlayService } from '../services/webem-overlay.service';\r\nimport { tap } from 'rxjs/operators';\r\nimport { DynamicMessageDialogConfig } from '../models';\r\nimport { Confirmation } from 'primeng/api';\r\nimport { Action } from '@ngrx/store';\r\n\r\n@Injectable()\r\nexport class OverlayEffects {\r\n    constructor(private readonly actions$: Actions, private readonly overlayService: WebemOverlayService) {\r\n    }\r\n\r\n    openDialog$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(openDialog),\r\n            tap((action) => {\r\n                this.overlayService.openDialog(action.componentType, action.config);\r\n            })\r\n        );\r\n    }, { dispatch: false });\r\n\r\n    closeDialogsByName$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(closeDialogsByName),\r\n            tap((action) => {\r\n                this.overlayService.closeDialogsByName(action.closedComponent);\r\n            })\r\n        );\r\n    }, { dispatch: false });\r\n\r\n    closeAllDialogs$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(closeAllDialogs),\r\n            tap(() => {\r\n                this.overlayService.closeAllDialogs();\r\n            })\r\n        );\r\n    }, { dispatch: false });\r\n\r\n    showMessage$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(showMessage),\r\n            tap((action) => {\r\n                const config: DynamicMessageDialogConfig = {\r\n                    header: action.header,\r\n                    message: action.message\r\n                };\r\n                if (action.severity) config.severity = action.severity;\r\n\r\n                this.overlayService.showMessage(config);\r\n            })\r\n        );\r\n    }, { dispatch: false });\r\n\r\n    confirmDialog$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(confirmDialog),\r\n            tap((action) => {\r\n                const config: Action = {...action};\r\n                // @ts-ignore\r\n                delete config.type;\r\n                this.overlayService.confirm(config as Confirmation);\r\n            })\r\n        );\r\n    }, { dispatch: false });\r\n\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { WebemButtonModule } from '../button/button.module';\r\nimport { WebemOverlayService } from './core/services/webem-overlay.service';\r\nimport { OverlayEffects } from './core/effects/overlay.effects';\r\nimport { DynamicMessageDialogComponent } from './components/dynamic-message-dialog/dynamic-message-dialog.component';\r\nimport { ConfirmDialogComponent } from './components/confirm-dialog/confirm-dialog.component';\r\nimport { OverlayPanelComponent } from './components/overlay-panel/overlay-panel.component';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { DynamicDialogModule, DialogService } from 'primeng/dynamicdialog';\r\nimport { OverlayPanelModule } from 'primeng/overlaypanel';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        DynamicMessageDialogComponent,\r\n        ConfirmDialogComponent,\r\n        OverlayPanelComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        WebemButtonModule,\r\n        DialogModule,\r\n        DynamicDialogModule,\r\n        ConfirmDialogModule,\r\n        OverlayPanelModule\r\n    ],\r\n    exports: [\r\n        ConfirmDialogComponent,\r\n        OverlayPanelComponent\r\n    ],\r\n    entryComponents: [\r\n        DynamicMessageDialogComponent\r\n    ]\r\n})\r\nexport class WebemOverlayModule {\r\n    static forRoot(): ModuleWithProviders<WebemOverlayModule> {\r\n        return {\r\n            ngModule: WebemOverlayModule,\r\n            providers: [\r\n                DialogService,\r\n                ConfirmationService,\r\n                WebemOverlayService\r\n            ]\r\n        };\r\n    }\r\n\r\n    static forFeature() {\r\n        return EffectsModule.forFeature([\r\n            OverlayEffects\r\n        ]);\r\n    }\r\n}\r\n","import { HttpResponse } from '@angular/common/http';\r\n\r\nexport function getVnfcHeader<T>(res: HttpResponse<T>): string {\r\n    return res.headers.get('vnfcType') || '';\r\n}\r\n","import _ from 'lodash';\r\nimport { Injectable } from '@angular/core';\r\nimport { PageName } from '@oam/navigation/lib/navigation/core/models/page-name';\r\n\r\nexport const vnfcTypeSessionKey = 'vnfcType';\r\nexport enum VnfcType {\r\n    vmCu = 'vmCu',\r\n    vDu = 'vDu',\r\n    vCu = 'vCu'\r\n}\r\nlet vnfcType: string | null = '';\r\nconst filterMenuForVmcu = [\r\n    { label: PageName.ipsecPskConfiguration } as any,\r\n    { label: PageName.networkSlicingStatus } as any,\r\n    { label: PageName.ngLinksStatus } as any,\r\n    { label: PageName.xnLinksStatus } as any,\r\n    { label: PageName.ipsecAssociations } as any\r\n];\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class VnfcSharedService {\r\n\r\n    setVnfcType(vnfcTypeValue: string) {\r\n        vnfcType = vnfcTypeValue;\r\n    }\r\n\r\n    getVnfcType() {\r\n        return vnfcType;\r\n    }\r\n\r\n    isVcu(): boolean {\r\n        return VnfcType.vCu === this.getVnfcType();\r\n    }\r\n\r\n    isVdu(): boolean {\r\n        return VnfcType.vDu === this.getVnfcType();\r\n    }\r\n\r\n    isVmcu(): boolean {\r\n        return VnfcType.vmCu === this.getVnfcType();\r\n    }\r\n\r\n    filterMenuForVcuVmcu<T>(routes: T[]): T[] {\r\n        if (this.isVcu()) {\r\n            removeFromVcuArray(routes);\r\n            for (const r of routes) {\r\n                removeFromVcuArray(r['items']);\r\n            }\r\n        }\r\n\r\n        if (this.isVmcu()) {\r\n            removeFromVmcuArray(routes);\r\n            for (const r of routes) {\r\n                removeFromVmcuArray(r['items']);\r\n            }\r\n        }\r\n\r\n        return routes as unknown as T[];\r\n\r\n        function removeFromVcuArray(array: any[]) {\r\n            _.remove(array, { label: PageName.cplane } as any);\r\n        }\r\n\r\n        function removeFromVmcuArray(array: any[]) {\r\n            filterMenuForVmcu.forEach((label) => {\r\n                _.remove(array, label);\r\n            });\r\n        }\r\n    }\r\n\r\n    constructor() {}\r\n}\r\n","var map = {\n\t\"./af\": 26431,\n\t\"./af.js\": 26431,\n\t\"./ar\": 81286,\n\t\"./ar-dz\": 1616,\n\t\"./ar-dz.js\": 1616,\n\t\"./ar-kw\": 9759,\n\t\"./ar-kw.js\": 9759,\n\t\"./ar-ly\": 43160,\n\t\"./ar-ly.js\": 43160,\n\t\"./ar-ma\": 62551,\n\t\"./ar-ma.js\": 62551,\n\t\"./ar-sa\": 79989,\n\t\"./ar-sa.js\": 79989,\n\t\"./ar-tn\": 6962,\n\t\"./ar-tn.js\": 6962,\n\t\"./ar.js\": 81286,\n\t\"./az\": 15887,\n\t\"./az.js\": 15887,\n\t\"./be\": 14572,\n\t\"./be.js\": 14572,\n\t\"./bg\": 3276,\n\t\"./bg.js\": 3276,\n\t\"./bm\": 93344,\n\t\"./bm.js\": 93344,\n\t\"./bn\": 58985,\n\t\"./bn-bd\": 83990,\n\t\"./bn-bd.js\": 83990,\n\t\"./bn.js\": 58985,\n\t\"./bo\": 94391,\n\t\"./bo.js\": 94391,\n\t\"./br\": 46728,\n\t\"./br.js\": 46728,\n\t\"./bs\": 5536,\n\t\"./bs.js\": 5536,\n\t\"./ca\": 41043,\n\t\"./ca.js\": 41043,\n\t\"./cs\": 70420,\n\t\"./cs.js\": 70420,\n\t\"./cv\": 33513,\n\t\"./cv.js\": 33513,\n\t\"./cy\": 6771,\n\t\"./cy.js\": 6771,\n\t\"./da\": 47978,\n\t\"./da.js\": 47978,\n\t\"./de\": 46061,\n\t\"./de-at\": 25204,\n\t\"./de-at.js\": 25204,\n\t\"./de-ch\": 2653,\n\t\"./de-ch.js\": 2653,\n\t\"./de.js\": 46061,\n\t\"./dv\": 85,\n\t\"./dv.js\": 85,\n\t\"./el\": 8579,\n\t\"./el.js\": 8579,\n\t\"./en-au\": 25724,\n\t\"./en-au.js\": 25724,\n\t\"./en-ca\": 10525,\n\t\"./en-ca.js\": 10525,\n\t\"./en-gb\": 52847,\n\t\"./en-gb.js\": 52847,\n\t\"./en-ie\": 67216,\n\t\"./en-ie.js\": 67216,\n\t\"./en-il\": 39305,\n\t\"./en-il.js\": 39305,\n\t\"./en-in\": 73364,\n\t\"./en-in.js\": 73364,\n\t\"./en-nz\": 79130,\n\t\"./en-nz.js\": 79130,\n\t\"./en-sg\": 11161,\n\t\"./en-sg.js\": 11161,\n\t\"./eo\": 50802,\n\t\"./eo.js\": 50802,\n\t\"./es\": 40328,\n\t\"./es-do\": 45551,\n\t\"./es-do.js\": 45551,\n\t\"./es-mx\": 75615,\n\t\"./es-mx.js\": 75615,\n\t\"./es-us\": 64790,\n\t\"./es-us.js\": 64790,\n\t\"./es.js\": 40328,\n\t\"./et\": 96389,\n\t\"./et.js\": 96389,\n\t\"./eu\": 52961,\n\t\"./eu.js\": 52961,\n\t\"./fa\": 26151,\n\t\"./fa.js\": 26151,\n\t\"./fi\": 7997,\n\t\"./fi.js\": 7997,\n\t\"./fil\": 58898,\n\t\"./fil.js\": 58898,\n\t\"./fo\": 37779,\n\t\"./fo.js\": 37779,\n\t\"./fr\": 28174,\n\t\"./fr-ca\": 3287,\n\t\"./fr-ca.js\": 3287,\n\t\"./fr-ch\": 38867,\n\t\"./fr-ch.js\": 38867,\n\t\"./fr.js\": 28174,\n\t\"./fy\": 50452,\n\t\"./fy.js\": 50452,\n\t\"./ga\": 45014,\n\t\"./ga.js\": 45014,\n\t\"./gd\": 74127,\n\t\"./gd.js\": 74127,\n\t\"./gl\": 72124,\n\t\"./gl.js\": 72124,\n\t\"./gom-deva\": 6444,\n\t\"./gom-deva.js\": 6444,\n\t\"./gom-latn\": 37953,\n\t\"./gom-latn.js\": 37953,\n\t\"./gu\": 76604,\n\t\"./gu.js\": 76604,\n\t\"./he\": 1222,\n\t\"./he.js\": 1222,\n\t\"./hi\": 74235,\n\t\"./hi.js\": 74235,\n\t\"./hr\": 622,\n\t\"./hr.js\": 622,\n\t\"./hu\": 37735,\n\t\"./hu.js\": 37735,\n\t\"./hy-am\": 90402,\n\t\"./hy-am.js\": 90402,\n\t\"./id\": 59187,\n\t\"./id.js\": 59187,\n\t\"./is\": 30536,\n\t\"./is.js\": 30536,\n\t\"./it\": 35007,\n\t\"./it-ch\": 94667,\n\t\"./it-ch.js\": 94667,\n\t\"./it.js\": 35007,\n\t\"./ja\": 62093,\n\t\"./ja.js\": 62093,\n\t\"./jv\": 80059,\n\t\"./jv.js\": 80059,\n\t\"./ka\": 66870,\n\t\"./ka.js\": 66870,\n\t\"./kk\": 80880,\n\t\"./kk.js\": 80880,\n\t\"./km\": 1083,\n\t\"./km.js\": 1083,\n\t\"./kn\": 68785,\n\t\"./kn.js\": 68785,\n\t\"./ko\": 21721,\n\t\"./ko.js\": 21721,\n\t\"./ku\": 37851,\n\t\"./ku.js\": 37851,\n\t\"./ky\": 1727,\n\t\"./ky.js\": 1727,\n\t\"./lb\": 40346,\n\t\"./lb.js\": 40346,\n\t\"./lo\": 93002,\n\t\"./lo.js\": 93002,\n\t\"./lt\": 64035,\n\t\"./lt.js\": 64035,\n\t\"./lv\": 56927,\n\t\"./lv.js\": 56927,\n\t\"./me\": 5634,\n\t\"./me.js\": 5634,\n\t\"./mi\": 94173,\n\t\"./mi.js\": 94173,\n\t\"./mk\": 86320,\n\t\"./mk.js\": 86320,\n\t\"./ml\": 11705,\n\t\"./ml.js\": 11705,\n\t\"./mn\": 31062,\n\t\"./mn.js\": 31062,\n\t\"./mr\": 92805,\n\t\"./mr.js\": 92805,\n\t\"./ms\": 11341,\n\t\"./ms-my\": 59900,\n\t\"./ms-my.js\": 59900,\n\t\"./ms.js\": 11341,\n\t\"./mt\": 37734,\n\t\"./mt.js\": 37734,\n\t\"./my\": 19034,\n\t\"./my.js\": 19034,\n\t\"./nb\": 9324,\n\t\"./nb.js\": 9324,\n\t\"./ne\": 46495,\n\t\"./ne.js\": 46495,\n\t\"./nl\": 70673,\n\t\"./nl-be\": 76272,\n\t\"./nl-be.js\": 76272,\n\t\"./nl.js\": 70673,\n\t\"./nn\": 72486,\n\t\"./nn.js\": 72486,\n\t\"./oc-lnc\": 46219,\n\t\"./oc-lnc.js\": 46219,\n\t\"./pa-in\": 2829,\n\t\"./pa-in.js\": 2829,\n\t\"./pl\": 78444,\n\t\"./pl.js\": 78444,\n\t\"./pt\": 53170,\n\t\"./pt-br\": 66117,\n\t\"./pt-br.js\": 66117,\n\t\"./pt.js\": 53170,\n\t\"./ro\": 96587,\n\t\"./ro.js\": 96587,\n\t\"./ru\": 39264,\n\t\"./ru.js\": 39264,\n\t\"./sd\": 42135,\n\t\"./sd.js\": 42135,\n\t\"./se\": 95366,\n\t\"./se.js\": 95366,\n\t\"./si\": 93379,\n\t\"./si.js\": 93379,\n\t\"./sk\": 46143,\n\t\"./sk.js\": 46143,\n\t\"./sl\": 196,\n\t\"./sl.js\": 196,\n\t\"./sq\": 21082,\n\t\"./sq.js\": 21082,\n\t\"./sr\": 91621,\n\t\"./sr-cyrl\": 98963,\n\t\"./sr-cyrl.js\": 98963,\n\t\"./sr.js\": 91621,\n\t\"./ss\": 41404,\n\t\"./ss.js\": 41404,\n\t\"./sv\": 55685,\n\t\"./sv.js\": 55685,\n\t\"./sw\": 3872,\n\t\"./sw.js\": 3872,\n\t\"./ta\": 54106,\n\t\"./ta.js\": 54106,\n\t\"./te\": 39204,\n\t\"./te.js\": 39204,\n\t\"./tet\": 83692,\n\t\"./tet.js\": 83692,\n\t\"./tg\": 86361,\n\t\"./tg.js\": 86361,\n\t\"./th\": 31735,\n\t\"./th.js\": 31735,\n\t\"./tk\": 1568,\n\t\"./tk.js\": 1568,\n\t\"./tl-ph\": 96129,\n\t\"./tl-ph.js\": 96129,\n\t\"./tlh\": 13759,\n\t\"./tlh.js\": 13759,\n\t\"./tr\": 81644,\n\t\"./tr.js\": 81644,\n\t\"./tzl\": 90875,\n\t\"./tzl.js\": 90875,\n\t\"./tzm\": 16878,\n\t\"./tzm-latn\": 11041,\n\t\"./tzm-latn.js\": 11041,\n\t\"./tzm.js\": 16878,\n\t\"./ug-cn\": 74357,\n\t\"./ug-cn.js\": 74357,\n\t\"./uk\": 74810,\n\t\"./uk.js\": 74810,\n\t\"./ur\": 86794,\n\t\"./ur.js\": 86794,\n\t\"./uz\": 28966,\n\t\"./uz-latn\": 77959,\n\t\"./uz-latn.js\": 77959,\n\t\"./uz.js\": 28966,\n\t\"./vi\": 35386,\n\t\"./vi.js\": 35386,\n\t\"./x-pseudo\": 23156,\n\t\"./x-pseudo.js\": 23156,\n\t\"./yo\": 68028,\n\t\"./yo.js\": 68028,\n\t\"./zh-cn\": 9330,\n\t\"./zh-cn.js\": 9330,\n\t\"./zh-hk\": 89380,\n\t\"./zh-hk.js\": 89380,\n\t\"./zh-mo\": 60874,\n\t\"./zh-mo.js\": 60874,\n\t\"./zh-tw\": 96508,\n\t\"./zh-tw.js\": 96508\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 46700;"],"sourceRoot":"webpack:///"}